xml signature syntax and processing version  xml signature syntax and processing version  wc recommendation  april  this version httpwwwworgtrrecxmldsigcore latest published version httpwwwworgtrxmldsigcore latest editors draft httpwwwworgxmlsecdraftsxmldsigcore previous version httpwwwworgtrprxmldsigcore editors donald eastlake dee@gmailcom joseph reagle reagle@mitedu david solo dsolo@alummitedu frederick hirsch frederickhirsch@nokiacom nd edition  magnus nystrm mnystrom@microsoftcom  thomas roessler tlr@worg nd edition  kelvin yiu kelviny@microsoftcom  authors mark bartel mbartel@adobecom john boyer boyerj@caibmcom barb fox bfox@exchangemicrosoftcom brian lamacchia bal@microsoftcom ed simon edsimon@xmlseccom please refer to the errata for this document which may include some normative corrections the english version of this specification is the only normative version nonnormative translations may also be available copyright   the ietf trust  wc mit ercim keio beihang all rights reserved wc liability trademark and document use rules apply abstract this document specifies xml digital signature processing rules and syntax xml signatures provide integrity message authentication andor signer authentication services for data of any type whether located within the xml that includes the signature or elsewhere status of this document note on  april  the reference to the additional xml security uris rfc was updated the director previously authorized the publication knowing that the reference would be updated in a near future this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document has been reviewed by wc members by software developers and by other wc groups and interested parties and is endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web the original version of this specification was produced by the ietfwc xml signature working group  the interoperability report shows at least  implementations with at least two interoperable implementations over every feature the second edition was produced by the wc xml security specifications maintenance working group adding canonical xml  as a required canonicalization algorithm and incorporating known errata a detailed list of second edition changes is available as is a second edition implementation report demonstrating four or more implementations of all new features conformanceaffecting changes of xml signature  against this previous recommendation mainly affect the set of mandatory to implement cryptographic algorithms including elliptic curve dsa and markup for corresponding key material and additional hash algorithms a detailed explanation of changes since the last recommendation are available xmldsigcorechgs changes are also described in a diff document showing changes since the second edition as well as a diff document showing changes since the previous pr draft please refer to the implementation report for version  of this specification for additional details about the implementation status of features added in this revision this document was published by the xml security working group as a recommendation if you wish to make comments regarding this document please send them to publicxmlsec@worg subscribe archives all comments are welcome this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy additional information related to the ipr status of xml signature  is available table of contents  introduction  conformance  design philosophy  versions namespaces and identifiers  acknowledgements  signature overview and examples  simple example signature signedinfo methods and references  more on reference  extended example object and signatureproperty  extended example object and manifest  processing rules  signature generation  reference generation  signature generation  core validation  reference validation  signature validation  core signature syntax  the dscryptobinary simple type  the signature element  the signaturevalue element  the signedinfo element  the canonicalizationmethod element  the signaturemethod element  the reference element  the uri attribute  the reference processing model  samedocument urireferences  the transforms element  the digestmethod element  the digestvalue element  the keyinfo element  the keyname element  the keyvalue element  the dsakeyvalue element  the rsakeyvalue element  the eckeyvalue element  explicit curve parameters  compatibility with rfc   the retrievalmethod element  the xdata element  distinguished name encoding rules  the pgpdata element  the spkidata element  the mgmtdata element  xml encryption encryptedkey and derivedkey elements  the derencodedkeyvalue element  the keyinforeference element  the object element  additional signature syntax  the manifest element  the signatureproperties element  processing instructions in signature elements  comments in signature elements  algorithms  algorithm identifiers and implementation requirements  message digests  sha  sha  sha  sha  sha  message authentication codes  hmac  signature algorithms  dsa  rsa pkcs v  ecdsa  canonicalization algorithms  canonical xml   canonical xml   exclusive xml canonicalization   transform algorithms  canonicalization  base  xpath filtering  enveloped signature transform  xslt transform  xml canonicalization and syntax constraint considerations  xml  syntax constraints and canonicalization  domsax processing and canonicalization  namespace context and portable signatures  security considerations  transforms  only what is signed is secure  only what is seen should be signed  see what is signed  check the security model  algorithms key lengths certificates etc  error messages  schema  xsd schema  rng schema  definitions a references a normative references a informative references  introduction this document specifies xml syntax and processing rules for creating and representing digital signatures xml signatures can be applied to any digital content data object including xml an xml signature may be applied to the content of one or more resources enveloped or enveloping signatures are over data within the same xml document as the signature detached signatures are over data external to the signature element more specifically this specification defines an xml signature element type and an xml signature application conformance requirements for each are specified by way of schema definitions and prose respectively this specification also includes other useful types that identify methods for referencing collections of resources algorithms and keying and management information the xml signature is a method of associating a key with referenced data octets it does not normatively specify how keys are associated with persons or institutions nor the meaning of the data being referenced and signed consequently while this specification is an important component of secure xml applications it itself is not sufficient to address all application securitytrust concerns particularly with respect to using signed xml or other data formats as a basis of humantohuman communication and agreement such an application must specify additional key algorithm processing and rendering requirements for further information please see see section  security considerations the working group encourages implementers and developers to read xml signature best practices xmldsigbestpractices it contains a number of best practices related to the use of xml signature including implementation considerations and practical ways of improving security  conformance for readability brevity and historic reasons this document uses the term signature to generally refer to digital authentication values of all types obviously the term is also strictly used to refer to authentication values that are based on public keys and that provide signer authentication when specifically discussing authentication values based on symmetric secret key codes we use the terms authenticators or authentication codes see section  check the security model this specification provides a normative xml schema xmlschema xmlschema the full normative grammar is defined by the xsd schema and the normative text in this specification the standalone xsd schema file is authoritative in case there is any disagreement between it and the xsd schema portions in this specification the key words must must not required shall shall not should should not recommended may and optional in this specification are to be interpreted as described in rfc they must only be used where it is actually required for interoperation or to limit behavior which has potential for causing harm eg limiting retransmissions consequently we use these capitalized key words to unambiguously specify requirements over protocol and application features and behavior that affect the interoperability and security of implementations these key words are not used capitalized to describe xml grammar schema definitions unambiguously describe such requirements and we wish to reserve the prominence of these terms for the natural language descriptions of protocols and features for instance an xml attribute might be described as being optional compliance with the namespaces in xml specification xmlnames is described as required this document specifies optional and mandatory to support algorithms providing references for these algorithms this means that a conformant implementation should for given inputs be able to produce outputs for those algorithms that interoperate as specified in the referenced specification a conformant implementation may use any technique to achieve the results asif it were implemented according to the referenced specification but is not required to follow detailed implementation techniques of that specification  design philosophy the design philosophy and requirements of this specification are addressed in the original xmlsignature requirements document xmldsigrequirements and the xml security  requirements document xmlsecreqs  versions namespaces and identifiers this specification makes use of xml namespaces and uses uniform resource identifiers uri to identify resources algorithms and semantics implementations of this specification must use the following xml namespace uris uri namespace prefix xml internal entity httpwwwworgxmldsig default namespace ds dsig entity dsig httpwwwworgxmldsig httpwwwworgxmldsig dsig entity dsig httpwwwworgxmldsig while implementations must support xml and xml namespaces and while use of the above namespace uris is required the namespace prefixes and entity declarations given are merely editorial conventions used in this document their use by implementations is optional these namespace uris are also used as the prefix for algorithm identifiers that are under control of this specification for resources not under the control of this specification we use the designated uniform resource names urn rfc or uniform resource identifiers uri defined by the relevant normative external specification the httpwwwworgxmldsig dsig namespace was introduced in the first edition of this specification this version does not coin any new elements or algorithm identifiers in that namespace instead the httpwwwworgxmldsig dsig namespace is used this specification uses algorithm identifiers in the namespace httpwwwworgxmldsigmore that were originally coined in rfc rfc  associates these identifiers with specific algorithms implementations of this specification must be fully interoperable with the algorithms specified in rfc but may compute the requisite values through any technique that leads to the same output examples of items in various namespaces include signatureproperties is identified and defined by the disg namespace httpwwwworgxmldsigsignatureproperties eckeyvalue is identified and defined by the dsig namespace httpwwwworgxmldsigeckeyvalue xslt is identified and defined by an external uri httpwwwworgtrrecxslt sha is identified via this specifications namespace and defined via a normative reference fips httpwwwworgxmlencsha fips pub  secure hash standard us department of commercenational institute of standards and technology no provision is made for an explicit version number in this syntax if a future version of this specification requires explicit versioning of the document format a different namespace will be used  acknowledgements the contributions of the members of the xml signature working group to the first edition specification are gratefully acknowledged mark bartel adobe was accelio author john boyer ibm author mariano p consens university of waterloo john cowan reuters health donald eastlake rd motorola chair authoreditor barb fox microsoft author christian geuerpollmann university siegen tom gindin ibm phillip hallambaker verisign inc richard himes us courts merlin hughes baltimore gregor karlinger iaik tu graz brian lamacchia microsoft author peter lipp iaik tu graz joseph reagle nyu was wc chair authoreditor ed simon xmlsec author david solo citigroup authoreditor petteri stenius capslock raghavan srinivas sun kent tamura ibm winchel todd vincent iii gsu carl wallace corsec security inc greg whitehead signio inc as are the first edition last call comments from the following dan connolly wc paul biron kaiser permanente on behalf of the xml schema wg martin j duerst wc and masahiro sekiguchi fujitsu on behalf of the internationalization wgig jonathan marsh microsoft on behalf of the extensible stylesheet language wg the following members of the xml security specification maintenance working group contributed to the second edition juan carlos cruellas universitat politcnica de catalunya pratik datta oracle corporation phillip hallambaker verisign inc frederick hirsch nokia chair editor konrad lanz applied information processing and kommunications iaik hal lockhart bea systems inc robert miller mitre corporation sean mullan sun microsystems inc bruce rich ibm corporation thomas roessler wcercim staff contact editor ed simon wc invited expert greg whitehead hp contributions for version  were received from the members of the xml security working group scott cantor juan carlos cruellas pratik datta gerald edgar ken graf phillip hallambaker brad hill frederick hirsch chair editor brian lamacchia konrad lanz hal lockhart cynthia martin rob miller sean mullan shivaram mysore magnus nystrm bruce rich thomas roessler staff contact editor ed simon chris solc john wray kelvin yiu editor the working group thanks makoto murata for assistance with the relax ng schemas  signature overview and examples this section provides an overview and examples of xml digital signature syntax the specific processing is given in section  processing rules the formal syntax is found in section  core signature syntax and section  additional signature syntax in this section an informal representation and examples are used to describe the structure of the xml signature syntax this representation and examples may omit attributes details and potential features that are fully explained later xml signatures are applied to arbitrary digital content data objects via an indirection data objects are digested the resulting value is placed in an element with other information and that element is then digested and cryptographically signed xml digital signatures are represented by the signature element which has the following structure where  denotes zero or one occurrence  denotes one or more occurrences and  denotes zero or more occurrences example  signature id   signedinfo    canonicalizationmethod     signaturemethod    reference uri      transforms      digestmethod      digestvalue    reference  signedinfo  signaturevalue  keyinfo object idsignature signatures are related to data objects via uris uri within an xml document signatures are related to local data objects via fragment identifiers such local data can be included within an enveloping signature or can enclose an enveloped signature detached signatures are over external network resources or local data objects that reside within the same xml document as sibling elements in this case the signature is neither enveloping signature is parent nor enveloped signature is child since a signature element and its id attribute valuename may coexist or be combined with other elements and their ids within a single xml document care should be taken in choosing names such that there are no subsequent collisions that violate the id uniqueness validity constraint xml  simple example signature signedinfo methods and references the following example is a detached signature of the content of the html in xml specification example  s signature idmyfirstsignature xmlnshttpwwwworgxmldsig s   signedinfo  s   canonicalizationmethod algorithmhttpwwwworgxmlcn s   signaturemethod algorithmhttpwwwworgxmldsigmorersasha s   reference urihttpwwwworgtrrecxhtml s     transforms s       transform algorithmhttpwwwworgxmlcn s     transforms s     digestmethod algorithmhttpwwwworgxmlencsha s     digestvaluedghpcybpcybubqgysbzawduyxrcmukdigestvalue s   reference s signedinfo s   signaturevaluesignaturevalue s   keyinfo sa    keyvaluesb      dsakeyvalue sc        ppqqggyy sd      dsakeyvalue se    keyvalue s   keyinfo s signature s the required signedinfo element is the information that is actually signed core validation of signedinfo consists of two mandatory processes validation of the signature over signedinfo and validation of each reference digest within signedinfo note that the algorithms used in calculating the signaturevalue are also included in the signed information while the signaturevalue element is outside signedinfo s the canonicalizationmethod is the algorithm that is used to canonicalize the signedinfo element before it is digested as part of the signature operation note that this example is not in canonical form none of the examples in this specification are in canonical form s the signaturemethod is the algorithm that is used to convert the canonicalized signedinfo into the signaturevalue it is a combination of a digest algorithm and a key dependent algorithm and possibly other algorithms such as padding for example rsasha the algorithm names are signed to resist attacks based on substituting a weaker algorithm to promote application interoperability we specify a set of signature algorithms that must be implemented though their use is at the discretion of the signature creator we specify additional algorithms as recommended or optional for implementation the design also permits arbitrary user specified algorithms s each reference element includes the digest method and resulting digest value calculated over the identified data object it also may include transformations that produced the input to the digest operation a data object is signed by computing its digest value and a signature over that value the signature is later checked via reference and signature validation s keyinfo indicates the key to be used to validate the signature possible forms for identification include certificates key names and key agreement algorithms and information  we define only a few keyinfo is optional for two reasons first the signer may not wish to reveal key information to all document processing parties second the information may be known within the applications context and need not be represented explicitly since keyinfo is outside of signedinfo if the signer wishes to bind the keying information to the signature a reference can easily identify and include the keyinfo as part of the signature use of keyinfo is optional however note that senders and receivers must agree on how it will be used through a mechanism out of scope for this specification  more on reference example  s   reference urihttpwwwworgtrrecxhtml s     transforms s       transform algorithmhttpwwwworgxmlcn s     transforms s     digestmethod algorithmhttpwwwworgxmlencsha s     digestvaluedghpcybpcybubqgysbzawduyxrcmukdigestvalue s   reference s the optional uri attribute of reference identifies the data object to be signed this attribute may be omitted on at most one reference in a signature this limitation is imposed in order to ensure that references and objects may be matched unambiguously s this identification along with the transforms is a description provided by the signer on how they obtained the signed data object in the form it was digested ie the digested content the verifier may obtain the digested content in another method so long as the digest verifies in particular the verifier may obtain the content from a different location such as a local store than that specified in the uri s transforms is an optional ordered list of processing steps that were applied to the resources content before it was digested transforms can include operations such as canonicalization encodingdecoding including compressioninflation xslt xpath xml schema validation or xinclude xpath transforms permit the signer to derive an xml document that omits portions of the source document consequently those excluded portions can change without affecting signature validity for example if the resource being signed encloses the signature itself such a transform must be used to exclude the signature value from its own computation if no transforms element is present the resources content is digested directly while the working group has specified mandatory and optional canonicalization and decoding algorithms user specified transforms are permitted s digestmethod is the algorithm applied to the data after transforms is applied if specified to yield the digestvalue the signing of the digestvalue is what binds the content of a resource to the signers key  extended example object and signatureproperty this specification does not address mechanisms for making statements or assertions instead this document defines what it means for something to be signed by an xml signature integrity message authentication andor signer authentication applications that wish to represent other semantics must rely upon other technologies such as xml rdfprimer for instance an application might use a fooassuredby attribute within its own markup to reference a signature element consequently its the application that must understand and know how to make trust decisions given the validity of the signature and the meaning of assuredby syntax we also define a signatureproperties element type for the inclusion of assertions about the signature itself eg signature semantics the time of signing or the serial number of hardware used in cryptographic processes such assertions may be signed by including a reference for the signatureproperties in signedinfo while the signing application should be very careful about what it signs it should understand what is in the signatureproperty a receiving application has no obligation to understand that semantic though its parent trust engine may wish to any content about the signature generation may be located within the signatureproperty element the mandatory target attribute references the signature element to which the property applies consider the preceding example with an additional reference to a local object that includes a signatureproperty element such a signature would not only be detached p but enveloping p example       signature idmysecondsignature p  signedinfo          p   reference urihttpwwwworgtrxmlstylesheet          p   reference uriamadeuptimestamp  p         typehttpwwwworgxmldsigsignaturepropertiesp    transforms p      transform algorithmhttpwwwworgxmlcn p    transforms p    digestmethod algorithmhttpwwwworgxmlencsha    p    digestvaluedghpcybpcybubqgysbzawduyxrcmukdigestvaluep   reference    p  signedinfo  p    p  object p   signatureproperties p     signatureproperty idamadeuptimestamp targetmysecondsignature p        timestamp xmlnshttpwwwietforgrfcxxxxtxt  p          datedate  p          timetime  p        timestamp  p     signatureproperty p   signatureproperties p  object  psignature p the optional type attribute of reference provides information about the resource identified by the uri in particular it can indicate that it is an object signatureproperty or manifest element this can be used by applications to initiate special processing of some reference elements references to an xml data element within an object element should identify the actual element pointed to where the element content is not xml perhaps it is binary or encoded data the reference should identify the object and the reference type if given should indicate object note that type is advisory and no action based on it or checking of its correctness is required by core behavior p object is an optional element for including data objects within the signature element or elsewhere the object can be optionally typed andor encoded p signature properties such as time of signing can be optionally signed by identifying them from within a reference these properties are traditionally called signature attributes although that term has no relationship to the xml term attribute  extended example object and manifest the manifest element is provided to meet additional requirements not directly addressed by the mandatory parts of this specification two requirements and the way the manifest satisfies them follow first applications frequently need to efficiently sign multiple data objects even where the signature operation itself is an expensive public key signature this requirement can be met by including multiple reference elements within signedinfo since the inclusion of each digest secures the data digested however some applications may not want the core validation behavior associated with this approach because it requires every reference within signedinfo to undergo reference validation  the digestvalue elements are checked these applications may wish to reserve reference validation decision logic to themselves for example an application might receive a signature valid signedinfo element that includes three reference elements if a single reference fails the identified data object when digested does not yield the specified digestvalue the signature would fail core validation however the application may wish to treat the signature over the two valid reference elements as valid or take different actions depending on which fails to accomplish this signedinfo would reference a manifest element that contains one or more reference elements with the same structure as those in signedinfo then reference validation of the manifest is under application control second consider an application where many signatures using different keys are applied to a large number of documents an inefficient solution is to have a separate signature per key repeatedly applied to a large signedinfo element with many references this is wasteful and redundant a more efficient solution is to include many references in a single manifest that is then referenced from multiple signature elements the example below includes a reference that signs a manifest found within the object element example      m   reference urimyfirstmanifestm     typehttpwwwworgxmldsigmanifestm     transforms m       transform algorithmhttpwwwworgxmlcn m     transforms m     digestmethod algorithmhttpwwwworgxmlencsha m     digestvaluedghpcybpcybubqgysbzawduyxrcmukdigestvalue m   reference      m objectm   manifest idmyfirstmanifestm     referencem     m     reference   m     referencem     m     referencem   manifestm object  processing rules the sections below describe the operations to be performed as part of signature generation and validation  signature generation the required steps include the generation of reference elements and the signaturevalue over signedinfo  reference generation for each data object being signed apply the transforms as determined by the application to the data object calculate the digest value over the resulting data object create a reference element including the optional identification of the data object any optional transform elements the digest algorithm and the digestvalue note it is the canonical form of these references that are signed in section  signature generation and validated in section  reference validation the reference processing model section  the reference processing model requires use of canonical xml  xmlcn as default processing behavior when a transformation is expecting an octetstream but the data object resulting from uri dereferencing or from the previous transformation in the list of transform elements is a nodeset we recommend that when generating signatures signature applications do not rely on this default behavior but explicitly identify the transformation that is applied to perform this mapping in cases in which inclusive canonicalization is desired we recommend that canonical xml  xmlcn be used  signature generation create signedinfo element with signaturemethod canonicalizationmethod and references canonicalize and then calculate the signaturevalue over signedinfo based on algorithms specified in signedinfo construct the signature element that includes signedinfo objects if desired encoding may be different than that used for signing keyinfo if required and signaturevalue note if the signature includes samedocument references xml or xmlschema xmlschema validation of the document might introduce changes that break the signature consequently applications should be careful to consistently process the document or refrain from using external contributions eg defaults and entities  core validation the required steps of core validation include  reference validation the verification of the digest contained in each reference in signedinfo and  the cryptographic signature validation of the signature calculated over signedinfo note there may be valid signatures that some signature applications are unable to validate reasons for this include failure to implement optional parts of this specification inability or unwillingness to execute specified algorithms or inability or unwillingness to dereference specified uris some uri schemes may cause undesirable side effects etc comparison of each value in reference and signature validation is over the numeric eg integer or decoded octet sequence of the value different implementations may produce different encoded digest and signature values when processing the same resources because of variances in their encoding such as accidental white space but if one uses numeric or octet comparison choose one on both the stated and computed values these problems are eliminated  reference validation canonicalize the signedinfo element based on the canonicalizationmethod in signedinfo for each reference in signedinfo obtain the data object to be digested for example the signature application may dereference the uri and execute transforms provided by the signer in the reference element or it may obtain the content through other means such as a local cache digest the resulting data object using the digestmethod specified in its reference specification compare the generated digest value against digestvalue in the signedinfo reference if there is any mismatch validation fails note signedinfo is canonicalized in step  the application must ensure that the canonicalizationmethod has no dangerous side effects such as rewriting uris see note on canonicalization method  and that it sees what is signed which is the canonical form note after a signature element has been created in signature generation for a signature with a same document reference an implementation can serialize the xml content with variations in that serialization this means that reference validation needs to canonicalize the xml document before digesting in step  to avoid issues related to variations in serialization  signature validation obtain the keying information from keyinfo or from an external source obtain the canonical form of the signaturemethod using the canonicalizationmethod and use the result and previously obtained keyinfo to confirm the signaturevalue over the signedinfo element note keyinfo or some transformed version thereof may be signed via a reference element transformation and validation of this reference  is orthogonal to signature validation which uses the keyinfo as parsed additionally the signaturemethod uri may have been altered by the canonicalization of signedinfo eg absolutization of relative uris and it is the canonical form that must be used however the required canonicalization xmlcn of this specification does not change uris  core signature syntax the general structure of an xml signature is described in section  signature overview and examples this section provides detailed syntax of the core signature features features described in this section are mandatory to implement unless otherwise indicated the syntax is defined via an xmlschemaxmlschema with the following xml preamble declaration and internal entity schema definition xml version encodingutfdoctype schema public wcdtd xmlschema enattlist schemaxmlnsds cdata fixed httpwwwworgxmldsigentity dsig httpwwwworgxmldsigentity  p entity  s schema xmlnshttpwwwworgxmlschema        xmlnsdshttpwwwworgxmldsig        targetnamespacehttpwwwworgxmldsig        version elementformdefaultqualified additional markup defined in version  of this specification uses the dsig namespace the syntax is defined in an xml schema with the following preamble schema definition xml version encodingutfdoctype schema public wcdtd xmlschema enentity dsig httpwwwworgxmldsigentity dsig httpwwwworgxmldsigentity  p entity  s schema xmlnshttpwwwworgxmlschema        xmlnsdshttpwwwworgxmldsig        xmlnsdsighttpwwwworgxmldsig        targetnamespacehttpwwwworgxmldsig        version elementformdefaultqualified  the dscryptobinary simple type this specification defines the dscryptobinary simple type for representing arbitrarylength integers eg bignums in xml as octet strings the integer value is first converted to a big endian bitstring the bitstring is then padded with leading zero bits so that the total number of bits   mod  so that there are an integral number of octets if the bitstring contains entire leading octets that are zero these are removed so the highorder octet is always nonzero this octet string is then base rfc encoded the conversion from integer to octet string is equivalent to ieee s iosp ieee with minimal length this type is used by bignum values such as rsakeyvalue and dsakeyvalue if a value can be of type basebinary or dscryptobinary they are defined as basebinary for example if the signature algorithm is rsa or dsa then signaturevalue represents a bignum and could be dscryptobinary however if hmacsha is the signature algorithm then signaturevalue could have leading zero octets that must be preserved thus signaturevalue is generically defined as of type basebinary schema definition simpletype namecryptobinary  restriction basebasebinary simpletype  the signature element the signature element is the root element of an xml signature implementation must generate laxly schema valid xmlschemaxmlschema signature elements as specified by the following schema schema definition element namesignature typedssignaturetypecomplextype namesignaturetype  sequence     element refdssignedinfo     element refdssignaturevalue     element refdskeyinfo minoccurs     element refdsobject minoccurs maxoccursunbounded   sequence    attribute nameid typeid useoptionalcomplextype  the signaturevalue element the signaturevalue element contains the actual value of the digital signature it is always encoded using base rfc schema definition element namesignaturevalue typedssignaturevaluetype  complextype namesignaturevaluetype  simplecontent    extension basebasebinary      attribute nameid typeid useoptional    extension  simplecontentcomplextype  the signedinfo element the structure of signedinfo includes the canonicalization algorithm a signature algorithm and one or more references the signedinfo element may contain an optional id attribute that will allow it to be referenced by other signatures and objects signedinfo does not include explicit signature or digest properties such as calculation time cryptographic device serial number etc if an application needs to associate properties with the signature or digest it may include such information in a signatureproperties element within an object element schema definition element namesignedinfo typedssignedinfotype complextype namesignedinfotype  sequence     element refdscanonicalizationmethod    element refdssignaturemethod     element refdsreference maxoccursunbounded   sequence    attribute nameid typeid useoptional complextype  the canonicalizationmethod element canonicalizationmethod is a required element that specifies the canonicalization algorithm applied to the signedinfo element prior to performing signature calculations this element uses the general structure for algorithms described in section  algorithm identifiers and implementation requirements implementations must support the required canonicalization algorithms alternatives to the required canonicalization algorithms section  such as canonical xml with comments section  or a minimal canonicalization such as crlf and charset normalization  may be explicitly specified but are not required consequently their use may not interoperate with other applications that do not support the specified algorithm see xml canonicalization and syntax constraint considerations section  security issues may also arise in the treatment of entity processing and comments if nonxml aware canonicalization algorithms are not properly constrained see section  only what is seen should be signed the way in which the signedinfo element is presented to the canonicalization method is dependent on that method the following applies to algorithms which process xml as nodes or characters xml based canonicalization implementations must be provided with an xpath nodeset originally formed from the document containing the signedinfo and currently indicating the signedinfo its descendants and the attribute and namespace nodes of signedinfo and its descendant elements text based canonicalization algorithms such as crlf and charset normalization should be provided with the utf octets that represent the wellformed signedinfo element from the first character to the last character of the xml representation inclusive this includes the entire text of the start and end tags of the signedinfo element as well as all descendant markup and character data ie the text between those tags use of text based canonicalization of signedinfo is not recommended we recommend applications that implement a textbased instead of xmlbased canonicalization  such as resource constrained apps  generate canonicalized xml as their output serialization so as to mitigate interoperability and security concerns for instance such an implementation should at least generate standalone xml instances xml note the signature application must exercise great care in accepting and executing an arbitrary canonicalizationmethod for example the canonicalization method could rewrite the uris of the references being validated or the method could massively transform signedinfo so that validation would always succeed ie converting it to a trivial signature with a known key over trivial data since canonicalizationmethod is inside signedinfo in the resulting canonical form it could erase itself from signedinfo or modify the signedinfo element so that it appears that a different canonicalization function was used thus a signature which appears to authenticate the desired data with the desired key digestmethod and signaturemethod can be meaningless if a capricious canonicalizationmethod is used schema definition element namecanonicalizationmethod typedscanonicalizationmethodtype complextype namecanonicalizationmethodtype mixedtrue  sequence    any namespaceany minoccurs maxoccursunbounded     unbounded elements from  namespace   sequence  attribute namealgorithm typeanyuri userequired complextype  the signaturemethod element signaturemethod is a required element that specifies the algorithm used for signature generation and validation this algorithm identifies all cryptographic functions involved in the signature operation eg hashing public key algorithms macs padding etc this element uses the general structure here for algorithms described in section  algorithm identifiers and implementation requirements while there is a single identifier that identifier may specify a format containing multiple distinct signature values schema definition element namesignaturemethod typedssignaturemethodtypecomplextype namesignaturemethodtype mixedtrue  sequence    element namehmacoutputlength minoccurs              typedshmacoutputlengthtype    any namespaceother minoccurs maxoccursunbounded     unbounded elements from  external namespace   sequence  attribute namealgorithm typeanyuri userequired complextype the dshmacoutputlength parameter is used for hmac hmac algorithms the parameter specifies a truncation length in bits if this parameter is trusted without further verification then this can lead to a security bypass cve signatures must be deemed invalid if the truncation length is below the larger of a half the underlying hash algorithms output length and b  bits note that some implementations are known to not accept truncation lengths that are lower than the underlying hash algorithms output length  the reference element reference is an element that may occur one or more times it specifies a digest algorithm and digest value and optionally an identifier of the object being signed the type of the object andor a list of transforms to be applied prior to digesting the identification uri and transforms describe how the digested content ie the input to the digest method was created the type attribute facilitates the processing of referenced data for example while this specification makes no requirements over external data an application may wish to signal that the referent is a manifest an optional id attribute permits a reference to be referenced from elsewhere schema definition element namereference typedsreferencetypecomplextype namereferencetype  sequence     element refdstransforms minoccurs     element refdsdigestmethod     element refdsdigestvalue   sequence  attribute nameid typeid useoptional   attribute nameuri typeanyuri useoptional   attribute nametype typeanyuri useoptional complextype  the uri attribute the uri attribute identifies a data object using a urireference uri the mapping from this attributes value to a uri reference must be performed as specified in section  of xmlschema additionally some existing implementations are known to verify the value of the uri attribute against the grammar in uri it is therefore safest to perform any necessary escaping while generating the uri attribute we recommend xml signature applications be able to dereference uris in the http scheme dereferencing a uri in the http scheme must comply with the status code definitions of http eg   and  redirects are followed to obtain the entitybody of a  status code response applications should also be cognizant of the fact that protocol parameter and state information such as http cookies html device profiles or content negotiation may affect the content yielded by dereferencing a uri if a resource is identified by more than one uri the most specific should be used eg httpwwwworginteroppressreleasehtmlen instead of httpwwwworginteroppressrelease see section  core validation for further information on reference processing if the uri attribute is omitted altogether the receiving application is expected to know the identity of the object for example a lightweight data protocol might omit this attribute given the identity of the object is part of the application context this attribute may be omitted from at most one reference in any particular signedinfo or manifest the optional type attribute contains information about the type of object being signed after all dsreference transforms have been applied this is represented as a uri for example typehttpwwwworgxmldsigobject typehttpwwwworgxmldsigmanifest the type attribute applies to the item being pointed at not its contents for example a reference that results in the digesting of an object element containing a signatureproperties element is still of type object the type attribute is advisory no validation of the type information is required by this specification  the reference processing model note xpath is recommended signature applications need not conform to xpath specification in order to conform to this specification however the xpath data model definitions eg nodesets and syntax is used within this document in order to describe functionality for those that want to process xmlasxml instead of octets as part of signature generation for those that want to use these features a conformant xpath implementation is one way to implement these features but it is not required such applications could use a sufficiently functional replacement to a nodeset and implement only those xpath expression behaviors required by this specification however for simplicity we generally will use xpath terminology without including this qualification on every point requirements over xpath nodesets can include a nodeset functional equivalent requirements over xpath processing can include application behaviors that are equivalent to the corresponding xpath behavior the datatype of the result of uri dereferencing or subsequent transforms is either an octet stream or an xpath nodeset the transforms specified in this document are defined with respect to the input they require the following is the default signature application behavior if the data object is an octet stream and the next transform requires a nodeset the signature application must attempt to parse the octets yielding the required nodeset via xml wellformed processing if the data object is a nodeset and the next transform requires octets the signature application must attempt to convert the nodeset to an octet stream using canonical xml xmlcn users may specify alternative transforms that override these defaults in transitions between transforms that expect different inputs the final octet stream contains the data octets being secured the digest algorithm specified by digestmethod is then applied to these data octets resulting in the digestvalue note the section  reference generation includes further restrictions on the reliance upon defined default transformations when applications generate signatures in this specification a samedocument reference is defined as a urireference that consists of a hash sign  followed by a fragment or alternatively consists of an empty uri uri unless the urireference is such a samedocument reference  the result of dereferencing the urireference must be an octet stream in particular an xml document identified by uri is not parsed by the signature application unless the uri is a samedocument reference or unless a transform that requires xml parsing is applied see transforms section  when a fragment is preceded by an absolute or relative uri in the urireference the meaning of the fragment is defined by the resources mime type rfc even for xml documents uri dereferencing including the fragment processing might be done for the signature application by a proxy therefore reference validation might fail if fragment processing is not performed in a standard way as defined in the following section for samedocument references consequently we recommend in this case that the uri attribute not include fragment identifiers and that such processing be specified as an additional xpath transform or xpath filter  transform xmldsigxpathfilter when a fragment is not preceded by a uri in the urireference xml signature applications must support the null uri and shortname xpointer xptrframework we recommend support for the samedocument xpointers xpointer and xpointeridid if the application also intends to support any canonicalization that preserves comments otherwise urifoo will automatically remove comments before the canonicalization can even be invoked due to the processing defined in samedocument urireferences section  all other support for xpointers is optional especially all support for shortname and other xpointers in external resources since the application may not have control over how the fragment is generated leading to interoperability problems and validation failures xpointer must be interpreted to identify the root node xpath of the document that contains the uri attribute xpointeridid must be interpreted to identify the element node identified by elementid xptrelement when evaluated with respect to the document that contains the uri attribute the original edition of this specification xmldsigcore referenced the xpointer candidate recommendation xptrxpointercr and some implementations support it optionally that candidate recommendation has been superseded by the xptrframework xptrxmlns and xptrelement recommendations and  at the time of this edition  the xptrxpointer working draft therefore the use of the xpointer scheme xptrxpointer beyond the usage discussed in this section is discouraged the following examples demonstrate what the uri attribute identifies and how it is dereferenced urihttpexamplecombarxml identifies the octets that represent the external resource httpexamplecombarxml that is probably an xml document given its file extension urihttpexamplecombarxmlchapter identifies the element with id attribute value chapter of the external xml resource httpexamplecombarxml provided as an octet stream again for the sake of interoperability the element identified as chapter should be obtained using an xpath transform rather than a uri fragment shortname xpointer resolution in external resources is not required in this specification uri identifies the nodeset minus any comment nodes of the xml resource containing the signature urichapter identifies a nodeset containing the element with id attribute value chapter of the xml resource containing the signature xml signature and its applications modify this nodeset to include the element plus all descendants including namespaces and attributes  but not comments  samedocument urireferences dereferencing a samedocument reference must result in an xpath nodeset suitable for use by canonical xml xmlcn specifically dereferencing a null uri uri must result in an xpath nodeset that includes every noncomment node of the xml document containing the uri attribute in a fragment uri the characters after the number sign  character conform to the xpointer syntax xptrframework when processing an xpointer the application must behave as if the xpointer was evaluated with respect to the xml document containing the uri attribute  the application must behave as if the result of xpointer processing xptrframework were a nodeset derived from the resultant subresource as follows include xpath nodes having full or partial content within the subresource replace the root node with its children if it is in the nodeset replace any element node e with e plus all descendants of e text comment pi element and all namespace and attribute nodes of e and its descendant elements if the uri has no fragment identifier or the fragment identifier is a shortname xpointer then delete all comment nodes the second to last replacement is necessary because xpointer typically indicates a subtree of an xml documents parse tree using just the element node at the root of the subtree whereas canonical xml treats a nodeset as a set of nodes in which absence of descendant nodes results in absence of their representative text from the canonical form the last step is performed for null uris and shortname xpointers  it is necessary because when xmlcn or xmlcn is passed a nodeset it processes the nodeset as is with or without comments only when it is called with an octet stream does it invoke its own xpath expressions default or without comments therefore to retain the default behavior of stripping comments when passed a nodeset they are removed in the last step if the uri is not a schemebased xpointer to retain comments while selecting an element by an identifier id use the following schemebased xpointer urixpointeridid to retain comments while selecting the entire document use the following schemebased xpointer urixpointer the interpretation of these xpointers is defined in the reference processing model section   the transforms element the optional transforms element contains an ordered list of transform elements these describe how the signer obtained the data object that was digested the output of each transform serves as input to the next transform the input to the first transform is the result of dereferencing the uri attribute of the reference element the output from the last transform is the input for the digestmethod algorithm when transforms are applied the signer is not signing the native original document but the resulting transformed document see only what is signed is secure section  each transform consists of an algorithm attribute and content parameters if any appropriate for the given algorithm the algorithm attribute value specifies the name of the algorithm to be performed and the transform content provides additional data to govern the algorithms processing of the transform input see section  algorithm identifiers and implementation requirements as described in the reference processing model section  some transforms take an xpath nodeset as input while others require an octet stream if the actual input matches the input needs of the transform then the transform operates on the unaltered input if the transform input requirement differs from the format of the actual input then the input must be converted some transforms may require explicit mime type charset iana registered character set or other such information concerning the data they are receiving from an earlier transform or the source data although no transform algorithm specified in this document needs such explicit information such data characteristics are provided as parameters to the transform algorithm and should be described in the specification for the algorithm examples of transforms include but are not limited to base decoding rfc canonicalization xmlcn xpath filtering xpath and xslt xslt the generic definition of the transform element also allows applicationspecific transform algorithms for example the transform could be a decompression routine given by a java class appearing as a base encoded parameter to a java transform algorithm however applications should refrain from using applicationspecific transforms if they wish their signatures to be verifiable outside of their application domain transform algorithms section  defines the list of standard transformations schema definition element nametransforms typedstransformstypecomplextype nametransformstype  sequence    element refdstransform maxoccursunbounded    sequencecomplextypeelement nametransform typedstransformtypecomplextype nametransformtype mixedtrue  choice minoccurs maxoccursunbounded     any namespaceother processcontentslax      elements from unbounded namespaces     element namexpath typestring   choice  attribute namealgorithm typeanyuri userequired complextype               the digestmethod element digestmethod is a required element that identifies the digest algorithm to be applied to the signed object this element uses the general structure here for algorithms specified in section  algorithm identifiers and implementation requirements if the result of the uri dereference and application of transforms is an xpath nodeset or sufficiently functional replacement implemented by the application then it must be converted as described in section  the reference processing model if the result of uri dereference and application of transforms is an octet stream then no conversion occurs comments might be present if the canonical xml with comments was specified in the transforms the digest algorithm is applied to the data octets of the resulting octet stream schema definition element namedigestmethod typedsdigestmethodtypecomplextype namedigestmethodtype mixedtrue   sequence    any namespaceother processcontentslax          minoccurs maxoccursunbounded  sequence      attribute namealgorithm typeanyuri userequired complextype  the digestvalue element digestvalue is an element that contains the encoded value of the digest the digest is always encoded using base rfc schema definition element namedigestvalue typedsdigestvaluetypesimpletype namedigestvaluetype  restriction basebasebinarysimpletype               the keyinfo element keyinfo is an optional element that enables the recipients to obtain the key needed to validate the signature keyinfo may contain keys names certificates and other public key management information such as inband key distribution or key agreement data this specification defines a few simple types but applications may extend those types or all together replace them with their own key identification and exchange semantics using the xml namespace facility xmlnames however questions of trust of such key information eg its authenticity or strength are out of scope of this specification and left to the application details of the structure and usage of element children of keyinfo other than simple types described in this specification are out of scope for example the definition of pki certificate contents certificate ordering certificate revocation and crl management are out of scope if keyinfo is omitted the recipient is expected to be able to identify the key based on application context multiple declarations within keyinfo refer to the same key while applications may define and use any mechanism they choose through inclusion of elements from a different namespace compliant versions must implement keyvalue section  the keyvalue element and should implement keyinforeference section  the keyinforeference element keyinforeference is preferred over use of retrievalmethod as it avoids use of transform child elements that introduce security risk and implementation challenges support for other children of keyinfo is optional the schema specification of many of keyinfos children eg pgpdata spkidata xdata permit their content to be extendedcomplemented with elements from another namespace this may be done only if it is safe to ignore these extension elements while claiming support for the types defined in this specification otherwise external elements including alternative structures to those defined by this specification must be a child of keyinfo for example should a complete xmlpgp standard be defined its root element must be a child of keyinfo of course new structures from external namespaces can incorporate elements from the dsig namespace via features of the type definition language for instance they can create a schema that permits includes imports or derives new types based on dsig elements the following list summarizes the keyinfo types that are allocated an identifier in the dsig namespace these can be used within the retrievalmethod type attribute to describe a remote keyinfo structure httpwwwworgxmldsigdsakeyvalue httpwwwworgxmldsigrsakeyvalue httpwwwworgxmldsigxdata httpwwwworgxmldsigpgpdata httpwwwworgxmldsigspkidata httpwwwworgxmldsigmgmtdata the following list summarizes the additional keyinfo types that are allocated an identifier in the dsig namespace httpwwwworgxmldsigeckeyvalue httpwwwworgxmldsigderencodedkeyvalue in addition to the types above for which we define an xml structure we specify one additional type to indicate a binary asn der x certificate httpwwwworgxmldsigrawxcertificate schema definition element namekeyinfo typedskeyinfotype complextype namekeyinfotype mixedtrue  choice maxoccursunbounded         element refdskeyname     element refdskeyvalue     element refdsretrievalmethod     element refdsxdata     element refdspgpdata     element refdsspkidata    element refdsmgmtdata     element refdsigderencodedkeyvalue      derencodedkeyvalue xmldsig  will use the any element      element refdsigkeyinforeference      keyinforeference xmldsig  will use the any element      element refxencencryptedkey      encryptedkey xmlenc will use the any element      element refxencagreement      agreement xmlenc will use the any element     any processcontentslax namespaceother      elements from unbounded namespaces   choice  attribute nameid typeid useoptionalcomplextype  the keyname element the keyname element contains a string value in which white space is significant which may be used by the signer to communicate a key identifier to the recipient typically keyname contains an identifier related to the key pair used to sign the message but it may contain other protocolrelated information that indirectly identifies a key pair common uses of keyname include simple string names for keys a key index a distinguished name dn an email address etc schema definition element namekeyname typestring              the keyvalue element the keyvalue element contains a single public key that may be useful in validating the signature structured formats for defining dsa required rsa required and ecdsa required public keys are defined in section  signature algorithms the keyvalue element may include externally defined public keys values represented as pcdata or element types from an external namespace schema definition element namekeyvalue typedskeyvaluetype  complextype namekeyvaluetype mixedtrue  choice    element refdsdsakeyvalue    element refdsrsakeyvalue     element refdsigeckeyvalue      ecc keys xmldsig  will use the any element     any namespaceother processcontentslax  choicecomplextype  the dsakeyvalue element identifier typehttpwwwworgxmldsigdsakeyvalue this can be used within a retrievalmethod or reference element to identify the referents type dsa keys and the dsa signature algorithm are specified in fips dsa public key values can have the following fields p a prime modulus meeting the fips requirements q an integer in the range   q   which is a prime divisor of p g an integer with certain properties with respect to p and q y gx mod p where x is part of the private key and not made public j p    q seed a dsa prime generation seed pgencounter a dsa prime generation counter parameter j is available for inclusion solely for efficiency as it is calculatable from p and q parameters seed and pgencounter are used in the dsa prime number generation algorithm specified in fips as such they are optional but must either both be present or both be absent this prime generation algorithm is designed to provide assurance that a weak prime is not being used and it yields a p and q value parameters p q and g can be public and common to a group of users they might be known from application context as such they are optional but p and q must either both appear or both be absent if all of p q seed and pgencounter are present implementations are not required to check if they are consistent and are free to use either p and q or seed and pgencounter all parameters are encoded as base rfc values arbitrarylength integers eg bignums such as rsa moduli are represented in xml as octet strings as defined by the dscryptobinary type schema definition element namedsakeyvalue typedsdsakeyvaluetype  complextype namedsakeyvaluetype   sequence    sequence minoccurs      element namep typedscryptobinary       element nameq typedscryptobinary    sequence    element nameg typedscryptobinary minoccurs     element namey typedscryptobinary     element namej typedscryptobinary minoccurs    sequence minoccurs      element nameseed typedscryptobinary       element namepgencounter typedscryptobinary     sequence  sequencecomplextype  the rsakeyvalue element identifier typehttpwwwworgxmldsigrsakeyvalue this can be used within a retrievalmethod or reference element to identify the referents type rsa key values have two fields modulus and exponent example  rsakeyvalue  modulusxaseueyqhrmkbcdnoapiohbptxwooclzatnfyxszdukslw  jubafoqnepcwrrdfstbcqnxpbeelhuveymzxkxrgrmvavzybpvrgbuwulv  fokhhmbktqhyndylpqrhdudstvkgucjesaqju  modulus  exponentaqabexponentrsakeyvalue arbitrarylength integers eg bignums such as rsa moduli are represented in xml as octet strings as defined by the dscryptobinary type schema definition element namersakeyvalue typedsrsakeyvaluetype complextype namersakeyvaluetype  sequence    element namemodulus typedscryptobinary      element nameexponent typedscryptobinary   sequencecomplextype  the eckeyvalue element identifier typehttpwwwworgxmldsigeckeyvalue this can be used within a retrievalmethod or reference element to identify the referents type the eckeyvalue element is defined in the httpwwwworgxmldsig namespace ec public key values consists of two sub components domain parameters and publickey example  eckeyvalue xmlnshttpwwwworgxmldsig  namedcurve uriurnoid   publickey    vwccupjppcamcgicahyoevgaaukoancufg    cfkdoattosgjktaicvzocyiopjrhytbulbnjy  publickeyeckeyvalue note  a line break has been added to the publickey content to preserve printed page width domain parameters can be encoded explicitly using the dsigecparameters element or by reference using the dsignamedcurve element a named curve is specified through the uri attribute for named curves that are identified by oids such as those defined in rfc and rfc the oid should be encoded according to urnoid conformant applications must support the dsignamedcurve element and the bit prime field curve as identified by the oid  the publickey element contains a base encoding of a binary representation of the x and y coordinates of the point its value is computed as follows convert the elliptic curve point xy to an octet string by first converting the field elements x and y to octet strings as specified in section  of eccalgs note and then prepend the concatenated result of the conversion with x support for ellipticcurvepointtooctetstring conversion without point compression is required base encode the octet string resulting from the conversion in step  schema definition  targetnamespacehttpwwwworgxmldsig element nameeckeyvalue typedsigeckeyvaluetype complextype nameeckeyvaluetype  sequence    choice      element nameecparameters typedsigecparameterstype       element namenamedcurve typedsignamedcurvetype     choice    element namepublickey typedsigecpointtype   sequence  attribute nameid typeid useoptional complextypecomplextype namenamedcurvetype  attribute nameuri typeanyuri userequired complextypesimpletype nameecpointtype  restriction basedscryptobinary simpletype  explicit curve parameters the ecparameters element consists of the following subelements note these definitions are based on the those described in rfc the fieldid element identifies the finite field over which the elliptic curve is defined additional details on the structures for defining prime and characteristic two fields is provided below the dsigcurve element specifies the coefficients a and b of the elliptic curve e each coefficient is first converted from a field element to an octet string as specified in section  of eccalgs then the resultant octet string is encoded in base the base element specifies the base point p on the elliptic curve the base point is represented as a value of type ecpointtype the order element specifies the order n of the base point and is encoded as a positiveinteger the cofactor element is an optional element that specifies the integer h  efqn the cofactor is not required to support ecdsa except in parameter validation the cofactor may be included to support parameter validation for ecdsa keys parameter validation is not required by this specification the cofactor is required in ecdh public key parameters the dsigvalidationdata element is an optional element that specifies the hash algorithm used to generate the elliptic curve e and the base point g verifiably at random it also specifies the seed that was used to generate the curve and the base point schema definition  targetnamespacehttpwwwworgxmldsig complextype nameecparameterstype  sequence    element namefieldid typedsigfieldidtype     element namecurve typedsigcurvetype     element namebase typedsigecpointtype     element nameorder typedscryptobinary     element namecofactor typeinteger minoccurs     element namevalidationdata              typedsigecvalidationdatatype minoccurs   sequencecomplextypecomplextype namefieldidtype  choice    element refdsigprime     element refdsigtnb     element refdsigpnb     element refdsiggnb     any namespaceother processcontentslax   choicecomplextypecomplextype namecurvetype  sequence    element namea typedscryptobinary     element nameb typedscryptobinary   sequencecomplextypecomplextype nameecvalidationdatatype  sequence    element nameseed typedscryptobinary   sequence  attribute namehashalgorithm typeanyuri userequired complextype prime fields are described by a single subelement p which represents the field size in bits it is encoded as a positiveinteger schema definition  targetnamespacehttpwwwworgxmldsig element nameprime typedsigprimefieldparamstype complextype nameprimefieldparamstype  sequence    element namep typedscryptobinary   sequencecomplextype structures are defined for three types of characteristic two fields gaussian normal basis pentanomial basis and trinomial basis schema definition  targetnamespacehttpwwwworgxmldsig element namegnb typedsigchartwofieldparamstype complextype namechartwofieldparamstype  sequence    element namem typepositiveinteger   sequencecomplextypeelement nametnb typedsigtnbfieldparamstype complextype nametnbfieldparamstype  complexcontent    extension basedsigchartwofieldparamstype      sequence        element namek typepositiveinteger       sequence    extension  complexcontentcomplextypeelement namepnb typedsigpnbfieldparamstype complextype namepnbfieldparamstype  complexcontent    extension basedsigchartwofieldparamstype      sequence        element namek typepositiveinteger         element namek typepositiveinteger         element namek typepositiveinteger       sequence    extension  complexcontentcomplextype  compatibility with rfc  implementations that need to support the rfc format for ecdsa keys can avoid known interoperability problems with that specification by adhering to the following profile avoid validating the ecdsakeyvalue element against the rfc schema xml schema validators may not support integer types with decimal data exceeding  decimal digits xmlschemaxmlschema support only the namedcurve element support the bit prime field curve as identified by the urn urnoid the following is an example of a ecdsakeyvalue element that meets the profile described in this section example  ecdsakeyvalue xmlnshttpwwwworgxmldsigmore  domainparameters    namedcurve urnurnoid   domainparameters  publickey    x value                   y value                 publickeyecdsakeyvalue note  a line break has been added to the x and y value attribute values to preserve printed page width  the retrievalmethod element a retrievalmethod element within keyinfo is used to convey a reference to keyinfo information that is stored at another location for example several signatures in a document might use a key verified by an xv certificate chain appearing once in the document or remotely outside the document each signatures keyinfo can reference this chain using a single retrievalmethod element instead of including the entire chain with a sequence of xcertificate elements retrievalmethod uses the same syntax and dereferencing behavior as the reference uri attribute section  the uri attribute and the reference processing model except that there are no digestmethod or digestvalue child elements and presence of the uri attribute is mandatory type is an optional identifier for the type of data retrieved after all transforms have been applied the result of dereferencing a retrievalmethod reference for all keyinfo types defined by this specification  section  the keyinfo element with a corresponding xml structure is an xml element or document with that element as the root the rawxcertificate keyinfo for which there is no xml structure returns a binary x certificate note that when referencing one of the defined keyinfo types within the same document or some remote documents at least one transform is required to turn an idbased reference to a keyinfo element into a child element located inside it this is due to the lack of an xml id attribute on the defined keyinfo types in such cases use of keyinforeference is encouraged instead see section  the keyinforeference element note the keyinforeference element is preferred over use of retrievalmethod as it avoids use of transform child elements that introduce security risk and implementation challenges schema definition element nameretrievalmethod typedsretrievalmethodtype  complextype nameretrievalmethodtype  sequence    element refdstransforms minoccurs    sequence    attribute nameuri typeanyuri   attribute nametype typeanyuri useoptional complextype note the schema for the uri attribute of retrievalmethod erroneously omitted the attribute userequired however this error only results in a more lax schema which permits all valid retrievalmethod elements because the existing schema is embedded in many applications which may include the schema in their signatures the schema has not been corrected to be more restrictive  the xdata element identifier typehttpwwwworgxmldsigxdata  this can be used within a retrievalmethod or reference element to identify the referents type an xdata element within keyinfo contains one or more identifiers of keys or x certificates or certificates identifiers or a revocation list the content of xdata is at least one element from the following set of element types any of these may appear together or more than once iff if and only if each instance describes or is related to the same certificate the deprecated xissuerserial element which contains an x issuer distinguished nameserial number pair the distinguished name should be represented as a string that complies with section  of rfc ldapdn to be generated according to the distinguished name encoding rules section below the xsubjectname element which contains an x subject distinguished name that should be represented as a string that complies with section  of rfc ldapdn to be generated according to the distinguished name encoding rules section below the xski element which contains the base encoded plain ie nonderencoded value of a x v subjectkeyidentifier extension the xcertificate element which contains a baseencoded xv certificate and the xcrl element which contains a baseencoded certificate revocation list crl xv the dsigxdigest element contains a baseencoded digest of a certificate the digest algorithm uri is identified with a required algorithm attribute the input to the digest must be the raw octets that would be baseencoded were the same certificate to appear in the xcertificate element elements from an external namespace which accompaniescomplements any of the elements above any xissuerserial xski xsubjectname and dsigxdigest elements that appear must refer to the certificate or certificates containing the validation key all such elements that refer to a particular individual certificate must be grouped inside a single xdata element and if the certificate to which they refer appears it must also be in that xdata element any xissuerserial xski xsubjectname and dsigxdigest elements that relate to the same key but different certificates must be grouped within a single keyinfo but may occur in multiple xdata elements note that if xdata child elements are used to identify a trusted certificate rather than solely as an untrusted hint supplemented by validation by policy the complete set of such elements that are intended to identify a certificate should be integrity protected typically by signing an entire xdata or keyinfo element all certificates appearing in an xdata element must relate to the validation key by either containing it or being part of a certification chain that terminates in a certificate containing the validation key no ordering is implied by the above constraints the comments in the following instance demonstrate these constraints example  keyinfo  xdata  two pointers to certificatea     xissuerserial       xissuername        cntamura kent outrl oibm lyamatoshi stkanagawa cjp      xissuername      xserialnumberxserialnumber    xissuerserial    xskidbdxski   xdata  xdata single pointer to certificateb     xsubjectnamesubject of certificate bxsubjectname  xdata  xdata  certificate chain     signer cert issuer cnarbolcaoufvtoibmcus serial     xcertificatemiicxtccaxcertificate     intermediate cert subject cnarbolcaoufvtoibmcus          issuer cntootisecaoufvtobridgepointcus     xcertificatemiicpzccaxcertificate     root cert subject cntootisecaoufvtobridgepointcus     xcertificatemiicstccaxcertificate  xdatakeyinfo note there is no direct provision for a pkcs encoded bag of certificates or crls however a set of certificates and crls can occur within an xdata element and multiple xdata elements can occur in a keyinfo whenever multiple certificates occur in an xdata element at least one such certificate must contain the public key which verifies the signature while in principle many certificate encodings are possible it is recommended that certificates appearing in an xcertificate element be limited to an encoding of ber or its der subset allowing that within the certificate other content may be present the use of other encodings may lead to interoperability issues in any case xml signature implementations should not alter or reencode certificates as doing so could invalidate their signatures the xissuerserial element has been deprecated in favor of the newlyintroduced dsigxdigest element the xml schema type of the serial number was defined to be an integer and xml schema validators may not support integer types with decimal data exceeding  decimal digits xmlschema this has proven insufficient because many certificate authorities issue certificates with large random serial numbers that exceed this limit as a result deployments that do make use of this element should take care if schema validation is involved new deployments should avoid use of the element  distinguished name encoding rules to encode a distinguished name xissuerserialxsubjectname and keyname if appropriate the encoding rules in section  of rfc  ldapdn should be applied except that the character escaping rules in section  of rfc  ldapdn may be augmented as follows escape all occurrences of ascii control characters unicode range x  xf by replacing them with  followed by a two digit hex number showing its unicode number escape any trailing space characters unicode x by replacing them with  instead of using the escape sequence   since an xml document logically consists of characters not octets the resulting unicode string is finally encoded according to the character encoding used for producing the physical representation of the xml document schema definition element namexdata typedsxdatatype complextype namexdatatype  sequence maxoccursunbounded    choice      element namexissuerserial typedsxissuerserialtype      element namexski typebasebinary      element namexsubjectname typestring      element namexcertificate typebasebinary      element namexcrl typebasebinary       element refdsigxdigest        the xdigest element xmldsig  will use the any element       any namespaceother processcontentslax    choice  sequencecomplextypecomplextype namexissuerserialtype   sequence     element namexissuername typestring     element namexserialnumber typeinteger   sequencecomplextype note this schema permits xdata to be empty this is      precluded by the text in      a hrefseckeyinfo classsectionrefa which states      that at least one element from the dsig namespace should be present      in the pgp spki and x structures this is easily expressed for      the other key types but not for xdata because of its rich      structure  targetnamespacehttpwwwworgxmldsig element namexdigest typedsigxdigesttypecomplextype namexdigesttype  simplecontent    extension basebasebinary      attribute namealgorithm typeanyuri userequired    extension  simplecontentcomplextype  the pgpdata element identifier typehttpwwwworgxmldsigpgpdata  this can be used within a retrievalmethod or reference element to identify the referents type the pgpdata element within keyinfo is used to convey information related to pgp public key pairs and signatures on such keys the pgpkeyids value is a basebinary sequence containing a standard pgp public key identifier as defined in pgp section  the pgpkeypacket contains a baseencoded key material packet as defined in pgp section  these children element types can be complementedextended by siblings from an external namespace within pgpdata or pgpdata can be replaced all together with an alternative pgp xml structure as a child of keyinfo pgpdata must contain one pgpkeyid andor one pgpkeypacket and  or more elements from an external namespace schema definition element namepgpdata typedspgpdatatype complextype namepgpdatatype   choice    sequence      element namepgpkeyid typebasebinary       element namepgpkeypacket typebasebinary minoccurs       any namespaceother processcontentslax minoccurs           maxoccursunbounded    sequence    sequence      element namepgpkeypacket typebasebinary       any namespaceother processcontentslax minoccurs           maxoccursunbounded    sequence  choicecomplextype  the spkidata element identifier typehttpwwwworgxmldsigspkidata  this can be used within a retrievalmethod or reference element to identify the referents type the spkidata element within keyinfo is used to convey information related to spki public key pairs certificates and other spki data spkisexp is the base encoding of a spki canonical sexpression spkidata must have at least one spkisexp spkisexp can be complementedextended by siblings from an external namespace within spkidata or spkidata can be entirely replaced with an alternative spki xml structure as a child of keyinfo schema definition element namespkidata typedsspkidatatype complextype namespkidatatype  sequence maxoccursunbounded    element namespkisexp typebasebinary    any namespaceother processcontentslax minoccurs  sequencecomplextype  the mgmtdata element identifier typehttpwwwworgxmldsigmgmtdata  this can be used within a retrievalmethod or reference element to identify the referents type the mgmtdata element within keyinfo is a string value used to convey inband key distribution or agreement data however use of this element is not recommended and should not be used the section  xml encryption encryptedkey and derivedkey elements describes new keyinfo types for conveying key information schema definition element namemgmtdata typestring   xml encryption encryptedkey and derivedkey elements the xencencryptedkey and xencderivedkey elements defined in xmlenccore as children of dskeyinfo can be used to convey inband encrypted or derived key material in particular the xencderivedkey element may be present when the key used in calculating a message authentication code is derived from a shared secret  the derencodedkeyvalue element identifier typehttpwwwworgxmldsigderencodedkeyvalue this can be used within a retrievalmethod or reference element to identify the referents type the public key algorithm and value are derencoded in accordance with the value that would be used in the subject public key info field of an x certificate per section  of rfc the derencoded value is then baseencoded for the key value types supported in this specification refer to the following for normative references on the format of subject public key info and the relevant oid values that identify the keyalgorithm type rsa see section  of rfc dsa see section  of rfc ec see section  of rfc specifications that define additional key types should provide such a normative reference for their own key types where possible schema definition  targetnamespacehttpwwwworgxmldsig element namederencodedkeyvalue typedsigderencodedkeyvaluetype complextype namederencodedkeyvaluetype  simplecontent    extension basebasebinary      attribute nameid typeid useoptional    extension  simplecontentcomplextype historical note the derencodedkeyvalue element was added to xml signature  in order to support certain interoperability scenarios where at least one of signer andor verifier are not able to serialize keys in the xml formats described in section  the keyvalue element above the keyvalue element is to be used for bare xml key representations not xml wrappings around other binary encodings like asn der for this reason the derencodedkeyvalue element is not a child of keyvalue the derencodedkeyvalue element is also not a child of the xdata element as the keys represented by derencodedkeyvalue may not have x certificates associated with them a requirement for xdata  the keyinforeference element a keyinforeference element within keyinfo is used to convey a reference to a keyinfo element at another location in the same or different document for example several signatures in a document might use a key verified by an xv certificate chain appearing once in the document or remotely outside the document each signatures keyinfo can reference this chain using a single keyinforeference element instead of including the entire chain with a sequence of xcertificate elements repeated in multiple places keyinforeference uses the same syntax and dereferencing behavior as references uri  section  the uri attribute and the reference processing model section  the reference processing model except that there are no child elements and the presence of the uri attribute is mandatory the result of dereferencing a keyinforeference must be a keyinfo element or an xml document with a keyinfo element as the root note the keyinforeference element is a desirable alternative to the use of retrievalmethod when the data being referred to is a keyinfo element and the use of retrievalmethod would require one or more transform child elements which introduce security risk and implementation challenges schema definition  targetnamespacehttpwwwworgxmldsig element namekeyinforeference typedsigkeyinforeferencetype complextype namekeyinforeferencetype  attribute nameuri typeanyuri userequired  attribute nameid typeid useoptionalcomplextype  the object element identifier typehttpwwwworgxmldsigobject this can be used within a reference element to identify the referents type object is an optional element that may occur one or more times when present this element may contain any data the object element may include optional mime type id and encoding attributes the objects encoding attributed may be used to provide a uri that identifies the method by which the object is encoded eg a binary file the mimetype attribute is an optional attribute which describes the data within the object independent of its encoding this is a string with values defined by rfc for example if the object contains base encoded png the encoding may be specified as httpwwwworgxmldsigbase and the mimetype as imagepng this attribute is purely advisory no validation of the mimetype information is required by this specification applications which require normative type and encoding information for signature validation should specify transforms with well defined resulting types andor encodings the objects id is commonly referenced from a reference in signedinfo or manifest this element is typically used for enveloping signatures where the object being signed is to be included in the signature element the digest is calculated over the entire object element including start and end tags note if the application wishes to exclude the object tags from the digest calculation the reference must identify the actual data object easy for xml documents or a transform must be used to remove the object tags likely where the data object is nonxml exclusion of the object tags may be desired for cases where one wants the signature to remain valid if the data object is moved from inside a signature to outside the signature or vice versa or where the content of the object is an encoding of an original binary document and it is desired to extract and decode so as to sign the original bitwise representation schema definition element nameobject typedsobjecttype  complextype nameobjecttype mixedtrue  sequence minoccurs maxoccursunbounded    any namespaceany processcontentslax   sequence  attribute nameid typeid useoptional    attribute namemimetype typestring useoptional   attribute nameencoding typeanyuri useoptional  complextype  additional signature syntax this section describes the optional to implement manifest and signatureproperties elements and describes the handling of xml processing instructions and comments with respect to the elements manifest and signatureproperties this section specifies syntax and little behavior  it is left to the application these elements can appear anywhere the parents content model permits the signature content model only permits them within object  the manifest element identifier typehttpwwwworgxmldsigmanifest this can be used within a reference element to identify the referents type the manifest element provides a list of references the difference from the list in signedinfo is that it is application defined which if any of the digests are actually checked against the objects referenced and what to do if the object is inaccessible or the digest compare fails if a manifest is pointed to from signedinfo the digest over the manifest itself will be checked by the core signature validation behavior the digests within such a manifest are checked at the applications discretion if a manifest is referenced from another manifest even the overall digest of this two level deep manifest might not be checked schema definition element namemanifest typedsmanifesttype  complextype namemanifesttype  sequence    element refdsreference maxoccursunbounded    sequence    attribute nameid typeid useoptional  complextype  the signatureproperties element identifier typehttpwwwworgxmldsigsignatureproperties this can be used within a reference element to identify the referents type additional information items concerning the generation of the signatures can be placed in a signatureproperty element ie datetime stamp or the serial number of cryptographic hardware used in signature generation schema definition element namesignatureproperties typedssignaturepropertiestype  complextype namesignaturepropertiestype  sequence    element refdssignatureproperty maxoccursunbounded    sequence  attribute nameid typeid useoptional  complextypeelement namesignatureproperty typedssignaturepropertytype  complextype namesignaturepropertytype mixedtrue  choice maxoccursunbounded    any namespaceother processcontentslax       elements from unbounded namespaces   choice  attribute nametarget typeanyuri userequired    attribute nameid typeid useoptional  complextype  processing instructions in signature elements no xml processing instructions pis are used by this specification note that pis placed inside signedinfo by an application will be signed unless the canonicalizationmethod algorithm discards them this is true for any signed xml content all of the canonicalizationmethods identified within this specification retain pis when a pi is part of content that is signed eg within signedinfo or referenced xml documents any change to the pi will obviously result in a signature failure  comments in signature elements xml comments are not used by this specification note that unless canonicalizationmethod removes comments within signedinfo or any other referenced xml which xmlcn does they will be signed consequently if they are retained a change to the comment will cause a signature failure similarly the xml signature over any xml data will be sensitive to comment changes unless a commentignoring canonicalizationtransform method such as the canonical xml xmlcn is specified  algorithms this section identifies algorithms used with the xml digital signature specification entries contain the identifier to be used in signature elements a reference to the formal specification and definitions where applicable for the representation of keys and the results of cryptographic operations  algorithm identifiers and implementation requirements algorithms are identified by uris that appear as an attribute to the element that identifies the algorithms role digestmethod transform signaturemethod or canonicalizationmethod all algorithms used herein take parameters but in many cases the parameters are implicit for example a signaturemethod is implicitly given two parameters the keying info and the output of canonicalizationmethod explicit additional parameters to an algorithm appear as content elements within the algorithm role element such parameter elements have a descriptive element name which is frequently algorithm specific and must be in the xml signature namespace or an algorithm specific namespace this specification defines a set of algorithms their uris and requirements for implementation requirements are specified over implementation not over requirements for signature use furthermore the mechanism is extensible alternative algorithms may be used by signature applications digest required sha use is discouraged see sha warning httpwwwworgxmldsigsha sha httpwwwworgxmlencsha optional sha httpwwwworgxmldsigmoresha sha httpwwwworgxmldsigmoresha sha httpwwwworgxmlencsha encoding required base note httpwwwworgxmldsigbase mac required hmacsha use is discouraged see sha warning httpwwwworgxmldsighmacsha hmacsha httpwwwworgxmldsigmorehmacsha recommended hmacsha httpwwwworgxmldsigmorehmacsha hmacsha httpwwwworgxmldsigmorehmacsha optional hmacsha httpwwwworgxmldsigmorehmacsha signature required rsawithsha httpwwwworgxmldsigmorersasha section  rsa pkcs v ecdsawithsha httpwwwworgxmldsigmoreecdsasha section  ecdsa dsawithsha signature verification httpwwwworgxmldsigdsasha section  dsa recommended rsawithsha signature verification use for signature generation is discouraged see sha warning httpwwwworgxmldsigrsasha optional rsawithsha httpwwwworgxmldsigmorersasha section  rsa pkcs v rsawithsha httpwwwworgxmldsigmorersasha section  rsa pkcs v rsawithsha httpwwwworgxmldsigmorersasha ecdsawithsha use is discouraged see sha warning httpwwwworgxmldsigmoreecdsasha section  ecdsa ecdsawithsha httpwwwworgxmldsigmoreecdsasha section  ecdsa ecdsawithsha httpwwwworgxmldsigmoreecdsasha section  ecdsa ecdsawithsha httpwwwworgxmldsigmoreecdsasha section  ecdsa dsawithsha signature generation httpwwwworgxmldsigdsasha section  dsa dsawithsha httpwwwworgxmldsigdsasha section  dsa canonicalization required canonical xml  omit comments httpwwwworgtrrecxmlcn canonical xml  omit comments httpwwwworgxmlcn exclusive xml canonicalization  omit comments httpwwwworgxmlexccn recommended canonical xml  with comments httpwwwworgtrrecxmlcnwithcomments canonical xml  with comments httpwwwworgxmlcnwithcomments exclusive xml canonicalization  with comments httpwwwworgxmlexccnwithcomments transform required base note httpwwwworgxmldsigbase enveloped signature note httpwwwworgxmldsigenvelopedsignature recommended xpath httpwwwworgtrrecxpath xpath filter  httpwwwworgxmldsigfilter optional xslt httpwwwworgtrrecxslt note note that the same uri is used to identify base both in encoding context eg within the object element as well as in transform context when identifying a base transform note the enveloped signature transform removes the signature element from the calculation of the signature when the signature is within the content that it is being signed this may be implemented via the xpath specification specified in  enveloped signature transform it must have the same effect as that specified by the xpath transform when using transforms we recommend selecting the least expressive choice that still accomplishes the needs of the use case at hand use of xpath filter  is recommended over use of xpath filter use of xpath filter is recommended over use of xslt note implementation requirements for the xpath transform may be downgraded to optional in a future version of this specification  message digests this specification defines several possible digest algorithms for the digestmethod element including required algorithm sha use of sha is strongly recommended over sha because recent advances in cryptanalysis see eg shaanalysis have cast doubt on the longterm collision resistance of sha therefore sha support is required in this specification only for backwardscompatibility reasons digest algorithms that are known not to be collision resistant should not be used in digestmethod elements for example the md message digest algorithm should not be used as specific collisions have been demonstrated for that algorithm  sha identifier httpwwwworgxmldsigsha note use of sha is strongly recommended over sha because recent advances in cryptanalysis see eg shaanalysis shacollisions  have cast doubt on the longterm collision resistance of sha the sha algorithm fips takes no explicit parameters an example of an sha digestalg element is example  digestmethod algorithmhttpwwwworgxmldsigsha a sha digest is a bit string the content of the digestvalue element shall be the base encoding of this bit string viewed as a octet octet stream for example the digestvalue element for the message digest example  ae a bae cc cddd from appendix a of the sha standard would be example  digestvalueqzknkcggwqpivxefdcbjzqjdigestvalue  sha identifier httpwwwworgxmldsigmoresha the sha algorithm fips takes no explicit parameters a sha digest is a bit string the content of the digestvalue element shall be the base encoding of this bit string viewed as a octet octet stream  sha identifier httpwwwworgxmlencsha the sha algorithm fips takes no explicit parameters a sha digest is a bit string the content of the digestvalue element shall be the base encoding of this bit string viewed as a octet octet stream  sha identifier httpwwwworgxmldsigmoresha the sha algorithm fips takes no explicit parameters a sha digest is a bit string the content of the digestvalue element shall be the base encoding of this bit string viewed as a octet octet stream  sha identifier httpwwwworgxmlencsha the sha algorithm fips takes no explicit parameters a sha digest is a bit string the content of the digestvalue element shall be the base encoding of this bit string viewed as a octet octet stream  message authentication codes mac algorithms take two implicit parameters their keying material determined from keyinfo and the octet stream output by canonicalizationmethod macs and signature algorithms are syntactically identical but a mac implies a shared secret key  hmac identifier httpwwwworgxmldsighmacsha httpwwwworgxmldsigmorehmacsha httpwwwworgxmldsigmorehmacsha httpwwwworgxmldsigmorehmacsha httpwwwworgxmldsigmorehmacsha the hmac algorithm rfc hmac takes the output truncation length in bits as a parameter this specification requires that the truncation length be a multiple of  ie fall on a byte boundary because base encoding operates on full bytes if the truncation parameter is not specified then all the bits of the hash are output any signature with a truncation length that is less than half the output length of the underlying hash algorithm must be deemed invalid an example of an hmac signaturemethod element example  signaturemethod algorithmhttpwwwworgxmldsighmacsha  hmacoutputlengthhmacoutputlengthsignaturemethod the output of the hmac algorithm is ultimately the output possibly truncated of the chosen digest algorithm this value shall be base encoded in the same straightforward fashion as the output of the digest algorithms example the signaturevalue element for the hmacsha digest example  a bbc fef bfcd from the test vectors in hmac would be example  signaturevaluekpryejyuxwtifyvnqsignaturevalue schema definition simpletype namehmacoutputlengthtype  restriction baseinteger simpletype  signature algorithms signature algorithms take two implicit parameters their keying material determined from keyinfo and the octet stream output by canonicalizationmethod signature and mac algorithms are syntactically identical but a signature implies public key cryptography  dsa identifier httpwwwworgxmldsigdsasha httpwwwworgxmldsigdsasha the dsa family of algorithms is defined in fips  fips fips  defines dsa in terms of two security parameters l and n where l  p n  q p is the prime modulus q is a prime divisor of p fips  defines four valid pairs of l n they are       and   the pair   corresponds to the algorithm dsawithsha which is identified in this specification by the uri httpwwwworgxmldsigdsasha the pairs   and   correspond to the algorithm dsawithsha which is identified in this specification by the uri httpwwwworgxmldsigdsasha this specification does not use the   instance of dsa which corresponds to dsawithsha dsa takes no explicit parameters an example of a dsa signaturemethod element is example  signaturemethod algorithmhttpwwwworgxmldsigdsasha the output of the dsa algorithm consists of a pair of integers usually referred by the pair r s the signature value consists of the base encoding of the concatenation of two octetstreams that respectively result from the octetencoding of the values r and s in that order integer to octetstream conversion must be done according to the iosp operation defined in the rfc  pkcs specification with a l parameter equal to  for example the signaturevalue element for a dsa signature r s with values specified in hexadecimal example  r  bacab c bf babc bcs  ef fdf fd bbad bdcdc from the example in appendix  of the dss standard would be example  signaturevalueiwatmqqqygbvswqfjkzqcbbjrfhbfjfjjtfvtlotttzyyasignaturevalue security considerations regarding dsa key sizes per fips  fips the dsa security parameter l is defined to be   or  bits and the corresponding dsa q value is defined to be   and  bits respectively nist provides guidance on the use of keys of various strength for various time frames in special publication sp  part  sp implementers should consult this publication for guidance on acceptable key lengths for applications however bit public keys are the minimum recommended key length and bit keys are recommended for securing information beyond  sp part  states that dsa bit key sizes should not be used except to verify and honor signatures created using older legacy systems since xml signature  requires implementations to support dsabased digital signatures this xml signature  revision allows verifiers to verify dsa signatures for dsa keys of  bits in order to validate existing signatures xml signature  implementations may but are not required to support dsabased signature generation given the short key size and sp guidelines dsa with bit prime moduli should not be used to create signatures dsa with bit prime moduli may be used to verify older legacy signatures with an understanding of the associated risks important older signatures should be resigned with stronger signatures  rsa pkcs v identifier httpwwwworgxmldsigrsasha httpwwwworgxmldsigmorersasha httpwwwworgxmldsigmorersasha httpwwwworgxmldsigmorersasha httpwwwworgxmldsigmorersasha the expression rsa algorithm as used in this specification refers to the rsassapkcsv_ algorithm described in rfc  pkcs the rsa algorithm takes no explicit parameters an example of an rsa signaturemethod element is example  signaturemethod algorithmhttpwwwworgxmldsigrsasha the signaturevalue content for an rsa signature is the base rfc encoding of the octet string computed as per rfc  pkcs section  signature generation for the rsassapkcsv_ signature scheme computation of the signature will require concatenation of the hash value and a constant string determined by rfc  signature computation and verification does not require implementation of an asn parser the resulting base rfc string is the value of the child text node of the signaturevalue element eg example  signaturevalue  iwijxqjurcxbyoceiqxjwokgdptlwottgyteinfzfyrvpbmjearmkzsrvwrwopxwsignaturevalue note  a line break has been added to preserve printed page width security considerations regarding rsa key sizes nist provides guidance on the use of keys of various strength for various time frames in special publication sp  part  sp implementers should consult this publication for guidance on acceptable key lengths for applications however bit public keys are the minimum recommended key length and bit keys are recommended for securing information beyond  all conforming implementations of xml signature  must support rsa signature generation and verification with public keys at least  bits in length rsa public keys of  bits or less should not be used to create new signatures but may be used to verify signatures created by older legacy systems xml signature  implementations must use at least bit keys for creating signatures and should use at least bit keys for signatures that will be verified beyond   ecdsa identifiers httpwwwworgxmldsigmoreecdsasha httpwwwworgxmldsigmoreecdsasha httpwwwworgxmldsigmoreecdsasha httpwwwworgxmldsigmoreecdsasha httpwwwworgxmldsigmoreecdsasha the ecdsa algorithm fips takes no explicit parameters an example of a ecdsa signaturemethod element is example  signaturemethod algorithmhttpwwwworgxmldsigmoreecdsasha  the output of the ecdsa algorithm consists of a pair of integers usually referred by the pair r s the signature value consists of the base encoding of the concatenation of two octetstreams that respectively result from the octetencoding of the values r and s in that order integer to octetstream conversion must be done according to the iosp operation defined in the rfc  pkcs specification with the l parameter equal to the size of the base point order of the curve in bytes eg  for the p curve and  for the p curve this specification requires implementations to implement an algorithm that leads to the same results as ecdsa over the p prime curve specified in section d of fips  fips and using the sha hash algorithm referred to as the ecdsawithsha signature algorithm eccalgs it is further recommended that implementations also implement algorithms that lead to the same results as ecdsa over the p and p prime curves these curves are defined in sections d and d of fips  respectively eccalgs note as described in ietf rfc  the elliptic curve dsa ecdsa and kti signature methods are mathematically and functionally equivalent for fields of characteristic greater than three see ietf rfc  section  eccalgs  canonicalization algorithms if canonicalization is performed over octets the canonicalization algorithms take two implicit parameters the content and its charset the charset is derived according to the rules of the transport protocols and media types eg xmlmediatypes defines the media types for xml this information is necessary to correctly sign and verify documents and often requires careful server side configuration various canonicalization algorithms require conversion to utf the algorithms below understand at least utf and utf as input encodings we recommend that externally specified algorithms do the same knowledge of other encodings is optional various canonicalization algorithms transcode from a nonunicode encoding to unicode the output of these algorithms will be in nfc nfc this is because the xml processor used to prepare the xpath data model input is required by the data model to use normalization form c when converting an xml document to the ucs character domain from any encoding that is not ucsbased we recommend that externally specified canonicalization algorithms do the same note there can be ambiguities in converting existing charsets to unicode for an example see the xml japanese profile note xmljapanese this specification requires implementation of canonical xml  xmlcn canonical xml  xmlcn and exclusive xml canonicalization xmlexccn we recommend that applications that generate signatures choose canonical xml  xmlcn when inclusive canonicalization is desired note canonical xml  xmlcn and canonical xml  xmlcn specify a standard serialization of xml that when applied to a subdocument includes the subdocuments ancestor context including all of the namespace declarations and some attributes in the xml namespace however some applications require a method which to the extent practical excludes unused ancestor context from a canonicalized subdocument the exclusive xml canonicalization recommendation xmlexccn may be used to address requirements resulting from scenarios where a subdocument is moved between contexts  canonical xml  identifier for required canonical xml  omits comments httpwwwworgtrrecxmlcn identifier for canonical xml  with comments httpwwwworgtrrecxmlcnwithcomments input octetstream nodeset output octetstream an example of an xml canonicalization element is example  canonicalizationmethod algorithmhttpwwwworgtrrecxmlcn the normative specification of canonical xml is xmlcn the algorithm is capable of taking as input either an octet stream or an xpath nodeset or sufficiently functional alternative the algorithm produces an octet stream as output canonical xml is easily parameterized via an additional uri to omit or retain comments  canonical xml  identifier for required canonical xml  omits comments httpwwwworgxmlcn identifier for canonical xml  with comments httpwwwworgxmlcnwithcomments input octetstream nodeset output octetstream the normative specification of canonical xml  is xmlcn the algorithm is capable of taking as input either an octet stream or an xpath nodeset or sufficiently functional alternative the algorithm produces an octet stream as output canonical xml  is easily parameterized via an additional uri to omit or retain comments  exclusive xml canonicalization  identifier for required exclusive xml canonicalization  omits comments httpwwwworgxmlexccn identifier for exclusive xml canonicalization  with comments httpwwwworgxmlexccnwithcomments input octetstream nodeset output octetstream the normative specification of exclusive xml canonicalization  is xmlexccn  transform algorithms a transform algorithm has a single implicit parameter an octet stream from the reference or the output of an earlier transform for implementation requirements please see algorithm identifiers and implementation requirements application developers are strongly encouraged to support all transforms that are listed as recommended unless the application environment has resource constraints that would make such support impractical compliance with this recommendation will maximize application interoperability and libraries should be available to enable support of these transforms in applications without extensive development  canonicalization any canonicalization algorithm that can be used for canonicalizationmethod such as those in canonicalization algorithms section  can be used as a transform  base identifiers httpwwwworgxmldsigbase input octetstream nodeset output octetstream the normative specification for base decoding transforms is rfc the base transform element has no content the input is decoded by the algorithms this transform is useful if an application needs to sign the raw data associated with the encoded content of an element this transform accepts either an octetstream or a nodeset as input if an octetstring is given as input then this octetstream is processed directly if an xpath nodeset or sufficiently functional alternative is given as input then it is converted to an octet stream by performing operations logically equivalent to  applying an xpath transform with expression selftext then  sorting the nodeset by document order then concatenating the stringvalue of each of the nodes into one long string thus if an xml element is identified by a shortname xpointer in the reference uri and its content consists solely of base encoded character data then this transform automatically strips away the start and end tags of the identified element and any of its descendant elements as well as any descendant comments and processing instructions the output of this transform is an octet stream  xpath filtering identifier httpwwwworgtrrecxpath input octetstream nodeset output nodeset the normative specification for xpath expression evaluation is xpath the xpath expression to be evaluated appears as the character content of a transform parameter child element named xpath the input required by this transform is an xpath nodeset or an octetstream note that if the actual input is an xpath nodeset resulting from a null uri or shortname xpointer dereference then comment nodes will have been omitted if the actual input is an octet stream then the application must convert the octet stream to an xpath nodeset suitable for use by canonical xml with comments a subsequent application of the required canonical xml algorithm would strip away these comments in other words the input nodeset should be equivalent to the one that would be created by the following process initialize an xpath evaluation context by setting the initial node equal to the input xml documents root node and set the context position and size to  evaluate the xpath expression   @  namespace the evaluation of this expression includes all of the documents nodes including comments in the nodeset representing the octet stream the transform output is always an xpath nodeset the xpath expression appearing in the xpath parameter is evaluated once for each node in the input nodeset the result is converted to a boolean if the boolean is true then the node is included in the output nodeset if the boolean is false then the node is omitted from the output nodeset note even if the input nodeset has had comments removed the comment nodes still exist in the underlying parse tree and can separate text nodes for example the markup ehello  comment worlde contains two text nodes therefore the expression selftextstringhello world would fail should this problem arise in the application it can be solved by either canonicalizing the document before the xpath transform to physically remove the comments or by matching the node based on the parent elements string value eg by using the expression selftextstringparentehello world the primary purpose of this transform is to ensure that only specifically defined changes to the input xml document are permitted after the signature is affixed this is done by omitting precisely those nodes that are allowed to change once the signature is affixed and including all other input nodes in the output it is the responsibility of the xpath expression author to include all nodes whose change could affect the interpretation of the transform output in the application context note that the xmlsignature xpath filter  recommendation xmldsigxpathfilter may be used for this purpose that recommendation defines an xpath transform that permits the easy specification of subtree selection and omission that can be efficiently implemented an important scenario would be a document requiring two enveloped signatures each signature must omit itself from its own digest calculations but it is also necessary to exclude the second signature element from the digest calculations of the first signature so that adding the second signature does not break the first signature the xpath transform establishes the following evaluation context for each node of the input nodeset a context node equal to a node of the input nodeset a context position initialized to  a context size initialized to  a library of functions equal to the function set defined in xpath augmented with a function named here to be treated as if part of the library and not namespace prefixed a set of variable bindings no means for initializing these is defined thus the set of variable bindings used when evaluating the xpath expression is empty and use of a variable reference in the xpath expression results in an error the set of namespace declarations in scope for the xpath expression as a result of the context node setting the xpath expressions appearing in this transform will be quite similar to those used in used in xslt except that the size and position are always  to reflect the fact that the transform is automatically visiting every node in xslt one recursively calls the command applytemplates to visit the nodes of the input tree the function here is defined as follows function nodeset here the here function returns a nodeset containing the attribute or processing instruction node or the parent element of the text node that directly bears the xpath expression this expression results in an error if the containing xpath expression does not appear in the same xml document against which the xpath expression is being evaluated as an example consider creating an enveloped signature a signature element that is a descendant of an element being signed although the signed content should not be changed after signing the elements within the signature element are changing eg the digest value must be put inside the digestvalue and the signaturevalue must be subsequently calculated one way to prevent these changes from invalidating the digest value in digestvalue is to add an xpath transform that omits all signature elements and their descendants for example example  document       signature xmlnshttpwwwworgxmldsig    signedinfo            reference uri        transforms          transform algorithmhttpwwwworgtrrecxpath            xpath xmlnsdsigdsig              notancestororselfdsigsignature            xpath          transform        transforms        digestmethod algorithmhttpwwwworgxmldsigsha        digestvaluedigestvalue      reference    signedinfo    signaturevaluesignaturevalue  signature  document due to the null reference uri in this example the xpath transform input nodeset contains all nodes in the entire parse tree starting at the root node except the comment nodes for each node in this nodeset the node is included in the output nodeset except if the node or one of its ancestors has a tag of signature that is in the namespace given by the replacement text for the entity dsig a more elegant solution uses the here function to omit only the signature containing the xpath transform thus allowing enveloped signatures to sign other signatures in the example above use the xpath element example  xpath xmlnsdsigdsigcountancestororselfdsigsignature hereancestordsigsignature countancestororselfdsigsignaturexpath since the xpath equality operator converts node sets to string values before comparison we must instead use the xpath union operator  for each node of the document the predicate expression is true if and only if the nodeset containing the node and its signature element ancestors does not include the enveloped signature element containing the xpath expression the union does not produce a larger set if the enveloped signature element is in the nodeset given by ancestororselfsignature  enveloped signature transform identifier httpwwwworgxmldsigenvelopedsignature input nodeset output nodeset an enveloped signature transform t removes the whole signature element containing t from the digest calculation of the reference element containing t the entire string of characters used by an xml processor to match the signature with the xml production element is removed the output of the transform is equivalent to the output that would result from replacing t with an xpath transform containing the following xpath parameter element example  xpath xmlnsdsigdsigcountancestororselfdsigsignature hereancestordsigsignature countancestororselfdsigsignaturexpath the input and output requirements of this transform are identical to those of the xpath transform but may only be applied to a nodeset from its parent xml document note that it is not necessary to use an xpath expression evaluator to create this transform however this transform must produce output in exactly the same manner as the xpath transform parameterized by the xpath expression above  xslt transform identifier httpwwwworgtrrecxslt input octetstream output octetstream the normative specification for xsl transformations is xslt specification of a namespacequalified stylesheet element which must be the sole child of the transform element indicates that the specified style sheet should be used whether this instantiates inline processing of local xslt declarations within the resource is determined by the xslt processing model the ordered application of multiple stylesheet may require multiple transforms no special provision is made for the identification of a remote stylesheet at a given uri because it can be communicated via an xslinclude or xslimport within the stylesheet child of the transform this transform requires an octet stream as input the output of this transform is an octet stream the processing rules for the xsl style sheet xsl or transform element are stated in the xslt specification xslt we recommend that xslt transform authors use an output method of xml for xml and html as xslt implementations do not produce consistent serializations of their output we further recommend inserting a transform after the xslt transform to canonicalize the output these steps will help to ensure interoperability of the resulting signatures among applications that support the xslt transform note that if the output is actually html then the result of these steps is logically equivalent xhtml  xml canonicalization and syntax constraint considerations digital signatures only work if the verification calculations are performed on exactly the same bits as the signing calculations if the surface representation of the signed data can change between signing and verification then some way to standardize the changeable aspect must be used before signing and verification for example even for simple ascii text there are at least three widely used line ending sequences if it is possible for signed text to be modified from one line ending convention to another between the time of signing and signature verification then the line endings need to be canonicalized to a standard form before signing and verification or the signatures will break xml is subject to surface representation changes and to processing which discards some surface information for this reason xml digital signatures have a provision for indicating canonicalization methods in the signature so that a verifier can use the same canonicalization as the signer throughout this specification we distinguish between the canonicalization of a signature element and other signed xml data objects it is possible for an isolated xml document to be treated as if it were binary data so that no changes can occur in that case the digest of the document will not change and it need not be canonicalized if it is signed and verified as such however xml that is read and processed using standard xml parsing and processing techniques is frequently changed such that some of its surface representation information is lost or modified in particular this will occur in many cases for the signature and enclosed signedinfo elements since they and possibly an encompassing xml document will be processed as xml similarly these considerations apply to manifest object and signatureproperties elements if those elements have been digested their digestvalue is to be checked and they are being processed as xml the kinds of changes in xml that may need to be canonicalized can be divided into four categories there are those related to the basic xml as described in  below there are those related to domlevel sax or similar processing as described in  below third there is the possibility of coded character set conversion such as between utf and utf both of which all xml compliant processors are required to support which is described in the paragraph immediately below and fourth there are changes that related to namespace declaration and xml namespace attribute context as described in  below any canonicalization algorithm should yield output in a specific fixed coded character set all canonicalization algorithms identified in this document use utf without a byte order mark bom and do not provide character normalization we recommend that signature applications create xml content signature elements and their descendantscontent in normalization form c nfc and check that any xml being consumed is in that form as well if not signatures may consequently fail to validate additionally none of these algorithms provide data type normalization applications that normalize data types in varying formats eg true false or  may not be able to validate each others signatures  xml  syntax constraints and canonicalization xml  xml defines an interface where a conformant application reading xml is given certain information from that xml and not other information in particular line endings are normalized to the single character xa by dropping xd characters if they are immediately followed by a xa and replacing them with xa in all other cases missing attributes declared to have default values are provided to the application as if present with the default value character references are replaced with the corresponding character entity references are replaced with the corresponding declared entity attribute values are normalized by replacing character and entity references as above replacing occurrences of x xa and xd with x space except that the sequence xdxa is replaced by a single space and if the attribute is not declared to be cdata stripping all leading and trailing spaces and replacing all interior runs of spaces with a single space note that items   and  depend on the presence of a schema dtd or similar declarations the signature element type is laxly schema valid xmlschemaxmlschema consequently external xml or even xml within the same document as the signature may be only wellformed or from another namespace where permitted by the signature schema the noted items may not be present thus a signature with such content will only be verifiable by other signature applications if the following syntax constraints are observed when generating any signed material including the signedinfo element attributes having default values be explicitly present all entity references except amp lt gt apos quot and other character entities not representable in the encoding chosen be expanded attribute value white space be normalized  domsax processing and canonicalization in addition to the canonicalization and syntax constraints discussed above many xml applications use the document object model domlevel or the simple api for xml sax dom maps xml into a tree structure of nodes and typically assumes it will be used on an entire document with subsequent processing being done on this tree sax converts xml into a series of events such as a start tag content etc in either case many surface characteristics such as the ordering of attributes and insignificant white space within startend tags is lost in addition namespace declarations are mapped over the nodes to which they apply losing the namespace prefixes in the source text and in most cases losing where namespace declarations appeared in the original instance if an xml signature is to be produced or verified on a system using the dom or sax processing a canonical method is needed to serialize the relevant part of a dom tree or sequence of sax events xml canonicalization specifications such as xmlcn are based only on information which is preserved by dom and sax for an xml signature to be verifiable by an implementation using dom or sax not only must the xml  syntax constraints given in the section  xml  syntax constraints and canonicalization be followed but an appropriate xml canonicalization must be specified so that the verifier can reserialize domsax mediated input into the same octet stream that was signed  namespace context and portable signatures in xpath and consequently the canonical xml data model an element has namespace nodes that correspond to those declarations within the element and its ancestors note an element e has namespace nodes that represent its namespace declarations as well as any namespace declarations made by its ancestors that have not been overridden in es declarations the default namespace if it is nonempty and the declaration of the prefix xml xmlcn when serializing a signature element or signed xml data thats the child of other elements using these data models that signature element and its children may have inscope namespaces inherited from its ancestral context in addition the canonical xml and canonical xml with comments algorithms define special treatment for attributes in the xml namespace which can cause them to be part of the canonicalized xml even if they were outside of the document subset simple inheritable attributes ie attributes that have a value that requires at most a simple redeclaration such as xmllang and xmlspace are inherited from nearest ancestor in which they are declared to the apex node of canonicalized xml unless they are already declared at that node this may frustrate the intent of the signer to create a signature in one context which remains valid in another for example given a signature which is a child of b and a grandchild of a example  a xmlnsnhttpfooexample  b xmlnsnhttpbarexample    signature xmlnshttpwwwworgxmldsig            reference urisignme     signature    c idsignme xmlnshttpbazexample   ba when either the element b or the signed element c is moved into a soappart envelope for transport example  soapenvelope xmlnssoaphttpschemasxmlsoaporgsoapenvelope    soapbody    b xmlnsnhttpbarexample      signature xmlnshttpwwwworgxmldsig              signature      c idsignme xmlnshttpbazexample     b  soapbodysoapenvelope the canonical form of the signature in this context will contain new namespace declarations from the soapenvelope context invalidating the signature also the canonical form will lack namespace declarations it may have originally had from element as context also invalidating the signature to avoid these problems the application may rely upon the enveloping application to properly divorce its body the signature payload from the context the envelope before the signature is validated or use a canonicalization method that repelsexcludes instead of attracts ancestor context xmlcn purposefully attracts such context  security considerations the xml signature specification provides a very flexible digital signature mechanism implementers must give consideration to their application threat models and to the following factors for additional security considerations in implementation and deployment of this specification see xmldsigbestpractices  transforms a requirement of this specification is to permit signatures to apply to a part or totality of a xml document see xmldsigrequirements section  the transforms mechanism meets this requirement by permitting one to sign data derived from processing the content of the identified resource for instance applications that wish to sign a form but permit users to enter limited field data without invalidating a previous signature on the form might use xpath to exclude those portions the user needs to change transforms may be arbitrarily specified and may include encoding transforms canonicalization instructions or even xslt transformations three cautions are raised with respect to this feature in the following sections note core validation behavior does not confirm that the signed data was obtained by applying each step of the indicated transforms though it does check that the digest of the resulting content matches that specified in the signature for example some applications may be satisfied with verifying an xml signature over a cached copy of already transformed data other applications might require that content be freshly dereferenced and transformed  only what is signed is secure first obviously signatures over a transformed document do not secure any information discarded by transforms only what is signed is secure note that the use of canonical xml xmlcn ensures that all internal entities and xml namespaces are expanded within the content being signed all entities are replaced with their definitions and the canonical form explicitly represents the namespace that an element would otherwise inherit applications that do not canonicalize xml content especially the signedinfo element should not use internal entities and should represent the namespace explicitly within the content being signed since they can not rely upon canonicalization to do this for them also users concerned with the integrity of the element type definitions associated with the xml instance being signed may wish to sign those definitions as well ie the schema dtd or natural language description associated with the namespaceidentifier second an envelope containing signed information is not secured by the signature for instance when an encrypted envelope contains a signature the signature does not protect the authenticity or integrity of unsigned envelope headers nor its ciphertext form it only secures the plaintext actually signed  only what is seen should be signed additionally the signature secures any information introduced by the transform only what is seen that which is represented to the user via visual auditory or other media should be signed if signing is intended to convey the judgment or consent of a user an automated mechanism or person then it is normally necessary to secure as exactly as practical the information that was presented to that user note that this can be accomplished by literally signing what was presented such as the screen images shown a user however this may result in data which is difficult for subsequent software to manipulate instead one can sign the data along with whatever filters style sheets client profile or other information that affects its presentation  see what is signed just as a user should only sign what he or she sees persons and automated mechanism that trust the validity of a transformed document on the basis of a valid signature should operate over the data that was transformed including canonicalization and signed not the original pretransformed data this recommendation applies to transforms specified within the signature as well as those included as part of the document itself for instance if an xml document includes an embedded style sheet xslt it is the transformed document that should be represented to the user and signed to meet this recommendation where a document references an external style sheet the content of that external resource should also be signed as via a signature reference otherwise the content of that external content might change which alters the resulting document without invalidating the signature some applications might operate over the original or intermediary data but should be extremely careful about potential weaknesses introduced between the original and transformed data this is a trust decision about the character and meaning of the transforms that an application needs to make with caution consider a canonicalization algorithm that normalizes character case lower to upper or character composition e and accent to accentede an adversary could introduce changes that are normalized and consequently inconsequential to signature validity but material to a dom processor for instance by changing the case of a character one might influence the result of an xpath selection a serious risk is introduced if that change is normalized for signature validation but the processor operates over the original data and returns a different result than intended as a result all documents operated upon and generated by signature applications must be in nfc otherwise intermediate processors might unintentionally break the signature encoding normalizations should not be done as part of a signature transform or to state it another way if normalization does occur the application should always see operate over the normalized form  check the security model this specification uses public key signatures and keyed hash authentication codes these have substantially different security models furthermore it permits user specified algorithms which may have other models with public key signatures any number of parties can hold the public key and verify signatures while only the parties with the private key can create signatures the number of holders of the private key should be minimized and preferably be one confidence by verifiers in the public key they are using and its binding to the entity or capabilities represented by the corresponding private key is an important issue usually addressed by certificate or online authority systems keyed hash authentication codes based on secret keys are typically much more efficient in terms of the computational effort required but have the characteristic that all verifiers need to have possession of the same key as the signer thus any verifier can forge signatures this specification permits user provided signature algorithms and keying information designators such user provided algorithms may have different security models for example methods involving biometrics usually depend on a physical characteristic of the authorized user that can not be changed the way public or secret keys can be and may have other security model differences  algorithms key lengths certificates etc the strength of a particular signature depends on all links in the security chain this includes the signature and digest algorithms used the strength of the key generation random and the size of the key the security of key and certificate authentication and distribution mechanisms certificate chain validation policy protection of cryptographic processing from hostile observation and tampering etc care must be exercised by applications in executing the various algorithms that may be specified in an xml signature and in the processing of any executable content that might be provided to such algorithms as parameters such as xslt transforms the algorithms specified in this document will usually be implemented via a trusted library but even there perverse parameters might cause unacceptable processing or memory demand even more care may be warranted with application defined algorithms the security of an overall system will also depend on the security and integrity of its operating procedures its personnel and on the administrative enforcement of those procedures all the factors listed in this section are important to the overall security of a system however most are beyond the scope of this specification  error messages implementations should not provide detailed error responses related to security algorithm processing error messages should be limited to a generic error message to avoid providing information to a potential attacker related to the specifics of the algorithm implementation for example if an error occurs in signature verification processing the error response should be a generic message providing no specifics on the details of the processing error  schema  xsd schema xml signature core schema instance xmldsigcoreschemaxsd valid xml schema instance based on xmlschemaxmlschema xml signature  schema instance xmldsigschemaxsd this schema document defines the additional elements defined in this version of the xml signature specification xml signature  schema driver xmldsigschemaxsd this schema instance binds together the xml signature core schema instance and the xml signature  schema instance  rng schema this section is nonnormative nonnormative relax ng schema relaxngschema information is available in a separate document xmlsecrelaxng  definitions authentication code protected checksum a value generated from the application of a shared key to a message via a cryptographic algorithm such that it has the properties of message authentication and integrity but not signer authentication equivalent to protected checksum a checksum that is computed for a data object by means that protect against active attacks that would attempt to change the checksum to make it match changes made to the data object rfc authentication message the property given an authentication codeprotected checksum that tampering with both the data and checksum so as to introduce changes while seemingly preserving integrity are still detected a signature should identify what is signed making it impracticable to falsify or alter either the signed matter or the signature without detection abadsigguidelines authentication signer the property that the identity of the signer is as claimed a signature should indicate who signed a document message or record and should be difficult for another person to produce without authorization abadsigguidelines note signer authentication is an application decision eg does the signing key actually correspond to a specific identity that is supported by but out of scope of this specification checksum a value that a is computed by a function that is dependent on the contents of a data object and b is stored or transmitted together with the object for the purpose of detecting changes in the data rfc core the syntax and processing defined by this specification including core validation we use this term to distinguish other markup processing and applications semantics from our own data object contentdocument the actual binaryoctet data being operated on transformed digested or signed by an application  frequently an http entity http note that the proper noun object designates a specific xml element occasionally we refer to a data object as a document or as a resources content the term element content is used to describe the data between xml start and end tags xml the term xml document is used to describe data objects which conform to the xml specification xml integrity the property that data has not been changed destroyed or lost in an unauthorized or accidental manner rfc a simple checksum can provide integrity from incidental changes in the data message authentication is similar but also protects against an active attack to alter the data whereby a change in the checksum is introduced so as to match the change in the data object an xml signature element wherein arbitrary noncore data may be placed an object element is merely one type of digital data or document that can be signed via a reference resource a resource can be anything that has identity familiar examples include an electronic document an image a service eg todays weather report for los angeles and a collection of other resources the resource is the conceptual mapping to an entity or set of entities not necessarily the entity which corresponds to that mapping at any particular instance in time thus a resource can remain constant even when its contentthe entities to which it currently correspondschanges over time provided that the conceptual mapping is not changed in the process uri in order to avoid a collision of the term entity within the uri and xml specifications we use the term data object content or document to refer to the actual bitsoctets being operated upon signature formally speaking a value generated from the application of a private key to a message via a cryptographic algorithm such that it has the properties of integrity message authentication andor signer authentication however we sometimes use the term signature generically such that it encompasses authentication code values as well but we are careful to make the distinction when the property of signer authentication is relevant to the exposition a signature may be nonexclusively described as detached enveloping or enveloped signature application an application that implements the mandatory requiredmust portions of this specification these conformance requirements are over application behavior the structure of the signature element type and its children including signaturevalue and the specified algorithms signature detached the signature is over content external to the signature element and can be identified via a uri or transform consequently the signature is detached from the content it signs this definition typically applies to separate data objects but it also includes the instance where the signature and data object reside within the same xml document but are sibling elements signature enveloping the signature is over content found within an object element of the signature itself the object or its content is identified via a reference via a uri fragment identifier or transform signature enveloped the signature is over the xml content that contains the signature as an element the content provides the root xml document element obviously enveloped signatures must take care not to include their own value in the calculation of the signaturevalue transform the processing of a data from its source to its derived form typical transforms include xml canonicalization xpath and xslt validation core the core processing requirements of this specification requiring signature validation and signedinfo reference validation validation reference the hash value of the identified and transformed content specified by reference matches its specified digestvalue validation signature the signaturevalue matches the result of processing signedinfo with canonicalizationmethod and signaturemethod as specified in core validation section  validation trustapplication the application determines that the semantics associated with a signature are valid for example an application may validate the time stamps or the integrity of the signer key  though this behavior is external to this core specification a references dated references below are to the latest known or appropriate edition of the referenced work the referenced works may be subject to revision and conformant implementations may follow and are encouraged to investigate the appropriateness of following some or all more recent editions or replacements of the works cited it is in each case implementationdefined which editions are supported a normative references eccalgs d mcgrew k igoe m salter rfc  fundamental elliptic curve cryptography algorithms february  ietf informational rfc url httpwwwrfceditororgrfcrfctxt fips fips pub  secure hash standard us department of commercenational institute of standards and technology url httpcsrcnistgovpublicationsfipsfipsfips_finalpdf fips fips pub  digital signature standard dss june  us department of commercenational institute of standards and technology url httpcsrcnistgovpublicationsfipsfipsfips_pdf hmac h krawczyk m bellare r canetti hmac keyedhashing for message authentication february  ietf rfc  url httpwwwietforgrfcrfctxt http r fielding et al hypertext transfer protocol  http june  rfc  url httpwwwietforgrfcrfctxt ldapdn k zeilenga lightweight directory access protocol  string representation of distinguished names june  ietf rfc  url httpwwwietforgrfcrfctxt nfc m davis ken whistler tr unicode normalization forms  september  url httpwwwunicodeorgreportstr pgp j callas l donnerhacke h finney d shaw r thayer openpgp message format ietf rfc  november  url httpwwwietforgrfcrfctxt pkcs j jonsson and b kaliski publickey cryptography standards pkcs  rsa cryptography specifications version  rfc  informational february  url httpwwwietforgrfcrfctxt rfc n freed and n borenstein multipurpose internet mail extensions mime part one format of internet message bodies november  url httpwwwietforgrfcrfctxt rfc s bradner key words for use in rfcs to indicate requirement levels march  internet rfc  url httpwwwietforgrfcrfctxt rfc w polk r housley l bassham algorithmupdates and identifiers for the internet x public key infrastructure certificate and certificate revocation list crl profile april  internet rfc  url httpwwwietforgrfcrfctxt rfc l daigle d van gulik r iannella p faltstrom urn namespace definition mechanisms ietf rfc  october  url httpwwwietforgrfcrfctxt rfc j schaad b kaliski r housley additional algorithms and identifiers for rsa cryptography for use in the internet x public key infrastructure certificate and certificate revocation list crl profile june  ietf rfc  url httpwwwietforgrfcrfctxt rfc d cooper et al internet x public key infrastructure certificate and certificate revocation list crl profile  ietf rfc  may  url httpwwwietforgrfcrfctxt rfc s turner et al elliptic curve cryptography subject public key information ietf rfc  march  url httpwwwietforgrfcrfctxt rfc d eastlake rd additional xml security uniform resource identifiers rfc  april  url httptoolsietforghtmlrfc sp recommendation for key management  part  general revision  sp july  us department of commercenational institute of standards and technology url httpcsrcnistgovpublicationsnistpubssp_part_rev_generalpdf uri t bernerslee r fielding l masinter uniform resource identifiers uri generic syntax january  rfc  url httpwwwietforgrfcrfctxt urn r moats urn syntax ietf rfc  may  url httpwwwietforgrfcrfctxt urnoid m mealling a urn namespace of object identifiers  ietf rfc  february  url httpwwwietforgrfcrfctxt utf f yergeau utf a transformation format of iso  ietf rfc  november  url httpwwwietforgrfcrfctxt xv itut recommendation x version   information technology  open systems interconnection  the directory authentication framework isoiec  xmlcn john boyer canonical xml version   march  wc recommendation url httpwwwworgtrrecxmlcn xmlcn john boyer glenn marcy canonical xml version   may  wc recommendation url httpwwwworgtrrecxmlcn xmlexccn donald e eastlake rd joseph reagle john boyer exclusive xml canonicalization version   july  wc recommendation url httpwwwworgtrrecxmlexccn xmlmediatypes mit yalnalp anish karmarkar describing media content of binary data in xml  may  wc note url httpwwwworgtrnotexmlmediatypes xmlnames richard tobin et al namespaces in xml  third edition  december  wc recommendation url httpwwwworgtrrecxmlnames xml c m sperbergmcqueen et al extensible markup language xml  fifth edition  november  wc recommendation url httpwwwworgtrrecxml xmldsigxpathfilter merlin hughes john boyer joseph reagle xmlsignature xpath filter   november  wc recommendation url httpwwwworgtrrecxmldsigfilter xmlenccore j reagle d eastlake f hirsch t roessler xml encryption syntax and processing version   april  wc recommendation url httpwwwworgtrrecxmlenccore xmlschema henry s thompson et al xml schema part  structures second edition  october  wc recommendation url httpwwwworgtrrecxmlschema xmlschema paul v biron ashok malhotra xml schema part  datatypes second edition  october  wc recommendation url httpwwwworgtrrecxmlschema xpath james clark steven derose xml path language xpath version   november  wc recommendation url httpwwwworgtrrecxpath xptrelement norman walsh et al xpointer element scheme  march  wc recommendation url httpwwwworgtrrecxptrelement xptrframework paul grosso et al xpointer framework  march  wc recommendation url httpwwwworgtrrecxptrframework xsl jeremy richman et al extensible stylesheet language xsl version   october  wc recommendation url httpwwwworgtrrecxsl xslt james clark xsl transformations xslt version   november  wc recommendation url httpwwwworgtrrecxslt a informative references abadsigguidelines digital signature guidelines  august  information security committee american bar association url httpwwwsigneleccomcontentdownloaddigital_signature_guidelinespdf cve common vulnerabilities and exposures list cve url httpcvemitreorgcgibincvenamecginamecve domlevel vidur apparao et al document object model dom level   october  wc recommendation url httpwwwworgtrrecdomlevel ieee ieee  standard specifications for public key cryptography august  url httpgrouperieeeorggroups random d eastlake s crocker j schiller randomness recommendations for security ietf rfc  june  url httpwwwietforgrfcrfctxt rdfprimer frank manola eric miller rdf primer  february  wc recommendation url httpwwwworgtrrecrdfprimer relaxngschema information technology  document schema definition language dsdl  part  regulargrammarbased validation  relax ng isoiec  url httpstandardsisoorgittfpubliclyavailablestandardsc_iso_iec__ezip rfc s blakewilson g karlinger t kobayashi y wang using the elliptic curve signature algorithm ecdsa for xml digital signatures rfc  april  rfc url httpwwwietforgrfcrfctxt rfc r shirey internet security glossary version  ietf rfc  august  url httpwwwietforgrfcrfctxt sax d megginson et al sax the simple api for xml may  url httpwwwmegginsoncomdownloadssax shaanalysis mcdonald c hawkes p and j pieprzyk sha collisions now   eurocrypt  rump session url httpeurocryptrumpcryptoaafacaddfaedpdf shacollisions x wang yl yin h yu finding collisions in the full sha in shoup v editor advances in cryptology  crypto  th annual international cryptology conference santa barbara california usa august   proceedings volume  of lncs pages  springer  url httppeoplecsailmiteduyiqunshaattackproceedingversionpdf also published in httpwwwspringerlinkcomcontentvljjxhcuxm soappart noah mendelsohn et al soap version  part  messaging framework second edition  april  wc recommendation url httpwwwworgtrrecsoappart utf p hoffman  f yergeau utf an encoding of iso  ietf rfc  february  url httpwwwietforgrfcrfctxt xhtml steven pemberton xhtml  the extensible hypertext markup language second edition  august  wc recommendation url httpwwwworgtrrecxhtml xmljapanese m murata xml japanese profile nd edition march  wc member submission url httpwwwworgsubmissionsubmjapanesexml xmldsigbestpractices pratik datta frederick hirsch xml signature best practices  april  wc working group note url httpwwwworgtrnotexmldsigbestpractices xmldsigcore joseph reagle et al xml signature syntax and processing second edition  june  wc recommendation url httpwwwworgtrrecxmldsigcore xmldsigcorechgs frederick hirsch functional explanation of changes in xml signature   april  wc working group note url httpwwwworgtrnotexmldsigcoreexplain xmldsigrequirements joseph reagle jr xmlsignature requirements  october  wc working draft url httpwwwworgtrwdxmldsigrequirements xmlsecrelaxng makoto murata frederick hirsch xml security relax ng schemas  april  wc working group note url httpwwwworgtrnotexmlsecrngschema xmlsecreqs frederick hirsch thomas roessler xml security  requirements and design considerations  april  wc working group note url httpwwwworgtrnotexmlsecreqs xptrxmlns jonathan marsh et al xpointer xmlns scheme  march  wc recommendation url httpwwwworgtrrecxptrxmlns xptrxpointer ron daniel jr eve maler steven derose xpointer xpointer scheme  december  wc working draft url httpwwwworgtrwdxptrxpointer xptrxpointercr ron daniel jr eve maler steven derose xpointer xpointer scheme september  wc candidate recommendation url httpwwwworgtrcrxptr