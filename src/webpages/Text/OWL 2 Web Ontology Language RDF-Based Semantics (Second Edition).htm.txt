owl  web ontology language rdfbased semantics second edition owl  web ontology language rdfbased semantics second edition wc recommendation  december  this version httpwwwworgtrrecowlrdfbasedsemantics latest version series  httpwwwworgtrowlrdfbasedsemantics latest recommendation httpwwwworgtrowlrdfbasedsemantics previous version httpwwwworgtrperowlrdfbasedsemantics editors michael schneider fzi research center for information technology contributors in alphabetical order jeremy carroll hp now at topquadrant ivan herman wcercim peter f patelschneider nuance communications please refer to the errata for this document which may include some normative corrections a colorcoded version of this document showing changes made since the previous version is also available this document is also available in these nonnormative formats pdf version see also translations copyright   wc mit ercim keio all rights reserved wc liability trademark and document use rules apply abstract the owl  web ontology language informally owl  is an ontology language for the semantic web with formally defined meaning owl  ontologies provide classes properties individuals and data values and are stored as semantic web documents owl  ontologies can be used along with information written in rdf and owl  ontologies themselves are primarily exchanged as rdf documents the owl  document overview describes the overall state of owl  and should be read before other owl  documents this document defines the rdfcompatible modeltheoretic semantics of owl  status of this document may be superseded this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr summary of changes there have been no substantive changes since the previous version for details on the minor changes see the change log and colorcoded diff please send comments please send any comments to publicowlcomments@worg public archive although work on this document by the owl working group is complete comments may be addressed in the errata or in future revisions open discussion among developers is welcome at publicowldev@worg public archive endorsed by wc this document has been reviewed by wc members by software developers and by other wc groups and interested parties and is endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web patents this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent table of contents  introduction informative  ontologies  syntax  content of ontologies informative  vocabulary  standard prefixes  vocabulary terms  datatype names  facet names  interpretations  datatype maps  vocabulary interpretations  satisfaction consistency and entailment  parts of the universe  class extensions  semantic conditions  semantic conditions for the parts of the universe  semantic conditions for the vocabulary classes  semantic conditions for the vocabulary properties  semantic conditions for boolean connectives  semantic conditions for enumerations  semantic conditions for property restrictions  semantic conditions for datatype restrictions  semantic conditions for the rdfs vocabulary  semantic conditions for equivalence and disjointness  semantic conditions for nary disjointness  semantic conditions for sub property chains  semantic conditions for inverse properties  semantic conditions for property characteristics  semantic conditions for keys  semantic conditions for negative property assertions  appendix axiomatic triples informative  axiomatic triples in rdf  axiomatic triples for the vocabulary classes  axiomatic triples for the vocabulary properties  a set of axiomatic triples  appendix relationship to the direct semantics informative  example on semantic differences  correspondence theorem  proof for the correspondence theorem  appendix comprehension conditions informative  comprehension conditions for sequences  comprehension conditions for boolean connectives  comprehension conditions for enumerations  comprehension conditions for property restrictions  comprehension conditions for datatype restrictions  comprehension conditions for inverse properties  appendix changes from owl  informative  appendix change log informative  changes since recommendation  changes since proposed recommendation  changes since candidate recommendation  changes since last call  acknowledgments  references  normative references  nonnormative references  introduction informative this document defines the rdfcompatible modeltheoretic semantics of owl  referred to as the owl  rdfbased semantics the owl  rdfbased semantics gives a formal meaning to every rdf graph rdf concepts and is fully compatible with the rdf semantics specification rdf semantics the specification provided here is the successor to the original owl  rdfcompatible semantics specification owl  rdfcompatible semantics technically the owl  rdfbased semantics is defined as a semantic extension of dentailment rdfs with datatype support as specified in the rdf semantics rdf semantics in other words the meaning given to an rdf graph by the owl  rdfbased semantics includes the meaning provided by the semantics of rdfs with datatypes and additional meaning is specified for all the language constructs of owl  such as boolean connectives sub property chains and qualified cardinality restrictions see the owl  structural specification owl  specification for further information on all the language constructs of owl  the definition of the semantics for the extra constructs follows the design principles as applied to the rdf semantics the content of this document is not meant to be selfcontained but builds on top of the rdf semantics document rdf semantics by adding those aspects that are specific to owl  hence the complete definition of the owl  rdfbased semantics is given by the combination of both the rdf semantics document and the document at hand in particular the terminology used in the rdf semantics is reused here except for cases where a conflict exists with the rest of the owl  specification the remainder of this section provides an overview of some of the distinguishing features of the owl  rdfbased semantics and outlines the documents structure and content in section  the syntax over which the owl  rdfbased semantics is defined is the set of all rdf graphs rdf concepts the owl  rdfbased semantics provides a precise formal meaning for every rdf graph the language that is determined by rdf graphs being interpreted using the owl  rdfbased semantics is called owl  full in this document rdf graphs are also called owl  full ontologies or simply ontologies unless there is risk of confusion the owl  rdfbased semantics interprets the rdf and rdfs vocabularies rdf semantics and the owl  rdfbased vocabulary together with an extended set of datatypes and their constraining facets see section  owl  rdfbased interpretations section  are defined on a universe see section  of the rdf semantics specification rdf semantics for an overview of the basic intuition of modeltheoretic semantics the universe is divided into parts namely individuals classes and properties which are identified with their rdf counterparts see figure  the part of individuals equals the whole universe this means that all classes and properties are also individuals in their own right further every name interpreted by an owl  rdfbased interpretation denotes an individual the three basic parts are divided into further parts as follows the part of individuals subsumes the part of data values which comprises the denotations of all literals also subsumed by the individuals is the part of ontologies the part of classes subsumes the part of datatypes which are classes consisting entirely of data values finally the part of properties subsumes the parts of object properties data properties ontology properties and annotation properties the part of object properties equals the whole part of properties and therefore all other kinds of properties are also object properties for annotations properties note that annotations are not semanticfree under the owl  rdfbased semantics just like every other triple or set of triples occurring in an rdf graph an annotation is assigned a truth value by any given owl  rdfbased interpretation hence although annotations are meant to be semantically weak ie their formal meaning does not significantly exceed that originating from the rdf semantics specification adding an annotation may still change the meaning of an ontology a similar discussion holds for statements that are built from ontology properties such as owlimports which are used to define relationships between two ontologies every class represents a specific set of individuals called the class extension of the class an individual a is an instance of a class c if a is a member of the class extension icextc since a class is itself an individual under the owl  rdfbased semantics classes are distinguished from their respective class extensions this distinction allows for example that a class may be an instance of itself by being a member of its own class extension also two classes may be equivalent by sharing the same class extension although being different individuals eg they do not need to share the same properties similarly every property has an associated property extension that consists of pairs of individuals an individual a has a relationship to an individual a with respect to a property p if the pair  a  a  is a member of the property extension iextp again properties are distinguished from their property extensions in general if there are no further constraints an arbitrary extension may be associated with a given class or property and two interpretations may associate distinct extensions with the same class or property individuals may play different roles for example an individual can be both a data property and an annotation property since the different parts of the universe of an owl  rdfbased interpretation are not required to be mutually disjoint or an individual can be both a class and a property by associating both a class extension and a property extension with it in the latter case there will be no specific relationship between the class extension and the property extension of such an individual without further constraints for example the same individual can have an empty class extension while having a nonempty property extension the main part of the owl  rdfbased semantics is section  which specifies a formal meaning for all the owl  language constructs by means of the owl  rdfbased semantic conditions these semantic conditions extend all the semantic conditions given in the rdf semantics rdf semantics the owl  rdfbased semantic conditions effectively determine which sets of rdf triples are assigned a specific meaning and what this meaning is for example semantic conditions exist that allow one to interpret the triple c owldisjointwith d to mean that the denotations of the iris c and d have disjoint class extensions there is usually no need to provide localizing information eg by means of typing triples for the iris occurring in an ontology as for the rdf semantics the owl  rdfbased semantic conditions have been designed to ensure that the denotation of any iri will be in the appropriate part of the universe for example the rdf triple c owldisjointwith d is sufficient to deduce that the denotations of the iris c and d are actually classes it is not necessary to explicitly add additional typing triples c rdftype rdfsclass and d rdftype rdfsclass to the ontology in the rdf semantics this kind of automatic localization was to some extent achieved by so called axiomatic triples rdf semantics such as rdftype rdftype rdfproperty or rdftype rdfsdomain rdfsresource however there is no explicit normative collection of additional axiomatic triples for the owl  rdfbased semantics instead the specific axiomatic aspects of the owl  rdfbased semantics are determined by a subset of the owl  rdfbased semantic conditions section  discusses axiomatic triples in general and provides an example set of axiomatic triples that is compatible with the owl  rdfbased semantics section  compares the owl  rdfbased semantics with the owl  direct semantics owl  direct semantics while the owl  rdfbased semantics is based on the rdf semantics specification rdf semantics the owl  direct semantics is a description logic style semantics several fundamental differences exist between the two semantics but there is also a strong relationship basically stating that the owl  rdfbased semantics is able to reflect all logical conclusions of the owl  direct semantics this means that the owl  direct semantics can in a sense be regarded as a semantics subset of the owl  rdfbased semantics the precise relationship is given by the owl  correspondence theorem significant effort has been spent in keeping the design of the owl  rdfbased semantics as close as possible to that of the original specification of the owl  rdfcompatible semantics owl  rdfcompatible semantics while this aim was achieved to a large degree the owl  rdfbased semantics actually deviates from its predecessor in several aspects in most cases this is because of serious technical problems that would have arisen from a conservative semantic extension one important change is that while so called comprehension conditions for the owl  rdfbased semantics see section  still exist these are not part of the normative set of semantic conditions anymore the owl  rdfbased semantics also corrects several errors of owl  a list of differences between the two languages is given in section  the italicized keywords must must not should should not and may are used to specify normative features of owl  documents and tools and are interpreted as specified in rfc  rfc  figure  parts hierarchy of the owl  rdfbased semantics each node is labeled with a class iri that represents a part of the universe of an owl  rdfbased interpretation arrows point from parts to their super parts  ontologies this section determines the syntax for the owl  rdfbased semantics and gives an overview on typical content of ontologies for ontology management tasks  syntax following sections  and  of the rdf semantics specification rdf semantics the owl  rdfbased semantics is defined on every rdf graph section  of rdf concepts rdf concepts ie on every set of rdf triples section  of rdf concepts rdf concepts in accordance with the rest of the owl  specification see section  of the owl  structural specification owl  specification this document uses an extended notion of an rdf graph by allowing the rdf triples in an rdf graph to contain arbitrary iris internationalized resource identifiers according to rfc  rfc  in contrast the rdf semantics specification rdf semantics is defined on rdf graphs containing uris rfc  this change is backward compatible with the rdf specification since uris are also iris terminological note the document at hand uses the term iri in accordance with the rest of the owl  specification see section  of the owl  structural specification owl  specification whereas the rdf semantics specification rdf semantics uses the term uri reference according to rfc  rfc  the term iri stands for an absolute resource identifier with optional fragment which is what is being used throughout this document in contrast the term iri reference additionally covers relative references which are never used in this document convention in this document iris are abbreviated in the way defined by section  of the owl  structural specification owl  specification ie the abbreviations consist of a prefix name and a local part such as prefixlocalpart the definition of an rdf triple according to section  of rdf concepts rdf concepts is restricted to cases where the subject of an rdf triple is an iri or a blank node section  of rdf concepts rdf concepts and where the predicate of an rdf triple is an iri as a consequence the definition does not treat cases where for example the subject of a triple is a literal section  of rdf concepts rdf concepts as in s exp exo or where the predicate of a triple is a blank node as in exs _p exo in order to allow for interoperability with other existing and future technologies and tools the document at hand does not explicitly forbid the use of generalized rdf graphs consisting of generalized rdf triples which are defined to allow for iris literals and blank nodes to occur in the subject predicate and object position thus an rdf graph may contain generalized rdf triples but an implementation is not required to support generalized rdf graphs note that every rdf graph consisting entirely of rdf triples according to section  of rdf concepts rdf concepts is also a generalized rdf graph terminological notes the term owl  full refers to the language that is determined by the set of all rdf graphs being interpreted using the owl  rdfbased semantics further in this document the term owl  full ontology or simply ontology unless there is any risk of confusion will be used interchangeably with the term rdf graph  content of ontologies informative while there do not exist any syntactic restrictions on the set of rdf graphs that can be interpreted by the owl  rdfbased semantics in practice an ontology will often contain certain kinds of constructs that are aimed to support ontology management tasks examples are ontology headers and ontology iris as well as constructs that are about versioning importing and annotating of ontologies including the concept of incompatibility between ontologies these topics are outside the scope of this semantics specification section  of the owl  structural specification owl  specification deals with these topics in detail and can therefore be used as a guide on how to apply these constructs in owl  full ontologies accordingly the mappings of all these constructs to their respective rdf encoding are defined in the owl  rdf mapping owl  rdf mapping  vocabulary this section specifies the owl  rdfbased vocabulary and lists the names of the datatypes and facets used under the owl  rdfbased semantics  standard prefixes table  lists the standard prefix names and their prefix iris used in this document table  standard prefixes prefix name prefix iri owl owl httpwwwworgowl rdf rdf httpwwwworgrdfsyntaxns rdfs rdfs httpwwwworgrdfschema xml schema xsd httpwwwworgxmlschema  vocabulary terms table  lists the iris of the owl  rdfbased vocabulary which is the set of vocabulary terms that are specific for the owl  rdfbased semantics this vocabulary extends the rdf and rdfs vocabularies as specified in sections  and  of the rdf semantics rdf semantics respectively table  does not mention those iris that will be listed in section  on datatype names or section  on facet names implementations are not required to support the iri owlonproperties but may support it in order to realize nary dataranges with arity   see sections  and  of the owl  structural specification owl  specification for further information note the use of the iri owldatarange has been deprecated as of owl  the iri rdfsdatatype should be used instead table  owl  rdfbased vocabulary owlalldifferent owlalldisjointclasses owlalldisjointproperties owlallvaluesfrom owlannotatedproperty owlannotatedsource owlannotatedtarget owlannotation owlannotationproperty owlassertionproperty owlasymmetricproperty owlaxiom owlbackwardcompatiblewith owlbottomdataproperty owlbottomobjectproperty owlcardinality owlclass owlcomplementof owldatarange owldatatypecomplementof owldatatypeproperty owldeprecated owldeprecatedclass owldeprecatedproperty owldifferentfrom owldisjointunionof owldisjointwith owldistinctmembers owlequivalentclass owlequivalentproperty owlfunctionalproperty owlhaskey owlhasself owlhasvalue owlimports owlincompatiblewith owlintersectionof owlinversefunctionalproperty owlinverseof owlirreflexiveproperty owlmaxcardinality owlmaxqualifiedcardinality owlmembers owlmincardinality owlminqualifiedcardinality owlnamedindividual owlnegativepropertyassertion owlnothing owlobjectproperty owlonclass owlondatarange owlondatatype owloneof owlonproperty owlonproperties owlontology owlontologyproperty owlpriorversion owlpropertychainaxiom owlpropertydisjointwith owlqualifiedcardinality owlreflexiveproperty owlrestriction owlsameas owlsomevaluesfrom owlsourceindividual owlsymmetricproperty owltargetindividual owltargetvalue owlthing owltopdataproperty owltopobjectproperty owltransitiveproperty owlunionof owlversioninfo owlversioniri owlwithrestrictions  datatype names table  lists the iris of the datatypes used in the owl  rdfbased semantics the datatype rdfxmlliteral is described in section  of the rdf semantics rdf semantics all other datatypes are described in section  of the owl  structural specification owl  specification the normative set of datatypes of the owl  rdfbased semantics equals the set of datatypes described in section  of the owl  structural specification owl  specification table  datatypes of the owl  rdfbased semantics xsdanyuri xsdbasebinary xsdboolean xsdbyte xsddatetime xsddatetimestamp xsddecimal xsddouble xsdfloat xsdhexbinary xsdint xsdinteger xsdlanguage xsdlong xsdname xsdncname xsdnegativeinteger xsdnmtoken xsdnonnegativeinteger xsdnonpositiveinteger xsdnormalizedstring rdfplainliteral xsdpositiveinteger owlrational owlreal xsdshort xsdstring xsdtoken xsdunsignedbyte xsdunsignedint xsdunsignedlong xsdunsignedshort rdfxmlliteral  facet names table  lists the iris of the facets used in the owl  rdfbased semantics each datatype listed in section  has a possibly empty set of constraining facets all facets are described in section  of the owl  structural specification owl  specification in the context of their respective datatypes the normative set of facets of the owl  rdfbased semantics equals the set of facets described in section  of the owl  structural specification owl  specification in this specification facets are used for defining datatype restrictions see section  for example to refer to the set of all strings of length  one can restrict the datatype xsdstring section  by the facet xsdlength and the value  table  facets of the owl  rdfbased semantics rdflangrange xsdlength xsdmaxexclusive xsdmaxinclusive xsdmaxlength xsdminexclusive xsdmininclusive xsdminlength xsdpattern  interpretations the owl  rdfbased semantics provides vocabulary interpretations and vocabulary entailment see section  of the rdf semantics rdf semantics for the rdf and rdfs vocabularies and for the owl  rdfbased vocabulary this section defines owl  rdfbased datatype maps and owl  rdfbased interpretations and specifies what satisfaction of ontologies consistency and entailment means under the owl  rdfbased semantics in addition the so called parts of the universe of an owl  rdfbased interpretation are defined  datatype maps according to section  of the rdf semantics specification rdf semantics a datatype d has the following components lsd the lexical space of d which is a set of lexical forms vsd the value space of d which is a set of data values lvd the lexicaltovalue mapping of d which maps lexical forms in lsd to data values in vsd terminological notes the document at hand uses the term data value in accordance with the rest of the owl  specification see section  of the owl  structural specification owl  specification whereas the rdf semantics specification rdf semantics uses the term datatype value instead further the names ls and vs which stand for the lexical space and the value space of a datatype respectively are not used in the rdf semantics specification but have been introduced here for easier reference in this document the basic definition of a datatype is extended to take facets into account see section  for information and an example on facets note that section  of the rdf semantics specification rdf semantics explicitly permits that semantic extensions may impose more elaborate datatyping conditions than those listed above a datatype with facets d is a datatype that has the following additional components fsd the facet space of d which is a set of pairs of the form  f  v  where f is an iri called the constraining facet and v is an arbitrary data value called the constraining value fvd the facettovalue mapping of d which maps each facetvalue pair  f  v  in fsd to a subset of vsd note that it is not further specified what the nature of the denotation of a facet iri is ie it is only known that a facet iri denotes some individual semantic extensions may impose further restrictions on the denotations of facets in fact section  will define additional restrictions on facets also note that for a datatype d and a facetvalue pair  f  v  in fsd the value v is not required to be included in the value space vsd of d itself for example the datatype xsdstring section  has the facet xsdlength section  which takes nonnegative integers as its constraining values rather than strings in this document it will always be assumed from now on that any datatype d is a datatype with facets if the facet space fsd of a datatype d has not been explicitly defined or if it is not derived from another datatypes facet space according to some well defined condition then fsd is the empty set unless there is any risk of confusion the term datatype will always refer to a datatype with facets section  of the rdf semantics specification rdf semantics further defines a datatype map d to be a set of namedatatype pairs  u  d  consisting of an iri u and a datatype d such that no iri appears twice in the set as a consequence of what has been said before in this document every datatype map d will entirely consist of datatypes with facets the following definition specifies what an owl  rdfbased datatype map is definition  owl  rdfbased datatype map a datatype map d is an owl  rdfbased datatype map if and only if for every datatype name u listed in section  and its respective set of constraining facets section  there is a namedatatype pair  u d  in d with the specified lexical space lsd value space vsd lexicaltovalue mapping lvd facet space fsd and facettovalue mapping fvd note that definition  does not prevent additional datatypes to be in an owl  rdfbased datatype map for the special case of an owl  rdfbased datatype map d that exclusively contains the datatypes listed in section  it is ensured that there are datatypes available for all the facet values ie for every namedatatype pair  u  d  in d and for every facetvalue pair  f  v  in fsd there exists a namedatatype pair  u  d  in d such that v is in vsd  vocabulary interpretations from the rdf semantics specification rdf semantics let v be a set of literals and iris containing the rdf and rdfs vocabularies and let d be a datatype map according to section  of the rdf semantics rdf semantics and accordingly section  a dinterpretation i of v with respect to d is a tuple i   ir  ip  iext  is  il  lv   ir is the universe of i ie a nonempty set that contains at least the denotations of literals and iris in v ip is a subset of ir the properties of i lv the data values of i is a subset of ir that contains at least the set of plain literals see section  of rdf concepts rdf concepts in v and the value spaces of each datatype of d iext is used to associate properties with their property extension and is a mapping from ip to the powerset of ir  ir is is a mapping from iris in v to their denotations in ir in particular isu  d for any namedatatype pair  u  d  in d il is a mapping from typed literals su in v to their denotations in ir where ilsu  lvds provided that d is a datatype of d isu  d and s is in the lexical space lsd otherwise ilsu is not in lv convention following the practice introduced in section  of the rdf semantics rdf semantics for a given interpretation i of a vocabulary v the notation ix will be used instead of ilx and isx for the typed literals and iris x in v respectively as detailed in the rdf semantics rdf semantics a dinterpretation has to meet all the semantic conditions for ground graphs and blank nodes those for rdf interpretations and rdfs interpretations and the general semantic conditions for datatypes in this document the basic definition of a dinterpretation is extended to take facets into account a dinterpretation with facets i is a dinterpretation for a datatype map d consisting entirely of datatypes with facets section  where i meets the following additional semantic conditions for each namedatatype pair  u  d  in d and each facetvalue pair  f  v  in the facet space fsd f is in the vocabulary v of i a namedatatype pair  u  d  exists in d such that v is in the value space vsd in this document it will always be assumed from now on that any dinterpretation i is a dinterpretation with facets unless there is any risk of confusion the term dinterpretation will always refer to a dinterpretation with facets the following definition specifies what an owl  rdfbased interpretation is definition  owl  rdfbased interpretation let d be an owl  rdfbased datatype map and let v be a vocabulary that includes the rdf and rdfs vocabularies and the owl  rdfbased vocabulary together with all the datatype and facet names listed in section  an owl  rdfbased interpretation i   ir  ip  iext  is  il  lv  of v with respect to d is a dinterpretation of v with respect to d that meets all the extra semantic conditions given in section   satisfaction consistency and entailment the following definitions specify what it means for an rdf graph to be satisfied by a given owl  rdfbased interpretation to be consistent under the owl  rdfbased semantics and to entail another rdf graph the notion of satisfaction under the owl  rdfbased semantics is based on the notion of satisfaction for dinterpretations and simple interpretations as defined in the rdf semantics rdf semantics in essence in order to satisfy an rdf graph an interpretation i has to satisfy all the triples in the graph ie for a triple s p o it is necessary that the relationship  is  io   iextip holds special treatment exists for blank nodes as detailed in section  of the rdf semantics rdf semantics in other words the given graph has to be compatible with the specific form of the iext mapping of i the distinguishing aspect of owl  rdfbased satisfaction is that an interpretation i needs to meet all the owl  rdfbased semantic conditions see section  which have a constraining effect on the possible forms an iext mapping can have definition  owl  rdfbased satisfaction let g be an rdf graph let d be an owl  rdfbased datatype map let v be a vocabulary that includes the rdf and rdfs vocabularies and the owl  rdfbased vocabulary together with all the datatype and facet names listed in section  and let i be a dinterpretation of v with respect to d i owl  rdfbased satisfies g with respect to v and d if and only if i is an owl  rdfbased interpretation of v with respect to d that satisfies g as a dinterpretation of v with respect to d according to the rdf semantics rdf semantics definition  owl  rdfbased consistency let s be a collection of rdf graphs and let d be an owl  rdfbased datatype map s is owl  rdfbased consistent with respect to d if and only if there is some owl  rdfbased interpretation i with respect to d of some vocabulary v that includes the rdf and rdfs vocabularies and the owl  rdfbased vocabulary together with all the datatype and facet names listed in section  such that i owl  rdfbased satisfies all the rdf graphs in s with respect to v and d definition  owl  rdfbased entailment let s and s be collections of rdf graphs and let d be an owl  rdfbased datatype map s owl  rdfbased entails s with respect to d if and only if for every owl  rdfbased interpretation i with respect to d of any vocabulary v that includes the rdf and rdfs vocabularies and the owl  rdfbased vocabulary together with all the datatype and facet names listed in section  the following holds if i owl  rdfbased satisfies all the rdf graphs in s with respect to v and d then i owl  rdfbased satisfies all the rdf graphs in s with respect to v and d  parts of the universe table  defines the parts of the universe of a given owl  rdfbased interpretation i the second column tells the name of the part the third column gives a definition of the part in terms of the mapping iext of i and by referring to a particular term of the rdf rdfs or owl  rdfbased vocabulary as an example the part of all datatypes is named idc and it is defined as the set of all individuals x for which the relationship  x  irdfsdatatype   iextirdftype holds according to the semantics of rdftype as defined in section  of the rdf semantics rdf semantics this means that the name idc denotes the class extension see section  of irdfsdatatype table  parts of the universe name of part s definition of s as  x  ir   x  ie   iextirdftype  where iri e is individuals ir rdfsresource data values lv rdfsliteral ontologies ix owlontology classes ic rdfsclass datatypes idc rdfsdatatype properties ip rdfproperty data properties iodp owldatatypeproperty ontology properties ioxp owlontologyproperty annotation properties ioap owlannotationproperty  class extensions the mapping icext from ic to the powerset of ir which associates classes with their class extension is defined for every c  ic as icextc   x  ir   x  c   iextirdftype    semantic conditions this section defines the semantic conditions of the owl  rdfbased semantics the semantic conditions presented here are basically only those for the specific constructs of owl  the complete set of semantic conditions for the owl  rdfbased semantics is the combination of the semantic conditions presented here and the semantic conditions for simple entailment rdf rdfs and dentailment as specified in the rdf semantics specification rdf semantics all semantic conditions in this section are defined with respect to an interpretation i section  specifies semantic conditions for the different parts of the universe of the interpretation being considered compare section  section  and section  list semantic conditions for the classes and the properties of the owl  rdfbased vocabulary in the rest of this section the owl  rdfbased semantic conditions for the different language constructs of owl  are specified conventions used in this section iff throughout this section the term iff is used as a shortform for if and only if conjunctive commas a comma  separating two assertions in a semantic condition as in c  ic  p  ip is read as a logical and further a comma separating two variables as in c d  ic is used for abbreviating two comma separated assertions c  ic  d  ic in this example unscoped variables if no explicit scope is given for a variable x as in  x   or  x    then x is unconstrained which means x  ir ie x denotes an arbitrary individual in the universe set cardinality for a set s an expression of the form s means the number of elements in s sequence expressions an expression of the form s sequence of a    an  s means that s represents an rdf list of n   individuals a    an all of them being members of the set s precisely s  irdfnil for n   and for n   there exist z  ir    zn  ir such that s  z  a  s   z  a   iextirdffirst   z  z   iextirdfrest    an  s  zn  an   iextirdffirst   zn  irdfnil   iextirdfrest  note as mentioned in section  of the rdf semantics rdf semantics there are no semantic constraints that enforce wellformed sequence structures so for example it is possible for a sequence head s to refer to more than one sequence set names the following names are used as convenient abbreviations for certain sets iseq the set of all sequences this set equals the class extension of rdflist ie iseq  icextirdflist inni the set of all nonnegative integers this set equals the value space of the datatype xsdnonnegativeinteger ie inni  icextixsdnonnegativeinteger but is also subsumed by the value spaces of other numerical datatypes such as xsdinteger notes on the form of semantic conditions informative one design goal of owl  was to ensure an appropriate degree of alignment between the owl  rdfbased semantics and the owl  direct semantics owl  direct semantics under the different constraints the two semantics have to meet the way this semantic alignment is described is via the owl  correspondence theorem in section  for this theorem to hold the semantic conditions that treat the rdf encoding of owl  axioms compare section  of the owl  rdf mapping owl  rdf mapping and section  of the owl  structural specification owl  specification such as inverse property axioms must have the form of iff ifandonlyif conditions this means that these semantic conditions completely determine the semantics of the encoding of these constructs on the other hand the rdf encoding of owl  expressions compare section  of the owl  rdf mapping owl  rdf mapping and sections    of the owl  structural specification owl  specification such as property restrictions are treated by ifthen conditions these weaker semantic conditions for expressions are sufficient for the correspondence theorem to hold so there is no necessity to define stronger iff conditions under the owl  rdfbased semantics for these language constructs special cases are the semantic conditions for boolean connectives of classes and for enumerations these language constructs build owl  expressions but for backward compatibility reasons there is also rdf encoding of axioms based on the vocabulary for these language constructs see table  in section  of the owl  rdf mapping owl  rdf mapping for example an rdf expression of the form exc owlunionof  exc exc   is mapped by the reverse rdf mapping to an owl  axiom that states the equivalence of the class denoted by exc with the union of the classes denoted by exc and exc in order to ensure that the correspondence theorem holds and in accordance with the original owl  rdfcompatible semantics specification owl  rdfcompatible semantics the semantic conditions for the mentioned language constructs are therefore iff conditions further special treatment exists for owl  axioms that have a multitriple representation in rdf where the different triples share a common root node such as the blank node _x in the following example _x rdftype owlalldisjointclasses  _x owlmembers  exc exc   in essence the semantic conditions for the encoding of these language constructs are iff conditions as usual for axioms however in order to cope with the specific syntactic aspect of a root node the iff conditions of these language constructs have been split into two ifthen conditions where the ifthen condition representing the righttoleft direction contains an additional premise having the form  z  ir the purpose of this premise is to ensure the existence of an individual that is needed to satisfy the root node under the owl  rdfbased semantics the language constructs in question are nary disjointness axioms in section  and negative property assertions in section  the ifthen semantic conditions in this section sometimes do not explicitly list all typing statements in their consequent that one might expect for example the semantic condition for owlsomevaluesfrom restrictions in section  does not list the statement x  icextiowlrestriction on its right hand side consequences are generally not mentioned if they can already be deduced by other means often these redundant consequences follow from the semantic conditions for vocabulary classes and vocabulary properties in section  and section  respectively occasionally in connection with the semantic conditions for the parts of the universe in section  in the example above the omitted consequence can be obtained from the third column of the entry for owlsomevaluesfrom in the table in section  which determines that iextiowlsomevaluesfrom  icextiowlrestriction  ic  semantic conditions for the parts of the universe table  lists the semantic conditions for the parts of the universe of the owl  rdfbased interpretation being considered additional semantic conditions affecting these parts are given in section  the first column tells the name of the part as defined in section  the second column defines certain conditions on the part in most cases the column specifies for the part by which other part it is subsumed and thus the position of the part in the parts hierarchy of the universe is narrowed down the third column provides further information about the instances of those parts that consist of classes or properties in general if the part consists of classes then for the class extensions of the member classes is specified by which part of the universe they are subsumed if the part consists of properties then the domains and ranges of the member properties are determined table  semantic conditions for the parts of the universe name of part s conditions on s conditions on instances x of s ir s   lv s  ir ix s  ir ic s  ir icextx  ir idc s  ic icextx  lv ip s  ir iextx  ir  ir iodp s  ip iextx  ir  lv ioxp s  ip iextx  ix  ix ioap s  ip iextx  ir  ir  semantic conditions for the vocabulary classes table  lists the semantic conditions for the classes that have iris in the owl  rdfbased vocabulary in addition the table contains all those classes with iris in the rdf and rdfs vocabularies that represent parts of the universe of the owl  rdfbased interpretation being considered section  the semantic conditions for the remaining classes with names in the rdf and rdfs vocabularies can be found in the rdf semantics specification rdf semantics the first column tells the iri of the class the second column defines of what particular kind a class is ie whether it is a general class a member of the part ic or a datatype a member of idc the third column specifies for the class extension of the class by which part of the universe section  it is subsumed from an entry of the form icextic  s for a class iri c and a set s and given an rdf triple of the form u rdftype c one can deduce that the relationship iu  s holds note that some entries are of the form icextic  s which means that the class extension is exactly specified to be that set see section  for further semantic conditions on those classes that represent parts not included in this table are the datatypes of the owl  rdfbased semantics with iris listed in section  for each such datatype iri e the following semantic conditions hold as a consequence of the fact that e is a member of the datatype map of every owl  rdfbased interpretation according to definition  and by the general semantic conditions for datatypes listed in section  of the rdf semantics rdf semantics ie  idc icextie  lv table  semantic conditions for the vocabulary classes iri e ie icextie owlalldifferent  ic  ir owlalldisjointclasses  ic  ir owlalldisjointproperties  ic  ir owlannotation  ic  ir owlannotationproperty  ic  ioap owlasymmetricproperty  ic  ip owlaxiom  ic  ir rdfsclass  ic  ic owlclass  ic  ic owldatarange  ic  idc rdfsdatatype  ic  idc owldatatypeproperty  ic  iodp owldeprecatedclass  ic  ic owldeprecatedproperty  ic  ip owlfunctionalproperty  ic  ip owlinversefunctionalproperty  ic  ip owlirreflexiveproperty  ic  ip rdfsliteral  idc  lv owlnamedindividual  ic  ir owlnegativepropertyassertion  ic  ir owlnothing  ic   owlobjectproperty  ic  ip owlontology  ic  ix owlontologyproperty  ic  ioxp rdfproperty  ic  ip owlreflexiveproperty  ic  ip rdfsresource  ic  ir owlrestriction  ic  ic owlsymmetricproperty  ic  ip owlthing  ic  ir owltransitiveproperty  ic  ip  semantic conditions for the vocabulary properties table  lists the semantic conditions for the properties that have iris in the owl  rdfbased vocabulary in addition the table contains all those properties with iris in the rdfs vocabulary that are specified to be annotation properties under the owl  rdfbased semantics the semantic conditions for the remaining properties with names in the rdf and rdfs vocabularies can be found in the rdf semantics specification rdf semantics the first column tells the iri of the property the second column defines of what particular kind a property is ie whether it is a general property a member of the part ip a datatype property a member of iodp an ontology property a member of ioxp or an annotation property a member of ioap the third column specifies the domain and range of the property from an entry of the form iextip  s  s for a property iri p and sets s and s and given an rdf triple s p o one can deduce the relationships is  s and io  s note that some entries are of the form iextip  s  s which means that the property extension is exactly specified to be the cartesian product of the two sets not included in this table are the facets of the owl  rdfbased semantics with iris listed in section  which are used to specify datatype restrictions see section  for each such facet iri e the following semantic conditions extend the basic semantics specification that has been given for datatypes with facets in section  ie  iodp iextie  ir  lv implementations are not required to support the semantic condition for owlonproperties but may support it in order to realize nary dataranges with arity   see sections  and  of the owl  structural specification owl  specification for further information informative notes owltopobjectproperty relates every two individuals in the universe with each other likewise owltopdataproperty relates every individual with every data value further owlbottomobjectproperty and owlbottomdataproperty stand both for the empty relationship the ranges of the properties owldeprecated and owlhasself are not restricted in any form and in particular they are not restricted to boolean values the actual object values of these properties do not have any intended meaning but could as well have been defined to be of any other value therefore the semantics given here are of a form that the values can be arbitrarily chosen without leading to any nontrivial semantic conclusions it is however recommended to still use an object literal of the form truexsdboolean in ontologies in order to not get in conflict with the required usage of these properties in scenarios that ask for applying the reverse rdf mapping compare table  in section  of the owl  rdf mapping owl  rdf mapping for owlhasself and section  of the owl  structural specification owl  specification for owldeprecated the range of the property owlannotatedproperty is unrestricted ie it is not specified as the set of properties annotations are meant to be semantically weak ie their formal meaning should not significantly exceed that originating from the rdf semantics specification several properties such as owlpriorversion have been specified as both ontology properties and annotation properties in order to be in line with both the original owl  rdfcompatible semantics specification owl  rdfcompatible semantics and the rest of the owl  specification see section  of the owl  structural specification owl  specification table  semantic conditions for the vocabulary properties iri e ie iextie owlallvaluesfrom  ip  icextiowlrestriction  ic owlannotatedproperty  ip  ir  ir owlannotatedsource  ip  ir  ir owlannotatedtarget  ip  ir  ir owlassertionproperty  ip  icextiowlnegativepropertyassertion  ip owlbackwardcompatiblewith  ioxp   ioap  ix  ix owlbottomdataproperty  iodp   owlbottomobjectproperty  ip   owlcardinality  ip  icextiowlrestriction  inni rdfscomment  ioap  ir  lv owlcomplementof  ip  ic  ic owldatatypecomplementof  ip  idc  idc owldeprecated  ioap  ir  ir owldifferentfrom  ip  ir  ir owldisjointunionof  ip  ic  iseq owldisjointwith  ip  ic  ic owldistinctmembers  ip  icextiowlalldifferent  iseq owlequivalentclass  ip  ic  ic owlequivalentproperty  ip  ip  ip owlhaskey  ip  ic  iseq owlhasself  ip  icextiowlrestriction  ir owlhasvalue  ip  icextiowlrestriction  ir owlimports  ioxp  ix  ix owlincompatiblewith  ioxp   ioap  ix  ix owlintersectionof  ip  ic  iseq owlinverseof  ip  ip  ip rdfsisdefinedby  ioap  ir  ir rdfslabel  ioap  ir  lv owlmaxcardinality  ip  icextiowlrestriction  inni owlmaxqualifiedcardinality  ip  icextiowlrestriction  inni owlmembers  ip  ir  iseq owlmincardinality  ip  icextiowlrestriction  inni owlminqualifiedcardinality  ip  icextiowlrestriction  inni owlonclass  ip  icextiowlrestriction  ic owlondatarange  ip  icextiowlrestriction  idc owlondatatype  ip  idc  idc owloneof  ip  ic  iseq owlonproperty  ip  icextiowlrestriction  ip owlonproperties  ip  icextiowlrestriction  iseq owlpriorversion  ioxp   ioap  ix  ix owlpropertychainaxiom  ip  ip  iseq owlpropertydisjointwith  ip  ip  ip owlqualifiedcardinality  ip  icextiowlrestriction  inni owlsameas  ip  ir  ir rdfsseealso  ioap  ir  ir owlsomevaluesfrom  ip  icextiowlrestriction  ic owlsourceindividual  ip  icextiowlnegativepropertyassertion  ir owltargetindividual  ip  icextiowlnegativepropertyassertion  ir owltargetvalue  ip  icextiowlnegativepropertyassertion  lv owltopdataproperty  iodp  ir  lv owltopobjectproperty  ip  ir  ir owlunionof  ip  ic  iseq owlversioninfo  ioap  ir  ir owlversioniri  ioxp  ix  ix owlwithrestrictions  ip  idc  iseq  semantic conditions for boolean connectives table  lists the semantic conditions for boolean connectives including intersections unions and complements of classes and datatypes an intersection or a union of a collection of datatypes or a complement of a datatype is itself a datatype while a complement of a class is created wrt the whole universe a datatype complement is created for a datatype wrt the set of data values only informative notes of the three pairs of semantic conditions in the table every first is an iff condition since the corresponding owl  language constructs are both class expressions and axioms in contrast the semantic condition on datatype complements is an ifthen condition since it only corresponds to a datarange expression see the notes on the form of semantic conditions for further information for the remaining semantic conditions that treat the cases of intersections and unions of datatypes it is sufficient to have ifthen conditions since stronger iff conditions would be redundant due to the more general iff conditions that already exist for classes note that the datatype related semantic conditions do not apply to empty sets but one can still receive a datatype from an empty set by explicitly asserting the resulting class to be an instance of class rdfsdatatype table  semantic conditions for boolean connectives if s sequence of c    cn  ir then  z  s   iextiowlintersectionof iff z  c    cn  ic  icextz  icextc    icextcn if then s sequence of d    dn  idc  n     z  s   iextiowlintersectionof z  idc if s sequence of c    cn  ir then  z  s   iextiowlunionof iff z  c    cn  ic  icextz  icextc    icextcn if then s sequence of d    dn  idc  n     z  s   iextiowlunionof z  idc  z  c   iextiowlcomplementof iff z  c  ic  icextz  ir  icextc if then  z  d   iextiowldatatypecomplementof icextz  lv  icextd  semantic conditions for enumerations table  lists the semantic conditions for enumerations ie classes that consist of an explicitly given finite set of instances in particular an enumeration entirely consisting of data values is a datatype informative notes the first semantic condition is an iff condition since the corresponding owl  language construct is both a class expression and an axiom see the notes on the form of semantic conditions for further information for the remaining semantic condition that treats the case of enumerations of data values it is sufficient to have an ifthen condition since a stronger iff condition would be redundant due to the more general iff condition that already exists for individuals note that the data value related semantic condition does not apply to empty sets but one can still receive a datatype from an empty set by explicitly asserting the resulting class to be an instance of class rdfsdatatype table  semantic conditions for enumerations if s sequence of a    an  ir then  z  s   iextiowloneof iff z  ic  icextz   a    an  if then s sequence of v    vn  lv  n     z  s   iextiowloneof z  idc  semantic conditions for property restrictions table  lists the semantic conditions for property restrictions value restrictions require that some or all of the values of a certain property must be instances of a given class or data range or that the property has a specifically defined value by placing a self restriction on some given property one only considers those individuals that are reflexively related to themselves via this property cardinality restrictions determine how often a certain property is allowed to be applied to a given individual qualified cardinality restrictions are more specific than cardinality restrictions in that they determine the quantity of a property application with respect to a particular class or data range from which the property values are taken implementations are not required to support the semantic conditions for owlonproperties but may support them in order to realize nary dataranges with arity   see sections  and  of the owl  structural specification owl  specification for further information informative notes all the semantic conditions are ifthen conditions since the corresponding owl  language constructs are class expressions the ifthen conditions generally only list those consequences on their right hand side that are specific for the respective condition ie consequences that do not already follow by other means see the notes on the form of semantic conditions for further information note that the semantic condition for self restrictions does not constrain the right hand side of a owlhasself assertion to be the boolean value truexsdboolean see section  for an explanation table  semantic conditions for property restrictions if then  z  c   iextiowlsomevaluesfrom   z  p   iextiowlonproperty icextz   x   y   x  y   iextp and y  icextc  s sequence of p    pn  ir  n     z  c   iextiowlsomevaluesfrom   z  s   iextiowlonproperties p    pn  ip  icextz   x   y    yn   x  yk   iextpk for each   k  n and  y    yn   icextc   z  c   iextiowlallvaluesfrom   z  p   iextiowlonproperty icextz   x   y   x  y   iextp implies y  icextc  s sequence of p    pn  ir  n     z  c   iextiowlallvaluesfrom   z  s   iextiowlonproperties p    pn  ip  icextz   x   y    yn   x  yk   iextpk for each   k  n implies  y    yn   icextc   z  a   iextiowlhasvalue   z  p   iextiowlonproperty icextz   x   x  a   iextp   z  v   iextiowlhasself   z  p   iextiowlonproperty icextz   x   x  x   iextp   z  n   iextiowlmincardinality   z  p   iextiowlonproperty icextz   x   y   x  y   iextp   n   z  n   iextiowlmaxcardinality   z  p   iextiowlonproperty icextz   x   y   x  y   iextp   n   z  n   iextiowlcardinality   z  p   iextiowlonproperty icextz   x   y   x  y   iextp   n   z  n   iextiowlminqualifiedcardinality   z  p   iextiowlonproperty   z  c   iextiowlonclass icextz   x   y   x  y   iextp and y  icextc   n   z  n   iextiowlminqualifiedcardinality   z  p   iextiowlonproperty   z  d   iextiowlondatarange p  iodp  icextz   x   y  lv   x  y   iextp and y  icextd   n   z  n   iextiowlmaxqualifiedcardinality   z  p   iextiowlonproperty   z  c   iextiowlonclass icextz   x   y   x  y   iextp and y  icextc   n   z  n   iextiowlmaxqualifiedcardinality   z  p   iextiowlonproperty   z  d   iextiowlondatarange p  iodp  icextz   x   y  lv   x  y   iextp and y  icextd   n   z  n   iextiowlqualifiedcardinality   z  p   iextiowlonproperty   z  c   iextiowlonclass icextz   x   y   x  y   iextp and y  icextc   n   z  n   iextiowlqualifiedcardinality   z  p   iextiowlonproperty   z  d   iextiowlondatarange p  iodp  icextz   x   y  lv   x  y   iextp and y  icextd   n   semantic conditions for datatype restrictions table  lists the semantic conditions for datatype restrictions which are used to define sub datatypes of existing datatypes by restricting the original datatype by means of a set of facetvalue pairs see section  for information and an example on constraining facets certain special cases exist if no facetvalue pair is applied to a given datatype then the resulting datatype will be equivalent to the original datatype further if a facetvalue pair is applied to a datatype without being a member of the datatypes facet space then the ontology cannot be satisfied and will therefore be inconsistent in particular a datatype restriction with one or more specified facetvalue pairs will result in an inconsistent ontology if applied to a datatype with an empty facet space the set ifs is defined by ifsd    if  v    f  v   fsd   where d is a datatype f is the iri of a constraining facet and v is a constraining value of the facet this set corresponds to the facet space fsd as defined in section  but rather consists of pairs of the denotation of a facet and a value the mapping ifv is defined by ifvd if  v   fvd f  v   where d is a datatype f is the iri of a constraining facet and v is a constraining value of the facet this mapping corresponds to the facettovalue mapping fvd as defined in section  resulting in the same subsets of the value space vsd but rather applies to pairs of the denotation of a facet and a value informative notes the semantic condition is an ifthen condition since the corresponding owl  language construct is a datarange expression the ifthen condition only lists those consequences on its right hand side that are specific for the condition ie consequences that do not already follow by other means see the notes on the form of semantic conditions for further information table  semantic conditions for datatype restrictions if then s sequence of z    zn  ir  f    fn  ip   z  d   iextiowlondatatype   z  s   iextiowlwithrestrictions   z  v   iextf     zn  vn   iextfn f    fn  iodp  v    vn  lv   f  v      fn  vn   ifsd  icextz  icextd  ifvd f  v     ifvd fn  vn   semantic conditions for the rdfs vocabulary table  extends the rdfs semantic conditions for subclass axioms subproperty axioms domain axioms and range axioms the semantic conditions provided here are iff conditions while the original semantic conditions as specified in section  of the rdf semantics rdf semantics are weaker ifthen conditions only the additional semantic conditions are given here and the other conditions of rdf and rdfs are retained informative notes all the semantic conditions are iff conditions since the corresponding owl  language constructs are axioms see the notes on the form of semantic conditions for further information table  semantic conditions for the rdfs vocabulary  c  c   iextirdfssubclassof iff c  c  ic  icextc  icextc  p  p   iextirdfssubpropertyof p  p  ip  iextp  iextp  p  c   iextirdfsdomain p  ip  c  ic   x  y   x  y   iextp implies x  icextc  p  c   iextirdfsrange p  ip  c  ic   x  y   x  y   iextp implies y  icextc  semantic conditions for equivalence and disjointness table  lists the semantic conditions for specifying that two individuals are equal or different from each other and that either two classes or two properties are equivalent or disjoint with each other respectively the property owlequivalentclass is also used to formulate datatype definitions see section  of the owl  structural specification owl  specification for information about datatype definitions in addition the table treats disjoint union axioms informative notes all the semantic conditions are iff conditions since the corresponding owl  language constructs are axioms see the notes on the form of semantic conditions for further information table  semantic conditions for equivalence and disjointness  a  a   iextiowlsameas iff a  a  a  a   iextiowldifferentfrom a  a  c  c   iextiowlequivalentclass c  c  ic  icextc  icextc  c  c   iextiowldisjointwith c  c  ic  icextc  icextc    p  p   iextiowlequivalentproperty p  p  ip  iextp  iextp  p  p   iextiowlpropertydisjointwith p  p  ip  iextp  iextp   if s sequence of c    cn  ir then  c  s   iextiowldisjointunionof iff c  c    cn  ic  icextc  icextc    icextcn  icextcj  icextck   for each   j  n and each   k  n such that j  k  semantic conditions for nary disjointness table  lists the semantic conditions for specifying nary diversity and disjointness axioms ie that several given individuals are mutually different from each other and that several given classes or properties are mutually disjoint with each other respectively note that there are two alternative ways to specify owlalldifferent axioms by using either the property owlmembers that is used for all other constructs too or by applying the legacy property owldistinctmembers both variants have an equivalent formal meaning informative notes the semantic conditions essentially represent iff conditions since the corresponding owl  language constructs are axioms however there are actually two semantic conditions for each language construct due to the multitriple rdf encoding of these language constructs the ifthen conditions only list those consequences on their right hand side that are specific for the respective condition ie consequences that do not already follow by other means see the notes on the form of semantic conditions for further information table  semantic conditions for nary disjointness if then s sequence of a    an  ir  z  icextiowlalldifferent   z  s   iextiowlmembers aj  ak for each   j  n and each   k  n such that j  k if then exists z  ir s sequence of a    an  ir  aj  ak for each   j  n and each   k  n such that j  k z  icextiowlalldifferent   z  s   iextiowlmembers if then s sequence of a    an  ir  z  icextiowlalldifferent   z  s   iextiowldistinctmembers aj  ak for each   j  n and each   k  n such that j  k if then exists z  ir s sequence of a    an  ir  aj  ak for each   j  n and each   k  n such that j  k z  icextiowlalldifferent   z  s   iextiowldistinctmembers if then s sequence of c    cn  ir  z  icextiowlalldisjointclasses   z  s   iextiowlmembers c    cn  ic  icextcj  icextck   for each   j  n and each   k  n such that j  k if then exists z  ir s sequence of c    cn  ic  icextcj  icextck   for each   j  n and each   k  n such that j  k z  icextiowlalldisjointclasses   z  s   iextiowlmembers if then s sequence of p    pn  ir  z  icextiowlalldisjointproperties   z  s   iextiowlmembers p    pn  ip  iextpj  iextpk   for each   j  n and each   k  n such that j  k if then exists z  ir s sequence of p    pn  ip  iextpj  iextpk   for each   j  n and each   k  n such that j  k z  icextiowlalldisjointproperties   z  s   iextiowlmembers  semantic conditions for sub property chains table  lists the semantic conditions for sub property chains which allow for specifying complex property subsumption axioms as an example one can define a sub property chain axiom that specifies the chain consisting of the property extensions of properties exhasfather and exhasbrother to be a sub relation of the extension of the property exhasuncle informative notes the semantic condition is an iff condition since the corresponding owl  language construct is an axiom see the notes on the form of semantic conditions for further information the semantics has been specified in a way such that a sub property chain axiom can be satisfied without requiring the existence of a property that has the property chain as its property extension table  semantic conditions for sub property chains if s sequence of p    pn  ir then  p  s   iextiowlpropertychainaxiom iff p  ip  p    pn  ip   y    yn   y  y   iextp and  and  yn  yn   iextpn implies  y  yn   iextp  semantic conditions for inverse properties table  lists the semantic conditions for inverse property axioms the inverse of a given property is the corresponding property with subject and object swapped for each property assertion built from it informative notes the semantic condition is an iff condition since the corresponding owl  language construct is an axiom see the notes on the form of semantic conditions for further information table  semantic conditions for inverse properties  p  p   iextiowlinverseof iff p  p  ip  iextp    x  y    y  x   iextp   semantic conditions for property characteristics table  lists the semantic conditions for property characteristics if a property is functional then at most one distinct value can be assigned to any given individual via this property an inverse functional property can be regarded as a key property ie no two different individuals can be assigned the same value via this property a reflexive property relates every individual in the universe to itself whereas an irreflexive property does not relate any individual with itself if two individuals are related by a symmetric property then this property also relates them reversely while this is never the case for an asymmetric property a transitive property that relates an individual a with an individual b and the latter with an individual c also relates a with c informative notes all the semantic conditions are iff conditions since the corresponding owl  language constructs are axioms see the notes on the form of semantic conditions for further information table  semantic conditions for property characteristics p  icextiowlfunctionalproperty iff p  ip   x  y  y   x  y   iextp and  x  y   iextp implies y  y p  icextiowlinversefunctionalproperty p  ip   x  x  y   x  y   iextp and  x  y   iextp implies x  x p  icextiowlreflexiveproperty p  ip   x   x  x   iextp p  icextiowlirreflexiveproperty p  ip   x   x  x   iextp p  icextiowlsymmetricproperty p  ip   x  y   x  y   iextp implies  y  x   iextp p  icextiowlasymmetricproperty p  ip   x  y   x  y   iextp implies  y  x   iextp p  icextiowltransitiveproperty p  ip   x  y  z   x  y   iextp and  y  z   iextp implies  x  z   iextp  semantic conditions for keys table  lists the semantic conditions for keys keys provide an alternative to inverse functional properties see section  they allow for defining a property as a key local to a given class the specified property will have the features of a key only for individuals being instances of the class and no assumption is made about individuals for which membership of the class cannot be entailed further it is possible to define compound keys ie several properties can be combined into a single key applicable to composite values note that keys are not functional by default under the owl  rdfbased semantics informative notes the semantic condition is an iff condition since the corresponding owl  language construct is an axiom see the notes on the form of semantic conditions for further information table  semantic conditions for keys if s sequence of p    pn  ir then  c  s   iextiowlhaskey iff c  ic  p    pn  ip   x  y  z    zn  if x  icextc and y  icextc and  x  zk   iextpk and  y  zk   iextpk for each   k  n then x  y  semantic conditions for negative property assertions table  lists the semantic conditions for negative property assertions they allow to state that two given individuals are not related by a given property the second form based on owltargetvalue is more specific than the first form based on owltargetindividual in that the second form is restricted to the case of negative data property assertions note that the second form will coerce the target value of a negative property assertion into a data value due to the range defined for the property owltargetvalue in section  informative notes the semantic conditions essentially represent iff conditions since the corresponding owl  language constructs are axioms however there are actually two semantic conditions for each language construct due to the multitriple rdf encoding of these language constructs the ifthen conditions only list those consequences on their right hand side that are specific for the respective condition ie consequences that do not already follow by other means see the notes on the form of semantic conditions for further information table  semantic conditions for negative property assertions if then  z  a   iextiowlsourceindividual   z  p   iextiowlassertionproperty   z  a   iextiowltargetindividual  a  a   iextp if then exists z  ir a  ir  p  ip  a  ir   a  a   iextp  z  a   iextiowlsourceindividual   z  p   iextiowlassertionproperty   z  a   iextiowltargetindividual if then  z  a   iextiowlsourceindividual   z  p   iextiowlassertionproperty   z  v   iextiowltargetvalue p  iodp   a  v   iextp if then exists z  ir a  ir  p  iodp  v  lv   a  v   iextp  z  a   iextiowlsourceindividual   z  p   iextiowlassertionproperty   z  v   iextiowltargetvalue  appendix axiomatic triples informative the rdf semantics specification rdf semantics defines so called axiomatic triples as part of the semantics of rdf and rdfs unlike the rdf semantics the owl  rdfbased semantics does not normatively specify any axiomatic triples since one cannot expect to find a set of rdf triples that fully captures all axiomatic aspects of the owl  rdfbased semantics furthermore axiomatic triples for the owl  rdfbased semantics could in principle contain arbitrarily complex class expressions eg the union of several classes and by this it becomes nonobvious which of several possible nonequivalent sets of axiomatic triples should be selected however the owl  rdfbased semantics includes many semantic conditions that can in a sense be regarded as being axiomatic and thus can be considered a replacement for the missing axiomatic triples after an overview on axiomatic triples for rdf and rdfs in section  sections  and  will discuss how the axiomatic semantic conditions of the owl  rdfbased semantics relate to axiomatic triples based on this discussion an explicit example set of axiomatic triples that is compatible with the owl  rdfbased semantics will be provided in section   axiomatic triples in rdf in rdf and rdfs rdf semantics axiomatic triples are used to provide basic meaning for all the vocabulary terms of the two languages this formal meaning is independent of any given rdf graph and it even holds for vocabulary terms which do not occur in a graph that is interpreted by an rdf or rdfs interpretation as a consequence all the axiomatic triples of rdf and rdfs are entailed by the empty graph when being interpreted under the semantics of rdf or rdfs respectively examples of rdf and rdfs axiomatic triples are  rdftype rdftype rdfproperty   rdftype rdfsdomain rdfsresource   rdftype rdfsrange rdfsclass   rdfsdatatype rdfssubclassof rdfsclass   rdfsisdefinedby rdfssubpropertyof rdfsseealso  as shown by these examples axiomatic triples are typically used by the rdf semantics specification to determine the part of the universe to which the denotation of a vocabulary term belongs  in the case of a property the domain  and range  is specified as well also in some cases hierarchical relationships between classes  or properties  of the vocabulary are determined under the owl  rdfbased semantics all the axiomatic triples of rdf and rdfs could in principle be replaced by axiomatic semantic conditions that have neither premises nor bound variables by applying the rdfs semantic conditions given in section  the example axiomatic triples    can be equivalently restated as irdftype  icextirdfproperty  iextirdftype  icextirdfsresource  icextirdfsclass  icextirdfsdatatype  icextirdfsclass  iextirdfsisdefinedby  iextirdfsseealso  all the axiomatic triples of rdf and rdfs can be considered simple in the sense that they have in their object position only single terms from the rdf and rdfs vocabularies and no complex class or property expressions appear there  axiomatic triples for the vocabulary classes the semantic conditions for vocabulary classes in section  can be considered as corresponding to a set of axiomatic triples for the classes in the vocabulary of the owl  rdfbased semantics first for each iri e occurring in the first column of table  if the second column contains an entry of the form ie  s for some set s then this entry corresponds to an rdf triple of the form e rdftype c where c is the iri of a vocabulary class with icextic  s in the table s will always be either the part ic of all classes or some sub part of ic hence in a corresponding rdf triple the iri c will be one of rdfsclass owlclass sic in both cases or rdfsdatatype sidc for example for the iri owlfunctionalproperty the semantic condition iowlfunctionalproperty  ic has the corresponding axiomatic triple owlfunctionalproperty rdftype rdfsclass  further for each iri e in the first column of the table if the third column contains an entry of the form icextie  s or icextie  s for some set s then this entry corresponds to an rdf triple of the form e rdfssubclassof c or additionally c rdfssubclassof e where c is the iri of a vocabulary class with icextic  s in each case s will be one of the parts of the universe of i for example the semantic condition icextiowlfunctionalproperty  ip has the corresponding axiomatic triple owlfunctionalproperty rdfssubclassof rdfproperty  in addition the semantic conditions for the parts of the universe in table  of section  have to be taken into account in particular if an entry in the second column of table  is of the form s  s for some sets s and s then this corresponds to an rdf triple of the form c owlsubclassof c where c and c are the iris of vocabulary classes with icextic  s and icextic  s respectively according to section  section  also specifies semantic conditions for all the datatypes of the owl  rdfbased semantics as listed in section  for each datatype iri e such as e  xsdstring for the semantic conditions ie  idc and icextie  lv the corresponding axiomatic triples are of the form e rdftype rdfsdatatype  e rdfssubclassof rdfsliteral  in analogy to section  for the rdf axiomatic triples all the axiomatic triples for the vocabulary classes including datatypes can be considered simple in the sense that they will have in their object position only single terms from the rdf rdfs and owl  rdfbased vocabularies section  note that some of the axiomatic triples obtained in this way already follow from the semantics of rdf and rdfs as defined in the rdf semantics rdf semantics  axiomatic triples for the vocabulary properties the semantic conditions for vocabulary properties in section  can be considered as corresponding to a set of axiomatic triples for the properties in the vocabulary of the owl  rdfbased semantics first for each iri e occurring in the first column of table  if the second column contains an entry of the form ie  s for some set s then this entry corresponds to an rdf triple of the form e rdftype c where c is the iri of a vocabulary class with icextic  s in the table s will always be either the part ip of all properties or some sub part of ip hence in a corresponding rdf triple the iri c will be one of rdfproperty owlobjectproperty sip in both cases owldatatypeproperty siodp owlontologyproperty sioxp or owlannotationproperty sioap for example for the iri owldisjointwith the semantic condition iowldisjointwith  ip has the corresponding axiomatic triple owldisjointwith rdftype rdfproperty  further for each iri e in the first column of the table if the third column contains an entry of the form iextie  s  s for some sets s and s then this entry corresponds to rdf triples of the form e rdfsdomain c and e rdfsrange c where c and c are the iris of vocabulary classes with icextic  s and icextic  s respectively note that the sets s and s do not always correspond to any of the parts of the universe of i for example the semantic condition iextiowldisjointwith  ic  ic has the corresponding axiomatic triples owldisjointwith rdfsdomain owlclass  owldisjointwith rdfsrange owlclass  exceptions are the semantic conditions iextiowltopobjectproperty  ir  ir and iextiowltopdataproperty  ir  lv since the exactly specified property extensions of these properties cannot be expressed solely by domain and range axiomatic triples for example the domain and range axiomatic triples for owlsameas are equal to those for owltopobjectproperty but the property extension of owlsameas is different from the property extension of owltopobjectproperty section  also specifies semantic conditions for all the facets of the owl  rdfbased semantics as listed in section  for each facet iri e such as e  xsdlength for the semantic conditions ie  iodp and iextie  ir  lv the corresponding axiomatic triples are of the form e rdftype owldatatypeproperty  e rdfsdomain rdfsresource  e rdfsrange rdfsliteral  in analogy to section  for the rdf axiomatic triples all the axiomatic triples for the vocabulary properties including facets can be considered simple in the sense that they will have in their object position only single terms from the rdf rdfs and owl  rdfbased vocabularies section   a set of axiomatic triples this section provides a concrete example set of axiomatic triples based on the discussion in the sections  and  the axiomatic triples are grouped by different tables for the classes and the properties of the owl  rdfbased vocabulary for the datatypes and the facets of the owl  rdfbased semantics and for some of the classes and properties of the rdfs vocabulary note that this set of axiomatic triples is not meant to be free of redundancy table  axiomatic triples for the classes of the owl  rdfbased vocabulary owlalldifferent rdftype rdfsclass  owlalldifferent rdfssubclassof rdfsresource  owlalldisjointclasses rdftype rdfsclass  owlalldisjointclasses rdfssubclassof rdfsresource  owlalldisjointproperties rdftype rdfsclass  owlalldisjointproperties rdfssubclassof rdfsresource  owlannotation rdftype rdfsclass  owlannotation rdfssubclassof rdfsresource  owlannotationproperty rdftype rdfsclass  owlannotationproperty rdfssubclassof rdfproperty  owlasymmetricproperty rdftype rdfsclass  owlasymmetricproperty rdfssubclassof owlobjectproperty  owlaxiom rdftype rdfsclass  owlaxiom rdfssubclassof rdfsresource  owlclass rdftype rdfsclass  owlclass rdfssubclassof rdfsclass  owldatarange rdftype rdfsclass  owldatarange rdfssubclassof rdfsdatatype  owldatatypeproperty rdftype rdfsclass  owldatatypeproperty rdfssubclassof rdfproperty  owldeprecatedclass rdftype rdfsclass  owldeprecatedclass rdfssubclassof rdfsclass  owldeprecatedproperty rdftype rdfsclass  owldeprecatedproperty rdfssubclassof rdfproperty  owlfunctionalproperty rdftype rdfsclass  owlfunctionalproperty rdfssubclassof rdfproperty  owlinversefunctionalproperty rdftype rdfsclass  owlinversefunctionalproperty rdfssubclassof owlobjectproperty  owlirreflexiveproperty rdftype rdfsclass  owlirreflexiveproperty rdfssubclassof owlobjectproperty  owlnamedindividual rdftype rdfsclass  owlnamedindividual rdfssubclassof owlthing  owlnegativepropertyassertion rdftype rdfsclass  owlnegativepropertyassertion rdfssubclassof rdfsresource  owlnothing rdftype owlclass  owlnothing rdfssubclassof owlthing  owlobjectproperty rdftype rdfsclass  owlobjectproperty rdfssubclassof rdfproperty  owlontology rdftype rdfsclass  owlontology rdfssubclassof rdfsresource  owlontologyproperty rdftype rdfsclass  owlontologyproperty rdfssubclassof rdfproperty  owlreflexiveproperty rdftype rdfsclass  owlreflexiveproperty rdfssubclassof owlobjectproperty  owlrestriction rdftype rdfsclass  owlrestriction rdfssubclassof owlclass  owlsymmetricproperty rdftype rdfsclass  owlsymmetricproperty rdfssubclassof owlobjectproperty  owlthing rdftype owlclass  owltransitiveproperty rdftype rdfsclass  owltransitiveproperty rdfssubclassof owlobjectproperty  table  axiomatic triples for the properties of the owl  rdfbased vocabulary owlallvaluesfrom rdftype rdfproperty  owlallvaluesfrom rdfsdomain owlrestriction  owlallvaluesfrom rdfsrange rdfsclass  owlannotatedproperty rdftype rdfproperty  owlannotatedproperty rdfsdomain rdfsresource  owlannotatedproperty rdfsrange rdfsresource  owlannotatedsource rdftype rdfproperty  owlannotatedsource rdfsdomain rdfsresource  owlannotatedsource rdfsrange rdfsresource  owlannotatedtarget rdftype rdfproperty  owlannotatedtarget rdfsdomain rdfsresource  owlannotatedtarget rdfsrange rdfsresource  owlassertionproperty rdftype rdfproperty  owlassertionproperty rdfsdomain owlnegativepropertyassertion  owlassertionproperty rdfsrange rdfproperty  owlbackwardcompatiblewith rdftype owlannotationproperty  owlbackwardcompatiblewith rdftype owlontologyproperty  owlbackwardcompatiblewith rdfsdomain owlontology  owlbackwardcompatiblewith rdfsrange owlontology  owlbottomdataproperty rdftype owldatatypeproperty  owlbottomdataproperty rdfsdomain owlthing  owlbottomdataproperty rdfsrange rdfsliteral  owlbottomobjectproperty rdftype owlobjectproperty  owlbottomobjectproperty rdfsdomain owlthing  owlbottomobjectproperty rdfsrange owlthing  owlcardinality rdftype rdfproperty  owlcardinality rdfsdomain owlrestriction  owlcardinality rdfsrange xsdnonnegativeinteger  owlcomplementof rdftype rdfproperty  owlcomplementof rdfsdomain owlclass  owlcomplementof rdfsrange owlclass  owldatatypecomplementof rdftype rdfproperty  owldatatypecomplementof rdfsdomain rdfsdatatype  owldatatypecomplementof rdfsrange rdfsdatatype  owldeprecated rdftype owlannotationproperty  owldeprecated rdfsdomain rdfsresource  owldeprecated rdfsrange rdfsresource  owldifferentfrom rdftype rdfproperty  owldifferentfrom rdfsdomain owlthing  owldifferentfrom rdfsrange owlthing  owldisjointunionof rdftype rdfproperty  owldisjointunionof rdfsdomain owlclass  owldisjointunionof rdfsrange rdflist  owldisjointwith rdftype rdfproperty  owldisjointwith rdfsdomain owlclass  owldisjointwith rdfsrange owlclass  owldistinctmembers rdftype rdfproperty  owldistinctmembers rdfsdomain owlalldifferent  owldistinctmembers rdfsrange rdflist  owlequivalentclass rdftype rdfproperty  owlequivalentclass rdfsdomain rdfsclass  owlequivalentclass rdfsrange rdfsclass  owlequivalentproperty rdftype rdfproperty  owlequivalentproperty rdfsdomain rdfproperty  owlequivalentproperty rdfsrange rdfproperty  owlhaskey rdftype rdfproperty  owlhaskey rdfsdomain owlclass  owlhaskey rdfsrange rdflist  owlhasself rdftype rdfproperty  owlhasself rdfsdomain owlrestriction  owlhasself rdfsrange rdfsresource  owlhasvalue rdftype rdfproperty  owlhasvalue rdfsdomain owlrestriction  owlhasvalue rdfsrange rdfsresource  owlimports rdftype owlontologyproperty  owlimports rdfsdomain owlontology  owlimports rdfsrange owlontology  owlincompatiblewith rdftype owlannotationproperty  owlincompatiblewith rdftype owlontologyproperty  owlincompatiblewith rdfsdomain owlontology  owlincompatiblewith rdfsrange owlontology  owlintersectionof rdftype rdfproperty  owlintersectionof rdfsdomain rdfsclass  owlintersectionof rdfsrange rdflist  owlinverseof rdftype rdfproperty  owlinverseof rdfsdomain owlobjectproperty  owlinverseof rdfsrange owlobjectproperty  owlmaxcardinality rdftype rdfproperty  owlmaxcardinality rdfsdomain owlrestriction  owlmaxcardinality rdfsrange xsdnonnegativeinteger  owlmaxqualifiedcardinality rdftype rdfproperty  owlmaxqualifiedcardinality rdfsdomain owlrestriction  owlmaxqualifiedcardinality rdfsrange xsdnonnegativeinteger  owlmembers rdftype rdfproperty  owlmembers rdfsdomain rdfsresource  owlmembers rdfsrange rdflist  owlmincardinality rdftype rdfproperty  owlmincardinality rdfsdomain owlrestriction  owlmincardinality rdfsrange xsdnonnegativeinteger  owlminqualifiedcardinality rdftype rdfproperty  owlminqualifiedcardinality rdfsdomain owlrestriction  owlminqualifiedcardinality rdfsrange xsdnonnegativeinteger  owlonclass rdftype rdfproperty  owlonclass rdfsdomain owlrestriction  owlonclass rdfsrange owlclass  owlondatarange rdftype rdfproperty  owlondatarange rdfsdomain owlrestriction  owlondatarange rdfsrange rdfsdatatype  owlondatatype rdftype rdfproperty  owlondatatype rdfsdomain rdfsdatatype  owlondatatype rdfsrange rdfsdatatype  owloneof rdftype rdfproperty  owloneof rdfsdomain rdfsclass  owloneof rdfsrange rdflist  owlonproperty rdftype rdfproperty  owlonproperty rdfsdomain owlrestriction  owlonproperty rdfsrange rdfproperty  owlonproperties rdftype rdfproperty  owlonproperties rdfsdomain owlrestriction  owlonproperties rdfsrange rdflist  owlpriorversion rdftype owlannotationproperty  owlpriorversion rdftype owlontologyproperty  owlpriorversion rdfsdomain owlontology  owlpriorversion rdfsrange owlontology  owlpropertychainaxiom rdftype rdfproperty  owlpropertychainaxiom rdfsdomain owlobjectproperty  owlpropertychainaxiom rdfsrange rdflist  owlpropertydisjointwith rdftype rdfproperty  owlpropertydisjointwith rdfsdomain rdfproperty  owlpropertydisjointwith rdfsrange rdfproperty  owlqualifiedcardinality rdftype rdfproperty  owlqualifiedcardinality rdfsdomain owlrestriction  owlqualifiedcardinality rdfsrange xsdnonnegativeinteger  owlsameas rdftype rdfproperty  owlsameas rdfsdomain owlthing  owlsameas rdfsrange owlthing  owlsomevaluesfrom rdftype rdfproperty  owlsomevaluesfrom rdfsdomain owlrestriction  owlsomevaluesfrom rdfsrange rdfsclass  owlsourceindividual rdftype rdfproperty  owlsourceindividual rdfsdomain owlnegativepropertyassertion  owlsourceindividual rdfsrange owlthing  owltargetindividual rdftype rdfproperty  owltargetindividual rdfsdomain owlnegativepropertyassertion  owltargetindividual rdfsrange owlthing  owltargetvalue rdftype rdfproperty  owltargetvalue rdfsdomain owlnegativepropertyassertion  owltargetvalue rdfsrange rdfsliteral  owltopdataproperty rdftype owldatatypeproperty  owltopdataproperty rdfsdomain owlthing  owltopdataproperty rdfsrange rdfsliteral  owltopobjectproperty rdftype rdfobjectproperty  owltopobjectproperty rdfsdomain owlthing  owltopobjectproperty rdfsrange owlthing  owlunionof rdftype rdfproperty  owlunionof rdfsdomain rdfsclass  owlunionof rdfsrange rdflist  owlversioninfo rdftype owlannotationproperty  owlversioninfo rdfsdomain rdfsresource  owlversioninfo rdfsrange rdfsresource  owlversioniri rdftype owlontologyproperty  owlversioniri rdfsdomain owlontology  owlversioniri rdfsrange owlontology  owlwithrestrictions rdftype rdfproperty  owlwithrestrictions rdfsdomain rdfsdatatype  owlwithrestrictions rdfsrange rdflist  table  axiomatic triples for the datatypes of the owl  rdfbased semantics xsdanyuri rdftype rdfsdatatype  xsdanyuri rdfssubclassof rdfsliteral  xsdbasebinary rdftype rdfsdatatype  xsdbasebinary rdfssubclassof rdfsliteral  xsdboolean rdftype rdfsdatatype  xsdboolean rdfssubclassof rdfsliteral  xsdbyte rdftype rdfsdatatype  xsdbyte rdfssubclassof rdfsliteral  xsddatetime rdftype rdfsdatatype  xsddatetime rdfssubclassof rdfsliteral  xsddatetimestamp rdftype rdfsdatatype  xsddatetimestamp rdfssubclassof rdfsliteral  xsddecimal rdftype rdfsdatatype  xsddecimal rdfssubclassof rdfsliteral  xsddouble rdftype rdfsdatatype  xsddouble rdfssubclassof rdfsliteral  xsdfloat rdftype rdfsdatatype  xsdfloat rdfssubclassof rdfsliteral  xsdhexbinary rdftype rdfsdatatype  xsdhexbinary rdfssubclassof rdfsliteral  xsdint rdftype rdfsdatatype  xsdint rdfssubclassof rdfsliteral  xsdinteger rdftype rdfsdatatype  xsdinteger rdfssubclassof rdfsliteral  xsdlanguage rdftype rdfsdatatype  xsdlanguage rdfssubclassof rdfsliteral  xsdlong rdftype rdfsdatatype  xsdlong rdfssubclassof rdfsliteral  xsdname rdftype rdfsdatatype  xsdname rdfssubclassof rdfsliteral  xsdncname rdftype rdfsdatatype  xsdncname rdfssubclassof rdfsliteral  xsdnegativeinteger rdftype rdfsdatatype  xsdnegativeinteger rdfssubclassof rdfsliteral  xsdnmtoken rdftype rdfsdatatype  xsdnmtoken rdfssubclassof rdfsliteral  xsdnonnegativeinteger rdftype rdfsdatatype  xsdnonnegativeinteger rdfssubclassof rdfsliteral  xsdnonpositiveinteger rdftype rdfsdatatype  xsdnonpositiveinteger rdfssubclassof rdfsliteral  xsdnormalizedstring rdftype rdfsdatatype  xsdnormalizedstring rdfssubclassof rdfsliteral  rdfplainliteral rdftype rdfsdatatype  rdfplainliteral rdfssubclassof rdfsliteral  xsdpositiveinteger rdftype rdfsdatatype  xsdpositiveinteger rdfssubclassof rdfsliteral  owlrational rdftype rdfsdatatype  owlrational rdfssubclassof rdfsliteral  owlreal rdftype rdfsdatatype  owlreal rdfssubclassof rdfsliteral  xsdshort rdftype rdfsdatatype  xsdshort rdfssubclassof rdfsliteral  xsdstring rdftype rdfsdatatype  xsdstring rdfssubclassof rdfsliteral  xsdtoken rdftype rdfsdatatype  xsdtoken rdfssubclassof rdfsliteral  xsdunsignedbyte rdftype rdfsdatatype  xsdunsignedbyte rdfssubclassof rdfsliteral  xsdunsignedint rdftype rdfsdatatype  xsdunsignedint rdfssubclassof rdfsliteral  xsdunsignedlong rdftype rdfsdatatype  xsdunsignedlong rdfssubclassof rdfsliteral  xsdunsignedshort rdftype rdfsdatatype  xsdunsignedshort rdfssubclassof rdfsliteral  rdfxmlliteral rdftype rdfsdatatype  rdfxmlliteral rdfssubclassof rdfsliteral  table  axiomatic triples for the facets of the owl  rdfbased semantics rdflangrange rdftype owldatatypeproperty  rdflangrange rdfsdomain rdfsresource  rdflangrange rdfsrange rdfsliteral  xsdlength rdftype owldatatypeproperty  xsdlength rdfsdomain rdfsresource  xsdlength rdfsrange rdfsliteral  xsdmaxexclusive rdftype owldatatypeproperty  xsdmaxexclusive rdfsdomain rdfsresource  xsdmaxexclusive rdfsrange rdfsliteral  xsdmaxinclusive rdftype owldatatypeproperty  xsdmaxinclusive rdfsdomain rdfsresource  xsdmaxinclusive rdfsrange rdfsliteral  xsdmaxlength rdftype owldatatypeproperty  xsdmaxlength rdfsdomain rdfsresource  xsdmaxlength rdfsrange rdfsliteral  xsdminexclusive rdftype owldatatypeproperty  xsdminexclusive rdfsdomain rdfsresource  xsdminexclusive rdfsrange rdfsliteral  xsdmininclusive rdftype owldatatypeproperty  xsdmininclusive rdfsdomain rdfsresource  xsdmininclusive rdfsrange rdfsliteral  xsdminlength rdftype owldatatypeproperty  xsdminlength rdfsdomain rdfsresource  xsdminlength rdfsrange rdfsliteral  xsdpattern rdftype owldatatypeproperty  xsdpattern rdfsdomain rdfsresource  xsdpattern rdfsrange rdfsliteral  table  additional axiomatic triples for classes and properties of the rdfs vocabulary rdfsclass rdfssubclassof owlclass  rdfscomment rdftype owlannotationproperty  rdfscomment rdfsdomain rdfsresource  rdfscomment rdfsrange rdfsliteral  rdfsdatatype rdfssubclassof owldatarange  rdfsisdefinedby rdftype owlannotationproperty  rdfsisdefinedby rdfsdomain rdfsresource  rdfsisdefinedby rdfsrange rdfsresource  rdfslabel rdftype owlannotationproperty  rdfslabel rdfsdomain rdfsresource  rdfslabel rdfsrange rdfsliteral  rdfsliteral rdftype rdfsdatatype  rdfproperty rdfssubclassof owlobjectproperty  rdfsresource rdfssubclassof owlthing  rdfsseealso rdftype owlannotationproperty  rdfsseealso rdfsdomain rdfsresource  rdfsseealso rdfsrange rdfsresource   appendix relationship to the direct semantics informative this section compares the owl  rdfbased semantics with the owl  direct semantics owl  direct semantics while the owl  rdfbased semantics is based on the rdf semantics specification rdf semantics the owl  direct semantics is a description logic style semantics several fundamental differences exist between the two semantics but there is also a strong relationship basically stating that the owl  rdfbased semantics is able to reflect all logical conclusions of the owl  direct semantics this means that the owl  direct semantics can in a sense be regarded as a semantics subset of the owl  rdfbased semantics technically the comparison will be performed by comparing the sets of entailments that hold for each of the two semantics respectively the definition of an owl  rdfbased entailment was given in section  of this document while the definition of an owl  direct entailment is provided in section  of the owl  direct semantics owl  direct semantics in both cases entailments are defined for pairs of ontologies and such an ordered pair of two ontologies will be called an entailment query in this section comparing the two semantics by means of entailments will only be meaningful if the entailment queries allow for applying both the owl  rdfbased semantics and the owl  direct semantics to them in order to ensure this the comparison will be restricted to entailment queries for which the lefthand side and righthand side ontologies are both owl  dl ontologies in rdf graph form these are rdf graphs that by applying the reverse rdf mapping owl  rdf mapping can be transformed into corresponding owl  dl ontologies in functional syntax form according to the functional style syntax defined in the owl  structural specification owl  specification and which must further meet all the restrictions on owl  dl ontologies that are specified in section  of the owl  structural specification owl  specification in fact these restrictions must be mutually met by both ontologies that occur in an entailment query ie all these restrictions need to be satisfied as if the two ontologies would be part of a single ontology any entailment query that adheres to the conditions defined here will be called an owl  dl entailment query ideally the relationship between the owl  rdfbased semantics and the owl  direct semantics would be of the form that every owl  dl entailment query that is an owl  direct entailment is also an owl  rdfbased entailment however this desirable relationship cannot hold in general due to a variety of differences that exist between the owl  rdfbased semantics and the owl  direct semantics as demonstrated in section  fortunately the problems resulting from these semantic differences can be overcome in a way that for every owl  dl entailment query there is another one for which the desired entailment relationship indeed holds and the new entailment query is semantically equivalent to the original entailment query under the owl  direct semantics this is the gist of the owl  correspondence theorem which will be presented in section  the proof of this theorem given in section  will further demonstrate that such a substitute owl  dl entailment query can always be algorithmically constructed by means of simple syntactic transformations  example on semantic differences this section will show that differences exist between the owl  rdfbased semantics and the owl  direct semantics and it will be demonstrated how these semantic differences complicate a comparison of the two semantics in terms of entailments an example owl  dl entailment query will be given which will happen to be an owl  direct entailment without being an owl  rdfbased entailment the section will explain the different reasons and will provide a resolution of each of them it will turn out that the example entailment query can be syntactically transformed into another owl  dl entailment query that is both an owl  direct entailment and an owl  rdfbased entailment while being semantically unchanged compared to the original entailment query under the owl  direct semantics this example will motivate the owl  correspondence theorem in section  and its proof in section  the example entailment query consists of the following pair  g  g  of rdf graphs g   exo rdftype owlontology   exc rdftype owlclass   exc rdftype owlclass   exc rdfssubclassof exc  g   exo rdftype owlontology   exc rdftype owlclass   exc rdftype owlclass   exc rdftype owlclass   exc rdfssubclassof _x   _x rdftype owlclass   _x owlunionof  exc exc    exc rdfslabel c  both g and g are owl  dl ontologies in rdf graph form and can therefore be mapped by the reverse rdf mapping owl  rdf mapping to the following two owl  dl ontologies in functional syntax form fg and fg fg   ontology exo  declaration class exc    declaration class exc    subclassof exc exc    fg   ontology exo  declaration class exc    declaration class exc    declaration class exc    subclassof exc objectunionof exc exc    annotationassertion rdfslabel exc c    note that fg and fg mutually meet the restrictions on owl  dl ontologies as specified in section  of the owl  structural specification owl  specification for example none of the iris being declared as a class in fg is declared as a datatype in fg since this would not be allowed for an owl  dl entailment query it follows that fg owl  direct entails fg to show this only the axioms  of fg and  of fg have to be considered none of the other statements in the two ontologies are relevant for this owl  direct entailment to hold since they do not have a formal meaning under the owl  direct semantics however it turns out that the rdf graph g does not owl  rdfbased entail g for reasons discussed in detail now reason  an annotation in fg the ontology fg contains an annotation  the owl  direct semantics does not give a formal meaning to annotations in contrast under the owl  rdfbased semantics every rdf triple occurring in an rdf graph has a formal meaning including the corresponding annotation triple  in g since this annotation triple only occurs in g but not in g there will exist owl  rdfbased interpretations that satisfy g without satisfying triple  of g hence g does not owl  rdfbased entail g resolution of reason  the annotation triple  in g will be removed which will avoid requiring owl  rdfbased interpretations to interpret this triple the changed rdf graphs will still be owl  dl ontologies in rdf graph form since annotations are strictly optional in owl  dl ontologies and may therefore be omitted also this operation will not change the formal meaning of the ontologies under the owl  direct semantics since annotations do not have a formal meaning under this semantics reason  an entity declaration exclusively in fg the ontology fg contains an entity declaration for the class iri exc  for which there is no corresponding entity declaration in fg the owl  direct semantics does not give a formal meaning to entity declarations while the owl  rdfbased semantics gives a formal meaning to the corresponding declaration statement  in g the consequences are analog to those described for reason  resolution of reason  the declaration statement  in g will be copied to g an owl  rdfbased interpretation that satisfies the modified graph g will then also satisfy the declaration statement the changed rdf graphs will still be owl  dl ontologies in rdf graph form since the copied declaration statement is not in conflict with any of the other entity declarations in g also this operation will not change the formal meaning of the ontologies under the owl  direct semantics since entity declarations do not have a formal meaning under this semantics reason  different ontology iris in fg and fg the ontology iris for the two ontologies given by  in fg and by  in fg differ from each other the owl  direct semantics does not give a formal meaning to ontology headers while the owl  rdfbased semantics gives a formal meaning to the corresponding header triples  in g and  in g since these header triples differ from each other the consequences are analog to those described for reason  resolution of reason  the iri in the subject position of the header triple  in g is changed into a blank node due to the existential semantics of blank nodes under the owl  rdfbased semantics the resulting triple will then be entailed by triple  in g the changed rdf graphs will still be owl  dl ontologies in rdf graph form since an ontology iri is optional for an owl  dl ontology note however that it would have been an error to simply remove triple  from g since an owl  dl ontology is required to contain an ontology header also this operation will not change the formal meaning of the ontologies under the owl  direct semantics since ontology headers do not have a formal meaning under this semantics reason  a class expression in fg axiom  of fg contains a class expression that represents the union of the two classes denoted by exc and exc within g this class expression is represented by the triples  and  both having the blank node _x in their respective subject position the way the owl  rdfbased semantics interprets these two triples differs from the way the owl  direct semantics treats the class expression in axiom  of fg the owl  direct semantics treats classes as sets ie subsets of the universe thus the iris exc and exc in fg denote two sets and the class expression in axiom  of fg therefore represents the set that consists of the union of these two sets the owl  rdfbased semantics on the other hand treats classes as individuals ie members of the universe while every class under the owl  rdfbased semantics represents a certain subset of the universe namely its class extension this set is actually distinguished from the class itself for two given classes it is ensured under the owl  rdfbased semantics just as for the owl  direct semantics that the union of their class extensions will always exist as a subset of the universe however there is no guarantee that there will also exist an individual in the universe that has this set union as its class extension under the owl  rdfbased semantics triple  of g essentially claims that a class exists being the union of two other classes but since the existence of such a union class is not ensured by g there will be owl  rdfbased interpretations that satisfy g without satisfying triple  of g hence g does not owl  rdfbased entail g resolution of reason  the triples  and  of g are copied to g together with the new triple _x owlequivalentclass _x in addition for the iri exc which only occurs in the union class expression but not in g an entity declaration is added to g by the resolution of reason  if an owl  rdfbased interpretation satisfies the modified graph g then the triples  and  of g will now be satisfied the changed rdf graphs will still be owl  dl ontologies in rdf graph form since the whole set of added triples validly encodes an owl  axiom and since none of the restrictions on owl  dl ontologies is hurt also this operation will not change the formal meaning of the ontologies under the owl  direct semantics since the added equivalence axiom is a tautology under this semantics note that it would have been an error to simply copy the triples  and  of g to g without also adding the new triple _x owlequivalentclass _x this would have produced a class expression that has no connection to any axiom in the ontology an owl  dl ontology is basically a set of axioms and does not allow for the occurrence of dangling class expressions this is the reason for actually embedding the class expression in an axiom it would have also been wrong to use an arbitrary axiom for such an embedding since it has to be ensured that the formal meaning of the original ontology does not change under the owl  direct semantics however any tautological axiom that contains the original class expression would have been sufficient for this purpose as well complete resolution the transformed entailment query combining the resolutions of all the above reasons leads to the following new pair of rdf graphs  g  g  g   exo rdftype owlontology   exc rdftype owlclass   exc rdftype owlclass   exc rdftype owlclass   exc rdfssubclassof exc   _x owlequivalentclass _x   _x rdftype owlclass   _x owlunionof  exc exc   g   _o rdftype owlontology   exc rdftype owlclass   exc rdftype owlclass   exc rdftype owlclass   exc rdfssubclassof _x   _x rdftype owlclass   _x owlunionof  exc exc   the following list reiterates the changes compared to the original rdf graphs g and g resolution of reason  annotation triple  in g has been removed ie there is no corresponding annotation triple in g resolution of reason  entity declaration triple  in g has been copied to g becoming triple  in g resolution of reason  ontology iris the iri in the subject position of triple  in g has been changed into a blank node becoming triple  in g resolution of reason  class expression triples  and  in g have been copied to g together with the new triple _x owlequivalentclass _x becoming triples   and  in g g and g are again owl  dl ontologies in rdf graph form and can be mapped to the following owl  dl ontologies in functional syntax form fg and fg which again mutually meet the restrictions on owl  dl ontologies fg   ontology exo  declaration class exc    declaration class exc    declaration class exc    subclassof exc exc   equivalentclasses objectunionof exc exc  objectunionof exc exc     fg   ontology  declaration class exc    declaration class exc    declaration class exc    subclassof exc objectunionof exc exc     as said earlier all the applied changes preserve the formal meaning of the original owl  dl ontologies under the owl  direct semantics hence it is still the case that fg owl  direct entails fg however due to the syntactic transformation the situation has changed for the owl  rdfbased semantics it is now possible to show by following the lines of argumentation for the resolutions of the different reasons given above that g owl  rdfbased entails g as well  correspondence theorem this section presents the owl  correspondence theorem which compares the semantic expressivity of the owl  rdfbased semantics with that of the owl  direct semantics the theorem basically states that the owl  rdfbased semantics is able to reflect all the semantic conclusions of the owl  direct semantics where the notion of a semantic conclusion is technically expressed in terms of an entailment however as discussed in section  there exist semantic differences between the owl  rdfbased semantics and the owl  direct semantics which do not allow for stating that any owl  dl entailment query that is an owl  direct entailment will always also be an owl  rdfbased entailment nevertheless it can still be ensured that any given owl  dl entailment query can be substituted by another owl  dl entailment query in a way that for the substitute entailment query the desired relationship will really hold while preserving the formal meaning compared to the original entailment query under the owl  direct semantics in fact the theorem only makes the seemingly weak assertion that such a substitute entailment query will always exist but the actual proof for the theorem in section  will be more concrete in that it will substitute each given owl  dl entailment query with a variant that can be algorithmically constructed by applying a set of simple syntactic transformations to the original entailment query one can get an idea of how this works from section  technical note on corresponding datatype maps a distinction exists between the format of an owl  rdfbased datatype map as defined by definition  and the format of an owl  direct datatype map as defined in section  of the owl  direct semantics owl  direct semantics it is however possible to translate between an owl  rdfbased datatype map d and the corresponding owl  direct datatype map fd in the following way for an owl  rdfbased datatype map d the corresponding owl  direct datatype map fd   ndt  nls  nfs   dt   ls   fs  owl  direct semantics is given by datatype names ndt is defined as the set of all iris u for which there is a datatype d such that  u  d   d lexical space for each datatype name u  ndt set nlsu  lsd where  u  d   d facet space for each datatype name u  ndt set nfsu  fsd where  u  d   d value space for each datatype name u  ndt set u dt  vsd where  u  d   d lexicaltovalue mapping for each datatype name u  ndt and each lexical form a  nlsu set  a  u  ls  lvda where  u  d   d facettovalue mapping for each datatype name u  ndt and each facetvalue pair  f  v   nfsu set  f  v  fs  fvd f  v  where  u  d   d theorem  owl  correspondence theorem let d be an owl  rdfbased datatype map according to definition  with fd being the owl  direct datatype map according to section  of the owl  direct semantics owl  direct semantics that corresponds to d according to the technical note on corresponding datatype maps let g and g be rdf graphs that are owl  dl ontologies in rdf graph form with fg and fg being the owl  dl ontologies in functional syntax form owl  specification that result from applying the reverse rdf mapping owl  rdf mapping to g and g respectively let fg and fg mutually meet the restrictions on owl  dl ontologies as specified in section  of the owl  structural specification owl  specification then there exist rdf graphs g and g that are owl  dl ontologies in rdf graph form such that all the following relationships hold with fg and fg being the owl  dl ontologies in functional syntax form that result from applying the reverse rdf mapping to g and g respectively fg and fg mutually meet the restrictions on owl  dl ontologies fg owl  direct entails fg with respect to fd and fg owl  direct entails fg with respect to fd fg owl  direct entails fg with respect to fd and fg owl  direct entails fg with respect to fd if fg owl  direct entails fg with respect to fd then g owl  rdfbased entails g with respect to d  proof for the correspondence theorem this is the sketch of a proof for theorem  owl  correspondence theorem in section  the proof sketch provides the basic line of argumentation for showing the theorem however for complexity reasons some technical aspects of the theorem are only coarsely treated and the proof sketch also refrains from considering the full amount of owl  language constructs for certain steps of the proof there are example calculations that focus only on a small fraction of language constructs but which can be taken as a hint on how a complete proof taking into account every feature of the owl  rdfbased semantics could be constructed in principle a complete proof could make use of the observation that the definitions of the owl  direct semantics and the owl  rdfbased semantics despite their technical differences as outlined in section  are closely aligned with respect to the different language constructs of owl  the proof sketch will make use of an approach that will be called balancing throughout this section and which will now be introduced the basic idea is to substitute the original pair of rdf graphs in an owl  dl entailment query by another entailment query having the same semantic characteristics under the owl  direct semantics but for which the technical differences between the two semantics specifications have no relevant consequences under the owl  rdfbased semantics anymore a concrete example for the application of this approach was given in section  definition balanced a pair of rdf graphs  g  g  is called balanced if and only if g and g are owl  dl ontologies in rdf graph form such that all the following conditions hold with fg and fg being the owl  dl ontologies in functional syntax form owl  specification that result from applying the reverse rdf mapping owl  rdf mapping to g and g respectively fg and fg mutually meet the restrictions on owl  dl ontologies as specified in section  of the owl  structural specification owl  specification nodes in g and g for every iri u occurring in g or g that corresponds to a nonbuiltin entity in fg or fg respectively the graph contains for every entity type t of u a declaration statement of the form u rdftype t where t is the vocabulary class iri corresponding to t see table  in the owl  rdf mapping owl  rdf mapping and section  of the owl  structural specification owl  specification every plain or typed literal occurring in g also occurs in g see section  of the owl  structural specification owl  specification g contains exactly one ontology header consisting of a single rdf triple of the form x rdftype owlontology where x is either a blank node or if an ontology iri is used in g may alternatively equal that ontology iri see table  in the owl  rdf mapping owl  rdf mapping g does not contain the rdf encoding of an annotation see sections  and  and table  in the owl  rdf mapping owl  rdf mapping a statement with an ontology property such as owlimports a deprecation statement based on owldeprecatedclass owldeprecatedproperty and owldeprecated see table  in the owl  rdf mapping owl  rdf mapping an annotation property axiom based on rdfssubclassof rdfsdomain and rdfsrange see table  in the owl  rdf mapping owl  rdf mapping any of the following sub graphs of g is also a sub graph of g the rdf encoding of an entity declaration see table  in the owl  rdf mapping owl  rdf mapping the rdf encoding of a property expression see table  in the owl  rdf mapping owl  rdf mapping the rdf encoding of a class expression see tables  and  in the owl  rdf mapping owl  rdf mapping the rdf encoding of a data range expression see tables  and  in the owl  rdf mapping owl  rdf mapping an rdf sequence see table  in the owl  rdf mapping owl  rdf mapping balancing lemma an algorithm exists that terminates on every valid input and that has the following inputoutput behavior the valid input of the algorithm is given by all the pairs of rdf graphs  g  g  where g and g are owl  dl ontologies in rdf graph form with fg and fg being the owl  dl ontologies in functional syntax form owl  specification that result from applying the reverse rdf mapping owl  rdf mapping to g and g respectively further fg and fg have to mutually meet the restrictions on owl  dl ontologies as specified in section  of the owl  structural specification owl  specification for a valid input the output of the algorithm is a pair of rdf graphs  g  g  where g and g are owl  dl ontologies in rdf graph form such that for any owl  rdfbased datatype map d according to definition  all the following relationships hold with fg and fg being the owl  dl ontologies in functional syntax form that result from applying the reverse rdf mapping to g and g respectively and with fd being the owl  direct datatype map according to section  of the owl  direct semantics owl  direct semantics that corresponds to d according to the technical note on corresponding datatype maps in section  the pair  g  g  is balanced fg owl  direct entails fg with respect to fd and fg owl  direct entails fg with respect to fd fg owl  direct entails fg with respect to fd and fg owl  direct entails fg with respect to fd proof for the balancing lemma let the graph pair  g  g  be a valid input the resulting rdf graphs g and g are constructed as follows starting from copies of g and g respectively since the initial versions of g and g are owl  dl ontologies in rdf graph form the canonical parsing process cp for computing the reverse rdf mapping as described in section  of the owl  rdf mapping owl  rdf mapping can be applied based on cp it is possible to identify within these graphs all entity types for every nonbuiltin iri all blank nodes that correspond to anonymous individuals and all sub graphs that correspond to owl  language constructs ontology headers declarations expressions axioms and annotations as described in the owl  structural specification owl  specification based on this observation the following steps are performed consistently substitute all blank nodes in g such that g and g have no common blank nodes apply cp to g and g without changing these graphs to identify the entity types of the iris the anonymous individuals and the sub graphs encoding owl  language constructs for each sub graph g of g remove g from g if g is the rdf encoding of an annotation or a deprecation statement or an annotation property axiom for the sub graph g of g corresponding to the ontology header in fg substitute g in g by a triple of the form x rdftype owlontology where x is a new blank node not yet used in g for each nonbuiltin iri u in g and g and for each entity type t of u identified by cp add to g or g respectively the rdf triple u rdftype t where t is the vocabulary class iri corresponding to t for each plain or typed literal l in g add to g the rdf triple o rdfscomment l where o is the iri or blank node of the ontology header triple o rdftype owlontology in g for each sub graph g of g that is the rdf encoding of an entity declaration add g to g for each sub graph g of g that is the rdf encoding of a property expression with root blank node x add g to g together with the rdf triple x owlequivalentproperty x for each sub graph g of g that is the rdf encoding of a class expression with root blank node x add g to g together with the rdf triple x owlequivalentclass x for each sub graph g of g that is the rdf encoding of a data range expression with root blank node x if g is part of a data property restriction expression then nothing needs to be done since the comprising restriction expression is covered by the treatment of class expressions and therefore g occurs in g as well otherwise add a declaration triple to g for a new data property p that does not yet occur in g and g then the rdf encoding r of a universal data property restriction expression on property p is created for g let r have the new root blank node y add r to g together with the rdf triple y owlequivalentclass y for each sub graph g of g that is an rdf sequence with root blank node x which does not occur in the rdf encoding of language constructs already treated by one of the earlier steps ie g is part of the encoding of an axiom create the rdf encoding r of an enumeration class expression with a new root blank node y having the main rdf triple y owloneof x then add r to g together with the rdf triple y owlequivalentclass y additionally for every iri u being a member of the rdf sequence add to g a typing triple u rdftype owlnamedindividual if one of the sequence members is a blank node z that is the root node of some property expression or class expression e then select a new iri w not yet occurring in g consistently replace z by w everywhere in r add to g the triple w owlequivalentproperty z or w owlequivalentclass z respectively and add to g the two triples w rdftype owlnamedindividual and w rdftype t where t is the vocabulary class iri that represents the appropriate entity type of the expression e no further treatment of e is needed since e is treated by the earlier steps covering expressions in the following it is shown that all the claims of the balancing lemma hold a existence of a terminating algorithm an algorithm exists for mapping the input graph pair  g  g  to the output graph pair  g  g  since cp applied in step  is described in the form of an algorithm in the owl  rdf mapping owl  rdf mapping and since all other steps can obviously be performed algorithmically the algorithm terminates since cp terminates on arbitrary input graphs and since all other steps can obviously be executed in finite time b the resulting rdf graphs are owl  dl ontologies the rdf graphs g and g are owl  dl ontologies in rdf graph form that mutually meet the restrictions on owl  dl ontologies since the original rdf graphs g and g have this feature and since each of the steps described above transforms a pair of rdf graphs with this feature again into a pair of rdf graphs with this feature for the following reasons the consistent substitution of blank nodes in step  does not change the structure of an owl  dl ontology the application of cp in step  does not change the graphs annotations deprecation statements and annotation property axioms are optional information in an owl  dl ontology and can therefore be omitted in step  the ontology header of an owl  dl ontology does neither require the existence of an ontology iri nor of any ontology properties and so the substitution of the ontology header in step  is a valid operation if an entity has some particular entity type for which there is no explicitly given entity declaration then the entity declaration may be added as done in step  it is allowed to add arbitrary annotations to the ontology header of an owl  dl ontology as done in step  entity declarations may be copied from g to g in step  without conflict since the original ontologies have been assumed to mutually meet the restrictions on owl  dl ontologies regarding different entity declarations for the same iri eg that one iri must not be the name of both an object property and a data property adding to g an axiom that claims equivalence of some property expression step  or class expression step  with itself where the expression already occurs in g is an allowed operation since the original ontologies are assumed to mutually meet the restrictions on owl  dl ontologies concerning property and class expressions and since no syntactic restrictions exist on this specific use of equivalence axioms for the case of data ranges step  it is sufficient to note that placing universal property restrictions on arbitrary simple or complex property expressions is allowed in owl  dl the rest of the argumentation follows the lines of the treatment of class expressions in step  for the treatment of rdf sequences in step  first the enumeration class expressions being constructed from the rdf sequences are syntactically valid in owl  dl since all enumerated entries are iris by construction second there is no restriction in owl  dl disallowing axioms that claim equivalence of enumeration class expressions with themselves third punning in owl  dl allows a given nonbuiltin iri of any entity type to be additionally declared as a named individual forth there is no owl  dl restriction forbidding to add an entity declaration for a new ie not elsewhere used iri and to assert the denotation of this new iri to be equivalent to some existing property or class expression hence the resulting ontologies still mutually meet all syntactic restrictions on owl  dl ontologies c the resulting pair of rdf graphs is balanced all the conditions of balanced pairs of rdf graphs are met by the pair  g  g  for the following reasons condition  it has already been shown in paragraph b that g and g mutually meet the restrictions on owl  dl ontologies conditions  and  on nodes in g and g are met by steps  and  respectively condition  on ontology headers in g is satisfied by step  always applying an anonymous ontology header conditions   and  on annotations deprecation statements and annotation property axioms in g respectively are all satisfied by step  condition  on statements with ontology properties is implicitly satisfied by step  since the substitution of the ontology header in g removes all existing statements with ontology properties condition  on entity declarations in g being reflected in g is satisfied by step  conditions   and  on property class and data range expressions in g respectively being reflected in g are met by steps   and  respectively condition  on rdf sequences in g being reflected in g is satisfied by step  d the resulting ontologies are semantically equivalent with the original ontologies under the owl  direct semantics fg is semantically equivalent with fg since fg differs from fg only by potentially additional entity declarations steps   and  which have no formal meaning under the owl  direct semantics additional annotations step  which have no formal meaning additional tautological axioms steps    and  which do not change the formal meaning fg is semantically equivalent with fg since fg differs from fg only by potentially differently labeled anonymous individuals step  by which the formal meaning under the owl  direct semantics keeps unchanged since anonymous individuals are existentially interpreted missing annotations deprecation statements and annotation property axioms step  which have no formal meaning a modified ontology header step  which has no formal meaning additional entity declarations step  which have no formal meaning end of proof for the balancing lemma in the following the correspondence theorem will be proven assume that the premises of the correspondence theorem are true for a given pair  g  g  of rdf graphs this allows for applying the balancing lemma which provides the existence of corresponding rdf graphs g and g that are owl  dl ontologies in rdf graph form and which meet the definition of balanced graph pairs let fg and fg be the corresponding owl  dl ontologies in functional syntax form then the claimed relationship  of the correspondence theorem follows directly from relationship  of the balancing lemma and from condition  of the definition of balanced graph pairs further the claimed relationships  and  of the correspondence theorem follow directly from the relationships  and  of the balancing lemma respectively the rest of this proof will treat the claimed relationship  of the correspondence theorem which states that if fg owl  direct entails fg with respect to fd then g owl  rdfbased entails g with respect to d for this to see an arbitrary owl  rdfbased interpretation i will be selected that owl  rdfbased satisfies g for i a closely corresponding owl  direct interpretation j will be constructed and it will then be shown that j owl  direct satisfies fg since it was assumed that fg owl  direct entails fg it will follow that j owl  direct satisfies fg based on this result it will then be possible to show that i also owl  rdfbased satisfies g since i was arbitrarily selected this will mean that g owl  rdfbased entails g step  selection of a pair of corresponding interpretations let fg owl  direct entail fg wrt fd and let i be an owl  rdfbased interpretation of a vocabulary vi wrt d such that i owl  rdfbased satisfies g since the pair  g  g  is balanced there exist entity declarations in fg for each entity type of every nonbuiltin iri occurring in g for each entity declaration of the form declarationtu in fg such that t is the entity type for some iri u a typing triple of the form u rdftype t exists in g where t is the vocabulary class iri representing the part of the universe of i that corresponds to t since i owl  rdfbased satisfies g all these declaration typing triples are owl  rdfbased satisfied by i and thus all nonbuiltin iris in g are instances of all their declared parts of the universe of i the vocabulary vj   vjc  vjop  vjdp  vji  vjdt  vjlt  vjfa  of the owl  direct interpretation j wrt the datatype map fd is now constructed as follows the set vjc of classes contains all iris in vi that are declared as classes in fg together with all the required class names listed in section  of the owl  direct semantics owl  direct semantics the set vjop of object properties contains all iris in vi that are declared as object properties in fg together with all the required object property names listed in section  of the owl  direct semantics owl  direct semantics the set vjdp of data properties contains all iris in vi that are declared as data properties in fg together with all the required data property names listed in section  of the owl  direct semantics owl  direct semantics the set vji of individuals contains all iris in vi that are declared as named individuals in fg and additionally all anonymous individuals occurring in fg and fg the set vjdt of datatypes is defined according to section  of the owl  direct semantics owl  direct semantics wrt the datatype map fd together with all other iris in vi that are declared as datatypes in fg the set vjlt of literals is defined according to section  of the owl  direct semantics owl  direct semantics wrt the datatype map fd the set vjfa of facetliteral pairs is defined according to section  of the owl  direct semantics owl  direct semantics wrt the datatype map fd the owl  direct interpretation j   i  d   c   op   dp   i   dt   lt   fa  is now defined as follows the object and data domains of j are identified with the universe ir and the set of data values lv of i respectively ie i  ir and d  lv the class interpretation function  c the object property interpretation function  op the data property interpretation function  dp the datatype interpretation function  dt the literal interpretation function  lt and the facet interpretation function  fa are defined according to section  of the owl  direct semantics owl  direct semantics specifically for every nonbuiltin iri u occurring in fg if u is declared as a class then set uc  icextiu since g contains the triple u rdftype owlclass ie iu  ic if u is declared as an object property then set uop  iextiu since g contains the triple u rdftype owlobjectproperty ie iu  ip if u is declared as a data property then set udp  iextiu since g contains the triple u rdftype owldatatypeproperty ie iu  iodp if u is declared as a named individual then set ui  iu since g contains the triple u rdftype owlnamedindividual ie iu  ir if u is declared as a datatype then set udt  icextiu since g contains the triple u rdftype rdfsdatatype ie iu  idc notes a literal occurring in g is mapped by the reverse rdf mapping to the same literal in fg and the formal meaning of a wellformed literal is analog for both the owl  rdfbased semantics and the owl  direct semantics a blank node b occurring in g that represents an anonymous individual is written as the same blank node b in fg both the owl  rdfbased semantics and the owl  direct semantics treat anonymous individuals in an analog way as existential variables defined locally to a given ontology ie some individual x exists in the universe to which all occurrences of b in the ontology can be mapped see section  in the rdf semantics rdf semantics for the precise definition on how blank nodes are treated under the owl  rdfbased semantics hence the same mapping from b to x can be used with both i and j g may also contain declarations for annotation properties since annotation properties have no formal meaning under the owl  direct semantics the owl  direct interpretation j does not treat them with the above definition it is possible for j to have a nonseparated vocabulary according to section  of the owl  structural specification owl  specification since g is an owl  dl ontology in rdf graph form it is allowed that the same iri u may be declared as one or more of an individual name either a class name or a datatype name and either an object property name or a data property name for the owl  rdfbased interpretation i the iri u will always denote the same individual in the universe ir where iu may additionally have a class extension or a property extension or both for the owl  direct interpretation j however u will denote as an individual name an element of i as a class name a subset of i as a datatype name a subset of d as an object property name a subset of i  i and as a data property name a subset of i  d step  satisfaction of fg by the owl  direct interpretation based on the premise that i owl  rdfbased satisfies g it has to be shown that j owl  direct satisfies fg for this to hold it will be sufficient that j owl  direct satisfies every axiom a occurring in fg let ga be the sub graph of g that is mapped to a by the reverse rdf mapping the basic idea can roughly be described as follows since i is an owl  rdfbased interpretation all the owl  rdfbased semantic conditions are met by i due to the close alignment between the definitions in the owl  rdfbased semantics and the owl  direct semantics owl  rdfbased semantic conditions exist that semantically correspond to the definition of the interpretation of the axiom a in particular the antecedent of one of these semantic conditions will become true if the rdfencoding of a ie the graph ga is satisfied in the case of an ifandonlyif semantic condition this will generally be the lefttoright direction of that condition now all the rdf triples in ga are owl  rdfbased satisfied by i since i owl  rdfbased satisfies g hence the antecedent of the semantic condition becomes true and therefore its consequent becomes true as well this will reveal a certain semantic relationship that according to i holds between the denotations of the iris literals and anonymous individuals occurring in ga which roughly speaking expresses the meaning of the owl  axiom a because of the close semantic correspondence of the owl  direct interpretation j to i the analog semantic relationship holds according to j between the denotations of the iris literals and anonymous individuals occurring in a this semantic relationship turns out to be compatible with the formal meaning of the axiom a as specified by the owl  direct semantics ie j satisfies a this basic idea is now demonstrated in more detail for a single example axiom a in fg which can be taken as a hint on how a complete proof taking into account every feature of the owl  rdfbased semantics could be constructed in principle let a be the following owl  axiom in fg a  subclassofexc objectunionofexc exc and let ga be the corresponding sub graph in g that is being mapped to a via the reverse rdf mapping namely ga  exc rdfssubclassof _x  _x rdftype owlclass  _x owlunionof  exc exc   since the pair  g  g  is balanced g contains the typing triples exc rdftype owlclass  exc rdftype owlclass  exc rdftype owlclass  that correspond to class entity declarations in fg for the iris exc exc and exc respectively all these declaration typing triples are owl  rdfbased satisfied by i since it has been postulated that i owl  rdfbased satisfies g hence by applying the semantics of rdftype see section  of the rdf semantics rdf semantics all the iris denote classes precisely iexc  ic  iexc  ic  and iexc  ic  since i is an owl  rdfbased interpretation it meets all the owl  rdfbased semantic conditions and since i owl  rdfbased satisfies g all the triples in ga are owl  rdfbased satisfied this meets the lefttoright directions of the semantic conditions for subclass axioms rdfssubclassof see section  and union class expressions owlunionof see section  which results in the following semantic relationship that holds between the extensions of the classes above according to i icextiexc  icextiexc  icextiexc  by applying the definition of j one can conclude that the following semantic relationship holds between the denotations of the class names occurring in a according to j exc c  exc c  exc c  this semantic relationship is compatible with the formal meaning of the axiom a under the owl  direct semantics hence j owl  direct satisfies a since j owl  direct satisfies fg and since it has been postulated that fg owl  direct entails fg it follows that j owl  direct satisfies fg step  satisfaction of g by the owl  rdfbased interpretation the last step will be to show that i owl  rdfbased satisfies g for this to hold i needs to owl  rdfbased satisfy every triple occurring in g the basic idea can roughly be described as follows first according to the semantic conditions for ground graphs in section  of the rdf semantics specification rdf semantics all the iris and literals used in rdf triples in g need to be in the vocabulary vi of i this is true for the following reason since the pair  g  g  is balanced all iris and literals occurring in g do also occur in g since i satisfies g all iris and literals in g including those in g are contained in vi due to the semantic conditions for ground graphs second if a set of rdf triples encodes an owl  language construct that is not interpreted by the owl  direct semantics such as annotations then g should contain such a set of rdf triples only if they are also included in g the reason is that with such triples there will in general exist owl  rdfbased interpretations only satisfying the graph g but not g which will render the pair  g  g  into a nonentailment an exception are rdf triples that are true under every owl  rdfbased interpretation since the pair  g  g  is balanced g will not contain the rdf encoding for any annotations statements with ontology properties deprecation statements or annotation property axioms hence there are no corresponding rdf triples that need to be satisfied by i third since g is an owl  dl ontology in rdf graph form the graph is partitioned by the reverse rdf mapping owl  rdf mapping into sub graphs corresponding to either ontology headers entity declarations or axioms where axioms may further consist of different kinds of expressions such as boolean class expressions it has to be shown that all the triples in each such sub graph are owl  rdfbased satisfied by i for ontology headers let a be the ontology header of fg and let ga be the corresponding sub graph of g since the pair  g  g  is balanced ga is encoded as a single rdf triple of the form x rdftype owlontology where x is either an iri or a blank node since g is an owl  dl ontology in rdf graph form g also contains the encoding of an ontology header including a triple g of the form y rdftype owlontology where y is either an iri or a blank node since i owl  rdfbased satisfies g g is satisfied by i if both y and x are iris then due to balancing x equals y and therefore ga equals g ie ga is owl  rdfbased satisfied by i otherwise balancing forces x to be a blank node ie x is treated as an existential variable under the owl  rdfbased semantics according to the semantic conditions for blank nodes rdf semantics from this observation and from the premise that i satisfies g it follows that ga is owl  rdfbased satisfied by i for entity declarations let a be an entity declaration in fg and let ga be the corresponding sub graph of g since the pair  g  g  is balanced a occurs in fg and hence ga is a sub graph of g since i owl  rdfbased satisfies g i owl  rdfbased satisfies ga for axioms let a be an axiom in fg and let ga be the corresponding sub graph of g since i is an owl  rdfbased interpretation all the owl  rdfbased semantic conditions are met by i due to the close alignment between the definitions in the owl  rdfbased semantics and the owl  direct semantics owl  rdfbased semantic conditions exist that semantically correspond to the definition of the interpretation of the axiom a in particular the consequent of one of these semantic conditions corresponds to the rdfencoding of a ie the graph ga except for declaration typing triples for which satisfaction has already been shown in the case of an ifandonlyif semantic condition this will generally be the righttoleft direction of that condition hence in order to show that ga is owl  rdfbased satisfied by i it will be sufficient to show that the antecedent of this semantic condition is true in general several requirements have to be met to ensure this requirement  the denotations of all the nonbuiltin iris in ga have to be contained in the appropriate part of the universe of i this can be shown as follows for every nonbuiltin iri u occurring in ga u also occurs in a since the pair  g  g  is balanced there are entity declarations in fg for all the entity types of u each being of the form d  declarationtu for some entity type t from the reverse rdf mapping follows that for each such declaration d a typing triple d exists in g being of the form d  u rdftype t where t is the vocabulary class iri representing the part of the universe of i that corresponds to the entity type t it has already been shown that for d being an entity declaration in fg and d being the corresponding sub graph in g i owl  rdfbased satisfies d hence iu is an individual contained in the appropriate part of the universe requirement  for every expression e occurring in a with the rdf encoding ge in ga an individual has to exist in the universe of i that appropriately represents the denotation of e since i is an owl  rdfbased interpretation all the owl  rdfbased semantic conditions are met by i due to the close alignment between the definitions in the owl  rdfbased semantics and the owl  direct semantics owl  rdfbased semantic conditions exist that semantically correspond to the definition of the interpretation of the expression e in particular the antecedent of one of these semantic conditions will become true if the rdfencoding of e ie the graph ge is satisfied in the case of an ifandonlyif semantic condition this will generally be the lefttoright direction of that condition now since the pair  g  g  is balanced ge also occurs in g so since i owl  rdfbased satisfies g ge is owl  rdfbased satisfied by i hence the antecedent of the semantic condition becomes true and therefore its consequent becomes true as well this will result in the existence of an individual with the required properties when taking into account existential blank node semantics requirement  a semantic relationship has to hold between the denotations of the iris literals and anonymous individuals occurring in ga with respect to i which roughly speaking expresses the meaning of the owl  axiom a this is the case for the following reasons first the literals and anonymous individuals occurring in a and ga respectively are interpreted in an analog way under the owl  direct semantics and the owl  rdfbased semantics second it was assumed that the owl  direct interpretation j owl  direct satisfies a and therefore a semantic relationship with the desired properties holds with respect to j third j has been defined in close correspondence to i so that for the semantic relationship expressed by j an analog semantic relationship holds with respect to i this basic idea is now demonstrated in more detail for a single example axiom a in fg which can be taken as a hint on how a complete proof taking into account every feature of the owl  rdfbased semantics could be constructed in principle let a be the following owl  axiom in fg a  subclassofexc objectunionofexc exc and let ga be the corresponding sub graph in g that is being mapped to a via the reverse rdf mapping namely ga  exc rdfssubclassof _x  _x rdftype owlclass  _x owlunionof  exc exc   first since the pair  g  g  is balanced g contains the typing triples exc rdftype owlclass  exc rdftype owlclass  exc rdftype owlclass  that correspond to class entity declarations in fg for the iris exc exc and exc respectively all these declaration typing triples are owl  rdfbased satisfied by i since due to balancing the typing triples exist in g as well and since it has been postulated that i owl  rdfbased satisfies all triples in g hence by applying the semantics of rdftype see section  of the rdf semantics rdf semantics all the iris denote classes and therefore the denotations of the iris are included in the appropriate part of the universe of i precisely iexc  ic  iexc  ic  and iexc  ic  second ga contains the sub graph ge given by ge  _x rdftype owlclass  _x owlunionof  c c   which corresponds to the union class expression e in a given by e  objectunionofexc exc since the pair  g  g  is balanced ge occurs as a sub graph of g as well ge contains blank nodes and since i satisfies g the semantic conditions for rdf graphs with blank nodes apply see section  of the rdf semantics rdf semantics this provides the existence of a mapping b from blankge to ir where blankge is the set of all blank nodes occurring in ge it follows that the extended interpretation ib owl  rdfbased satisfies all the triples in ge further since i is an owl  rdfbased interpretation i meets all the owl  rdfbased semantic conditions thus the lefttoright direction of the semantic condition for union class expressions owlunionof see section  applies providing ib_x  ic  icextib_x  icextiexc  icextiexc  third since the owl  direct interpretation j owl  direct satisfies a the following semantic relationship holds between the denotations of the class names in a according to j exc c  exc c  exc c  by applying the definition of the owl  direct interpretation j one can conclude that the following semantic relationship holds between the extensions of the classes above according to i icextiexc  icextiexc  icextiexc  finally combining all intermediate results gives iexc  ic  ib_x  ic  icextiexc  icextib_x  therefore all the premises are met to apply the righttoleft direction of the semantic condition for subclass axioms rdfssubclassof see section  which results in  iexcl  ib_x   iextirdfssubclassof  so the remaining triple exc rdfssubclassof _x  in ga is owl  rdfbased satisfied by ib where _x is the root blank node of the union class expression ge hence wrt existential blank node semantics i owl  rdfbased satisfies all the triples in ga to conclude for any owl  rdfbased interpretation i that owl  rdfbased satisfies g i also owl  rdfbased satisfies g hence g owl  rdfbased entails g and therefore relationship  of the correspondence theorem holds qed  appendix comprehension conditions informative the correspondence theorem in section  shows that it is possible for the owl  rdfbased semantics to reflect all the entailments of the owl  direct semantics owl  direct semantics provided that one allows for certain harmless syntactic transformations on the rdf graphs being considered this makes numerous potentially desirable and useful entailments available that would otherwise be outside the scope of the owl  rdfbased semantics for the technical reasons discussed in section  it seems natural to ask for similar entailments even when an entailment query does not consist of owl  dl ontologies in rdf graph form however the correspondence theorem does not apply to such cases and thus the owl  direct semantics cannot be taken as a reference frame for desirable and useful entailments or for when a graph transformation can be considered harmless or not as discussed in section  a core obstacle for the correspondence theorem to hold was the rdf encoding of owl  expressions such as union class expressions when they appear on the right hand side of an entailment query under the owl  rdfbased semantics it is not generally ensured that an individual exists which represents the denotation of such an expression the comprehension conditions defined in this section are additional semantic conditions that provide the necessary individuals for every sequence class and property expression by this the combination of the normative semantic conditions of the owl  rdfbased semantics section  and the comprehension conditions can be regarded to simulate the semantic expressivity of the owl  direct semantics on entailment queries consisting of arbitrary rdf graphs the combined semantics is however not primarily intended for use in actual implementations the comprehension conditions add significantly to the complexity and expressivity of the basic semantics and in fact have proven to lead to formal inconsistency but the combined semantics can still be seen as a generalized reference frame for desirable and useful entailments and this can be used for example to evaluate methods that syntactically transform unrestricted entailment queries in order to receive additional entailments under the owl  rdfbased semantics such a concrete method is however outside the scope of this specification note the conventions in the introduction of section  semantic conditions apply to the current section as well  comprehension conditions for sequences table  lists the comprehension conditions for sequences ie rdf lists these comprehension conditions provide the existence of sequences built from any finite combination of individuals contained in the universe table  comprehension conditions for sequences if then exists z    zn  ir a    an  ir  z  a   iextirdffirst   z  z   iextirdfrest     zn  an   iextirdffirst   zn  irdfnil   iextirdfrest  comprehension conditions for boolean connectives table  lists the comprehension conditions for boolean connectives see section  for the corresponding semantic conditions these comprehension conditions provide the existence of complements for any class and datatype and of intersections and unions built from any finite set of classes contained in the universe table  comprehension conditions for boolean connectives if then exists z  ir s sequence of c    cn  ic  z  s   iextiowlintersectionof s sequence of c    cn  ic  z  s   iextiowlunionof c  ic  z  c   iextiowlcomplementof d  idc  z  d   iextiowldatatypecomplementof  comprehension conditions for enumerations table  lists the comprehension conditions for enumerations see section  for the corresponding semantic conditions these comprehension conditions provide the existence of enumeration classes built from any finite set of individuals contained in the universe table  comprehension conditions for enumerations if then exists z  ir s sequence of a    an  ir  z  s   iextiowloneof  comprehension conditions for property restrictions table  lists the comprehension conditions for property restrictions see section  for the corresponding semantic conditions these comprehension conditions provide the existence of cardinality restrictions on any property and for any nonnegative integer as well as value restrictions on any property and on any class contained in the universe note that the comprehension conditions for self restrictions constrains the right hand side of the produced owlhasself assertions to be the boolean value truexsdboolean this is in accordance with table  in section  of the owl  rdf mapping owl  rdf mapping implementations are not required to support the comprehension conditions for owlonproperties but may support them in order to realize nary dataranges with arity   see sections  and  of the owl  structural specification owl  specification for further information table  comprehension conditions for property restrictions if then exists z  ir c  ic  p  ip  z  c   iextiowlsomevaluesfrom   z  p   iextiowlonproperty c  ic  s sequence of p    pn  ip  n    z  c   iextiowlsomevaluesfrom   z  s   iextiowlonproperties c  ic  p  ip  z  c   iextiowlallvaluesfrom   z  p   iextiowlonproperty c  ic  s sequence of p    pn  ip  n    z  c   iextiowlallvaluesfrom   z  s   iextiowlonproperties a  ir  p  ip  z  a   iextiowlhasvalue   z  p   iextiowlonproperty p  ip  z  itruexsdboolean   iextiowlhasself   z  p   iextiowlonproperty n  inni  p  ip  z  n   iextiowlmincardinality   z  p   iextiowlonproperty n  inni  p  ip  z  n   iextiowlmaxcardinality   z  p   iextiowlonproperty n  inni  p  ip  z  n   iextiowlcardinality   z  p   iextiowlonproperty n  inni  c  ic  p  ip  z  n   iextiowlminqualifiedcardinality   z  c   iextiowlonclass   z  p   iextiowlonproperty n  inni  d  idc  p  iodp  z  n   iextiowlminqualifiedcardinality   z  d   iextiowlondatarange   z  p   iextiowlonproperty n  inni  c  ic  p  ip  z  n   iextiowlmaxqualifiedcardinality   z  c   iextiowlonclass   z  p   iextiowlonproperty n  inni  d  idc  p  iodp  z  n   iextiowlmaxqualifiedcardinality   z  d   iextiowlondatarange   z  p   iextiowlonproperty n  inni  c  ic  p  ip  z  n   iextiowlqualifiedcardinality   z  c   iextiowlonclass   z  p   iextiowlonproperty n  inni  d  idc  p  iodp  z  n   iextiowlqualifiedcardinality   z  d   iextiowlondatarange   z  p   iextiowlonproperty  comprehension conditions for datatype restrictions table  lists the comprehension conditions for datatype restrictions see section  for the corresponding semantic conditions these comprehension conditions provide the existence of datatypes built from restricting any datatype contained in the universe by any finite set of facetvalue pairs contained in the facet space see section  of the original datatype the set ifs is defined in section  table  comprehension conditions for datatype restrictions if then exists z  ir  s sequence of z    zn  ir d  idc  f    fn  iodp  v    vn  lv   f  v      fn  vn   ifsd  z  d   iextiowlondatatype   z  s   iextiowlwithrestrictions   z  v   iextf     zn  vn   iextfn  comprehension conditions for inverse properties table  lists the comprehension conditions for inverse property expressions these comprehension conditions provide the existence of an inverse property for any property contained in the universe inverse property expressions can be used to build axioms with anonymous inverse properties such as in the graph _x owlinverseof exp  _x rdfssubpropertyof owltopobjectproperty  note that to some extent the owl  rdfbased semantics already covers the use of inverse property expressions by means of the semantic conditions of inverse property axioms see section  since these semantic conditions also apply to an existential variable on the left hand side of an inverse property axiom nevertheless not all relevant cases are covered by this semantic condition for example one might expect the above example graph to be generally true however the normative semantic conditions do not permit this conclusion since it is not ensured that for every property p there is an individual in the universe with a property extension being inverse to that of p table  comprehension conditions for inverse properties if then exists z  ir p  ip  z  p   iextiowlinverseof  appendix changes from owl  informative this section lists relevant differences between the owl  rdfbased semantics and the original specification of the owl  rdfcompatible semantics owl  rdfcompatible semantics significant effort has been spent in keeping the design of the owl  rdfbased semantics as close as possible to that of the owl  rdfcompatible semantics while this aim was achieved to a large degree the owl  rdfbased semantics actually deviates from its predecessor in several aspects in most cases this is because of serious technical problems that would have arisen from a conservative semantic extension not listed are the new language constructs and the new datatypes of owl  the following markers are used dev a deviation from owl  that breaks backward compatibility ext a backward compatible extension to owl  nom a change of the nomenclature originally used in owl  dpr a feature of owl  that has been deprecated as of owl  generalized graph syntax ext the owl  rdfbased semantics allows rdf graphs to contain iris rfc  see section  whereas the owl  rdfcompatible semantics was restricted to rdf graphs with uris rfc  this change is in accordance with the rest of the owl  specification see section  of the owl  structural specification owl  specification in addition the owl  rdfbased semantics is now explicitly allowed to be applied to rdf graphs containing generalized rdf triples ie triples that can consist of iris literals or blank nodes in all three positions section  although implementations are not required to support this in contrast the owl  rdfcompatible semantics was restricted to rdf graphs conforming to the rdf concepts specification rdf concepts these limitations of the owl  rdfcompatible semantics were actually inherited from the rdf semantics specification rdf semantics the relaxations are intended to warrant interoperability with existing and future technologies and tools both changes are compatible with owl  since all rdf graphs that were legal under the owl  rdfcompatible semantics are still legal under the owl  rdfbased semantics facets for datatypes ext the basic definitions of a datatype and a dinterpretation as defined by the rdf semantics specification and as applied by the owl  rdfcompatible semantics have been extended to take into account constraining facets see section  in order to allow for datatype restrictions as specified in section  this change is compatible with owl  since section  of the rdf semantics specification explicitly allows for extending the minimal datatype definition provided there correspondence theorem and comprehension conditions dev the semantic conditions of the owl  rdfcompatible semantics included a set of so called comprehension conditions which allowed to prove the original correspondence theorem stating that every entailment of owl  dl was also an entailment of owl  full the document at hand adds comprehension conditions for the new language constructs of owl  see section  however the comprehension conditions are not a normative aspect of the owl  rdfbased semantics anymore it has turned out that combining the comprehension conditions with the normative set of semantic conditions in section  would lead to formal inconsistency of the resulting semantics issue  in addition it became clear that a correspondence theorem along the lines of the original theorem would not work for the relationship between the owl  rdfbased semantics and the owl  direct semantics owl  direct semantics since it is not possible to balance the differences between the two semantics solely by means of additional comprehension conditions see section  consequently the correspondence theorem of the owl  rdfbased semantics section  follows an alternative approach that replaces the use of the comprehension conditions and can be seen as a technical refinement of an idea originally discussed by the webont working group email this change is an incompatible deviation from owl  since certain aspects of the originally normative definition of the semantics have been removed flawed semantics of language constructs with argument lists dev in the owl  rdfcompatible semantics the semantic conditions for unions intersections and enumerations of classes were defined in a flawed form which lead to formal inconsistency of the semantics issue  see also this unofficial problem description the affected semantic conditions have been revised see section  and section  this change is an incompatible deviation from owl  since the semantics has formally been weakened in order to eliminate a source of inconsistency incomplete semantics of owlalldifferent ext the owl  rdfcompatible semantics missed a certain semantic condition for axioms based on the vocabulary term owlalldifferent see also this unofficial problem description the missing semantic condition has been added to the owl  rdfbased semantics see section  this change is compatible with owl  since the semantics has been conservatively extended aligned semantics of owldatarange and rdfsdatatype ext the class owldatarange has been made an equivalent class to rdfsdatatype see section  the main purpose for this change was to allow for the deprecation of the term owldatarange in favor of rdfsdatatype this change is compatible with owl  according to an analysis of the relationship between the two classes in the owl  rdfcompatible semantics email ontology properties as annotation properties ext several properties that have been ontology properties in owl  such as owlpriorversion have now been specified as both ontology properties and annotation properties in order to be in line with the rest of the owl  specification see section  of the owl  structural specification owl  specification this change is compatible with owl  since the semantics has been conservatively extended all the ontology properties of owl  are still ontology properties in owl  nonempty data value enumerations dev the semantic condition for enumerations of data values in section  is now restricted to nonempty sets of data values this prevents the class owlnothing from unintentionally becoming an instance of the class rdfsdatatype as analyzed in email this restriction of the semantics is an incompatible deviation from owl  note however that it is still possible to define a datatype as an empty enumeration of data values as explained in section  terminological clarifications nom this document uses the term owl  rdfbased semantics to refer to the specified semantics only according to section  the term owl  full refers to the language that is determined by the set of all rdf graphs also called owl  full ontologies being interpreted using the owl  rdfbased semantics owl  has not been particularly clear on this distinction where the owl  rdfcompatible semantics specification talked about owl full interpretations owl full satisfaction owl full consistency and owl full entailment the owl  rdfbased semantics specification talks in section  about owl  rdfbased interpretations owl  rdfbased satisfaction owl  rdfbased consistency and owl  rdfbased entailment respectively since these terms are primarily meant to be related to the semantics rather than the whole language modified abbreviations nom the names ri pi ci exti cexti si li and lvi which have been used in the owl  rdfcompatible semantics specification have been replaced by the corresponding names defined in the rdf semantics document rdf semantics namely ir ip ic iext icext is il and lv respectively furthermore all uses of the iri mapping is have been replaced by the more general interpretation mapping i following the conventions in the rdf semantics document these changes are intended to support the use of the owl  rdfbased semantics document as an incremental extension of the rdf semantics document names for the parts of the universe that were exclusively used in the owl  rdfcompatible semantics document such as ix or iodp have not been changed other abbreviations such as iad for the class extension of owlalldifferent have in general not been reused in the document at hand but the explicit nonabbreviated form such as iextiowlalldifferent is used instead modified tuple notation style nom tuples are written in the form    instead of    as in the other owl  documents deprecated vocabulary terms dpr the following vocabulary terms have been deprecated as of owl  by the working group and should not be used in new ontologies anymore owldatarange per resolution of issue   appendix change log informative  changes since recommendation this section summarizes the changes to this document since the recommendation of  october  with the publication of the xml schema definition language xsd  part  datatypes recommendation of  april  the elements of owl  which are based on xsd  are now considered required and the note detailing the optional dependency on the xsd  candidate recommendation of  april  has been removed from the status of this document section  changes since proposed recommendation this section summarizes the changes to this document since the proposed recommendation of  september  editorial correction of grammar punctuation word order etc mainly in the introduction section editorial updated and corrected several hyperlinks  changes since candidate recommendation this section summarizes the changes to this document since the candidate recommendation of  june  resolution redefinition of several ontology properties to be both ontology properties and annotation properties in order to align the rdfbased semantics with the rest of the owl  specification and in particular to avoid an equivocal definition of the owl  rlrdf rules per wg resolution correction correction of the type of facets facets are intended to be data properties and have been used as such elsewhere in the document but they were wrongly specified as unrestricted properties so far correction correction of a mismatch between the definition of dinterpretations in the document at hand and the rdf semantics specification according to the definition of simple interpretations lv contains all plain literals in the vocabulary v the missing reference to v has been added nonnormative correction of an error in the formulation of the correspondence theorem nonnormative the section on axiomatic triples has been extended by an explicit set of axiomatic triples based on the discussion in the rest of the section nonnormative the section on axiomatic triples now explicitly mentions axiomatic triples for datatypes and facets corresponding to the semantic conditions for datatypes and facets respectively nonnormative refinement of the proof for the correspondence theorem and correction of several errors motivated by these changes the example in section  has been slightly revised as well editorial added a description and altattribute text to figure  on the parts hierarchy editorial distinction between normative and nonnormative references as in other owl  documents editorial added some clarification to the introduction section editorial removed a redundant conclusion from the table presenting the semantic conditions for datatype restrictions since this conclusion already follows from the semantic conditions for the vocabulary properties and having the conclusion repeated would not match the general approach that is applied when presenting ifthen semantic conditions in this document editorial reworded the description of the markers in the section on changes from owl  and added a marker dpr for the deprecated features editorial changed the presentation style of references and citations to a form used in all owl  documents editorial changed the presentation style for tuples from    to    to follow the conventions used in the other owl  documents editorial numerous minor corrections and stylistic improvements  changes since last call this section summarizes the changes to this document since the last call working draft of  april  resolution renamed the annotation vocabulary terms owlsubject owlpredicate and owlobject to owlannotatedsource owlannotatedproperty and owlannotatedtarget respectively per wg resolution resolution replaced the datatype rdftext by rdfplainliteral per wg resolution resolution replaced the facet rdflangpattern by rdflangrange following the same replacement in the original rdfplainliteral specification correction changed the range of the property owlannotatedproperty from ip to ir in order to avoid undesired semantic side effects from annotations this was an oversight when the original semantic conditions for annotations of axioms and annotations were removed from the document nonnormative the semantic conditions and comprehension conditions for the nary property restrictions have been changed to only cover property sequences of length greater than  since the meaning of an expression with an empty property set is not clear editorial explained the optional status of the semantic conditions concerned with the iri owlonproperties in accordance with the rest of the owl  specification editorial shortened and clarified some section titles moved the section on semantic conditions for sub property chains within section  and aligned the entry order of all tables in section  with those in section  editorial several clarifications minor corrections and cosmetic changes  acknowledgments the starting point for the development of owl  was the owl member submission itself a result of user and developer feedback and in particular of information gathered during the owl experiences and directions owled workshop series the working group also considered postponed issues from the webont working group this document has been produced by the owl working group see below and its contents reflect extensive discussions within the working group as a whole the editors extend special thanks to jie bao rpi ivan herman wcercim peter f patelschneider bell labs research alcatellucent and zhe wu oracle corporation for their thorough reviews the regular attendees at meetings of the owl working group at the time of publication of this document were jie bao rpi diego calvanese free university of bozenbolzano bernardo cuenca grau oxford university computing laboratory martin dzbor open university achille fokoue ibm corporation christine golbreich universit de versailles stquentin and lirmm sandro hawke wcmit ivan herman wcercim rinke hoekstra university of amsterdam ian horrocks oxford university computing laboratory elisa kendall sandpiper software markus krtzsch fzi carsten lutz universitt bremen deborah l mcguinness rpi boris motik oxford university computing laboratory jeff pan university of aberdeen bijan parsia university of manchester peter f patelschneider bell labs research alcatellucent sebastian rudolph fzi alan ruttenberg science commons uli sattler university of manchester michael schneider fzi mike smith clark  parsia evan wallace nist zhe wu oracle corporation and antoine zimmermann deri galway we would also like to thank past members of the working group jeremy carroll jim hendler and vipul kashyap  references  normative references owl  specification owl  web ontology language structural specification and functionalstyle syntax second edition boris motik peter f patelschneider bijan parsia eds wc recommendation  december  httpwwwworgtrrecowlsyntax latest version available at httpwwwworgtrowlsyntax rdf concepts resource description framework rdf concepts and abstract syntax graham klyne and jeremy j carroll eds wc recommendation  february  httpwwwworgtrrecrdfconcepts latest version available as httpwwwworgtrrdfconcepts rdf semantics rdf semantics patrick hayes ed wc recommendation  february  httpwwwworgtrrecrdfmt latest version available as httpwwwworgtrrdfmt rfc  rfc  key words for use in rfcs to indicate requirement levels network working group s bradner ietf march  httpwwwietforgrfcrfctxt rfc  rfc  internationalized resource identifiers iris m duerst and m suignard ietf january  httpwwwietforgrfcrfctxt  nonnormative references owl  direct semantics owl  web ontology language direct semantics second edition boris motik peter f patelschneider bernardo cuenca grau eds wc recommendation  december  httpwwwworgtrrecowldirectsemantics latest version available at httpwwwworgtrowldirectsemantics owl  rdf mapping owl  web ontology language mapping to rdf graphs second edition peter f patelschneider boris motik eds wc recommendation  december  httpwwwworgtrrecowlmappingtordf latest version available at httpwwwworgtrowlmappingtordf owl  rdfcompatible semantics owl web ontology language semantics and abstract syntax section  rdfcompatible modeltheoretic semantics peter f patelschneider patrick hayes and ian horrocks eds wc recommendation  february  rfc  rfc   uniform resource identifiers uri generic syntax t bernerslee r fielding uc irvine and l masinter ietf august 