xpath and xquery functions and operators  xpath and xquery functions and operators  wc recommendation  april  this version httpwwwworgtrrecxpathfunctions latest version of xpath and xquery functions and operators  httpwwwworgtrxpathfunctions previous versions of xpath and xquery functions and operators  httpwwwworgtrprxpathfunctions httpwwwworgtrcrxpathfunctions httpwwwworgtrcrxpathfunctions httpwwwworgtrwdxpathfunctions httpwwwworgtrwdxpathfunctions httpwwwworgtrwdxpathfunctions httpwwwworgtrwdxpathfunctions most recent version of xpath and xquery functions and operators  httpwwwworgtrxpathfunctions most recent recommendation of xpath and xquery functions and operators httpwwwworgtrrecxpathfunctions editor michael kay xsl wg saxonica httpwwwsaxonicacom please check the errata for any errors or issues reported since publication see also translations this document is also available in these nonnormative formats xml and change markings relative to previous edition copyright   wc mit ercim keio beihang all rights reserved wc liability trademark and document use rules apply abstract change markings are relative to the recommendation of  january  this document defines constructor functions operators and functions on the datatypes defined in xml schema part  datatypes second edition and the datatypes defined in xquery and xpath data model xdm  it also defines functions and operators on nodes and node sequences as defined in the xquery and xpath data model xdm  these functions and operators are defined for use in xml path language xpath  xquery  an xml query language and xsl transformations xslt version  and other related xml standards the signatures and summaries of functions defined in this document are available at httpwwwworgxpathfunctions this is the third version of the specification of this function library the first version was included as an intrinsic part of the xml path language xpath version  specification published on  november  the second version was published under the title xquery  and xpath  functions and operators on  january  subsequently revised in a second edition published on  december  this third version is the first to carry its own version number which has been set at  to align with the version numbering for xpath xquery and xslt status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this is one document in a set of six documents that have been progressed to recommendation together xquery  xqueryx  xpath  data model  functions and operators  and serialization  this is a recommendation of the wc it was jointly developed by the wc xml query working group and the wc xslt working group each of which is part of the xml activity this recommendation of xpath and xquery functions and operators  represents the second version of a previous wc recommendation this specification is designed to be referenced normatively from other specifications defining a host language for it it is not intended to be implemented outside a host language the implementability of this specification has been tested in the context of its normative inclusion in host languages defined by the xquery  and xslt  expected in  specifications see the xquery  implementation report and in the future the wgs expect that there will also be a  possibly memberonly  xslt  implementation report for details this document incorporates minor changes made against the proposed recommendation of  october  changes to this document since the proposed recommendation are detailed in e changes since previous recommendation please report errors in this document using wcs public bugzilla system instructions can be found at httpwwwworgxmlqtbugzilla if access to that system is not feasible you may send your comments to the wc xsltxpathxquery public comments mailing list publicqtcomments@worg it will be very helpful if you include the string fo in the subject line of your report whether made in bugzilla or in email please use multiple bugzilla entries or if necessary multiple email messages if you have more than one comment to make archives of the comments and responses are available at httplistsworgarchivespublicpublicqtcomments this document has been reviewed by wc members by software developers and by other wc groups and interested parties and is endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web this document was produced by groups operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the xml query working group and also maintains a public list of any patent disclosures made in connection with the deliverables of the xsl working group those pages also include instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy quick contents abs acos adddaytimedurations adddaytimedurationtodate adddaytimedurationtodatetime adddaytimedurationtotime addyearmonthdurations addyearmonthdurationtodate addyearmonthdurationtodatetime adjustdatetimetotimezone adjustdatetotimezone adjusttimetotimezone analyzestring asin atan atan availableenvironmentvariables avg basebinaryequal baseuri boolean booleanequal booleangreaterthan booleanlessthan ceiling codepointequal codepointstostring collection compare concat concatenate contains cos count currentdate currentdatetime currenttime data dateequal dategreaterthan datelessthan datetime datetimeequal datetimegreaterthan datetimelessthan dayfromdate dayfromdatetime daysfromduration daytimedurationgreaterthan daytimedurationlessthan deepequal defaultcollation distinctvalues dividedaytimeduration dividedaytimedurationbydaytimeduration divideyearmonthduration divideyearmonthdurationbyyearmonthduration doc docavailable documenturi durationequal elementwithid empty encodeforuri endswith environmentvariable error escapehtmluri exactlyone except exists exp exp false filter floor foldleft foldright foreach foreachpair formatdate formatdatetime formatinteger formatnumber formattime functionarity functionlookup functionname gdayequal generateid gmonthdayequal gmonthequal gyearequal gyearmonthequal haschildren head hexbinaryequal hoursfromdatetime hoursfromduration hoursfromtime id idref implicittimezone indexof innermost inscopeprefixes insertbefore intersect iritouri issamenode lang last localname localnamefromqname log log lowercase matches max min minutesfromdatetime minutesfromduration minutesfromtime monthfromdate monthfromdatetime monthsfromduration multiplydaytimeduration multiplyyearmonthduration name namespaceuri namespaceuriforprefix namespaceurifromqname nilled nodeafter nodebefore nodename normalizespace normalizeunicode not notationequal number numericadd numericdivide numericequal numericgreaterthan numericintegerdivide numericlessthan numericmod numericmultiply numericsubtract numericunaryminus numericunaryplus oneormore outermost parsexml parsexmlfragment path pi position pow prefixfromqname qname qnameequal remove replace resolveqname resolveuri reverse root round roundhalftoeven secondsfromdatetime secondsfromduration secondsfromtime serialize sin sqrt startswith staticbaseuri string stringjoin stringlength stringtocodepoints subsequence substring substringafter substringbefore subtractdates subtractdatetimes subtractdaytimedurationfromdate subtractdaytimedurationfromdatetime subtractdaytimedurationfromtime subtractdaytimedurations subtracttimes subtractyearmonthdurationfromdate subtractyearmonthdurationfromdatetime subtractyearmonthdurations sum tail tan timeequal timegreaterthan timelessthan timezonefromdate timezonefromdatetime timezonefromtime to tokenize trace translate true union unordered unparsedtext unparsedtextavailable unparsedtextlines uppercase uricollection yearfromdate yearfromdatetime yearmonthdurationgreaterthan yearmonthdurationlessthan yearsfromduration zeroorone table of contents  introduction  conformance  namespaces and prefixes  function overloading  function signatures and descriptions  type system  terminology  strings characters and codepoints  namespaces and uris  conformance terminology  properties of functions  accessors  fnnodename  fnnilled  fnstring  fndata  fnbaseuri  fndocumenturi  errors and diagnostics  raising errors  fnerror  diagnostic tracing  fntrace  functions and operators on numerics  numeric types  arithmetic operators on numeric values  opnumericadd  opnumericsubtract  opnumericmultiply  opnumericdivide  opnumericintegerdivide  opnumericmod  opnumericunaryplus  opnumericunaryminus  comparison operators on numeric values  opnumericequal  opnumericlessthan  opnumericgreaterthan  functions on numeric values  fnabs  fnceiling  fnfloor  fnround  fnroundhalftoeven  parsing numbers  fnnumber  formatting integers  fnformatinteger  formatting numbers  defining a decimal format  fnformatnumber  syntax of the picture string  analysing the picture string  formatting the number  trigonometric and exponential functions  mathpi  mathexp  mathexp  mathlog  mathlog  mathpow  mathsqrt  mathsin  mathcos  mathtan  mathasin  mathacos  mathatan  mathatan  functions on strings  string types  functions to assemble and disassemble strings  fncodepointstostring  fnstringtocodepoints  comparison of strings  collations  the unicode codepoint collation  choosing a collation  fncompare  fncodepointequal  functions on string values  fnconcat  fnstringjoin  fnsubstring  fnstringlength  fnnormalizespace  fnnormalizeunicode  fnuppercase  fnlowercase  fntranslate  functions based on substring matching  fncontains  fnstartswith  fnendswith  fnsubstringbefore  fnsubstringafter  string functions that use regular expressions  regular expression syntax  fnmatches  fnreplace  fntokenize  fnanalyzestring  functions that manipulate uris  fnresolveuri  fnencodeforuri  fniritouri  fnescapehtmluri  functions and operators on boolean values  boolean constant functions  fntrue  fnfalse  operators on boolean values  opbooleanequal  opbooleanlessthan  opbooleangreaterthan  functions on boolean values  fnboolean  fnnot  functions and operators on durations  two totally ordered subtypes of duration  xsyearmonthduration  xsdaytimeduration  comparison operators on durations  opyearmonthdurationlessthan  opyearmonthdurationgreaterthan  opdaytimedurationlessthan  opdaytimedurationgreaterthan  opdurationequal  component extraction functions on durations  fnyearsfromduration  fnmonthsfromduration  fndaysfromduration  fnhoursfromduration  fnminutesfromduration  fnsecondsfromduration  arithmetic operators on durations  opaddyearmonthdurations  opsubtractyearmonthdurations  opmultiplyyearmonthduration  opdivideyearmonthduration  opdivideyearmonthdurationbyyearmonthduration  opadddaytimedurations  opsubtractdaytimedurations  opmultiplydaytimeduration  opdividedaytimeduration  opdividedaytimedurationbydaytimeduration  functions and operators on dates and times  date and time types  limits and precision  datetime datatype values  examples  constructing a datetime  fndatetime  comparison operators on duration date and time values  opdatetimeequal  opdatetimelessthan  opdatetimegreaterthan  opdateequal  opdatelessthan  opdategreaterthan  optimeequal  optimelessthan  optimegreaterthan  opgyearmonthequal  opgyearequal  opgmonthdayequal  opgmonthequal  opgdayequal  component extraction functions on dates and times  fnyearfromdatetime  fnmonthfromdatetime  fndayfromdatetime  fnhoursfromdatetime  fnminutesfromdatetime  fnsecondsfromdatetime  fntimezonefromdatetime  fnyearfromdate  fnmonthfromdate  fndayfromdate  fntimezonefromdate  fnhoursfromtime  fnminutesfromtime  fnsecondsfromtime  fntimezonefromtime  timezone adjustment functions on dates and time values  fnadjustdatetimetotimezone  fnadjustdatetotimezone  fnadjusttimetotimezone  arithmetic operators on durations dates and times  limits and precision  opsubtractdatetimes  opsubtractdates  opsubtracttimes  opaddyearmonthdurationtodatetime  opadddaytimedurationtodatetime  opsubtractyearmonthdurationfromdatetime  opsubtractdaytimedurationfromdatetime  opaddyearmonthdurationtodate  opadddaytimedurationtodate  opsubtractyearmonthdurationfromdate  opsubtractdaytimedurationfromdate  opadddaytimedurationtotime  opsubtractdaytimedurationfromtime  formatting dates and times  fnformatdatetime  fnformatdate  fnformattime  the datetime formatting functions  examples of date and time formatting  functions related to qnames  functions to create a qname  fnresolveqname  fnqname  functions and operators related to qnames  opqnameequal  fnprefixfromqname  fnlocalnamefromqname  fnnamespaceurifromqname  fnnamespaceuriforprefix  fninscopeprefixes  operators on basebinary and hexbinary  comparisons of basebinary and hexbinary values  ophexbinaryequal  opbasebinaryequal  operators on notation  opnotationequal  functions and operators on nodes  fnname  fnlocalname  fnnamespaceuri  fnlang  opissamenode  opnodebefore  opnodeafter  fnroot  fnpath  fnhaschildren  fninnermost  fnoutermost  functions and operators on sequences  general functions and operators on sequences  opconcatenate  fnempty  fnexists  fnhead  fntail  fninsertbefore  fnremove  fnreverse  fnsubsequence  fnunordered  functions that compare values in sequences  fndistinctvalues  fnindexof  fndeepequal  functions that test the cardinality of sequences  fnzeroorone  fnoneormore  fnexactlyone  union intersection and difference  opunion  opintersect  opexcept  aggregate functions  fncount  fnavg  fnmax  fnmin  fnsum  functions and operators that generate sequences  opto  functions on node identifiers  fnid  fnelementwithid  fnidref  fngenerateid  functions giving access to external information  fndoc  fndocavailable  fncollection  fnuricollection  fnunparsedtext  fnunparsedtextlines  fnunparsedtextavailable  fnenvironmentvariable  fnavailableenvironmentvariables  parsing and serializing  fnparsexml  fnparsexmlfragment  fnserialize  context functions  fnposition  fnlast  fncurrentdatetime  fncurrentdate  fncurrenttime  fnimplicittimezone  fndefaultcollation  fnstaticbaseuri  higherorder functions  functions on functions  fnfunctionlookup  fnfunctionname  fnfunctionarity  basic higherorder functions  fnforeach  fnfilter  fnfoldleft  fnfoldright  fnforeachpair  constructor functions  constructor functions for xml schema builtin atomic types  constructor functions for xsqname and xsnotation  constructor functions for xml schema builtin list types  constructor functions for xml schema builtin union types  constructor functions for userdefined types  casting  casting from primitive types to primitive types  casting to xsstring and xsuntypedatomic  casting to numeric types  casting to duration types  casting to date and time types  casting to xsboolean  casting to xsbasebinary and xshexbinary  casting to xsanyuri  casting to xsqname and xsnotation  casting to xsentity  casting from xsstring and xsuntypedatomic  casting involving nonprimitive types  casting to derived types  casting from derived types to parent types  casting within a branch of the type hierarchy  casting across the type hierarchy  casting to union types  casting to list types appendices a references a normative references a nonnormative references b error summary c illustrative userwritten functions nonnormative c egifempty and egifabsent c egifempty c egifabsent c union intersection and difference on sequences of values c egvalueunion c egvalueintersect c egvalueexcept c egindexofnode c egstringpad c egdistinctnodesstable c finding minima and maxima c eghighest c eglowest c sorting d checklist of implementationdefined features nonnormative e changes since previous recommendation nonnormative e substantive changes  december  e substantive changes  june  e substantive changes candidate recommendation e substantive changes post candidate recommendation e editorial changes e changes since the proposed recommendation f compatibility with previous versions nonnormative f compatibility between xpath  and xpath  f compatibility between xpath  and xpath   introduction the purpose of this document is to catalog the functions and operators required for xpath  xquery  and xslt  the exact syntax used to call these functions and operators is specified in xml path language xpath  xquery  an xml query language and xsl transformations xslt version  this document defines constructor functions and functions that take typed values as arguments some of the functions specify the semantics of operators defined in xml path language xpath  and xquery  an xml query language xml schema part  datatypes second edition defines a number of primitive and derived datatypes collectively known as builtin datatypes this document defines functions and operations on these datatypes as well as the datatypes defined in section  schema information dm of the xquery and xpath data model xdm  these functions and operations are defined for use in xml path language xpath  xquery  an xml query language and xsl transformations xslt version  and related xml standards this document also defines functions and operators on nodes and node sequences as defined in the xquery and xpath data model xdm  for use in xml path language xpath  xquery  an xml query language and xsl transformations xslt version  and other related xml standards schema  part  adds to the data types defined in xml schema part  datatypes second edition it introduces a new derived type xsdatetimestamp and it incorporates as builtin types the two types xsyearmonthduration and xsdaytimeduration which were previously xdm additions to the type system in addition xsd  clarifies and updates many aspects of the definitions of the existing data types for example it extends the value space of xsdouble to allow both positive and negative zero and extends the lexical space to allow inf it modifies the value space of xsname to permit additional unicode characters it allows year zero and disallows leap seconds in xsdatetime values and it allows any character string to appear as the value of an xsanyuri item implementations of this specification may support either xsd  or xsd  or both references to specific sections of some of the above documents are indicated by crossdocument links in this document each such link consists of a pointer to a specific section followed a superscript specifying the linked document the superscripts have the following meanings xq xquery  an xml query language xt xsl transformations xslt version  xp xml path language xpath  and dm xquery and xpath data model xdm   conformance the functions and operators specification is intended primarily as a component that can be used by other specifications therefore functions and operators relies on specifications that use it such as xml path language xpath  xsl transformations xslt version  and xquery  an xml query language to specify conformance criteria for their respective environments authors of conformance criteria for the use of the functions and operators should pay particular attention to the following features it is implementationdefined which version of unicode is supported but it is recommended that the most recent version of unicode be used it is implementationdefined whether the type system is based on xml schema  or xml schema  support for xml  and xml  by the datatypes used in functions and operators note the xml schema  recommendation introduces one new concrete data type xsdatetimestamp it also incorporates the types xsdaytimeduration xsyearmonthduration and xsanyatomictype which were previously defined as part of xquery and xpath data model xdm  furthermore xsd  includes the option of supporting revised definitions of types such as xsncname based on the rules in xml  rather than  in this document text labeled as an example or as a note is provided for explanatory purposes and is not normative  namespaces and prefixes the functions and operators defined in this document are contained in one of several namespaces see namespaces in xml and referenced using an xsqname this document uses conventional prefixes to refer to these namespaces userwritten applications can choose a different prefix to refer to the namespace so long as it is bound to the correct uri the host language may also define a default namespace for function calls in which case function names in that namespace need not be prefixed at all in many cases the default namespace will be httpwwwworgxpathfunctions allowing a call on the fnname function for example to be written as name rather than fnname in this document however all example function calls are explicitly prefixed the uris of the namespaces and the conventional prefixes associated with them are httpwwwworgxmlschema for constructors  associated with xs the section  constructor functions defines constructor functions for the builtin datatypes defined in xml schema part  datatypes second edition and in section  schema information dm of xquery and xpath data model xdm  these datatypes and the corresponding constructor functions are in the xml schema namespace httpwwwworgxmlschema and are named in this document using the xs prefix httpwwwworgxpathfunctions for functions  associated with fn the namespace prefix used in this document for most functions that are available to users is fn httpwwwworgxpathfunctionsmath for functions  associated with math this namespace is used for some mathematical functions the namespace prefix used in this document for these functions is math these functions are available to users in exactly the same way as those in the fn namespace httpwwwworgxqterrors  associated with err there are no functions in this namespace it is used for error codes this document uses the prefix err to represent the namespace uri httpwwwworgxqterrors which is the namespace for all xpath and xquery error codes and messages this namespace prefix is not predeclared and its use in this document is not normative note the namespace uri associated with the err prefix is not expected to change from one version of this document to another the contents of this namespace may be extended to allow additional errors to be returned httpwwwworgxsltxqueryserialization  associated with output there are no functions in this namespace it is used for serialization parameters as described in xslt and xquery serialization  functions defined with the op prefix are described here to underpin the definitions of the operators in xml path language xpath  xquery  an xml query language and xsl transformations xslt version  these functions are not available directly to users and there is no requirement that implementations should actually provide these functions for this reason no namespace is associated with the op prefix for example multiplication is generally associated with the  operator but it is described as a function in this document fnnumericmultiplyarg as numeric arg as numeric as numeric  function overloading in general the specifications named above do not support function overloading in the sense that functions that have multiple signatures with the same name and the same number of parameters are not supported consequently there are no such overloaded functions in this document except for legacy xml path language xpath version  functions such as fnstring which accepts a single parameter of a variety of types in addition it should be noted that the functions defined in  functions and operators on numerics that accept numeric parameters accept arguments of type xsinteger xsdecimal xsfloat or xsdouble see  function signatures and descriptions operators such as  may be overloaded this document does define some functions with more than one signature with the same name and different number of parameters userdefined functions with more than one signature with the same name and different number of parameters are also supported  function signatures and descriptions each function is defined by specifying its signature a description of the return type and each of the parameters and its semantics for many functions examples are included to illustrate their use each functions signature is presented in a form like this fnfunctionnameparametername as parametertype  as returntype in this notation functionname in boldface is the name of the function whose signature is being specified if the function takes no parameters then the name is followed by an empty parameter list  otherwise the name is followed by a parenthesized list of parameter declarations each declaration specifies the static type of the parameter in italics and a descriptive but nonnormative name if there are two or more parameter declarations they are separated by a comma the returntype  also in italics specifies the static type of the value returned by the function the dynamic type of the value returned by the function is the same as its static type or derived from the static type all parameter types and return types are specified using the sequencetype notation defined in section  sequencetype syntax xp one function fnconcat has a variable number of arguments two or more more strictly there is an infinite set of functions having the name fnconcat with arity ranging from  to infinity for this special case a single function signature is given with an ellipsis indicating an indefinite number of arguments in some cases the word  numeric  is used in function signatures as a shorthand to indicate the four numeric types xsinteger xsdecimal xsfloat and xsdouble for example a function with the signature fnnumericfunctionarg as numeric as  represents the following four function signatures fnnumericfunctionarg as xsinteger as  fnnumericfunctionarg as xsdecimal as  fnnumericfunctionarg as xsfloat as  fnnumericfunctionarg as xsdouble as  for most functions there is an initial paragraph describing what the function does followed by semantic rules these rules are meant to be followed in the order that they appear in this document the function name is a qname as defined in xml schema part  datatypes second edition and must adhere to its syntactic conventions following the precedent set by xml path language xpath version  function names are generally composed of english words separated by hyphens  if a function name contains a xml schema part  datatypes second edition datatype name it may have intercapitalized spelling and is used in the function name as such for example fntimezonefromdatetime rules for passing parameters to operators are described in the relevant sections of xquery  an xml query language and xml path language xpath  for example the rules for passing parameters to arithmetic operators are described in section  arithmetic expressions xp specifically rules for parameters of type xsuntypedatomic and the empty sequence are specified in this section as is customary the parameter type name indicates that the function or operator accepts arguments of that type or types derived from it in that position this is called subtype substitution see section  sequencetype matching xp in addition numeric type instances and instances of type xsanyuri can be promoted to produce an argument of the required type see section b type promotion xp subtype substitution a derived type may substitute for its base type in particular xsinteger may be used where xsdecimal is expected numeric type promotion xsdecimal may be promoted to xsfloat or xsdouble promotion to xsdouble should be done directly not via xsfloat to avoid loss of precision anyuri type promotion a value of type xsanyuri can be promoted to the type xsstring some functions accept a single value or the empty sequence as an argument and some may return a single value or the empty sequence this is indicated in the function signature by following the parameter or return type name with a question mark  indicating that either a single value or the empty sequence must appear see below fnfunctionnameparametername as parametertype as returntype note that this function signature is different from a signature in which the parameter is omitted see for example the two signatures for fnstring in the first signature the parameter is omitted and the argument defaults to the context item referred to as  in the second signature the argument must be present but may be the empty sequence written as  some functions accept a sequence of zero or more values as an argument this is indicated by following the name of the type of the items in the sequence with  the sequence may contain zero or more items of the named type for example the function below accepts a sequence of xsdouble and returns a xsdouble or the empty sequence fnmedianarg as xsdouble as xsdouble  type system the diagrams below show how nodes function items primitive simple types and user defined types fit together into a type system this type system comprises two distinct hierarchies that both include the primitive simple types in the diagrams connecting lines represent relationships between derived types and the types from which they are derived the arrowheads point toward the type from which they are derived the dashed line represents relationships not present in this diagram but that appear in one of the other diagrams dotted lines represent additional relationships that follow an evident pattern the information that appears in each diagram is recapitulated in tabular form the xsidrefs xsnmtokens and xsentities types and the userdefined list and union types are special types in that these types are lists or unions rather than types derived by extension or restriction the first diagram and its corresponding table illustrate the relationship of various item types item types in the data model form a lattice rather than a hierarchy in the relationship defined by the derivedfroma b function some types are derived from more than one other type examples include functions functionxsstring as xsint is substitutable for functionxsncname as xsint and also for functionxsstring as xsdecimal and union types a is substitutable for uniona b and also for uniona c in xdm item types include node types function types and builtin atomic types the diagram which shows only hierarchic relationships is therefore a simplification of the full model in the table each type whose name is indented is derived from the type whose name appears nearest above it with one less level of indentation item xsanyatomictype function functionitem as item functionitem as item functionitem as item functionitem item as item node attribute userdefined attribute types comment document userdefined document types element userdefined element types namespace processinginstruction text the next diagram and table illustrate the any type type hierarchy in which all types are derived from distinguished type xsanytype in the table each type whose name is indented is derived from the type whose name appears nearest above it with one less level of indentation xsanytype userdefined complex types xsuntyped xsanysimpletype userdefined list and union types xsidrefs xsnmtokens xsentities xsanyatomictype the final diagram and table show all of the atomic types including the primitive simple types and the builtin types derived from the primitive simple types this includes all the builtin datatypes defined in xml schema part  datatypes second edition as well as the two totally ordered subtypes of duration defined in  two totally ordered subtypes of duration in the table each type whose name is indented is derived from the type whose name appears nearest above it with one less level of indentation xsuntypedatomic xsdatetime xsdatetimestamp xsdate xstime xsduration xsyearmonthduration xsdaytimeduration xsfloat xsdouble xsdecimal xsinteger xsnonpositiveinteger xsnegativeinteger xslong xsint xsshort xsbyte xsnonnegativeinteger xsunsignedlong xsunsignedint xsunsignedshort xsunsignedbyte xspositiveinteger xsgyearmonth xsgyear xsgmonthday xsgday xsgmonth xsstring xsnormalizedstring xstoken xslanguage xsnmtoken xsname xsncname xsid xsidref xsentity xsboolean xsbasebinary xshexbinary xsanyuri xsqname xsnotation  terminology the terminology used to describe the functions and operators on xml schema part  datatypes second edition is defined in the body of this specification the terms defined in this section are used in building those definitions  strings characters and codepoints this document uses the terms string character and codepoint with the following meanings definition a character is an instance of the charxml production of extensible markup language xml  fifth edition note this definition excludes unicode characters in the surrogate blocks as well as xfffe and xffff while including characters with codepoints greater than xffff which some programming languages treat as two characters the valid characters are defined by their codepoints and include some whose codepoints have not been assigned by the unicode consortium to any character definition a string is a sequence of zero or more characters or equivalently a value in the value space of the xsstring data type definition a codepoint is a nonnegative integer assigned to a character by the unicode consortium or reserved for future assignment to a character note the set of codepoints is thus wider than the set of characters this specification spells codepoint as one word the unicode specification spells it as code point equivalent terms found in other specifications are character number or code position see character model for the world wide web  fundamentals because these terms appear so frequently they are hyperlinked to the definition only when there is a particular desire to draw the readers attention to the definition the absence of a hyperlink does not mean that the term is being used in some other sense it is implementationdefined which version of the unicode standard is supported but it is recommended that the most recent version of unicode be used unless explicitly stated the xsstring values returned by the functions in this document are not normalized in the sense of character model for the world wide web  fundamentals notes in functions that involve character counting such as fnsubstring fnstringlength and fntranslate what is counted is the number of xml characters in the string or equivalently the number of unicode codepoints some implementations may represent a codepoint above xffff using two bit values known as a surrogate pair a surrogate pair counts as one character not two  namespaces and uris this document uses the phrase namespace uri to identify the concept identified in namespaces in xml as namespace name and the phrase local name to identify the concept identified in namespaces in xml as local part it also uses the term expandedqname defined below definition an expandedqname is a pair of values consisting of a namespace uri and a local name they belong to the value space of the xml schema part  datatypes second edition datatype xsqname when this document refers to xsqname we always mean the value space ie a namespace uri local name pair and not the lexical space referring to constructs of the form prefixlocalname the term uri is used as follows definition within this specification the term uri refers to universal resource identifiers as defined in rfc  and extended in rfc  with a new name iri the term uri reference unless otherwise stated refers to a string in the lexical space of the xsanyuri datatype as defined in xml schema part  datatypes second edition note note that this means in practice that where this specification requires a uri reference an iri as defined in rfc  will be accepted provided that other relevant specifications also permit an iri the term uri has been retained in preference to iri to avoid introducing new names for concepts such as base uri that are defined or referenced across the whole family of xml specifications note also that the definition of xsanyuri is a wider definition than the definition in rfc  for example it does not require nonascii characters to be escaped  conformance terminology definition for compatibility a feature of this specification included to ensure that implementations that use this feature remain compatible with xml path language xpath version  definition may conforming documents and processors are permitted to but need not behave as described definition must conforming documents and processors are required to behave as described otherwise they are either nonconformant or else in error definition implementationdefined possibly differing between implementations but specified and documented by the implementor for each particular implementation definition implementationdependent possibly differing between implementations but not specified by this or other wc specification and not required to be specified by the implementor for any particular implementation  properties of functions this section is concerned with the question of whether two calls on a function with the same arguments may produce different results definition two function calls are said to be within the same execution scope if the host environment defines them as such in xslt any two calls executed during the same transformation are in the same execution scope in xquery any two calls executed during the evaluation of a toplevel expression are in the same execution scope in other contexts the execution scope is specified by the host environment that invokes the function library the following definition explains more precisely what it means for two function calls to return the same result definition two values are defined to be identical if they contain the same number of items and the items are pairwise identical two items are identical if and only if one of the following conditions applies both items are atomic values of precisely the same type and the values are equal as defined using the eq operator using the unicode codepoint collation when comparing strings both items are nodes and represent the same node both items are function items and have the same name or absence of a name arity function signature and closure note that there is no function or operator defined in the specification that tests whether two function items are identical some functions produce results that depend not only on their explicit arguments but also on the static and dynamic context definition a function may have the property of being contextdependent the result of such a function depends on the values of properties in the static and dynamic evaluation context as well as on the actual supplied arguments if any definition a function that is not contextdependent is called contextindependent a function that is contextdependent can be used as a named function reference can be partially applied and can be found using fnfunctionlookup the principle in such cases is that the static context used for the function evaluation is taken from the static context of the named function reference partial function application or the call on fnfunctionlookup and the dynamic context for the function evaluation is taken from the dynamic context of the evaluation of the named function reference partial function application or the call of fnfunctionlookup in effect the static and dynamic part of the context thus act as part of the closure of the function item contextdependent functions fall into a number of categories the functions fncurrentdate fncurrentdatetime fncurrenttime fnimplicittimezone fnadjustdatetotimezone fnadjustdatetimetotimezone and fnadjusttimetotimezone depend on properties of the dynamic context that are fixed within the execution scope the same applies to a number of functions in the op namespace that manipulate dates and times and that make use of the implicit timezone these functions will return the same result if called repeatedly during a single execution scope a number of functions including fnbaseuri fndata fndocumenturi fnposition fnlast fnid fnidref fnelementwithid fnlang fnlocalname fnname fnnamespaceuri fnnormalizespace fnnumber fnroot fnstring fnstringlength and fnpath depend on the focus these functions will in general return different results on different calls if the focus is different definition a function is focusdependent if its result depends on the focus that is the context item position or size definition a function that is not focusdependent is called focusindependent the function fndefaultcollation and many stringhandling operators and functions depend on the default collation and the inscope collations which are both properties of the static context if a particular call of one of these functions is evaluated twice with the same arguments then it will return the same result each time because the static context by definition does not change at run time however two distinct calls that is two calls on the function appearing in different places in the source code may produce different results even if the explicit arguments are the same functions such as fnstaticbaseuri fndoc and fncollection depend on other aspects of the static context as with functions that depend on collations a single call will produce the same results on each call if the explicit arguments are the same but two calls appearing in different places in the source code may produce different results the fnfunctionlookup function is a special case because it is potentially dependent on everything in the static and dynamic context this is because the static and dynamic context of the call to fnfunctionlookup are used as the static and dynamic context of the function that fnfunctionlookup returns definition for a contextdependent function the parts of the context on which it depends are referred to as implicit arguments definition a function that is guaranteed to produce identical results from repeated calls within a single execution scope if the explicit and implicit arguments are identical is referred to as deterministic definition a function that is not deterministic is referred to as nondeterministic all functions defined in this specification are deterministic unless otherwise stated exceptions include the following some functions such as fndistinctvalues and fnunordered produce results in an implementationdefined or implementationdependent order in such cases there is no guarantee that the order of results from different calls will be the same these functions are said to be nondeterministic with respect to ordering the function fnanalyzestring constructs an element node to represent its results there is no guarantee that repeated calls with the same arguments will return the same identical node in the sense of the is operator however if nonidentical nodes are returned their content will be the same in the sense of the fndeepequal function such a function is said to be nondeterministic with respect to node identity some functions such as fndoc and fncollection create new nodes by reading external documents such functions are guaranteed to be deterministic with the exception that an implementation is allowed to make them nondeterministic as a user option where the results of a function are described as being to a greater or lesser extent implementationdefined or implementationdependent this does not by itself remove the requirement that the results should be deterministic that is that repeated calls with the same explicit and implicit arguments must return identical results  accessors accessors and their semantics are described in xquery and xpath data model xdm  some of these accessors are exposed to the user through the functions described below function accessor accepts returns fnnodename nodename an optional node zero or one xsqname fnnilled nilled a node an optional xsboolean fnstring stringvalue an optional item or no argument xsstring fndata typedvalue zero or more items a sequence of atomic values fnbaseuri baseuri an optional node or no argument zero or one xsanyuri fndocumenturi documenturi an optional node zero or one xsanyuri  fnnodename summary returns the name of a node as an xsqname signatures fnnodename as xsqname fnnodenamearg as node as xsqname properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context item  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument if arg is the empty sequence the empty sequence is returned otherwise the function returns the result of the dmnodename accessor as defined in xquery and xpath data model xdm  see section  nodename accessor dm error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp notes for element and attribute nodes the name of the node is returned as an xsqname retaining the prefix namespace uri and local part for processing instructions the name of the node is returned as an xsqname in which the prefix and namespace uri are absentdm for a namespace node the function returns an empty sequence if the node represents the default namespace otherwise it returns an xsqname in which prefix and namespace uri are absentdm and the local part is the namespace prefix being bound for all other kinds of node the function returns the empty sequence  fnnilled summary returns true for an element that is nilled signatures fnnilled as xsboolean fnnilledarg as node as xsboolean properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context item  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument if arg is the empty sequence the function returns the empty sequence otherwise the function returns the result of the dmnilled accessor as defined in xquery and xpath data model xdm  see section  nilled accessor dm error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp notes if arg is not an element node the function returns the empty sequence if arg is an untyped element node the function returns false in practice the function returns true only for an element node that has the attribute xsiniltrue and that is successfully validated against a schema that defines the element to be nillable the detailed rules however are defined in xquery and xpath data model xdm   fnstring summary returns the value of arg represented as an xsstring signatures fnstring as xsstring fnstringarg as item as xsstring properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules in the zeroargument version of the function arg defaults to the context item that is calling fnstring is equivalent to calling fnstring if arg is the empty sequence the function returns the zerolength string if arg is a node the function returns the stringvalue of the node as obtained using the dmstringvalue accessor defined in xquery and xpath data model xdm  see section  stringvalue accessor dm if arg is an atomic value the function returns the result of the expression arg cast as xsstring see  casting error conditions a dynamic error is raised errxpdyxp by the zeroargument version of the function if the context item is absentdm a type error is raised errfoty if arg is a function item examples the expression string returns  the expression stringfalse returns false the expression stringparis returns paris the expression stringabs raises error foty let para  parain a hole in the ground there lived a term authortolkeinhobbittermpara          the expression stringpara returns in a hole in the ground there lived a hobbit  fndata summary returns the result of atomizing a sequence that is replacing all nodes in the sequence by their typed values signatures fndata as xsanyatomictype fndataarg as item as xsanyatomictype properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context item  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument the result of fndata is the sequence of atomic values produced by applying the following rules to each item in arg if the item is an atomic value it is appended to the result sequence if the item is a node the typed value of the node is appended to the result sequence the typed value is a sequence of zero or more atomic values specifically the result of the dmtypedvalue accessor as defined in xquery and xpath data model xdm  see section  typedvalue accessor dm error conditions a type error is raised errfoty if an item in the sequence arg is a node that does not have a typed value a type error is raised errfoty if an item in the sequence arg is a function item a dynamic error is raised if arg is omitted and the context item is absentdm notes the process of applying the fndata function to a sequence is referred to as atomization in many cases an explicit call on fndata is not required because atomization is invoked implicitly when a node or sequence of nodes is supplied in a context where an atomic value or sequence of atomic values is required examples the expression data returns  let para  parain a hole in the ground there lived a term authortolkeinhobbittermpara             the expression datapara returns xsuntypedatomicin a hole in the ground there lived a hobbit the expression dataparaterm@author returns xsuntypedatomictolkein the expression dataabs raises error foty  fnbaseuri summary returns the base uri of a node signatures fnbaseuri as xsanyuri fnbaseuriarg as node as xsanyuri properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules the zeroargument version of the function returns the base uri of the context node it is equivalent to calling fnbaseuri the singleargument version of the function behaves as follows if arg is the empty sequence the function returns the empty sequence otherwise the function returns the value of the dmbaseuri accessor applied to the node arg this accessor is defined for each kind of node in the xdm specification see section  baseuri accessor dm note as explained in xdm document element and processinginstruction nodes have a baseuri property which may be empty the baseuri property for all other node kinds is the empty sequence the dmbaseuri accessor returns the baseuri property of a node if it exists and is nonempty otherwise it returns the result of applying the dmbaseuri accessor to its parent recursively if the node does not have a parent or if the recursive ascent up the ancestor chain encounters a parentless node whose baseuri property is empty the empty sequence is returned in the case of namespace nodes however the result is always an empty sequence  it does not depend on the base uri of the parent element see also fnstaticbaseuri error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp  fndocumenturi summary returns the uri of a resource where a document can be found if available signatures fndocumenturi as xsanyuri fndocumenturiarg as node as xsanyuri properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context item  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument if arg is the empty sequence the function returns the empty sequence if arg is not a document node the function returns the empty sequence otherwise the function returns the value of the documenturi accessor applied to arg as defined in xquery and xpath data model xdm  see section  accessors dm error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp notes in the case of a document node d returned by the fndoc function or a document node at the root of a tree containing a node returned by the fncollection function it will always be true that either fndocumenturid returns the empty sequence or that the following expression is true fndocfndocumenturid is d it is implementationdefined whether this guarantee also holds for document nodes obtained by other means for example a document node passed as the initial context node of a query or transformation  errors and diagnostics  raising errors in this document as well as in xquery  an xml query language and xml path language xpath  the phrase an error is raised is used raising an error is equivalent to calling the fnerror function defined in this section with the provided error code the above phrase is normally accompanied by specification of a specific error to wit an error is raised error code each error defined in this document is identified by an xsqname that is in the httpwwwworgxqterrors namespace represented in this document by the err prefix it is this xsqname that is actually passed as an argument to the fnerror function calling this function raises an error for a more detailed treatment of error handing see section  handling dynamic errors xp the fnerror function is a general function that may be called as above but may also be called from xquery  an xml query language or xml path language xpath  applications with for example an xsqname argument  fnerror summary calling the fnerror function raises an applicationdefined error signatures fnerror as none fnerrorcode as xsqname as none fnerrorcode as xsqname description as xsstring as none fnerror code as xsqname description as xsstring errorobject as item as none properties this function is nondeterministic contextindependent and focusindependent rules this function never returns a value instead it always raises an error the effect of the error is identical to the effect of dynamic errors raised implicitly for example when an incorrect argument is supplied to a function the parameters to the fnerror function supply information that is associated with the error condition and that is made available to a caller that asks for information about the error the error may be caught either by the host language using a trycatch construct in xslt or xquery for example or by the calling application or external processing environment the way in which error information is returned to the external processing environment is implementation dependent if fnerror is called with no arguments then its behavior is the same as the function call  fnerrorfnqnamehttpwwwworgxqterrors errfoer  if code is the empty sequence then the effective value is the xsqname constructed by  fnqnamehttpwwwworgxqterrors errfoer there are three pieces of information that may be associated with an error the code is an error code that distinguishes this error from others it is an xsqname the namespace uri conventionally identifies the component subsystem or authority responsible for defining the meaning of the error code while the local part identifies the specific error condition the namespace uri httpwwwworgxqterrors is used for errors defined in this specification other namespace uris may be used for errors defined by the application if the external processing environment expects the error code to be returned as a uri or a string rather than as an xsqname then an error code with namespace uri ns and local part lp will be returned in the form nslp the namespace uri part of the error code should therefore not include a fragment identifier the description is a naturallanguage description of the error condition the errorobject is an arbitrary value used to convey additional information about the error and may be used in any way the application chooses error conditions this function always raises a dynamic error by default it raises errfoer notes the value of the description parameter may need to be localized the type none is a special type defined in xquery  and xpath  formal semantics and is not available to the user it indicates that the function never returns and ensures that it has the correct static type any qname may be used as an error code there are no reserved names or namespaces the error is always classified as a dynamic error even if the error code used is one that is normally used for static errors or type errors examples the expression fnerror raises error foer this returns the uri httpwwwworgxqterrorsfoer or the corresponding xsqname to the external processing environment unless the error is caught using a trycatch construct in the host language the expression fnerrorfnqnamehttpwwwexamplecomhr myerrtoohighsal does not apply because salary is too high raises error myerrtoohighsal this returns httpwwwexamplecomhrtoohighsal and the xsstring does not apply because salary is too high or the corresponding xsqname to the external processing environment unless the error is caught using a trycatch construct in the host language  diagnostic tracing  fntrace summary provides an execution trace intended to be used in debugging queries signature fntracevalue as item label as xsstring as item properties this function is deterministic contextindependent and focusindependent rules the function returns the value of value unchanged in addition the values of value converted to an xsstring and label may be directed to a trace data set the destination of the trace output is implementationdefined the format of the trace output is implementation dependent the ordering of output from calls of the fntrace function is implementation dependent examples consider a situation in which a user wants to investigate the actual value passed to a function assume that in a particular execution v is an xsdecimal with value  writing fntracev the value of v is will put the strings  and the value of v is in the trace data set in implementation dependent order  functions and operators on numerics this section specifies arithmetic operators on the numeric datatypes defined in xml schema part  datatypes second edition it uses an approach that permits lightweight implementation whenever possible  numeric types the operators described in this section are defined on the following numeric types each type whose name is indented is derived from the type whose name appears nearest above with one less level of indentation xsdecimal xsinteger xsfloat xsdouble they also apply to types derived by restriction from the above types note this specification uses ieee  arithmetic for xsfloat and xsdouble values one consequence of this is that some operations result in the value nan nota number which has the unusual property that it is not equal to itself another consequence is that some operations return the value negative zero this differs from xml schema part  datatypes second edition which defines nan as being equal to itself and defines only a single zero in the value space the text accompanying several functions defines behavior for both positive and negative zero inputs and outputs in the interest of alignment with ieee  a conformant implementation must respect these semantics in consequence the expression e which is actually a unary minus operator applied to an xsdouble value will always return negative zero see  opnumericunaryminus as a concession to implementations that rely on implementations of xsd  however when casting from string to double the lexical form  may be converted to positive zero though negative zero is recommended xml schema  introduces support for positive and negative zero as distinct values and also uses the ieee  semantics for comparisons involving nan  arithmetic operators on numeric values the following functions define the semantics of arithmetic operators defined in xquery  an xml query language and xml path language xpath  on these numeric types operators meaning opnumericadd addition opnumericsubtract subtraction opnumericmultiply multiplication opnumericdivide division opnumericintegerdivide integer division opnumericmod modulus opnumericunaryplus unary plus opnumericunaryminus unary minus negation the parameters and return types for the above operators are the basic numeric types xsinteger xsdecimal xsfloat and xsdouble and types derived from them the word  numeric  in function signatures signifies these four types for simplicity each operator is defined to operate on operands of the same type and return the same type the exceptions are opnumericdivide which returns an xsdecimal if called with two xsinteger operands and opnumericintegerdivide which always returns an xsinteger if the two operands are not of the same type subtype substitution and numeric type promotion are used to obtain two operands of the same type section b type promotion xp and section b operator mapping xp describe the semantics of these operations in detail the result type of operations depends on their argument datatypes and is defined in the following table operator returns opoperationxsinteger xsinteger xsinteger except for opnumericdivideinteger integer which returns xsdecimal opoperationxsdecimal xsdecimal xsdecimal opoperationxsfloat xsfloat xsfloat opoperationxsdouble xsdouble xsdouble opoperationxsinteger xsinteger opoperationxsdecimal xsdecimal opoperationxsfloat xsfloat opoperationxsdouble xsdouble these rules define any operation on any pair of arithmetic types consider the following example opoperationxsint xsdouble  opoperationxsdouble xsdouble for this operation xsint must be converted to xsdouble this can be done since by the rules above xsint can be substituted for xsinteger xsinteger can be substituted for xsdecimal xsdecimal can be promoted to xsdouble as far as possible the promotions should be done in a single step specifically when an xsdecimal is promoted to an xsdouble it should not be converted to an xsfloat and then to xsdouble as this risks loss of precision as another example a user may define height as a derived type of xsinteger with a minimum value of  and a maximum value of  he may then derive fenceheight using an enumeration to restrict the permitted set of values to say   and  opoperationfenceheight xsinteger  opoperationxsinteger xsinteger fenceheight can be substituted for its base type height and height can be substituted for its base type xsinteger the basic rules for addition subtraction and multiplication of ordinary numbers are not set out in this specification they are taken as given in the case of xsdouble and xsfloat the rules are as defined in ieee  the rules for handling division and modulus operations as well as the rules for handling special values such as infinity and nan and exception conditions such as overflow and underflow are described more explicitly since they are not necessarily obvious on overflow and underflow situations during arithmetic operations conforming implementations must behave as follows for xsfloat and xsdouble operations overflow behavior must be conformant with ieee  this specification allows the following options raising a dynamic error errfoar via an overflow trap returning inf or inf returning the largest positive or negative noninfinite number for xsfloat and xsdouble operations underflow behavior must be conformant with ieee  this specification allows the following options raising a dynamic error errfoar via an underflow trap returning e or  emin or a denormalized value where emin is the smallest possible xsfloat or xsdouble exponent for xsdecimal operations overflow behavior must raise a dynamic error errfoar on underflow  must be returned for xsinteger operations implementations that support limitedprecision integer operations must select from the following options they may choose to always raise a dynamic error errfoar they may provide an implementationdefined mechanism that allows users to choose between raising an error and returning a result that is modulo the largest representable integer value see iso  the functions opnumericadd opnumericsubtract opnumericmultiply opnumericdivide opnumericintegerdivide and opnumericmod are each defined for pairs of numeric operands each of which has the same typexsinteger xsdecimal xsfloat or xsdouble the functions opnumericunaryplus and opnumericunaryminus are defined for a single operand whose type is one of those same numeric types for xsfloat and xsdouble arguments if either argument is nan the result is nan for xsdecimal values the number of digits of precision returned by the numeric operators is implementationdefined if the number of digits in the result exceeds the number of digits that the implementation supports the result is truncated or rounded in an implementationdefined manner the ieee  specification also describes handling of two exception conditions called dividebyzero and invalidoperation the ieee dividebyzero exception is raised not only by a direct attempt to divide by zero but also by operations such as log the ieee invalidoperation exception is raised by attempts to call a function with an argument that is outside the functions domain for example sqrt or log these ieee exceptions do not cause a dynamic error at the application level rather they result in the relevant function or operator returning nan the underlying ieee exception may be notified to the application or to the user by some implementationdefined warning condition but the observable effect on an application using the functions and operators defined in this specification is simply to return nan with no error the ieee  specification distinguishes two nan values a quiet nan and a signaling nan these two values are not distinguishable in the xdm model the value spaces of xsfloat and xsdouble each include only a single nan value this does not prevent the implementation distinguishing them internally and triggering different implementationdefined warning conditions but such distinctions do not affect the observable behavior of an application using the functions and operators defined in this specification  opnumericadd summary returns the arithmetic sum of its operands arg  arg operator mapping defines the semantics of the  operator when applied to two numeric values signature opnumericaddarg as numeric arg as numeric as numeric rules general rules see  arithmetic operators on numeric values notes for xsfloat or xsdouble values if one of the operands is a zero or a finite number and the other is inf or inf inf or inf is returned if both operands are inf inf is returned if both operands are inf inf is returned if one of the operands is inf and the other is inf nan is returned  opnumericsubtract summary returns the arithmetic difference of its operands arg  arg operator mapping defines the semantics of the  operator when applied to two numeric values signature opnumericsubtractarg as numeric arg as numeric as numeric rules general rules see  arithmetic operators on numeric values notes for xsfloat or xsdouble values if one of the operands is a zero or a finite number and the other is inf or inf an infinity of the appropriate sign is returned if both operands are inf or inf nan is returned if one of the operands is inf and the other is inf an infinity of the appropriate sign is returned  opnumericmultiply summary returns the arithmetic product of its operands arg  arg operator mapping defines the semantics of the  operator when applied to two numeric values signature opnumericmultiplyarg as numeric arg as numeric as numeric rules general rules see  arithmetic operators on numeric values notes for xsfloat or xsdouble values if one of the operands is a zero and the other is an infinity nan is returned if one of the operands is a nonzero number and the other is an infinity an infinity with the appropriate sign is returned  opnumericdivide summary returns the arithmetic quotient of its operands arg div arg operator mapping defines the semantics of the div operator when applied to two numeric values signature opnumericdividearg as numeric arg as numeric as numeric rules general rules see  arithmetic operators on numeric values as a special case if the types of both arg and arg are xsinteger then the return type is xsdecimal error conditions a dynamic error is raised errfoar for xsdecimal and xsinteger operands if the divisor is positive or negative zero notes for xsfloat and xsdouble operands floating point division is performed as specified in ieee  a positive number divided by positive zero returns inf a negative number divided by positive zero returns inf division by negative zero returns inf and inf respectively positive or negative zero divided by positive or negative zero returns nan also inf or inf divided by inf or inf returns nan  opnumericintegerdivide summary performs an integer division operator mapping defines the semantics of the idiv operator when applied to two numeric values signature opnumericintegerdividearg as numeric arg as numeric as xsinteger rules general rules see  arithmetic operators on numeric values if arg is inf or inf and arg is not inf or inf then the result is zero otherwise subject to limits of precision and overflowunderflow conditions the result is the largest furthest from zero xsinteger value n such that fnabsn  arg le fnabsarg and fncomparen  arg  eq fncomparearg  note the second term in this condition ensures that the result has the correct sign the implementation may adopt a different algorithm provided that it is equivalent to this formulation in all cases where implementationdependent or implementationdefined behavior does not affect the outcome for example the implementationdefined precision of the result of xsdecimal division error conditions a dynamic error is raised errfoar if the divisor is positive or negative zero a dynamic error is raised errfoar if either operand is nan or if arg is inf or inf notes except in situations involving errors loss of precision or overflowunderflow the result of a idiv b is the same as a div b cast as xsinteger the semantics of this function are different from integer division as defined in programming languages such as java and c examples the expression opnumericintegerdivide returns  the expression opnumericintegerdivide returns  the expression opnumericintegerdivide returns  the expression opnumericintegerdivide returns  the expression opnumericintegerdivide returns  the expression opnumericintegerdivide returns  the expression opnumericintegerdivide returns  the expression opnumericintegerdividee returns  the expression opnumericintegerdividee returns   opnumericmod summary returns the remainder resulting from dividing arg the dividend by arg the divisor operator mapping defines the semantics of the mod operator when applied to two numeric values signature opnumericmodarg as numeric arg as numeric as numeric rules general rules see  arithmetic operators on numeric values the operation a mod b for operands that are xsinteger or xsdecimal or types derived from them produces a result such that a idiv bba mod b is equal to a and the magnitude of the result is always less than the magnitude of b this identity holds even in the special case that the dividend is the negative integer of largest possible magnitude for its type and the divisor is  the remainder is  it follows from this rule that the sign of the result is the sign of the dividend for xsfloat and xsdouble operands the following rules apply if either operand is nan the result is nan if the dividend is positive or negative infinity or the divisor is positive or negative zero  or both the result is nan if the dividend is finite and the divisor is an infinity the result equals the dividend if the dividend is positive or negative zero and the divisor is finite the result is the same as the dividend in the remaining cases where neither positive or negative infinity nor positive or negative zero nor nan is involved the result obeys a idiv bba mod b  a division is truncating division analogous to integer division not ieee  rounding division ie additional digits are truncated not rounded to the required precision error conditions a dynamic error is raised errfoar for xsinteger and xsdecimal operands if arg is zero examples the expression opnumericmod returns  the expression opnumericmod returns  the expression opnumericmod returns  the expression opnumericmode e returns e  opnumericunaryplus summary returns its operand with the sign unchanged  arg operator mapping defines the semantics of the unary  operator applied to a numeric value signature opnumericunaryplusarg as numeric as numeric rules general rules see  arithmetic operators on numeric values the returned value is equal to arg and is an instance of xsinteger xsdecimal xsdouble or xsfloat depending on the type of arg notes because function conversion rules are applied in the normal way the unary  operator can be used to force conversion of an untyped node to a number the result of @price is the same as xsdouble@price if the type of @price is xsuntypedatomic  opnumericunaryminus summary returns its operand with the sign reversed  arg operator mapping defines the semantics of the unary  operator when applied to a numeric value signature opnumericunaryminusarg as numeric as numeric rules general rules see  arithmetic operators on numeric values the returned value is an instance of xsinteger xsdecimal xsdouble or xsfloat depending on the type of arg for xsinteger and xsdecimal arguments  and  return  and  respectively for xsfloat and xsdouble arguments nan returns nan e returns e and vice versa inf returns inf inf returns inf  comparison operators on numeric values this specification defines the following comparison operators on numeric values comparisons take two arguments of the same type if the arguments are of different types one argument is promoted to the type of the other as described above in  arithmetic operators on numeric values each comparison operator returns a boolean value if either or both operands are nan false is returned function meaning opnumericequal returns true if and only if the value of arg is equal to the value of arg opnumericlessthan returns true if and only if arg is numerically less than arg opnumericgreaterthan returns true if and only if arg is numerically greater than arg  opnumericequal summary returns true if and only if the value of arg is equal to the value of arg operator mapping defines the semantics of the eq operator when applied to two numeric values and is also used in defining the semantics of ne le and ge signature opnumericequalarg as numeric arg as numeric as xsboolean rules general rules see  arithmetic operators on numeric values and  comparison operators on numeric values for xsfloat and xsdouble values positive zero and negative zero compare equal inf equals inf and inf equals inf nan does not equal itself  opnumericlessthan summary returns true if and only if arg is numerically less than arg operator mapping defines the semantics of the lt operator when applied to two numeric values and is also used in defining the semantics of le signature opnumericlessthanarg as numeric arg as numeric as xsboolean rules general rules see  arithmetic operators on numeric values and  comparison operators on numeric values for xsfloat and xsdouble values positive infinity is greater than all other nonnan values negative infinity is less than all other nonnan values if arg or arg is nan the function returns false  opnumericgreaterthan summary returns true if and only if arg is numerically greater than arg operator mapping defines the semantics of the gt operator when applied to two numeric values and is also used in defining the semantics of ge signature opnumericgreaterthanarg as numeric arg as numeric as xsboolean rules the function call opnumericgreaterthana b is defined to return the same result as opnumericlessthanb a  functions on numeric values the following functions are defined on numeric types each function returns a value of the same type as the type of its argument if the argument is the empty sequence the empty sequence is returned for xsfloat and xsdouble arguments if the argument is nan nan is returned except for fnabs for xsfloat and xsdouble arguments if the argument is positive or negative infinity positive or negative infinity is returned function meaning fnabs returns the absolute value of arg fnceiling rounds arg upwards to a whole number fnfloor rounds arg downwards to a whole number fnround rounds a value to a specified number of decimal places rounding upwards if two such values are equally near fnroundhalftoeven rounds a value to a specified number of decimal places rounding to make the last digit even if two such values are equally near note fnround and fnroundhalftoeven produce the same result in all cases except when the argument is exactly midway between two values with the required precision other ways of rounding midway values can be achieved as follows towards negative infinity fnroundx away from zero fnroundfnabsxfncomparex towards zero fnabsfnroundxfncomparex  fnabs summary returns the absolute value of arg signature fnabsarg as numeric as numeric properties this function is deterministic contextindependent and focusindependent rules general rules see  functions on numeric values if arg is negative the function returns arg otherwise it returns arg if the type of arg is one of the four numeric types xsfloat xsdouble xsdecimal or xsinteger the type of the result is the same as the type of arg if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type for xsfloat and xsdouble arguments if the argument is positive zero or negative zero then positive zero is returned if the argument is positive or negative infinity positive infinity is returned examples the expression fnabs returns  the expression fnabs returns   fnceiling summary rounds arg upwards to a whole number signature fnceilingarg as numeric as numeric properties this function is deterministic contextindependent and focusindependent rules general rules see  functions on numeric values the function returns the smallest closest to negative infinity number with no fractional part that is not less than the value of arg if the type of arg is one of the four numeric types xsfloat xsdouble xsdecimal or xsinteger the type of the result is the same as the type of arg if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type for xsfloat and xsdouble arguments if the argument is positive zero then positive zero is returned if the argument is negative zero then negative zero is returned if the argument is less than zero and greater than  negative zero is returned examples the expression fnceiling returns  the expression fnceiling returns   fnfloor summary rounds arg downwards to a whole number signature fnfloorarg as numeric as numeric properties this function is deterministic contextindependent and focusindependent rules general rules see  functions on numeric values the function returns the largest closest to positive infinity number with no fractional part that is not greater than the value of arg if the type of arg is one of the four numeric types xsfloat xsdouble xsdecimal or xsinteger the type of the result is the same as the type of arg if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type for xsfloat and xsdouble arguments if the argument is positive zero then positive zero is returned if the argument is negative zero then negative zero is returned examples the expression fnfloor returns  the expression fnfloor returns   fnround summary rounds a value to a specified number of decimal places rounding upwards if two such values are equally near signatures fnroundarg as numeric as numeric fnroundarg as numeric precision as xsinteger as numeric properties this function is deterministic contextindependent and focusindependent rules general rules see  functions on numeric values the function returns the nearest that is numerically closest value to arg that is a multiple of ten to the power of minus precision if two such values are equally near for example if the fractional part in arg is exactly  the function returns the one that is closest to positive infinity if the type of arg is one of the four numeric types xsfloat xsdouble xsdecimal or xsinteger the type of the result is the same as the type of arg if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type the singleargument version of this function produces the same result as the twoargument version with precision that is it rounds to a whole number when arg is of type xsfloat and xsdouble if arg is nan positive or negative zero or positive or negative infinity then the result is the same as the argument for other values the argument is cast to xsdecimal using an implementation of xsdecimal that imposes no limits on the number of digits that can be represented the function is applied to this xsdecimal value and the resulting xsdecimal is cast back to xsfloat or xsdouble as appropriate to form the function result if the resulting xsdecimal value is zero then positive or negative zero is returned according to the sign of arg notes this function is typically used with a nonzero precision in financial applications where the argument is of type xsdecimal for arguments of type xsfloat and xsdouble the results may be counterintuitive for example consider rounde  the result is not  as might be expected but  this is because the xsdouble written as e has an exact value equal to  which is closer to  than to  examples the expression fnround returns  the expression fnround returns  the expression fnround returns  not the possible alternative  the expression fnround  returns  the expression fnround  returns  the expression fnrounde  returns e  fnroundhalftoeven summary rounds a value to a specified number of decimal places rounding to make the last digit even if two such values are equally near signatures fnroundhalftoevenarg as numeric as numeric fnroundhalftoevenarg as numeric precision as xsinteger as numeric properties this function is deterministic contextindependent and focusindependent rules general rules see  functions on numeric values the function returns the nearest that is numerically closest value to arg that is a multiple of ten to the power of minus precision if two such values are equally near eg if the fractional part in arg is exactly  the function returns the one whose least significant digit is even if the type of arg is one of the four numeric types xsfloat xsdouble xsdecimal or xsinteger the type of the result is the same as the type of arg if the type of arg is a type derived from one of the numeric types the result is an instance of the base numeric type the first signature of this function produces the same result as the second signature with precision for arguments of type xsfloat and xsdouble if the argument is nan positive or negative zero or positive or negative infinity then the result is the same as the argument in all other cases the argument is cast to xsdecimal using an implementation of xsdecimal that imposes no limits on the number of digits that can be represented the function is applied to this xsdecimal value and the resulting xsdecimal is cast back to xsfloat or xsdouble as appropriate to form the function result if the resulting xsdecimal value is zero then positive or negative zero is returned according to the sign of the original argument notes this function is typically used in financial applications where the argument is of type xsdecimal for arguments of type xsfloat and xsdouble the results may be counterintuitive for example consider roundhalftoevenxsfloat  the result is not  as might be expected but  this is because the conversion of the xsfloat value represented by the literal  to an xsdecimal produces the xsdecimal value  which is closer to  than to  examples the expression fnroundhalftoeven returns  the expression fnroundhalftoeven returns  the expression fnroundhalftoeven returns  the expression fnroundhalftoevene  returns e the expression fnroundhalftoevene  returns e the expression fnroundhalftoeven  returns   parsing numbers it is possible to convert strings to values of type xsinteger xsfloat xsdecimal or xsdouble using the constructor functions described in  constructor functions or using cast expressions as described in  casting in addition the fnnumber function is available to convert strings to values of type xsdouble it differs from the xsdouble constructor function in that any value outside the lexical space of the xsdouble datatype is converted to the xsdouble value nan  fnnumber summary returns the value indicated by arg or if arg is not specified the context item after atomization converted to an xsdouble signatures fnnumber as xsdouble fnnumberarg as xsanyatomictype as xsdouble properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules calling the zeroargument version of the function is defined to give the same result as calling the singleargument version with the context item  that is fnnumber is equivalent to fnnumber as defined by the rules that follow if arg is the empty sequence or if arg cannot be converted to an xsdouble the xsdouble value nan is returned otherwise arg is converted to an xsdouble following the rules of  casting to xsdouble if the conversion to xsdouble fails the xsdouble value nan is returned error conditions a dynamic error is raised errxpdyxp if arg is omitted and the context item is absentdm as a consequence of the rules given above a type error occurs if the context item cannot be atomized or if the result of atomizing the context item is a sequence containing more than one atomic value notes xsd  allows the string inf as a representation of positive infinity xsd  does not it is implementationdefined whether xsd  is supported generally fnnumber returns nan rather than raising a dynamic error if the argument cannot be converted to xsdouble however a type error is raised in the usual way if the supplied argument cannot be atomized or if the result of atomization does not match the required argument type examples the expression fnnumberitemquantity returns e the expression fnnumberitemdescription returns xsdoublenan assume that the context item is the xsstring value  then fnnumber returns e  formatting integers  fnformatinteger summary formats an integer according to a given picture string using the conventions of a given natural language if specified signatures fnformatintegervalue as xsinteger picture as xsstring as xsstring fnformatinteger value as xsinteger picture as xsstring lang as xsstring as xsstring properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on default language the threeargument form of this function is deterministic contextindependent and focusindependent rules if value is an empty sequence the function returns a zerolength string in all other cases the picture argument describes the format in which value is output the rules that follow describe how nonnegative numbers are output if the value of value is negative the rules below are applied to the absolute value of value and a minus sign is prepended to the result the value of picture consists of a primary format token optionally followed by a format modifier the primary format token is always present and must not be zerolength if the string contains one or more semicolons then everything that precedes the last semicolon is taken as the primary format token and everything that follows is taken as the format modifier if the string contains no semicolon then the entire picture is taken as the primary format token and the format modifier is taken to be absent which is equivalent to supplying a zerolength string the primary format token is classified as one of the following a decimaldigitpattern made up of optionaldigitsigns mandatorydigitsigns and groupingseparatorsigns the optionaldigitsign is the character  a mandatorydigitsign is a character in unicode category nd all mandatorydigitsigns within the format token must be from the same digit family where a digit family is a sequence of ten consecutive characters in unicode category nd having digit values  through  within the format token these digits are interchangeable a threedigit number may thus be indicated equivalently by   or  a groupingseparatorsign is a nonalphanumeric character that is a character whose unicode category is other than nd nl no lu ll lt lm or lo if the primary format token contains at least one unicode digit then it is taken as a decimal digit pattern and in this case it must match the regular expression pndpnpl if it contains a digit but does not match this pattern a dynamic error is raised errfodf note if a semicolon is to be used as a grouping separator then the primary format token as a whole must be followed by another semicolon to ensure that the grouping separator is not mistaken as a separator between the primary format token and the format modifier there must be at least one mandatorydigitsign there may be zero or more optionaldigitsigns and if present these must precede all mandatorydigitsigns there may be zero or more groupingseparatorsigns a groupingseparatorsign must not appear at the start or end of the decimaldigitpattern nor adjacent to another groupingseparatorsign the corresponding output format is a decimal number using this digit family with at least as many digits as there are mandatorydigitsigns in the format token thus a format token  generates the sequence         and a format token  or equivalently  or  generates the sequence             a format token of x arabicindic digit one generates the sequence  then  then   the groupingseparatorsigns are handled as follows the position of grouping separators within the format token counting backwards from the last digit indicates the position of grouping separators to appear within the formatted number and the character used as the groupingseparatorsign within the format token indicates the character to be used as the corresponding grouping separator in the formatted number if groupingseparatorsigns appear at regular intervals within the format token that is if the same grouping separator appears at positions forming a sequence n n n  for some integer value n including the case where there is only one number in the list then the sequence is extrapolated to the left so grouping separators will be used in the formatted number at every multiple of n for example if the format token is  then the number one million will be formatted as  while the number fifteen will be formatted as  the only purpose of optionaldigitsigns is to mark the position of groupingseparatorsigns for example if the format token is  then the number one million will be formatted as  while the number fifteen will be formatted as  a grouping separator is included in the formatted number only if there is a digit to its left which will only be the case if either a the number is large enough to require that digit or b the number of mandatorydigitsigns in the format token requires insignificant leading zeros to be present note numbers will never be truncated given the decimaldigitpattern  the number three hundred will be output as  despite the absence of any optionaldigitsign the format token a which generates the sequence a b c  z aa ab ac the format token a which generates the sequence a b c  z aa ab ac the format token i which generates the sequence i ii iii iv v vi vii viii ix x  the format token i which generates the sequence i ii iii iv v vi vii viii ix x  the format token w which generates numbers written as lowercase words for example in english one two three four  the format token w which generates numbers written as uppercase words for example in english one two three four  the format token ww which generates numbers written as titlecase words for example in english one two three four  any other format token which indicates a numbering sequence in which that token represents the number  one but see the note below it is implementationdefined which numbering sequences additional to those listed above are supported if an implementation does not support a numbering sequence represented by the given token it must use a format token of  note in some traditional numbering sequences additional signs are added to denote that the letters should be interpreted as numbers these are not included in the format token an example see also the example below is classical greek where a dexia keraia x  and sometimes an aristeri keraia x  is added for all format tokens other than the first kind above one that consists of decimal digits there may be implementationdefined lower and upper bounds on the range of numbers that can be formatted using this format token indeed for some numbering sequences there may be intrinsic limits for example the format token x circled digit one  has a range imposed by the unicode character repertoire   to  in unicode versions prior to  increased in subsequent versions for the numbering sequences described above any upper bound imposed by the implementation must not be less than  one thousand and any lower bound must not be greater than  numbers that fall outside this range must be formatted using the format token  the above expansions of numbering sequences for format tokens such as a and i are indicative but not prescriptive there are various conventions in use for how alphabetic sequences continue when the alphabet is exhausted and differing conventions for how roman numerals are written for example iv versus iiii as the representation of the number  sometimes alphabetic sequences are used that omit letters such as i and o this specification does not prescribe the detail of any sequence other than those sequences consisting entirely of decimal digits many numbering sequences are languagesensitive this applies especially to the sequence selected by the tokens w w and ww it also applies to other sequences for example different languages using the cyrillic alphabet use different sequences of characters each starting with the letter x cyrillic capital letter a in such cases the lang argument specifies which languages conventions are to be used if the argument is specified the value should be either an empty sequence or a value that would be valid for the xmllang attribute see extensible markup language xml  fifth edition note that this permits the identification of sublanguages based on country codes from iso  as well as identification of dialects and regions within a country the set of languages for which numbering is supported is implementationdefined if the lang argument is absent or is set to an empty sequence or is invalid or is not a language supported by the implementation then the number is formatted using the default language from the dynamic context the format modifier must be a string that matches the regular expression coat that is if it is present it must consist of one or more of the following in order either c or o optionally followed by a sequence of characters enclosed between parentheses to indicate cardinal or ordinal numbering respectively the default being cardinal numbering either a or t to indicate alphabetic or traditional numbering respectively the default being implementationdefined if the o modifier is present this indicates a request to output ordinal numbers rather than cardinal numbers for example in english when used with the format token  this outputs the sequence st nd rd th  and when used with the format token w outputs the sequence first second third fourth  the string of characters between the parentheses if present is used to select between other possible variations of cardinal or ordinal numbering sequences the interpretation of this string is implementationdefined no error occurs if the implementation does not define any interpretation for the defined string for example in some languages ordinal numbers vary depending on the grammatical context they may have different genders and may decline with the noun that they qualify in such cases the string appearing in parentheses after the letter o may be used to indicate the variation of the ordinal number required the way in which the variation is indicated will depend on the conventions of the language for inflected languages that vary the ending of the word the recommended approach is to indicate the required ending preceded by a hyphen for example in german appropriate values are oe oer oes oen it is implementationdefined what combinations of values of the format token the language and the cardinalordinal modifier are supported if ordinal numbering is not supported for the combination of the format token the language and the string appearing in parentheses the request is ignored and cardinal numbers are generated instead example ordinal numbering in italian the specification o with lang equal to it if supported should produce the sequence      the specification wwo with lang equal to it if supported should produce the sequence primo secondo terzo quarto quinto  the use of the a or t modifier disambiguates between numbering sequences that use letters in many languages there are two commonly used numbering sequences that use letters one numbering sequence assigns numeric values to letters in alphabetic sequence and the other assigns numeric values to each letter in some other manner traditional in that language in english these would correspond to the numbering sequences specified by the format tokens a and i in some languages the first member of each sequence is the same and so the format token alone would be ambiguous in the absence of the a or t modifier the default is implementationdefined error conditions a dynamic error is raised errfodf if the format token is invalid that is if it violates any mandatory rules indicated by an emphasized must or required keyword in the above rules for example the error is raised if the primary format token contains a digit but does not match the required regular expression notes note the careful distinction between conditions that are errors and conditions where fallback occurs the principle is that an error in the syntax of the format picture will be reported by all processors while a construct that is recognized by some implementations but not others will never result in an error but will instead cause a fallback representation of the integer to be used examples the expression formatinteger  returns  formatinteger w might return one hundred and twentythree the expression formatinteger o en returns st formatinteger wwoe de might return vierzehnte the expression formatinteger a returns g the expression formatinteger i returns lvii the expression formatinteger  returns   formatting numbers this section defines a function for formatting decimal and floating point numbers function meaning fnformatnumber returns a string containing a number formatted according to a given picture string taking account of decimal formats specified in the static context note this function can be used to format any numeric quantity including an integer for integers however the fnformatinteger function offers additional possibilities note also that the picture strings used by the two functions are not  compatible though they share some options in common  defining a decimal format decimal formats are defined in the static context and the way they are defined is therefore outside the scope of this specification xslt and xquery both provide custom syntax for creating a decimal format the static context provides a set of decimal formats one of the decimal formats is unnamed the others if any are identified by a qname there is always an unnamed decimal format available but its contents are implementationdefined each decimal format provides a set of named properties described in the following table name type usage nonnormative decimalseparatorsign a single character defines the character used to represent the decimal point typically  both in the picture string and in the formatted number groupingseparatorsign a single character defines the character used to separate groups of digits typically  both in the picture string and in the formatted number infinity a string defines the string used to represent the value positive or negative infinity in the formatted number typically infinity minussign a single character defines the character used as a minus sign in the formatted number if there is no subpicture for formatting negative numbers typically  xd nan a string defines the string used to represent the value nan in the formatted number percentsign a single character defines the character used as a percent sign typically  both in the picture string and in the formatted number permillesign a single character defines the character used as a permille sign typically  x both in the picture string and in the formatted number mandatorydigitsign a single character which must be a character in unicode category nd with decimal digit value  zero defines the characters used in the picture string to represent a mandatory digit for example if the mandatorydigitsign is  then any of the digits  to  may be used interchangeably in the picture string to represent a mandatory digit and in the formatted number the characters  to  will be used to represent the digits one to nine optionaldigitsign a single character defines the character used in the picture string to represent an optional digit typically  patternseparatorsign a single character defines the character used in the picture string to separate the positive and negative subpictures typically  definition the decimal digit family of a decimal format is the sequence of ten digits with consecutive unicode codepoints starting with the mandatorydigitsign it is a constraint that for any named or unnamed decimal format the properties representing characters used in a picture string must have distinct values these properties are decimalseparatorsign groupingseparatorsign percentsign permillesign optionaldigitsign and patternseparatorsign furthermore none of these properties may be equal to any character in the decimal digit family  fnformatnumber summary returns a string containing a number formatted according to a given picture string taking account of decimal formats specified in the static context signatures fnformatnumbervalue as numeric picture as xsstring as xsstring fnformatnumber value as numeric picture as xsstring decimalformatname as xsstring as xsstring properties the twoargument form of this function is deterministic contextindependent and focusindependent the threeargument form of this function is deterministic contextdependent and focusindependent it depends on decimal formats and namespaces rules the effect of the twoargument form of the function is equivalent to calling the threeargument form with an empty sequence as the value of the third argument the function formats value as a string using the picture string specified by the picture argument and the decimalformat named by the decimalformatname argument or the default decimalformat if there is no decimalformatname argument the syntax of the picture string is described in  syntax of the picture string the value argument may be of any numeric data type xsdouble xsfloat xsdecimal or their subtypes including xsinteger note that if an xsdecimal is supplied it is not automatically promoted to an xsdouble as such promotion can involve a loss of precision if the supplied value of the value argument is an empty sequence the function behaves as if the supplied value were the xsdouble value nan the value of decimalformatname if present and nonempty must be a string which after removal of leading and trailing whitespace is in the form of an an eqname as defined in the xpath  grammar that is one of the following a lexical qname which is expanded using the statically known namespaces the default namespace is not used no prefix means no namespace a uriqualifiedname using the syntax qurilocal where the uri can be zerolength to indicate a name in no namespace the decimal format that is used is the decimal format in the static context whose name matches decimalformatname if supplied or the default decimal format in the static context otherwise the evaluation of the formatnumber function takes place in two phases an analysis phase described in  analysing the picture string and a formatting phase described in  formatting the number the analysis phase takes as its inputs the picture string and the variables derived from the relevant decimal format in the static context and produces as its output a number of variables with defined values the formatting phase takes as its inputs the number to be formatted and the variables produced by the analysis phase and produces as its output a string containing a formatted representation of the number the result of the function is the formatted string representation of the supplied number error conditions a dynamic error is raised errfodf if the name specified as the decimalformatname argument is neither a valid lexical qname nor a valid uriqualifiedname or if it uses a prefix that is not found in the statically known namespaces or if the static context does not contain a declaration of a decimalformat with a matching expanded qname if the processor is able to detect the error statically for example when the argument is supplied as a string literal then the processor may optionally signal this as a static error notes numbers will always be formatted with the most significant digit on the left examples the following examples assume a default decimal format in which the chosen digits are the ascii digits  the decimal separator is  the grouping separator is  the minussign is  the percentsign is  and the exponent separator is e the expression formatnumber  returns  the expression formatnumber  returns  the expression formatnumber  returns  the expression formatnumber  returns  the expression formatnumber  returns  the expression formatnumber e returns e the expression formatnumber e returns e the following example assumes the existence of a decimal format named ch in which the grouping separator is  and the decimal separator is  the expression formatnumber  ch returns   syntax of the picture string note this differs from the formatnumber function previously defined in xslt  in that any digit can be used in the picture string to represent a mandatory digit for example the picture strings   and  are equivalent the digits used must all be from the same decimal digit family specifically the sequence of ten consecutive digits starting with the mandatorydigitsign this change is to align formatnumber which previously used  with formatdatetime which used  definition the formatting of a number is controlled by a picture string the picture string is a sequence of characters in which the characters assigned to the properties decimalseparatorsign groupingsign decimaldigitfamily optionaldigitsign and patternseparatorsign are classified as active characters and all other characters including the percentsign and permillesign are classified as passive characters the integer part of the subpicture is defined as the part that appears to the left of the decimalseparatorsign if there is one or the entire subpicture otherwise the fractional part of the subpicture is defined as the part that appears to the right of the decimalseparatorsign if there is one or the part that appears to the right of the rightmost active character otherwise the fractional part may be zerolength a dynamic error is raised errfodf if the picture string does not conform to the following rules note that in these rules the words preceded and followed refer to characters anywhere in the string they are not to be read as immediately preceded and immediately followed a picturestring consists either of a subpicture or of two subpictures separated by a patternseparatorsign a picturestring must not contain more than one patternseparatorsign if the picturestring contains two subpictures the first is used for positive values and the second for negative values a subpicture must not contain more than one decimalseparatorsign a subpicture must not contain more than one percentsign or permillesign and it must not contain one of each a subpicture must contain at least one character that is an optionaldigitsign or a member of the decimaldigitfamily a subpicture must not contain a passive character that is preceded by an active character and that is followed by another active character a subpicture must not contain a groupingseparatorsign adjacent to a decimalseparatorsign the integer part of a subpicture must not contain a member of the decimaldigitfamily that is followed by an optionaldigitsign the fractional part of a subpicture must not contain an optionaldigitsign that is followed by a member of the decimaldigitfamily  analysing the picture string this phase of the algorithm analyses the picture string and the properties from the selected decimal format in the static context and it has the effect of setting the values of various variables which are used in the subsequent formatting phase these variables are listed below each is shown with its initial setting and its data type several variables are associated with each subpicture if there are two subpictures then these rules are applied to one subpicture to obtain the values that apply to positive numbers and to the other to obtain the values that apply to negative numbers if there is only one subpicture then the values for both cases are derived from this subpicture the variables are as follows the integerpartgroupingpositions is a sequence of integers representing the positions of grouping separators within the integer part of the subpicture for each groupingseparatorsign that appears within the integer part of the subpicture this sequence contains an integer that is equal to the total number of optionaldigitsign and decimaldigitfamily characters that appear within the integer part of the subpicture and to the right of the groupingseparatorsign in addition if these integerpartgroupingpositions are at regular intervals that is if they form a sequence n n n  for some integer value n including the case where there is only one number in the list then the sequence contains all integer multiples of n as far as necessary to accommodate the largest possible number the minimumintegerpartsize is an integer indicating the minimum number of digits that will appear to the left of the decimalseparatorsign it is normally set to the number of decimaldigitfamily characters found in the integer part of the subpicture but if the subpicture contains no decimaldigitfamily character and no decimalseparatorsign it is set to one note there is no maximum integer part size all significant digits in the integer part of the number will be displayed even if this exceeds the number of optionaldigitsign and decimaldigitfamily characters in the subpicture the prefix is set to contain all passive characters in the subpicture to the left of the leftmost active character if the picture string contains only one subpicture the prefix for the negative subpicture is set by concatenating the minussign character and the prefix for the positive subpicture if any in that order the fractionalpartgroupingpositions is a sequence of integers representing the positions of grouping separators within the fractional part of the subpicture for each groupingseparatorsign that appears within the fractional part of the subpicture this sequence contains an integer that is equal to the total number of optionaldigitsign and decimaldigitfamily characters that appear within the fractional part of the subpicture and to the left of the groupingseparatorsign note there is no need to extrapolate grouping positions on the fractional side because the number of digits in the output will never exceed the number of optionaldigitsign and decimaldigitfamily in the fractional part of the subpicture the minimumfractionalpartsize is set to the number of decimaldigitfamily characters found in the fractional part of the subpicture the maximumfractionalpartsize is set to the total number of optionaldigitsign and decimaldigitfamily characters found in the fractional part of the subpicture the suffix is set to contain all passive characters to the right of the rightmost active character in the subpicture note if there is only one subpicture then all variables for positive numbers and negative numbers will be the same except for prefix the prefix for negative numbers will be preceded by the minussign character  formatting the number this section describes the second phase of processing of the fnformatnumber function this phase takes as input a number to be formatted referred to as the input number and the variables set up by analysing the decimal format in the static context and the picture string as described above the result of this phase is a string which forms the return value of the fnformatnumber function the algorithm for this second stage of processing is as follows if the input number is nan not a number the result is the specified nansymbol with no prefix or suffix in the rules below the positive subpicture and its associated variables are used if the input number is positive and the negative subpicture and its associated variables are used otherwise negative zero is taken as negative positive zero as positive if the input number is positive or negative infinity the result is the concatenation of the appropriate prefix the infinitysymbol and the appropriate suffix if the subpicture contains a percentsign the number is multiplied by  if the subpicture contains a permillesign the number is multiplied by  the resulting number is referred to below as the adjusted number the adjusted number is converted if necessary to an xsdecimal value using an implementation of xsdecimal that imposes no limits on the totaldigits or fractiondigits facets if there are several such values that are numerically equal to the adjusted number bearing in mind that if the adjusted number is an xsdouble or xsfloat the comparison will be done by converting the decimal value back to an xsdouble or xsfloat the one that is chosen should be one with the smallest possible number of digits not counting leading or trailing zeroes whether significant or insignificant for example  is preferred to  and  is preferred to  this value is then rounded so that it uses no more than maximumfractionalpartsize digits in its fractional part the rounded number is defined to be the result of converting the adjusted number to an xsdecimal value as described above and then calling the function fnroundhalftoeven with this converted number as the first argument and the maximumfractionalpartsize as the second argument again with no limits on the totaldigits or fractiondigits in the result the absolute value of the rounded number is converted to a string in decimal notation with no insignificant leading or trailing zeroes using the digits in the decimaldigitfamily to represent the ten decimal digits and the decimalseparatorsign to separate the integer part and the fractional part the value zero will at this stage be represented by a decimalseparatorsign on its own if the number of digits to the left of the decimalseparatorsign is less than minimumintegerpartsize leading zerodigitsign characters are added to pad out to that size if the number of digits to the right of the decimalseparatorsign is less than minimumfractionalpartsize trailing zerodigitsign characters are added to pad out to that size for each integer n in the integerpartgroupingpositions list a groupingseparatorsign character is inserted into the string immediately after that digit that appears in the integer part of the number and has n digits between it and the decimalseparatorsign if there is such a digit for each integer n in the fractionalpartgroupingpositions list a groupingseparatorsign character is inserted into the string immediately before that digit that appears in the fractional part of the number and has n digits between it and the decimalseparatorsign if there is such a digit if there is no decimalseparatorsign in the subpicture or if there are no digits to the right of the decimalseparatorsign character in the string then the decimalseparatorsign character is removed from the string it will be the rightmost character in the string the result of the function is the concatenation of the appropriate prefix the string conversion of the number as obtained above and the appropriate suffix  trigonometric and exponential functions the functions in this section perform trigonometric and other mathematical calculations on xsdouble values they are provided primarily for use in applications performing geometrical computation for example when generating svg graphics functions are provided to support the six most commonly used trigonometric calculations sine cosine and tangent and their inverses arc sine arc cosine and arc tangent other functions such as secant cosecant and cotangent are not provided because they are easily computed in terms of these six the functions in this section with the exception of mathpi are specified by reference to ieee  where they appear as recommended operations in section  ieee defines these functions for a variety of floating point formats this specification defines them only for xsdouble values the ieee specification applies with the following caveats ieee states that the preferred quantum is languagedefined in this specification it is implementationdefined ieee states that certain functions should raise the inexact exception if the result is inexact in this specification this exception if it occurs does not result in an error any diagnostic information is outside the scope of this specification ieee defines various rounding algorithms for inexact results and states that the choice of rounding direction and the mechanisms for influencing this choice are languagedefined in this specification the rounding direction and any mechanisms for influencing it are implementationdefined certain operations such as taking the square root of a negative number are defined in ieee to signal the invalid operation exception and return a quiet nan in this specification such operations return nan and do not raise an error the same policy applies to operations such as taking the logarithm of zero that raise a dividebyzero exception any diagnostic information is outside the scope of this specification operations whose mathematical result is greater than the largest finite xsdouble value are defined in ieee to signal the overflow exception operations whose mathematical result is closer to zero than the smallest nonzero xsdouble value are similarly defined in ieee to signal the underflow exception the treatment of these exceptions in this specification is defined in  arithmetic operators on numeric values function meaning mathpi returns an approximation to the mathematical constant  mathexp returns the value of ex mathexp returns the value of x mathlog returns the natural logarithm of the argument mathlog returns the baseten logarithm of the argument mathpow returns the result of raising the first argument to the power of the second mathsqrt returns the nonnegative square root of the argument mathsin returns the sine of the argument expressed in radians mathcos returns the cosine of the argument expressed in radians mathtan returns the tangent of the argument expressed in radians mathasin returns the arc sine of the argument the result being in the range  to  radians mathacos returns the arc cosine of the argument the result being in the range zero to  radians mathatan returns the arc tangent of the argument the result being in the range  to  radians mathatan returns the angle in radians subtended at the origin by the point on a plane with coordinates x y and the positive xaxis the result being in the range  to   mathpi summary returns an approximation to the mathematical constant  signature mathpi as xsdouble properties this function is deterministic contextindependent and focusindependent rules this function returns the xsdouble value whose lexical representation is e examples the expression mathpi returns e the expression   mathpi div  converts an angle of  degrees to radians  mathexp summary returns the value of ex signature mathexparg as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the result is the mathematical constant e raised to the power of arg as defined in the ieee  specification of the exp function applied to bit binary floating point values notes the treatment of overflow and underflow is defined in  arithmetic operators on numeric values examples the expression mathexp returns  the expression mathexp returns e the expression mathexp returns e the expression mathexp returns e the expression mathexp returns e the expression mathexpmathpi returns e the expression mathexpxsdoublenan returns xsdoublenan the expression mathexpxsdoubleinf returns xsdoubleinf the expression mathexpxsdoubleinf returns e  mathexp summary returns the value of x signature mathexparg as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the result is ten raised to the power of arg as defined in the ieee  specification of the exp function applied to bit binary floating point values notes the treatment of overflow and underflow is defined in  arithmetic operators on numeric values examples the expression mathexp returns  the expression mathexp returns e the expression mathexp returns e the expression mathexp returns e the expression mathexp returns e the expression mathexpxsdoublenan returns xsdoublenan the expression mathexpxsdoubleinf returns xsdoubleinf the expression mathexpxsdoubleinf returns e  mathlog summary returns the natural logarithm of the argument signature mathlogarg as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the result is the natural logarithm of arg as defined in the ieee  specification of the log function applied to bit binary floating point values notes the treatment of dividebyzero and invalidoperation exceptions is defined in  arithmetic operators on numeric values the effect is that if the argument is less than or equal to zero the result is nan examples the expression mathlog returns  the expression mathlog returns xsdoubleinf the expression mathlogmathexp returns e the expression mathloge returns e the expression mathlog returns e the expression mathlog returns xsdoublenan the expression mathlogxsdoublenan returns xsdoublenan the expression mathlogxsdoubleinf returns xsdoubleinf the expression mathlogxsdoubleinf returns xsdoublenan  mathlog summary returns the baseten logarithm of the argument signature mathlogarg as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the result is the base logarithm of arg as defined in the ieee  specification of the log function applied to bit binary floating point values notes the treatment of dividebyzero and invalidoperation exceptions is defined in  arithmetic operators on numeric values the effect is that if the argument is less than or equal to zero the result is nan examples the expression mathlog returns  the expression mathlog returns xsdoubleinf the expression mathloge returns e the expression mathloge returns e the expression mathlog returns e the expression mathlog returns xsdoublenan the expression mathlogxsdoublenan returns xsdoublenan the expression mathlogxsdoubleinf returns xsdoubleinf the expression mathlogxsdoubleinf returns xsdoublenan  mathpow summary returns the result of raising the first argument to the power of the second signature mathpowx as xsdouble y as numeric as xsdouble properties this function is deterministic contextindependent and focusindependent rules if x is the empty sequence the function returns the empty sequence if y is an instance of xsinteger the result is x raised to the power of y as defined in the ieee  specification of the pown function applied to a bit binary floating point value and an integer otherwise y is converted to an xsdouble by numeric promotion and the result is the value of x raised to the power of y as defined in the ieee  specification of the pow function applied to two bit binary floating point values notes the treatment of the dividebyzero and invalidoperation exceptions is defined in  arithmetic operators on numeric values some of the consequences are illustrated in the examples below examples the expression mathpow  returns  the expression mathpow  returns e the expression mathpow  returns e the expression mathpow  returns e the expression mathpow  returns e the expression mathpow  returns e the expression mathpow  returns e the expression mathpowxsdoubleinf  returns e the expression mathpowxsdoublenan  returns e the expression mathpowmathpi  returns e the expression mathpowe  returns e the expression mathpowe  returns e the expression mathpowe  returns e the expression mathpow  returns e the expression mathpowe  returns xsdoubleinf the expression mathpowe  returns xsdoubleinf the expression mathpowe  returns xsdoubleinf the expression mathpow  returns xsdoubleinf the expression mathpow e returns e the expression mathpow e returns e the expression mathpowe e returns xsdoubleinf the expression mathpowe e returns xsdoubleinf oddvalued whole numbers are treated specially the expression mathpowe e returns xsdoubleinf the expression mathpowe e returns xsdoubleinf the expression mathpowe e returns e the expression mathpowe e returns e oddvalued whole numbers are treated specially the expression mathpowe e returns e the expression mathpowe e returns e the expression mathpow xsdoubleinf returns e the expression mathpow xsdoubleinf returns e the expression mathpow xsdoubleinf returns e the expression mathpow xsdoubleinf returns e the expression mathpow xsdoublenan returns e the expression mathpowe e returns e the expression mathpowe e returns xsdoublenan  mathsqrt summary returns the nonnegative square root of the argument signature mathsqrtarg as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the result is the mathematical nonnegative square root of arg as defined in the ieee  specification of the squareroot function applied to bit binary floating point values notes the treatment of the invalidoperation exception is defined in  arithmetic operators on numeric values the effect is that if the argument is less than zero the result is nan if arg is positive or negative zero positive infinity or nan then the result is arg negative zero is the only case where the result can have negative sign examples the expression mathsqrt returns  the expression mathsqrte returns e the expression mathsqrte returns e the expression mathsqrte returns e the expression mathsqrte returns e the expression mathsqrte returns xsdoublenan the expression mathsqrtxsdoublenan returns xsdoublenan the expression mathsqrtxsdoubleinf returns xsdoubleinf the expression mathsqrtxsdoubleinf returns xsdoublenan  mathsin summary returns the sine of the argument expressed in radians signature mathsin as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if  is the empty sequence the function returns the empty sequence otherwise the result is the sine of  treated as an angle in radians as defined in the ieee  specification of the sin function applied to bit binary floating point values notes the treatment of the invalidoperation and underflow exceptions is defined in  arithmetic operators on numeric values if  is positive or negative zero the result is  if  is positive or negative infinity or nan then the result is nan otherwise the result is always in the range e to e examples the expression mathsin returns  the expression mathsin returns e the expression mathsine returns e the expression mathsinmathpi div  returns e the expression mathsinmathpi div  returns e the expression mathsinmathpi returns e approximately the expression mathsinxsdoublenan returns xsdoublenan the expression mathsinxsdoubleinf returns xsdoublenan the expression mathsinxsdoubleinf returns xsdoublenan  mathcos summary returns the cosine of the argument expressed in radians signature mathcos as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if  is the empty sequence the function returns the empty sequence if  is positive or negative infinity or nan then the result is nan otherwise the result is the cosine of  treated as an angle in radians as defined in the ieee  specification of the cos function applied to bit binary floating point values notes the treatment of the invalidoperation exception is defined in  arithmetic operators on numeric values if  is positive or negative zero the result is  if  is positive or negative infinity or nan then the result is nan otherwise the result is always in the range e to e examples the expression mathcos returns  the expression mathcos returns e the expression mathcose returns e the expression mathcosmathpi div  returns e approximately the expression mathcosmathpi div  returns e approximately the expression mathcosmathpi returns e the expression mathcosxsdoublenan returns xsdoublenan the expression mathcosxsdoubleinf returns xsdoublenan the expression mathcosxsdoubleinf returns xsdoublenan  mathtan summary returns the tangent of the argument expressed in radians signature mathtan as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if  is the empty sequence the function returns the empty sequence otherwise the result is the tangent of  treated as an angle in radians as defined in the ieee  specification of the tan function applied to bit binary floating point values notes the treatment of the invalidoperation and underflow exceptions is defined in  arithmetic operators on numeric values if  is positive or negative infinity or nan then the result is nan examples the expression mathtan returns  the expression mathtan returns e the expression mathtane returns e the expression mathtanmathpi div  returns e approximately the expression mathtanmathpi div  returns e approximately the expression mathtanmathpi div  returns e approximately the expression mathtanmathpi div  returns e approximately the expression mathtanmathpi returns e approximately the expression mathtanxsdoublenan returns xsdoublenan the expression mathtanxsdoubleinf returns xsdoublenan the expression mathtanxsdoubleinf returns xsdoublenan  mathasin summary returns the arc sine of the argument the result being in the range  to  radians signature mathasinarg as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the result is the arc sine of  treated as an angle in radians as defined in the ieee  specification of the asin function applied to bit binary floating point values notes the treatment of the invalidoperation and underflow exceptions is defined in  arithmetic operators on numeric values if arg is positive or negative zero the result is arg if arg is nan or if its absolute value is greater than one then the result is nan in other cases the result is an xsdouble value representing an angle  in radians in the range      examples the expression mathasin returns  the expression mathasin returns e the expression mathasine returns e the expression mathasine returns e approximately the expression mathasine returns e approximately the expression mathasine returns xsdoublenan the expression mathasinxsdoublenan returns xsdoublenan the expression mathasinxsdoubleinf returns xsdoublenan the expression mathasinxsdoubleinf returns xsdoublenan  mathacos summary returns the arc cosine of the argument the result being in the range zero to  radians signature mathacosarg as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the result is the arc cosine of  treated as an angle in radians as defined in the ieee  specification of the acos function applied to bit binary floating point values notes the treatment of the invalidoperation exception is defined in  arithmetic operators on numeric values if arg is nan or if its absolute value is greater than one then the result is nan in other cases the result is an xsdouble value representing an angle  in radians in the range      examples the expression mathacos returns  the expression mathacos returns e approximately the expression mathacose returns e approximately the expression mathacose returns e the expression mathacose returns e approximately the expression mathacose returns xsdoublenan the expression mathacosxsdoublenan returns xsdoublenan the expression mathacosxsdoubleinf returns xsdoublenan the expression mathacosxsdoubleinf returns xsdoublenan  mathatan summary returns the arc tangent of the argument the result being in the range  to  radians signature mathatanarg as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the result is the arc tangent of  treated as an angle in radians as defined in the ieee  specification of the atan function applied to bit binary floating point values notes the treatment of the underflow exception is defined in  arithmetic operators on numeric values if arg is positive or negative zero the result is arg if arg is nan then the result is nan in other cases the result is an xsdouble value representing an angle  in radians in the range      examples the expression mathatan returns  the expression mathatan returns e the expression mathatane returns e the expression mathatane returns e approximately the expression mathatane returns e approximately the expression mathatanxsdoublenan returns xsdoublenan the expression mathatanxsdoubleinf returns e approximately the expression mathatanxsdoubleinf returns e approximately  mathatan summary returns the angle in radians subtended at the origin by the point on a plane with coordinates x y and the positive xaxis the result being in the range  to  signature mathatany as xsdouble x as xsdouble as xsdouble properties this function is deterministic contextindependent and focusindependent rules the result is the value of atany x as defined in the ieee  specification of the atan function applied to bit binary floating point values notes the treatment of the underflow exception is defined in  arithmetic operators on numeric values if either argument is nan then the result is nan if y is positive and x is positive and finite then subject to rules for overflow underflow and approximation the value of atany x is atany div x if y is positive and x is negative and finite then subject to the same caveats the value of atany x is   atany div x some results for special values of the arguments are shown in the examples below examples the expression mathatane e returns e the expression mathatane e returns e the expression mathatane e returns mathpi the expression mathatane e returns mathpi the expression mathatan e returns mathpi div  the expression mathatan e returns mathpi div  the expression mathatane  returns mathpi the expression mathatane  returns mathpi the expression mathatane  returns e the expression mathatane  returns e  functions on strings this section specifies functions and operators on the xml schema part  datatypes second edition xsstring datatype and the datatypes derived from it  string types the operators described in this section are defined on the following types each type whose name is indented is derived from the type whose name appears nearest above with one less level of indentation xsstring xsnormalizedstring xstoken xslanguage xsnmtoken xsname xsncname xsid xsidref xsentity they also apply to userdefined types derived by restriction from the above types  functions to assemble and disassemble strings function meaning fncodepointstostring creates an xsstring from a sequence of codepoints fnstringtocodepoints returns the sequence of codepoints that constitute an xsstring value  fncodepointstostring summary creates an xsstring from a sequence of codepoints signature fncodepointstostringarg as xsinteger as xsstring properties this function is deterministic contextindependent and focusindependent rules the function returns the string made up from the characters whose unicode codepoints are supplied in arg this will be the zerolength string if arg is the empty sequence error conditions a dynamic error is raised errfoch if any of the codepoints in arg is not a permitted xml character examples the expression fncodepointstostring    returns bach the expression fncodepointstostring    returns  the expression fncodepointstostring returns  the expression fncodepointstostring raises error foch  fnstringtocodepoints summary returns the sequence of codepoints that constitute an xsstring value signature fnstringtocodepointsarg as xsstring as xsinteger properties this function is deterministic contextindependent and focusindependent rules the function returns a sequence of integers each integer being the unicode codepoints of the corresponding character in arg if arg is a zerolength string or the empty sequence the function returns the empty sequence examples the expression fnstringtocodepointsthrse returns         comparison of strings function meaning fncompare returns   or  depending on whether comparand collates before equal to or after comparand according to the rules of a selected collation fncodepointequal returns true if two strings are equal considered codepointbycodepoint  collations a collation is a specification of the manner in which stringss are compared and by extension ordered when values whose type is xsstring or a type derived from xsstring are compared or equivalently sorted the comparisons are inherently performed according to some collation even if that collation is defined entirely on codepoint values the character model for the world wide web  fundamentals observes that some applications may require different comparison and ordering behaviors than other applications similarly some users having particular linguistic expectations may require different behaviors than other users consequently the collation must be taken into account when comparing strings in any context several functions in this and the following section make use of a collation collations can indicate that two different codepoints are in fact equal for comparison purposes eg v and w are considered equivalent in some swedish collations strings can be compared codepointbycodepoint or in a linguistically appropriate manner as defined by the collation some collations especially those based on the unicode collation algorithm can be tailored for various purposes this document does not discuss such tailoring nor does it provide a mechanism to perform tailoring instead it assumes that the collation argument to the various functions below is a tailored and named collation the unicode codepoint collation is a collation available in every implementation which sorts based on codepoint values for further details see  the unicode codepoint collation in the ideal case a collation should treat two strings as equal if the two strings are identical after unicode normalization thus the character model for the world wide web  normalization recommends that all strings be subjected to early unicode normalization and some collations will raise runtime errors if they encounter strings that are not properly normalized however it is not possible to guarantee that all strings in all xml documents are in fact normalized or that they are normalized in the same manner in order to maximize interoperability of operations on xml documents in general there may be collations that operate on unnormalized strings and other collations that implicitly normalize strings before comparing them applications may choose the kind of collation best suited for their needs note that collations based on the unicode collation algorithm implicitly normalize strings before comparison and produce equivalent results regardless of a strings normalization this specification assumes that collations are named and that the collation name may be provided as an argument to string functions functions that allow specification of a collation do so with an argument whose type is xsstring but whose lexical form must conform to an xsanyuri if the collation is specified using a relative uri reference it is resolved relative to the value of the static base uri property from the static context this specification also defines the manner in which a default collation is determined if the collation argument is not specified in calls of functions that use a collation but allow it to be omitted this specification does not define whether or not the collation uri is dereferenced the collation uri may be an abstract identifier or it may refer to an actual resource describing the collation if it refers to a resource this specification does not define the nature of that resource one possible candidate is that the resource is a locale description expressed using the locale data markup language see locale data markup language functions such as fncompare and fnmax that compare xsstring values use a single collation uri to identify all aspects of the collation rules this means that any parameters such as the strength of the collation must be specified as part of the collation uri for example suppose there is a collation  httpwwwexamplecomcollationsfrench  that refers to a french collation that compares on the basis of base characters collations that use the same basic rules but with higher strengths for example base characters and accents or base characters accents and case would need to be given different names say  httpwwwexamplecomcollationsfrench  and  httpwwwexamplecomcollationsfrench  note that some specifications use the term collation to refer to an algorithm that can be parameterized but in this specification each possible parameterization is considered to be a distinct collation the xqueryxpath static context includes a provision for a default collation that can be used for string comparisons and ordering operations see the description of the static context in section  static context xp if the default collation is not specified by the user or the system the default collation is the unicode codepoint collation note xml allows elements to specify the xmllang attribute to indicate the language associated with the content of such an element this specification does not use xmllang to identify the default collation because using xmllang does not produce desired effects when the two strings to be compared have different xmllang values or when a string is multilingual  the unicode codepoint collation definition the collation uri httpwwwworgxpathfunctionscollationcodepoint identifies a collation which must be recognized by every implementation it is referred to as the unicode codepoint collation not to be confused with the unicode collation algorithm the unicode codepoint collation does not perform any normalization on the supplied strings the collation is defined as follows each of the two strings is converted to a sequence of integers using the fnstringtocodepoints function these two sequences a and b are then compared as follows if both sequences are empty the strings are equal if one sequence is empty and the other is not then the string corresponding to the empty sequence is less than the other string if the first integer in a is less than the first integer in b then the string corresponding to a is less than the string corresponding to b if the first integer in a is greater than the first integer in b then the string corresponding to a is greater than the string corresponding to b otherwise the first pair of integers are equal the result is obtained by applying the same rules recursively to fnsubsequencea  and fnsubsequenceb  note while the unicode codepoint collation does not produce results suitable for quality publishing of printed indexes or directories it is adequate for many purposes where a restricted alphabet is used such as sorting of vehicle registrations  choosing a collation many functions have two signatures where one signature includes a collation argument and the other omits this argument the collation to use for these functions is determined by the following rules if the function specifies an explicit collation collationa eg if the optional collation argument is specified in a call of the fncompare function then if collationa is supported by the implementation then collationa is used otherwise a dynamic error is raised errfoch if no collation is explicitly specified for the function and the default collation in the xqueryxpath static context is collationb then if collationb is supported by the implementation then collationb is used otherwise a dynamic error is raised errfoch note because the set of collations that are supported is implementationdefined an implementation has the option to support all collation uris in which case it will never raise this error  fncompare summary returns   or  depending on whether comparand collates before equal to or after comparand according to the rules of a selected collation signatures fncomparecomparand as xsstring comparand as xsstring as xsinteger fncompare comparand as xsstring comparand as xsstring collation as xsstring as xsinteger properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations the threeargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri rules returns   or  depending on whether the value of the comparand is respectively less than equal to or greater than the value of comparand according to the rules of the collation that is used the collation used by this function is determined according to the rules in  choosing a collation if either comparand or comparand is the empty sequence the function returns the empty sequence this function called with the first signature defines the semantics of the eq ne gt lt le and ge operators on xsstring values examples the expression fncompareabc abc returns  the expression fncomparestrasse strae returns  assuming the default collation includes provisions that equate ss and the german character  sharps otherwise the returned value depends on the semantics of the default collation the expression fncomparestrasse strae httpexamplecomdeutsch returns  assuming the collation identified by the uri httpexamplecomdeutsch includes provisions that equate ss and the german character  sharps otherwise the returned value depends on the semantics of that collation the expression fncomparestrassen strae returns  assuming the default collation includes provisions that treat differences between ss and the german character  sharps with less strength than the differences between the base characters such as the final n   fncodepointequal summary returns true if two strings are equal considered codepointbycodepoint signature fncodepointequal comparand as xsstring comparand as xsstring as xsboolean properties this function is deterministic contextindependent and focusindependent rules if either argument is the empty sequence the function returns the empty sequence otherwise the function returns true or false depending on whether the value of comparand is equal to the value of comparand according to the unicode codepoint collation httpwwwworgxpathfunctionscollationcodepoint notes this function allows xsanyuri values to be compared without having to specify the unicode codepoint collation examples the expression fncodepointequalabcd abcd returns true the expression fncodepointequalabcd abcd  returns false the expression fncodepointequal  returns true the expression fncodepointequal  returns  the expression fncodepointequal  returns   functions on string values the following functions are defined on values of type xsstring and types derived from it function meaning fnconcat returns the concatenation of the string values of the arguments fnstringjoin returns a string created by concatenating the items in a sequence with a defined separator between adjacent items fnsubstring returns the portion of the value of sourcestring beginning at the position indicated by the value of start and continuing for the number of characters indicated by the value of length fnstringlength returns the number of characters in a string fnnormalizespace returns the value of arg with leading and trailing whitespace removed and sequences of internal whitespace reduced to a single space character fnnormalizeunicode returns the value of arg after applying unicode normalization fnuppercase converts a string to upper case fnlowercase converts a string to lower case fntranslate returns the value of arg modified by replacing or removing individual characters notes when the above operators and functions are applied to datatypes derived from xsstring they are guaranteed to return values that are instances of xsstring but the value might or might not be an instance of the particular subtype of xsstring to which they were applied the strings returned by fnconcat and fnstringjoin are not guaranteed to be normalized but see note in fnconcat  fnconcat summary returns the concatenation of the string values of the arguments operator mapping the twoargument form of this function defines the semantics of the  operator signature fnconcat arg as xsanyatomictype arg as xsanyatomictype   as xsstring properties this function is deterministic contextindependent and focusindependent rules this function accepts two or more xsanyatomictype arguments and casts each one to xsstring the function returns the xsstring that is the concatenation of the values of its arguments after conversion if any argument is the empty sequence that argument is treated as the zerolength string the fnconcat function is specified to allow two or more arguments which are concatenated together this is the only function specified in this document that allows a variable number of arguments this capability is retained for compatibility with xml path language xpath version  notes as mentioned in  string types unicode normalization is not automatically applied to the result of fnconcat if a normalized result is required fnnormalizeunicode can be applied to the xsstring returned by fnconcat the following xquery let v  i plan to go to mulet v  nchen in septemberreturn concatv v where the  represents either the actual unicode character combining diaresis unicode codepoint u or x will return i plan to go to munchen in september where the  represents either the actual unicode character combining diaresis unicode codepoint u or x it is worth noting that the returned value is not normalized in nfc however it is normalized in nfd  however the following xquery let v  i plan to go to mulet v  nchen in septemberreturn normalizeunicodeconcatv v where the  represents either the actual unicode character combining diaresis unicode codepoint u or x will return i plan to go to mnchen in september this returned result is normalized in nfc examples the expression fnconcatun grateful returns ungrateful the expression fnconcatthy   old  groans   ring  yet  in  my  ancient ears returns thy old groans ring yet in my ancient ears the expression fnconcatciao returns ciao the expression fnconcatingratitude  thou  marblehearted  fiend returns ingratitude thou marblehearted fiend the expression fnconcat    true returns true the expression      returns   fnstringjoin summary returns a string created by concatenating the items in a sequence with a defined separator between adjacent items signatures fnstringjoinarg as xsstring as xsstring fnstringjoinarg as xsstring arg as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules the effect of calling the singleargument version of this function is the same as calling the twoargument version with arg set to a zerolength string the function returns an xsstring created by concatenating the items in the sequence arg in order using the value of arg as a separator between adjacent items if the value of arg is the zerolength string then the members of arg are concatenated without a separator notes if the value of arg is the empty sequence the function returns the zerolength string examples the expression fnstringjoinnow is the time    returns now is the time  the expression fnstringjoinblow  blow  thou  winter  wind  returns blow blow thou winter wind the expression fnstringjoin separator returns  assume a document doc  chap    section  chapdoc with the section element as the context node the xml path language xpath  expression fnstringjoinancestororselfname  returns docchapsection  fnsubstring summary returns the portion of the value of sourcestring beginning at the position indicated by the value of start and continuing for the number of characters indicated by the value of length signatures fnsubstringsourcestring as xsstring start as xsdouble as xsstring fnsubstring sourcestring as xsstring start as xsdouble length as xsdouble as xsstring properties this function is deterministic contextindependent and focusindependent rules if the value of sourcestring is the empty sequence the function returns the zerolength string otherwise the function returns a string comprising those characters of sourcestring whose index position counting from one is greater than or equal to the value of start rounded to an integer and if length is specified less than the sum of start and length both rounded to integers the characters returned do not extend beyond sourcestring if start is zero or negative only those characters in positions greater than zero are returned more specifically the three argument version of the function returns the characters in sourcestring whose position p satisfies fnroundstart  p  fnroundstart  fnroundlength the two argument version of the function assumes that length is infinite and thus returns the characters in sourcestring whose position p satisfies fnroundstart  p in the above computations the rules for opnumericlessthan and opnumericgreaterthan apply notes the first character of a string is located at position  not position  examples the expression fnsubstringmotor car  returns  car characters starting at position  to the end of sourcestring are selected the expression fnsubstringmetadata   returns ada characters at positions greater than or equal to  and less than  are selected the expression fnsubstring   returns  characters at positions greater than or equal to  and less than  are selected the expression fnsubstring   returns  characters at positions greater than or equal to  and less than  are selected since the first position is  these are the characters at positions  and  the expression fnsubstring   returns  characters at positions greater than or equal to  and less than  are selected the expression fnsubstring   returns  characters at positions greater than or equal to  and less than  are selected since the first position is  this is the character at position  the expression fnsubstring  div e  returns  since  div e returns nan and nan compared to any other number returns false no characters are selected the expression fnsubstring   div e returns  as above the expression fnsubstring   returns  the expression fnsubstring   div e returns  characters at positions greater than or equal to  and less than inf are selected the expression fnsubstring  div e  div e returns  since the value of inf  inf is nan no characters are selected  fnstringlength summary returns the number of characters in a string signatures fnstringlength as xsinteger fnstringlengtharg as xsstring as xsinteger properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules the function returns an xsinteger equal to the length in characters of the value of arg calling the zeroargument version of the function is equivalent to calling fnstringlengthfnstring if the value of arg is the empty sequence the function returns the xsinteger value zero  error conditions if arg is not specified and the context item is absentdm a dynamic error is raised errxpdyxp notes unlike some programming languages a codepoint greater than  counts as one character not two examples the expression fnstringlengthharp not on that string madam that is past returns  the expression fnstringlength returns   fnnormalizespace summary returns the value of arg with leading and trailing whitespace removed and sequences of internal whitespace reduced to a single space character signatures fnnormalizespace as xsstring fnnormalizespacearg as xsstring as xsstring properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the value of arg is the empty sequence the function returns the zerolength string the function returns a string constructed by stripping leading and trailing whitespace from the value of arg and replacing sequences of one or more adjacent whitespace characters with a single space x the whitespace characters are defined in the metasymbol s production  of extensible markup language xml  fifth edition if no argument is supplied then arg defaults to the string value calculated using fnstring of the context item  error conditions if no argument is supplied and the context item is absentdm then a dynamic error is raised errxpdyxp notes the definition of whitespace is unchanged in extensible markup language xml  recommendation examples the expression fnnormalizespace the wealthy curled darlings of our nation  returns the wealthy curled darlings of our nation the expression fnnormalizespace returns   fnnormalizeunicode summary returns the value of arg after applying unicode normalization signatures fnnormalizeunicodearg as xsstring as xsstring fnnormalizeunicode arg as xsstring normalizationform as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules if the value of arg is the empty sequence the function returns the zerolength string if the singleargument version of the function is used the result is the same as calling the twoargument version with normalizationform set to the string nfc otherwise the function returns the value of arg normalized according to the rules of the normalization form identified by the value of normalizationform the effective value of normalizationform is the value of the expression fnuppercasefnnormalizespacenormalizationform if the effective value of normalizationform is nfc then the function returns the value of arg converted to unicode normalization form c nfc if the effective value of normalizationform is nfd then the function returns the value of arg converted to unicode normalization form d nfd if the effective value of normalizationform is nfkc then the function returns the value of arg in unicode normalization form kc nfkc if the effective value of normalizationform is nfkd then the function returns the value of arg converted to unicode normalization form kd nfkd if the effective value of normalizationform is fullynormalized then the function returns the value of arg converted to fully normalized form if the effective value of normalizationform is the zerolength string no normalization is performed and arg is returned normalization forms nfc nfd nfkc and nfkd and the algorithms to be used for converting a string to each of these forms are defined in unicode normalization forms the motivation for normalization form fullynormalized is explained in character model for the world wide web  normalization however as that specification did not progress beyond working draft status the normative specification is as follows a string is fullynormalized if a it is in normalization form nfc as defined in unicode normalization forms and b it does not start with a composing character a composing character is a character that is one or both of the following the second character in the canonical decomposition mapping of some character that is not listed in the composition exclusion table defined in unicode normalization forms of nonzero canonical combining class as defined in the unicode standard a string is converted to fullynormalized form as follows if the first character in the string is a composing character prepend a single space x convert the resulting string to normalization form nfc conforming implementations must support normalization form nfc and may support normalization forms nfd nfkc nfkd and fullynormalized they may also support other normalization forms with implementationdefined semantics it is implementationdefined which version of unicode and therefore of the normalization algorithms and their underlying data is supported by the implementation see unicode normalization forms for details of the stability policy regarding changes to the normalization rules in future versions of unicode if the input string contains codepoints that are unassigned in the relevant version of unicode or for which no normalization rules are defined the fnnormalizeunicode function leaves such codepoints unchanged if the implementation supports the requested normalization form then it must be able to handle every input string without raising an error error conditions a dynamic error is raised errfoch if the effective value of the normalizationform argument is not one of the values supported by the implementation  fnuppercase summary converts a string to upper case signature fnuppercasearg as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules if the value of arg is the empty sequence the zerolength string is returned otherwise the function returns the value of arg after translating every character to its uppercase correspondent as defined in the appropriate case mappings section in the unicode standard the unicode standard for versions of unicode beginning with the  update only localeinsensitive case mappings should be applied beginning with version  and likely future versions of unicode precise mappings are described in default case operations which are full case mappings in the absence of tailoring for particular languages and environments every lowercase character that does not have an uppercase correspondent as well as every uppercase character is included in the returned value in its original form notes case mappings may change the length of a string in general the fnuppercase and fnlowercase functions are not inverses of each other fnlowercasefnuppercasearg is not guaranteed to return arg nor is fnuppercasefnlowercasearg the latin small letter dotless i as used in turkish is perhaps the most prominent lowercase letter which will not roundtrip the latin capital letter i with dot above is the most prominent uppercase letter which will not round trip there are others such as latin capital letter sharp s ee which is introduced in unicode  these functions may not always be linguistically appropriate eg turkish i without dot or appropriate for the application eg titlecase in cases such as turkish a simple translation should be used first because the function is not sensitive to locale results will not always match user expectations in quebec for example the standard uppercase equivalent of  is  while in metropolitan france it is more commonly e only one of these is supported by the functions as defined many characters of class ll lack uppercase equivalents in the unicode case mapping tables many characters of class lu lack lowercase equivalents examples the expression fnuppercaseabcd returns abcd  fnlowercase summary converts a string to lower case signature fnlowercasearg as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules if the value of arg is the empty sequence the zerolength string is returned otherwise the function returns the value of arg after translating every character to its lowercase correspondent as defined in the appropriate case mappings section in the unicode standard the unicode standard for versions of unicode beginning with the  update only localeinsensitive case mappings should be applied beginning with version  and likely future versions of unicode precise mappings are described in default case operations which are full case mappings in the absence of tailoring for particular languages and environments every uppercase character that does not have a lowercase correspondent as well as every lowercase character is included in the returned value in its original form notes case mappings may change the length of a string in general the fnuppercase and fnlowercase functions are not inverses of each other fnlowercasefnuppercasearg is not guaranteed to return arg nor is fnuppercasefnlowercasearg the latin small letter dotless i as used in turkish is perhaps the most prominent lowercase letter which will not roundtrip the latin capital letter i with dot above is the most prominent uppercase letter which will not round trip there are others such as latin capital letter sharp s ee which is introduced in unicode  these functions may not always be linguistically appropriate eg turkish i without dot or appropriate for the application eg titlecase in cases such as turkish a simple translation should be used first because the function is not sensitive to locale results will not always match user expectations in quebec for example the standard uppercase equivalent of  is  while in metropolitan france it is more commonly e only one of these is supported by the functions as defined many characters of class ll lack uppercase equivalents in the unicode case mapping tables many characters of class lu lack lowercase equivalents examples the expression fnlowercaseabcd returns abcd  fntranslate summary returns the value of arg modified by replacing or removing individual characters signature fntranslate arg as xsstring mapstring as xsstring transstring as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules if the value of arg is the empty sequence the function returns the zerolength string otherwise the function returns a result string constructed by processing each character in the value of arg in order according to the following rules if the character does not appear in the value of mapstring then it is added to the result string unchanged if the character first appears in the value of mapstring at some position m where the value of transstring is m or more characters in length then the character at position m in transstring is added to the result string if the character first appears in the value of mapstring at some position m where the value of transstring is less than m characters in length then the character is omitted from the result string notes if mapstring is the zerolength string then the function returns arg unchanged if a character occurs more than once in mapstring then the first occurrence determines the action taken if transstring is longer than mapstring the excess characters are ignored examples the expression fntranslatebarabcabc returns bar the expression fntranslateaaaabcabc returns aaa the expression fntranslateabcdabc abc ab returns abdab  functions based on substring matching the functions described in the section examine a string arg to see whether it contains another string arg as a substring the result depends on whether arg is a substring of arg and if so on the range of characters in arg which arg matches when the unicode codepoint collation is used this simply involves determining whether arg contains a contiguous sequence of characters whose codepoints are the same one for one with the codepoints of the characters in arg when a collation is specified the rules are more complex all collations support the capability of deciding whether two strings are considered equal and if not which of the strings should be regarded as preceding the other for functions such as fncompare this is all that is required for other functions such as fncontains the collation needs to support an additional property it must be able to decompose the string into a sequence of collation units each unit consisting of one or more characters such that two strings can be compared by pairwise comparison of these units collation unit is equivalent to collation element as defined in unicode collation algorithm the string arg is then considered to contain arg as a substring if the sequence of collation units corresponding to arg is a subsequence of the sequence of the collation units corresponding to arg the characters in arg that match are the characters corresponding to these collation units this rule may occasionally lead to surprises for example consider a collation that treats jaeger and jger as equal it might do this by treating  as representing two collation units in which case the expression fncontainsjger eg will return true alternatively a collation might treat ae as a single collation unit in which case the expression fncontainsjaeger eg will return false the results of these functions thus depend strongly on the properties of the collation that is used in addition collations may specify that some collation units should be ignored during matching if hyphen is an ignored collation unit then fncontainscodepoint codepoint will be true and fncontainscodepoint  will also be true in the definitions below we refer to the terms match and minimal match as defined in definitions ds and ds of unicode collation algorithm in applying these definitions c is the collation that is the value of the collation argument if specified otherwise the default collation p is the candidate substring arg q is the candidate containing string arg the boundary condition b is satisfied at the start and end of a string and between any two characters that belong to different collation units collation elements in the language of unicode collation algorithm it is not satisfied between two characters that belong to the same collation unit it is possible to define collations that do not have the ability to decompose a string into units suitable for substring matching an argument to a function defined in this section may be a uri that identifies a collation that is able to compare two strings but that does not have the capability to split the string into collation units such a collation may cause the function to fail or to give unexpected results or it may be rejected as an unsuitable argument the ability to decompose strings into collation units is an implementationdefined property of the collation function meaning fncontains returns true if the string arg contains arg as a substring taking collations into account fnstartswith returns true if the string arg contains arg as a leading substring taking collations into account fnendswith returns true if the string arg contains arg as a trailing substring taking collations into account fnsubstringbefore returns the part of arg that precedes the first occurrence of arg taking collations into account fnsubstringafter returns the part of arg that follows the first occurrence of arg taking collations into account  fncontains summary returns true if the string arg contains arg as a substring taking collations into account signatures fncontainsarg as xsstring arg as xsstring as xsboolean fncontains arg as xsstring arg as xsstring collation as xsstring as xsboolean properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations the threeargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri rules if the value of arg or arg is the empty sequence or contains only ignorable collation units it is interpreted as the zerolength string if the value of arg is the zerolength string then the function returns true if the value of arg is the zerolength string the function returns false the collation used by this function is determined according to the rules in  choosing a collation the function returns an xsboolean indicating whether or not the value of arg contains at the beginning at the end or anywhere within at least one sequence of collation units that provides a minimal match to the collation units in the value of arg according to the collation that is used note minimal match is defined in unicode collation algorithm error conditions a dynamic error may be raised errfoch if the specified collation does not support collation units examples the collation used in these examples httpexamplecomcollationa is a collation in which both  and  are ignorable collation units ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fncontains  tattoo t returns true the expression fncontains  tattoo ttt returns false the expression fncontains    returns true the first rule is applied followed by the second rule the expression fncontains  abcdefghi def httpexamplecomcollationa returns true the expression fncontains  abcdefghi def httpexamplecomcollationa returns true the expression fncontains  abcdefghi def httpexamplecomcollationa returns true the expression fncontains    httpexamplecomcollationa returns true the second argument contains only ignorable collation units and is equivalent to the zerolength string  fnstartswith summary returns true if the string arg contains arg as a leading substring taking collations into account signatures fnstartswitharg as xsstring arg as xsstring as xsboolean fnstartswith arg as xsstring arg as xsstring collation as xsstring as xsboolean properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations the threeargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri rules if the value of arg or arg is the empty sequence or contains only ignorable collation units it is interpreted as the zerolength string if the value of arg is the zerolength string then the function returns true if the value of arg is the zerolength string and the value of arg is not the zerolength string then the function returns false the collation used by this function is determined according to the rules in  choosing a collation the function returns an xsboolean indicating whether or not the value of arg starts with a sequence of collation units that provides a match to the collation units of arg according to the collation that is used note match is defined in unicode collation algorithm error conditions a dynamic error may be raised errfoch if the specified collation does not support collation units examples the collation used in these examples httpexamplecomcollationa is a collation in which both  and  are ignorable collation units ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fnstartswithtattoo tat returns true the expression fnstartswith  tattoo att returns false the expression fnstartswith   returns true the expression fnstartswith  abcdefghi abc httpexamplecomcollationa returns true the expression fnstartswith  abcdefghi abc httpexamplecomcollationa returns true the expression fnstartswith  abcdefghi abcdef httpexamplecomcollationa returns true the expression fnstartswith    httpexamplecomcollationa returns true the second argument contains only ignorable collation units and is equivalent to the zerolength string the expression fnstartswith  abcdefghi abc httpexamplecomcollationa returns true  fnendswith summary returns true if the string arg contains arg as a trailing substring taking collations into account signatures fnendswitharg as xsstring arg as xsstring as xsboolean fnendswith arg as xsstring arg as xsstring collation as xsstring as xsboolean properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations the threeargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri rules if the value of arg or arg is the empty sequence or contains only ignorable collation units it is interpreted as the zerolength string if the value of arg is the zerolength string then the function returns true if the value of arg is the zerolength string and the value of arg is not the zerolength string then the function returns false the collation used by this function is determined according to the rules in  choosing a collation the function returns an xsboolean indicating whether or not the value of arg starts with a sequence of collation units that provides a match to the collation units of arg according to the collation that is used note match is defined in unicode collation algorithm error conditions a dynamic error may be raised errfoch if the specified collation does not support collation units examples the collation used in these examples httpexamplecomcollationa is a collation in which both  and  are ignorable collation units ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fnendswith  tattoo tattoo returns true the expression fnendswith  tattoo atto returns false the expression fnendswith   returns true the expression fnendswith  abcdefghi ghi httpexamplecomcollationa returns true the expression fnendswith  abcdefghi defghi httpexamplecomcollationa returns true the expression fnendswith  abcdefghi defghi httpexamplecomcollationa returns true the expression fnendswith    httpexamplecomcollationa returns true the second argument contains only ignorable collation units and is equivalent to the zerolength string the expression fnendswith  abcdefghi ghi httpexamplecomcollationa returns true  fnsubstringbefore summary returns the part of arg that precedes the first occurrence of arg taking collations into account signatures fnsubstringbeforearg as xsstring arg as xsstring as xsstring fnsubstringbefore arg as xsstring arg as xsstring collation as xsstring as xsstring properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations the threeargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri rules if the value of arg or arg is the empty sequence or contains only ignorable collation units it is interpreted as the zerolength string if the value of arg is the zerolength string then the function returns the zerolength string if the value of arg does not contain a string that is equal to the value of arg then the function returns the zerolength string the collation used by this function is determined according to the rules in  choosing a collation the function returns the substring of the value of arg that precedes in the value of arg the first occurrence of a sequence of collation units that provides a minimal match to the collation units of arg according to the collation that is used note minimal match is defined in unicode collation algorithm error conditions a dynamic error may be raised errfoch if the specified collation does not support collation units examples the collation used in these examples httpexamplecomcollationa is a collation in which both  and  are ignorable collation units ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fnsubstringbefore  tattoo attoo returns t the expression fnsubstringbefore  tattoo tatto returns  the expression fnsubstringbefore   returns  the expression fnsubstringbefore  abcdefghi de httpexamplecomcollationa returns abc the expression fnsubstringbefore  abcdefghi de httpexamplecomcollationa returns abc the expression fnsubstringbefore  abcdefghi cde httpexamplecomcollationa returns ab the expression fnsubstringbefore  eureka  httpexamplecomcollationa returns  the second argument contains only ignorable collation units and is equivalent to the zerolength string  fnsubstringafter summary returns the part of arg that follows the first occurrence of arg taking collations into account signatures fnsubstringafterarg as xsstring arg as xsstring as xsstring fnsubstringafter arg as xsstring arg as xsstring collation as xsstring as xsstring properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations the threeargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri rules if the value of arg or arg is the empty sequence or contains only ignorable collation units it is interpreted as the zerolength string if the value of arg is the zerolength string then the function returns the value of arg if the value of arg does not contain a string that is equal to the value of arg then the function returns the zerolength string the collation used by this function is determined according to the rules in  choosing a collation the function returns the substring of the value of arg that follows in the value of arg the first occurrence of a sequence of collation units that provides a minimal match to the collation units of arg according to the collation that is used note minimal match is defined in unicode collation algorithm error conditions a dynamic error may be raised errfoch if the specified collation does not support collation units examples the collation used in these examples httpexamplecomcollationa is a collation in which both  and  are ignorable collation units ignorable collation unit is equivalent to ignorable collation element in unicode collation algorithm the expression fnsubstringaftertattoo tat returns too the expression fnsubstringaftertattoo tattoo returns  the expression fnsubstringafter  returns  the expression fnsubstringafterabcdefghi de httpexamplecomcollationa returns fghi the expression fnsubstringafterabcdefghi de httpexamplecomcollationa returns fghi the expression fnsubstringafter  abcdefghi cde httpexamplecomcollationa returns fghi the expression fnsubstringafter  eureka  httpexamplecomcollationa returns eureka the second argument contains only ignorable collation units and is equivalent to the zerolength string  string functions that use regular expressions the three functions described in this section make use of a regular expression syntax for pattern matching this is described below function meaning fnmatches returns true if the supplied string matches a given regular expression fnreplace returns a string produced from the input string by replacing any substrings that match a given regular expression with a supplied replacement string fntokenize returns a sequence of strings constructed by splitting the input wherever a separator is found the separator is any substring that matches a given regular expression fnanalyzestring analyzes a string using a regular expression returning an xml structure that identifies which parts of the input string matched or failed to match the regular expression and in the case of matched substrings which substrings matched each capturing group in the regular expression  regular expression syntax the regular expression syntax used by these functions is defined in terms of the regular expression syntax specified in xml schema see xml schema part  datatypes second edition which in turn is based on the established conventions of languages such as perl however because xml schema uses regular expressions only for validity checking it omits some facilities that are widelyused with languages such as perl this section therefore describes extensions to the xml schema regular expressions syntax that reinstate these capabilities note it is recommended that implementers consult unicode regular expressions for information on using regular expression processing on unicode characters the regular expression syntax and semantics are identical to those defined in xml schema part  datatypes second edition with the following additions two metacharacters  and  are added by default the metacharacter  matches the start of the entire string while  matches the end of the entire string in multiline mode  matches the start of any line that is the start of the entire string and the position immediately after a newline character while  matches the end of any line that is the end of the entire string and the position immediately before a newline character newline here means the character xa only this means that the production in xml schema part  datatypes second edition  char  xbxd is modified to read  char  xbxd the xsd  grammar for regular expressions uses the same production rule but renumbered and renamed  normalchar it is affected in the same way the characters xb and xd correspond to  and  respectively note the definition of char production  in xml schema part  datatypes second edition has a known error in which it omits the left brace  and right brace  that error is corrected here the following production  charclass  charclassesc  charclassexpr  wildcardesc is modified to read  charclass  charclassesc  charclassexpr  wildcardesc     using xsd  as the baseline the equivalent is to change the production  charclass  singlecharesc  charclassesc  charclassexpr  wildcardesc to read  charclass  singlecharesc  charclassesc  charclassexpr  wildcardesc     reluctant quantifiers are supported they are indicated by a    following a quantifier specifically x matches x once or not at all x matches x zero or more times x matches x one or more times xn matches x exactly n times xn matches x at least n times xnm matches x at least n times but not more than m times the effect of these quantifiers is that the regular expression matches the shortest possible substring consistent with the match as a whole succeeding without the    the regular expression matches the longest possible substring to achieve this the production in xml schema part  datatypes second edition  quantifier      quantity   is changed to  quantifier       quantity     in the xsd  version of the regular expression grammar this rule is unchanged but is renumbered  note reluctant quantifiers have no effect on the results of the boolean fnmatches function since this function is only interested in discovering whether a match exists and not where it exists subexpressions groups within the regular expression are recognized the regular expression syntax defined by xml schema part  datatypes second edition allows a regular expression to contain parenthesized subexpressions but attaches no special significance to them some operations associated with regular expressions for example backreferences and the fnreplace function allow access to the parts of the input string that matched a subexpression called captured substrings the subexpressions are numbered according to the position of the opening parenthesis in lefttoright order within the toplevel regular expression the first opening parenthesis identifies captured substring  the second identifies captured substring  and so on  identifies the substring captured by the entire regular expression when parentheses are used in a part of the regular expression that is matched more than once because it is within a construct that allows repetition then only the last substring that it matched will be captured note that this rule is not sufficient in all cases to ensure an unambiguous result especially in cases where a the regular expression contains nested repeating constructs andor b the repeating construct matches a zerolength string in such cases it is implementationdependent which substring is captured for example given the regular expression a and the input string aaaa an implementation might legitimately capture either aaaa or a zero length string as the content of the captured subgroup noncapturing groups are also recognized these are indicated by the syntax xxxx the production rule for atom in xml schema part  datatypes second edition is changed to replace the alternative   regexp   with    regexp   for the new versions of the xsd  and xsd  production rules for atom see below the presence of the optional  has no effect on the set of strings that match the regular expression but causes the left parenthesis not to be counted by operations that number the groups within a regular expression for example the fnreplace function backreferences are allowed outside a character class expression a backreference is an additional kind of atom the construct n where n is a single digit is always recognized as a backreference if this is followed by further digits these digits are taken to be part of the backreference if and only if the resulting number nn is such that the backreference is preceded by nn or more unescaped opening parentheses the regular expression is invalid if a backreference refers to a subexpression that does not exist or whose closing right parenthesis occurs after the backreference a backreference matches the string that was matched by the nth capturing subexpression within the regular expression that is the parenthesized subexpression whose opening left parenthesis is the nth unescaped left parenthesis within the regular expression for example the regular expression  matches a sequence of characters delimited either by an apostrophe at the start and end or by a quotation mark at the start and end if no string is matched by the nth capturing subexpression the backreference is interpreted as matching a zerolength string combining this change with the introduction of noncapturing groups see above backreferences change the following production  atom  char  charclass    regexp   to  atom  char  charclass     regexp    backreference a backreference    with respect to the xsd  version of the regular expression grammar the effect is to change  atom  normalchar  charclass    regexp   to  atom  normalchar  charclass     regexp    backreference a backreference    note within a character class expression  followed by a digit is invalid some other regular expression languages interpret this as an octal character reference single character escapes are extended to allow the  character to be escaped the following production is changed singlecharesc   nrtxdxbxdxe to singlecharesc   nrtxdxbxdxe in the xsd  version of the regular expression grammar the production rule for singlecharesc is unchanged but is renumbered  a regular expression that uses a unicode block name that is not defined in the versions of unicode supported by the processor for example pisbadblockname is deemed to be invalid errforx note xsd  does not say how this situation should be handled xsd  says that it should be handled by treating all characters as matching note in schema  part  the rules for the interpretation of hyphens within square brackets in a regular expression have been clarified and the semantics of regular expressions are no longer tied to a specific version of unicode  flags all these functions provide an optional parameter flags to set options for the interpretation of the regular expression the parameter accepts a xsstring in which individual letters are used to set options the presence of a letter within the string indicates that the option is on its absence indicates that the option is off letters may appear in any order and may be repeated if there are characters present that are not defined here as flags then a dynamic error is raised errforx the following options are defined s if present the match operates in dotall mode perl calls this the singleline mode if the s flag is not specified the metacharacter  matches any character except a newline xa or carriage return xd character in dotall mode the metacharacter  matches any character whatsoever suppose the input contains hello and world on two lines this will not be matched by the regular expression helloworld unless dotall mode is enabled m if present the match operates in multiline mode by default the metacharacter  matches the start of the entire string while  matches the end of the entire string in multiline mode  matches the start of any line that is the start of the entire string and the position immediately after a newline character other than a newline that appears as the last character in the string while  matches the end of any line that is the position immediately before a newline character and the end of the entire string if there is no newline character at the end of the string newline here means the character xa only i if present the match operates in caseinsensitive mode the detailed rules are as follows in these rules a character c is considered to be a casevariant of another character c if the following xpath expression returns true when the two characters are considered as strings of length one and the unicode codepoint collation is used fnlowercasec eq fnlowercasec or fnuppercasec eq fnuppercasec note that the casevariants of a character under this definition are always single characters when a normal character char is used as an atom it represents the set containing that character and all its casevariants for example the regular expression z will match both z and z a character range production charrange in the xsd  grammar replaced by productions charrange and singlechar in xsd  represents the set containing all the characters that it would match in the absence of the i flag together with their casevariants for example the regular expression az will match all the letters az and all the letters az it will also match certain other characters such as xa kelvin sign since fnlowercasexa is k this rule applies also to a character range used in a character class subtraction charclasssub thus azio will match characters such as a b a and b but will not match i o i or o the rule also applies to a character range used as part of a negative character group thus q will match every character except q and q these being the only casevariants of q in unicode a backreference is compared using caseblind comparison that is each character must either be the same as the corresponding character of the previously matched string or must be a casevariant of that character for example the strings mum mom dad and dud all match the regular expression mdaeiou when the i flag is used all other constructs are unaffected by the i flag for example plu continues to match uppercase letters only x if present whitespace characters x xa xd and x in the regular expression are removed prior to matching with one exception whitespace characters within character class expressions charclassexpr are not removed this flag can be used for example to break up long regular expressions into readable lines examples fnmatcheshelloworld hello world x returns true fnmatcheshelloworld hello world x returns false fnmatcheshello world hello sworld x returns true fnmatcheshello world hello world x returns false q if present all characters in the regular expression are treated as representing themselves not as metacharacters in effect every character that would normally have a special meaning in a regular expression is implicitly escaped by preceding it with a backslash furthermore when this flag is present the characters  and  have no special significance when used in the replacement string supplied to the fnreplace function this flag can be used in conjunction with the i flag if it is used together with the m s or x flag that flag has no effect examples fntokenize  q returns     fnreplaceabc   q returns abc fnreplaceabc   q returns abc fnmatchesabcd  q returns false fnmatchesmr b obama b obama iq returns true  fnmatches summary returns true if the supplied string matches a given regular expression signatures fnmatchesinput as xsstring pattern as xsstring as xsboolean fnmatches input as xsstring pattern as xsstring flags as xsstring as xsboolean properties this function is deterministic contextindependent and focusindependent rules the effect of calling the first version of this function omitting the argument flags is the same as the effect of calling the second version with the flags argument set to a zerolength string flags are defined in  flags if input is the empty sequence it is interpreted as the zerolength string the function returns true if input or some substring of input matches the regular expression supplied as pattern otherwise the function returns false the matching rules are influenced by the value of flags if present error conditions a dynamic error is raised errforx if the value of pattern is invalid according to the rules described in  regular expression syntax a dynamic error is raised errforx if the value of flags is invalid according to the rules described in  flags notes unless the metacharacters  and  are used as anchors the string is considered to match the pattern if any substring matches the pattern but if anchors are used the anchors must match the startend of the string in string mode or the startend of a line in multiline mode this is different from the behavior of patterns in xml schema part  datatypes second edition where regular expressions are implicitly anchored regular expression matching is defined on the basis of unicode code points it takes no account of collations examples the expression fnmatchesabracadabra bra returns true the expression fnmatchesabracadabra aa returns true the expression fnmatchesabracadabra bra returns false given the source document let poem  poem authorwilhelm busch kaum hat dies der hahn gesehen fngt er auch schon an zu krhen kikeriki kikikerikih tak tak tak  da kommen sie poem the following function calls produce the following results with the poem element as the context node the expression fnmatchespoem kaumkrhen returns false the expression fnmatchespoem kaumkrhen s returns true the expression fnmatchespoem kaumgesehen m returns true the expression fnmatchespoem kaumgesehen returns false the expression fnmatchespoem kiki i returns true  fnreplace summary returns a string produced from the input string by replacing any substrings that match a given regular expression with a supplied replacement string signatures fnreplace input as xsstring pattern as xsstring replacement as xsstring as xsstring fnreplace input as xsstring pattern as xsstring replacement as xsstring flags as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules the effect of calling the first version of this function omitting the argument flags is the same as the effect of calling the second version with the flags argument set to a zerolength string flags are defined in  flags the flags argument is interpreted in the same manner as for the fnmatches function if input is the empty sequence it is interpreted as the zerolength string the function returns the xsstring that is obtained by replacing each nonoverlapping substring of input that matches the given pattern with an occurrence of the replacement string if two overlapping substrings of input both match the pattern then only the first one that is the one whose first character comes first in the input string is replaced if the q flag is present the replacement string is used as is otherwise within the replacement string a variable n may be used to refer to the substring captured by the nth parenthesized subexpression in the regular expression for each match of the pattern these variables are assigned the value of the content matched by the relevant subexpression and the modified replacement string is then substituted for the characters in input that matched the pattern  refers to the substring captured by the regular expression as a whole more specifically the rules are as follows where s is the number of parenthesized subexpressions in the regular expression and n is the decimal number formed by taking all the digits that consecutively follow the  character if n then the variable is replaced by the substring matched by the regular expression as a whole if ns then the variable is replaced by the substring captured by the nth parenthesized subexpression if the nth parenthesized subexpression was not matched then the variable is replaced by the zerolength string if sn then the variable is replaced by the zerolength string otherwise if ns and n the last digit of n is taken to be a literal character to be included as is in the replacement string and the rules are reapplied using the number n formed by stripping off this last digit for example if the replacement string is    and there are  substrings the result contains the value of the substring that matches the second subexpression followed by the digit    unless the q flag is used a literal  character within the replacement string must be written as  and a literal  character must be written as  if two alternatives within the pattern both match at the same position in the input then the match that is chosen is the one matched by the first alternative for example  fnreplaceabcd aba  returns abcd error conditions a dynamic error is raised errforx if the value of pattern is invalid according to the rules described in section  regular expression syntax a dynamic error is raised errforx if the value of flags is invalid according to the rules described in section  regular expression syntax a dynamic error is raised errforx if the pattern matches a zerolength string that is if the expression fnmatches pattern flags returns true it is not an error however if a captured substring is zerolength a dynamic error is raised errforx if the value of replacement contains a  character that is not immediately followed by a digit  and not immediately preceded by a  a dynamic error is raised errforx if the value of replacement contains a  character that is not part of a  pair unless it is immediately followed by a  character notes if the input string contains no substring that matches the regular expression the result of the function is a single string identical to the input string examples the expression replaceabracadabra bra  returns acada the expression replaceabracadabra aa  returns  the expression replaceabracadabra aa  returns cbra the expression replaceabracadabra a  returns brcdbr the expression replaceabracadabra a a returns abbraccaddabbra the expression replaceabracadabra   raises an error because the pattern matches the zerolength string the expression replaceaaaa a b returns b the expression replaceaaaa a b returns bbbb the expression replacedarted d c returns carted the first d is replaced  fntokenize summary returns a sequence of strings constructed by splitting the input wherever a separator is found the separator is any substring that matches a given regular expression signatures fntokenizeinput as xsstring pattern as xsstring as xsstring fntokenize input as xsstring pattern as xsstring flags as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules the effect of calling the first version of this function omitting the argument flags is the same as the effect of calling the second version with the flags argument set to a zerolength string flags are defined in  flags the flags argument is interpreted in the same way as for the fnmatches function if input is the empty sequence or if input is the zerolength string the function returns the empty sequence the function returns a sequence of strings formed by breaking the input string into a sequence of strings treating any substring that matches pattern as a separator the separators themselves are not returned if a separator occurs at the start of the input string the result sequence will start with a zerolength string zerolength strings will also occur in the result sequence if a separator occurs at the end of the input string or if two adjacent substrings match the supplied pattern if two alternatives within the supplied pattern both match at the same position in the input string then the match that is chosen is the first for example  fntokenizeabracadabra aba returns  r c d r  error conditions a dynamic error is raised errforx if the value of pattern is invalid according to the rules described in section  regular expression syntax a dynamic error is raised errforx if the value of flags is invalid according to the rules described in section  regular expression syntax a dynamic error is raised errforx if the supplied pattern matches a zerolength string that is if fnmatches pattern flags returns true notes if the input string is not zero length and no separators are found in the input string the result of the function is a single string identical to the input string examples the expression fntokenizethe cat sat on the mat s returns the cat sat on the mat the expression fntokenize    s returns     the expression fntokenize  returns       fntokenizeabba  raises the dynamic error errforx the expression fntokenizesome unparsed br html br text sbrs i returns some unparsed html text  fnanalyzestring summary analyzes a string using a regular expression returning an xml structure that identifies which parts of the input string matched or failed to match the regular expression and in the case of matched substrings which substrings matched each capturing group in the regular expression signatures fnanalyzestring input as xsstring pattern as xsstring as elementfnanalyzestringresult fnanalyzestring input as xsstring pattern as xsstring flags as xsstring as elementfnanalyzestringresult properties this function is nondeterministic contextindependent and focusindependent rules the effect of calling the first version of this function omitting the argument flags is the same as the effect of calling the second version with the flags argument set to a zerolength string flags are defined in  flags the flags argument is interpreted in the same way as for the fnmatches function if input is the empty sequence the function behaves as if input were the zerolength string in this situation the result will be an element node with no children the function returns an element node whose local name is analyzestringresult this element and all its descendant elements have the namespace uri httpwwwworgxpathfunctions the namespace prefix is implementation dependent the children of this element are a sequence of fnmatch and fnnonmatch elements this sequence is formed by breaking the input string into a sequence of strings returning any substring that matches pattern as the content of a match element and any intervening substring as the content of a nonmatch element more specifically the function starts at the beginning of the input string and attempts to find the first substring that matches the regular expression if there are several matches the first match is defined to be the one whose starting position comes first in the string if several alternatives within the regular expression both match at the same position in the input string then the match that is chosen is the first alternative that matches for example if the input string is the quick brown fox jumps and the regular expression is jumpjumps then the match that is chosen is jump having found the first match the instruction proceeds to find the second and subsequent matches by repeating the search starting at the first character that was not included in the previous match the input string is thus partitioned into a sequence of substrings some of which match the regular expression others which do not match it each substring will contain at least one character this sequence is represented in the result by the sequence of fnmatch and fnnonmatch children of the returned element node the string value of the fnmatch or fnnonmatch element will be the corresponding substring of input and the string value of the returned element node will therefore be the same as input the content of an fnnonmatch element is always a single text node the content of a fnmatch element however is in general a sequence of text nodes and fngroup element children an fngroup element with a nr attribute having the integer value n identifies the substring captured by the nth parenthesized subexpression in the regular expression for each capturing subexpression there will be at most one corresponding fngroup element in each fnmatch element in the result if the function is called twice with the same arguments it is implementation dependent whether the two calls return the same element node or distinct but deep equal element nodes in this respect it is nondeterministic the base uri of the element nodes in the result is implementation dependent a schema is defined for the structure of the returned element containing the definitions below the returned element and its descendants will have type annotations obtained by validating the returned element against this schema unless the function is used in an environment where type annotations are not supported for example a basic xslt processor in which case the elements will all be annotated as xsuntyped and the attributes as xsuntypedatomic note a freestanding copy of this schema can be found at analyzestringxsd xml version encodingutfxsschema xmlnsxshttpwwwworgxmlschema    targetnamespacehttpwwwworgxpathfunctions    xmlnsfnhttpwwwworgxpathfunctions    elementformdefaultqualified     xselement nameanalyzestringresult typefnanalyzestringresulttype    xselement namematch typefnmatchtype    xselement namenonmatch typexsstring    xselement namegroup typefngrouptype        xscomplextype nameanalyzestringresulttype mixedtrue        xschoice minoccurs maxoccursunbounded            xselement reffnmatch            xselement reffnnonmatch        xschoice    xscomplextype            xscomplextype namematchtype mixedtrue        xssequence            xselement reffngroup minoccurs maxoccursunbounded        xssequence    xscomplextype        xscomplextype namegrouptype mixedtrue        xssequence            xselement reffngroup minoccurs maxoccursunbounded        xssequence        xsattribute namenr typexspositiveinteger    xscomplextype     xsschema error conditions a dynamic error is raised errforx if the value of pattern is invalid according to the rules described in section  regular expression syntax a dynamic error is raised errforx if the value of flags is invalid according to the rules described in section  regular expression syntax a dynamic error is raised errforx if the supplied pattern matches a zerolength string that is if fnmatches pattern flags returns true notes the declarations and definitions in the above schema are not automatically available in the static context of the fnanalyzestring call or of any other expression the contents of the static context are hostlanguage defined and in some host languages are implementationdefined examples in the following examples the result document is shown in serialized form with whitespace between the element nodes this whitespace is not actually present in the result the expression fnanalyzestringthe cat sat on the mat w returns with whitespace added for legibility analyzestringresult xmlnshttpwwwworgxpathfunctions  matchthematch  nonmatch nonmatch  matchcatmatch  nonmatch nonmatch  matchsatmatch  nonmatch nonmatch  matchonmatch  nonmatch nonmatch  matchthematch  nonmatch nonmatch  matchmatmatch  nonmatchnonmatchanalyzestringresult the expression fnanalyzestring ddd returns with whitespace added for legibility analyzestringresult xmlnshttpwwwworgxpathfunctions  matchgroup nrgroupgroup nrgroupgroup nrgroupmatchanalyzestringresult the expression fnanalyzestringacd x az returns with whitespace added for legibility analyzestringresult xmlnshttpwwwworgxpathfunctions                    matchgroup nragroupgroup nrgroupmatch  nonmatchnonmatch  matchgroup nrcgroupgroup nrgroupmatch  nonmatchnonmatch  matchgroup nrdgroupgroup nrgroupmatch  nonmatch nonmatch  matchgroup nrxgroupgroup nrgroupmatch  nonmatchnonmatchanalyzestringresult  functions that manipulate uris this section specifies functions that manipulate uri values either as instances of xsanyuri or as strings function meaning fnresolveuri resolves a relative iri reference against an absolute iri fnencodeforuri encodes reserved characters in a string that is intended to be used in the path segment of a uri fniritouri converts a string containing an iri into a uri according to the rules of rfc  fnescapehtmluri escapes a uri in the same way that html user agents handle attribute values expected to contain uris  fnresolveuri summary resolves a relative iri reference against an absolute iri signatures fnresolveurirelative as xsstring as xsanyuri fnresolveurirelative as xsstring base as xsstring as xsanyuri properties the oneargument form of this function is deterministic contextdependent and focusindependent it depends on static base uri the twoargument form of this function is deterministic contextindependent and focusindependent rules if the second argument is absent the effect is the same as calling the twoargument function with the value of fnstaticbaseuri as the second argument the function is defined to operate on iri references as defined in rfc  and the implementation must permit all arguments that are valid according to that specification in addition the implementation may accept some or all strings that conform to the rules for absolute or relative legacy extended iri references as defined in legacy extended iris for xml resource identification for the purposes of this section the terms iri and iri reference include these extensions insofar as the implementation chooses to support them if relative is the empty sequence the function returns the empty sequence if relative is an absolute iri as defined above then it is returned unchanged otherwise the function resolves the relative iri reference relative against the base iri base using the algorithm defined in rfc  adapted by treating any character that would not be valid in an rfc uri or relative reference in the same way that rfc treats unreserved characters no percentencoding takes place error conditions the first form of this function resolves relative against the value of the baseuri property from the static context a dynamic error is raised errfons if the baseuri property is not initialized in the static context a dynamic error is raised errforg if relative is not a valid iri according to the rules of rfc extended with an implementationdefined subset of the extensions permitted in leiri or if it is not a suitable relative reference to use as input to the rfc resolution algorithm extended to handle additional unreserved characters a dynamic error is raised errforg if base is not a valid iri according to the rules of rfc extended with an implementationdefined subset of the extensions permitted in leiri or if it is not a suitable iri to use as input to the chosen resolution algorithm for example if it is a relative iri reference if it is a nonhierarchic uri or if it contains a fragment identifier a dynamic error is raised errforg if the chosen resolution algorithm fails for any other reason notes resolving a uri does not dereference it this is merely a syntactic operation on two strings the algorithms in the cited rfcs include some variations that are optional or recommended rather than mandatory they also describe some common practices that are not recommended but which are permitted for backwards compatibility where the cited rfcs permit variations in behavior so does this specification throughout this family of specifications the phrase resolving a relative uri or iri reference should be understood as using the rules of this function unless otherwise stated  fnencodeforuri summary encodes reserved characters in a string that is intended to be used in the path segment of a uri signature fnencodeforuriuripart as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules if uripart is the empty sequence the function returns the zerolength string this function applies the uri escaping rules defined in section  of rfc  to the xsstring supplied as uripart the effect of the function is to escape reserved characters each such character in the string is replaced with its percentencoded form as described in rfc  since rfc  recommends that for consistency uri producers and normalizers should use uppercase hexadecimal digits for all percentencodings this function must always generate hexadecimal values using the uppercase letters af notes all characters are escaped except those identified as unreserved by rfc  that is the upper and lowercase letters az the digits  hyphenminus  low line _ full stop  and tilde  this function escapes uri delimiters and therefore cannot be used indiscriminately to encode invalid characters in a path segment this function is invertible but not idempotent this is because a string containing a percent character will be modified by applying the function for example  becomes  while  becomes  examples the expression fnencodeforurihttpwwwexamplecomweathercalosangelesocean returns httpaffwwwexamplecomffweatherfcaflosangelesocean this is probably not what the user intended because all of the delimiters have been encoded the expression concathttpwwwexamplecom encodeforuribb returns httpwwwexamplecombcabca the expression concathttpwwwexamplecom encodeforuri organic returns httpwwwexamplecomorganic  fniritouri summary converts a string containing an iri into a uri according to the rules of rfc  signature fniritouriiri as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules if iri is the empty sequence the function returns the zerolength string otherwise the function converts the value of iri into a uri according to the rules given in section  of rfc  by percentencoding characters that are allowed in an iri but not in a uri if iri contains a character that is invalid in an iri such as the space character see note below the invalid character is replaced by its percentencoded form as described in rfc  before the conversion is performed since rfc  recommends that for consistency uri producers and normalizers should use uppercase hexadecimal digits for all percentencodings this function must always generate hexadecimal values using the uppercase letters af notes the function is idempotent but not invertible both the inputs my documents and mydocuments will be converted to the output mydocuments this function does not check whether iri is a valid iri it treats it as an string and operates on the characters in the string the following printable ascii characters are invalid in an iri      double quote space      and  since these characters should not appear in an iri if they do appear in iri they will be percentencoded in addition characters outside the range xxe will be percentencoded because they are invalid in a uri since this function does not escape the percent sign  and this character is not allowed in data within a uri users wishing to convert character strings such as file names that include  to a uri should manually escape  by replacing it with  examples the expression fniritouri httpwwwexamplecomweathercalosangelesocean returns httpwwwexamplecomweathercalosangelesocean the expression fniritouri httpwwwexamplecombb returns httpwwwexamplecombcabca  fnescapehtmluri summary escapes a uri in the same way that html user agents handle attribute values expected to contain uris signature fnescapehtmluriuri as xsstring as xsstring properties this function is deterministic contextindependent and focusindependent rules if uri is the empty sequence the function returns the zerolength string otherwise the function escapes all characters except printable characters of the usascii coded character set specifically the codepoints between  and  decimal inclusive each character in uri to be escaped is replaced by an escape sequence which is formed by encoding the character as a sequence of octets in utf and then representing each of these octets in the form hh where hh is the hexadecimal representation of the octet this function must always generate hexadecimal values using the uppercase letters af notes the behavior of this function corresponds to the recommended handling of nonascii characters in uri attribute values as described in html  appendix b examples the expression fnescapehtmluri httpwwwexamplecomweathercalos angelesocean returns httpwwwexamplecomweathercalos angelesocean the expression fnescapehtmluri javascriptif navigatorbrowserlanguage  fr windowopenhttpwwwexamplecombb returns javascriptif navigatorbrowserlanguage  fr windowopenhttpwwwexamplecombcabca  functions and operators on boolean values this section defines functions and operators on the xsboolean datatype  boolean constant functions since no literals are defined in xpath to reference the constant boolean values true and false two functions are provided for the purpose function meaning fntrue returns the xsboolean value true fnfalse returns the xsboolean value false  fntrue summary returns the xsboolean value true signature fntrue as xsboolean properties this function is deterministic contextindependent and focusindependent rules the result is equivalent to xsboolean examples the expression fntrue returns xsboolean  fnfalse summary returns the xsboolean value false signature fnfalse as xsboolean properties this function is deterministic contextindependent and focusindependent rules the result is equivalent to xsboolean examples the expression fnfalse returns xsboolean  operators on boolean values the following functions define the semantics of operators on boolean values in xquery  an xml query language and xml path language xpath  function meaning opbooleanequal returns true if the two arguments are the same boolean value opbooleanlessthan returns true if the first argument is false and the second is true opbooleangreaterthan returns true if the first argument is true and the second is false the ordering operators opbooleanlessthan and opbooleangreaterthan are provided for application purposes and for compatibility with xml path language xpath version  the xml schema part  datatypes second edition datatype xsboolean is not ordered  opbooleanequal summary returns true if the two arguments are the same boolean value operator mapping defines the semantics of the eq operator when applied to two xsboolean values signature opbooleanequalvalue as xsboolean value as xsboolean as xsboolean rules the function returns true if both arguments are true or if both arguments are false it returns false if one of the arguments is true and the other argument is false  opbooleanlessthan summary returns true if the first argument is false and the second is true operator mapping defines the semantics of the lt operator when applied to two xsboolean values also used in the definition of the ge operator signature opbooleanlessthanarg as xsboolean arg as xsboolean as xsboolean rules the function returns true if arg is false and arg is true otherwise it returns false  opbooleangreaterthan summary returns true if the first argument is true and the second is false operator mapping defines the semantics of the gt operator when applied to two xsboolean values also used in the definition of the le operator signature opbooleangreaterthanarg as xsboolean arg as xsboolean as xsboolean rules the function call opbooleangreaterthana b is defined to return the same result as opbooleanlessthanb a  functions on boolean values the following functions are defined on boolean values function meaning fnboolean computes the effective boolean value of the sequence arg fnnot returns true if the effective boolean value of arg is false or false if it is true  fnboolean summary computes the effective boolean value of the sequence arg signature fnbooleanarg as item as xsboolean rules the function computes the effective boolean value of a sequence defined according to the following rules see also section  effective boolean value xp if arg is the empty sequence fnboolean returns false if arg is a sequence whose first item is a node fnboolean returns true if arg is a singleton value of type xsboolean or a derived from xsboolean fnboolean returns arg if arg is a singleton value of type xsstring or a type derived from xsstring xsanyuri or a type derived from xsanyuri or xsuntypedatomic fnboolean returns false if the operand value has zero length otherwise it returns true if arg is a singleton value of any numeric type or a type derived from a numeric type fnboolean returns false if the operand value is nan or is numerically equal to zero otherwise it returns true in all other cases fnboolean raises a type error errforg notes the result of this function is not necessarily the same as arg cast as xsboolean for example fnbooleanfalse returns the value true whereas false cast as xsboolean which can also be written xsbooleanfalse returns false examples let abc  a b  fnbooleanabc raises a type error errforg the expression fnbooleanabc returns true the expression fnbooleanabc returns false the expression fnbooleanabc returns false  fnnot summary returns true if the effective boolean value of arg is false or false if it is true signature fnnotarg as item as xsboolean properties this function is deterministic contextindependent and focusindependent rules the value of arg is first reduced to an effective boolean value by applying the fnboolean function the function returns true if the effective boolean value is false or false if the effective boolean value is true examples the expression fnnotfntrue returns false the expression fnnotfalse returns false  functions and operators on durations operators are defined on the following type xsduration and on the two defined subtypes see  two totally ordered subtypes of duration xsyearmonthduration xsdaytimeduration no ordering relation is defined on xsduration values two xsduration values may however be compared for equality operations on durations including equality comparison casting to string and extraction of components all treat the duration as normalized this means that the seconds and minutes components will always be less than  the hours component less than  and the months component less than  thus for example a duration of  seconds always gives the same result as a duration of two minutes conditions such as underflow and overflow may occur with arithmetic on durations see  limits and precision note this means that in practice the information content of an xsduration value can be reduced to an xsinteger number of months and an xsdecimal number of seconds for the two defined subtypes this is further simplified so that one of these two components is fixed at zero operations such as comparison of durations and arithmetic on durations can be expressed in terms of numeric operations applied to these two components  two totally ordered subtypes of duration two totally ordered subtypes of xsduration are defined in section  schema information dm specification using the mechanisms described in xml schema part  datatypes second edition for defining userdefined types additional details about these types is given below note these types were not defined in xsd  but they are defined in the current draft of xsd  the description given here is believed to be equivalent to that in xsd  and will become nonnormative when xsd  reaches recommendation status  xsyearmonthduration definition xsyearmonthduration is derived from xsduration by restricting its lexical representation to contain only the year and month components the value space of xsyearmonthduration is the set of xsinteger month values the year and month components of xsyearmonthduration correspond to the gregorian year and month components defined in section  of iso  respectively  lexical representation the lexical representation for xsyearmonthduration is the iso  reduced format pnynm where ny represents the number of years and nm the number of months the values of the years and months components are not restricted but allow an arbitrary unsigned xsinteger an optional preceding minus sign  is allowed to indicate a negative duration if the sign is omitted a positive duration is indicated to indicate a xsyearmonthduration of  year  months one would write pym one could also indicate a xsyearmonthduration of minus  months as pm reduced precision and truncated representations of this format are allowed provided they conform to the following if the number of years or months in any expression equals zero  the number and its corresponding designator may be omitted however at least one number and its designator must be present for example py and pm are allowed pm is not allowed although pm is allowed pymt is not allowed also pym is not allowed nor is pym since y must have at least one preceding digit and m must have one preceding digit  calculating the value from the lexical representation the value of a xsyearmonthduration lexical form is obtained by multiplying the value of the years component by  and adding the value of the months component the value is positive or negative depending on the preceding sign  canonical representation the canonical representation of xsyearmonthduration restricts the value of the months component to xsinteger values between  and  both inclusive to convert from a noncanonical representation to the canonical representation the lexical representation is first converted to a value in xsinteger months as defined above this value is then divided by  to obtain the value of the years component of the canonical representation the remaining number of months is the value of the months component of the canonical representation for negative durations the canonical form is calculated using the absolute value of the duration and a negative sign is prepended to it if a component has the value zero  then the number and the designator for that component must be omitted however if the value is zero  months the canonical form is pm  order relation on xsyearmonthduration let the function that calculates the value of an xsyearmonthduration in the manner described above be called vd then for two xsyearmonthduration values x and y x  y if and only if vx  vy the order relation on yearmonthduration is a total order  xsdaytimeduration definition xsdaytimeduration is derived from xsduration by restricting its lexical representation to contain only the days hours minutes and seconds components the value space of xsdaytimeduration is the set of fractional second values the components of xsdaytimeduration correspond to the day hour minute and second components defined in section  of iso  respectively  lexical representation the lexical representation for xsdaytimeduration is the iso  truncated format pndtnhnmns where nd represents the number of days t is the datetime separator nh the number of hours nm the number of minutes and ns the number of seconds the values of the days hours and minutes components are not restricted but allow an arbitrary unsigned xsinteger similarly the value of the seconds component allows an arbitrary unsigned xsdecimal an optional minus sign  is allowed to precede the p indicating a negative duration if the sign is omitted the duration is positive see also iso  date and time formats for example to indicate a duration of  days  hours and  minutes one would write pdthm one could also indicate a duration of minus  days as pd reduced precision and truncated representations of this format are allowed provided they conform to the following if the number of days hours minutes or seconds in any expression equals zero  the number and its corresponding designator may be omitted however at least one number and its designator must be present the seconds part may have a decimal fraction the designator t must be absent if and only if all of the time items are absent the designator p must always be present for example pd pth pdth pts and pdtm are all allowed pd is not allowed invalid location of minus sign although pd is allowed  calculating the value of a xsdaytimeduration from the lexical representation the value of a xsdaytimeduration lexical form in fractional seconds is obtained by converting the days hours minutes and seconds value to fractional seconds using the conversion rules  hours   day  minutes   hour and  seconds   minute  canonical representation the canonical representation of xsdaytimeduration restricts the value of the hours component to xsinteger values between  and  both inclusive the value of the minutes component to xsinteger values between  and  both inclusive and the value of the seconds component to xsdecimal valued from  to  see xml schema part  datatypes second edition appendix d to convert from a noncanonical representation to the canonical representation the value of the lexical form in fractional seconds is first calculated in the manner described above the value of the days component in the canonical form is then calculated by dividing the value by   the remainder is in fractional seconds the value of the hours component in the canonical form is calculated by dividing this remainder by   the remainder is again in fractional seconds the value of the minutes component in the canonical form is calculated by dividing this remainder by  the remainder in fractional seconds is the value of the seconds component in the canonical form for negative durations the canonical form is calculated using the absolute value of the duration and a negative sign is prepended to it if a component has the value zero  then the number and the designator for that component must be omitted however if all the components of the lexical form are zero  the canonical form is pts  order relation on xsdaytimeduration let the function that calculates the value of a xsdaytimeduration in the manner described above be called vd then for two xsdaytimeduration values x and y x  y if and only if vx  vy the order relation on xsdaytimeduration is a total order  comparison operators on durations function meaning opyearmonthdurationlessthan returns true if arg is a shorter duration than arg opyearmonthdurationgreaterthan returns true if arg is a longer duration than arg opdaytimedurationlessthan returns true if arg is a shorter duration than arg opdaytimedurationgreaterthan returns true if arg is a longer duration than arg opdurationequal returns true if arg and arg are durations of the same length the following comparison operators are defined on the xml schema part  datatypes second edition duration datatypes each operator takes two operands of the same type and returns an xsboolean result as discussed in xml schema part  datatypes second edition the order relation on xsduration is a partial order rather than a total order for this reason only equality is defined on xsduration a full complement of comparison and arithmetic functions are defined on the two subtypes of duration described in  two totally ordered subtypes of duration which do have a total order  opyearmonthdurationlessthan summary returns true if arg is a shorter duration than arg operator mapping defines the semantics of the lt operator when applied to two xsyearmonthduration values also used in the definition of the ge operator signature opyearmonthdurationlessthan arg as xsyearmonthduration arg as xsyearmonthduration as xsboolean rules if the number of months in the value of arg is numerically less than the number of months in the value of arg the function returns true otherwise the function returns false notes either or both durations may be negative  opyearmonthdurationgreaterthan summary returns true if arg is a longer duration than arg operator mapping defines the semantics of the gt operator when applied to two xsyearmonthduration values also used in the definition of the le operator signature opyearmonthdurationgreaterthan arg as xsyearmonthduration arg as xsyearmonthduration as xsboolean rules the function call opyearmonthdurationgreaterthana b is defined to return the same result as opyearmonthdurationlessthanb a  opdaytimedurationlessthan summary returns true if arg is a shorter duration than arg operator mapping defines the semantics of the lt operator when applied to two xsdaytimeduration values also used in the definition of the ge operator signature opdaytimedurationlessthan arg as xsdaytimeduration arg as xsdaytimeduration as xsboolean rules if the number of seconds in the value of arg is numerically less than the number of seconds in the value of arg the function returns true otherwise the function returns false notes either or both durations may be negative  opdaytimedurationgreaterthan summary returns true if arg is a longer duration than arg operator mapping defines the semantics of the gt operator when applied to two xsdaytimeduration values also used in the definition of the le operator signature opdaytimedurationgreaterthan arg as xsdaytimeduration arg as xsdaytimeduration as xsboolean rules the function call opdaytimedurationgreaterthana b is defined to return the same result as opdaytimedurationlessthanb a  opdurationequal summary returns true if arg and arg are durations of the same length operator mapping defines the semantics of the eq operators when applied to two xsduration values also used in the definition of the ne operator signature opdurationequalarg as xsduration arg as xsduration as xsboolean rules if the xsyearmonthduration components of arg and arg are equal and the xsdaytimeduration components of arg and arg are equal the function returns true otherwise the function returns false the semantics of this function are xsyearmonthdurationarg div xsyearmonthdurationpm  eqxsyearmonthdurationarg div xsyearmonthdurationpm    andxsdaytimedurationarg div xsdaytimedurationpts  eqxsdaytimedurationarg div xsdaytimedurationpts that is the function returns true if the months and seconds values of the two durations are equal notes note that this function like any other may be applied to arguments that are derived from the types given in the function signature including the two subtypes xsdaytimeduration and xsyearmonthduration with the exception of the zerolength duration no instance of xsdaytimeduration can ever be equal to an instance of xsyearmonthduration examples the expression opdurationequalxsdurationpy xsdurationpm returns true the expression opdurationequalxsdurationpth xsdurationpd returns true the expression opdurationequalxsdurationpy xsdurationpd returns false the expression opdurationequalxsyearmonthdurationpy xsdaytimedurationpd returns true the expression opdurationequalxsyearmonthdurationpy xsdaytimedurationpd returns false the expression opdurationequalxsyearmonthdurationpy xsyearmonthdurationpm returns true the expression opdurationequalxsdaytimedurationpd xsdaytimedurationpth returns true the expression opdurationequalxsdurationpymdthms xsyearmonthdurationpm returns true the expression opdurationequalxsdurationpymd xsdaytimedurationpth returns true  component extraction functions on durations the duration datatype may be considered to be a composite datatypes in that it contains distinct properties or components the extraction functions specified below extract a single component from a duration value for xsduration and its subtypes including the two subtypes xsyearmonthduration and xsdaytimeduration the components are normalized this means that the seconds and minutes components will always be less than  the hours component less than  and the months component less than  function meaning fnyearsfromduration returns the number of years in a duration fnmonthsfromduration returns the number of months in a duration fndaysfromduration returns the number of days in a duration fnhoursfromduration returns the number of hours in a duration fnminutesfromduration returns the number of minutes in a duration fnsecondsfromduration returns the number of seconds in a duration  fnyearsfromduration summary returns the number of years in a duration signature fnyearsfromdurationarg as xsduration as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger representing the years component in the value of arg the result is obtained by casting arg to an xsyearmonthduration see  casting to duration types and then computing the years component as described in  canonical representation if arg is a negative duration then the result will be negative if arg is an xsdaytimeduration the function returns  examples the expression fnyearsfromdurationxsyearmonthdurationpym returns  the expression fnyearsfromdurationxsyearmonthdurationpm returns  the expression fnyearsfromdurationxsdaytimedurationpdth returns   fnmonthsfromduration summary returns the number of months in a duration signature fnmonthsfromdurationarg as xsduration as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger representing the months component in the value of arg the result is obtained by casting arg to an xsyearmonthduration see  casting to duration types and then computing the months component as described in  canonical representation if arg is a negative duration then the result will be negative if arg is an xsdaytimeduration the function returns  examples the expression fnmonthsfromdurationxsyearmonthdurationpym returns  the expression fnmonthsfromdurationxsyearmonthdurationpym returns  the expression fnmonthsfromdurationxsdaytimedurationpdthms returns   fndaysfromduration summary returns the number of days in a duration signature fndaysfromdurationarg as xsduration as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger representing the days component in the value of arg the result is obtained by casting arg to an xsdaytimeduration see  casting to duration types and then computing the days component as described in  canonical representation if arg is a negative duration then the result will be negative if arg is an xsyearmonthduration the function returns  examples the expression fndaysfromdurationxsdaytimedurationpdth returns  the expression fndaysfromdurationxsdaytimedurationpdth returns  the expression fndaysfromdurationxsyearmonthdurationpym returns   fnhoursfromduration summary returns the number of hours in a duration signature fnhoursfromdurationarg as xsduration as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger representing the hours component in the value of arg the result is obtained by casting arg to an xsdaytimeduration see  casting to duration types and then computing the hours component as described in  canonical representation if arg is a negative duration then the result will be negative if arg is an xsyearmonthduration the function returns  examples the expression fnhoursfromdurationxsdaytimedurationpdth returns  the expression fnhoursfromdurationxsdaytimedurationpdthms returns  the expression fnhoursfromdurationxsdaytimedurationpth returns  the expression fnhoursfromdurationxsdaytimedurationpdth returns   fnminutesfromduration summary returns the number of minutes in a duration signature fnminutesfromdurationarg as xsduration as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger representing the minutes component in the value of arg the result is obtained by casting arg to an xsdaytimeduration see  casting to duration types and then computing the minutes component as described in  canonical representation if arg is a negative duration then the result will be negative if arg is an xsyearmonthduration the function returns  examples the expression fnminutesfromdurationxsdaytimedurationpdth returns  the expression fnminutesfromdurationxsdaytimedurationpdthm returns   fnsecondsfromduration summary returns the number of seconds in a duration signature fnsecondsfromdurationarg as xsduration as xsdecimal properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsdecimal representing the seconds component in the value of arg the result is obtained by casting arg to an xsdaytimeduration see  casting to duration types and then computing the seconds component as described in  canonical representation if arg is a negative duration then the result will be negative if arg is an xsyearmonthduration the function returns  examples the expression fnsecondsfromdurationxsdaytimedurationpdths returns  the expression fnsecondsfromdurationxsdaytimedurationpts returns   arithmetic operators on durations function meaning opaddyearmonthdurations returns the result of adding two xsyearmonthduration values opsubtractyearmonthdurations returns the result of subtracting one xsyearmonthduration value from another opmultiplyyearmonthduration returns the result of multiplying the value of arg by arg the result is rounded to the nearest month opdivideyearmonthduration returns the result of dividing the value of arg by arg the result is rounded to the nearest month opdivideyearmonthdurationbyyearmonthduration returns the ratio of two xsyearmonthduration values opadddaytimedurations returns the sum of two xsdaytimeduration values opsubtractdaytimedurations returns the result of subtracting one xsdaytimeduration from another opmultiplydaytimeduration returns the result of multiplying a xsdaytimeduration by a number opdividedaytimeduration returns the result of multiplying a xsdaytimeduration by a number opdividedaytimedurationbydaytimeduration returns the ratio of two xsdaytimeduration values as a decimal number for operators that combine a duration and a datetime value see  arithmetic operators on durations dates and times  opaddyearmonthdurations summary returns the result of adding two xsyearmonthduration values operator mapping defines the semantics of the  operator when applied to two xsyearmonthduration values signature opaddyearmonthdurations arg as xsyearmonthduration arg as xsyearmonthduration as xsyearmonthduration rules the function returns the result of adding the value of arg to the value of arg the result will be an xsyearmonthduration whose length in months is equal to the length in months of arg plus the length in months of arg for handling of overflow see  limits and precision notes either duration and therefore the result may be negative examples the expression opaddyearmonthdurationsxsyearmonthdurationpym xsyearmonthdurationpym returns xsyearmonthdurationpym  opsubtractyearmonthdurations summary returns the result of subtracting one xsyearmonthduration value from another operator mapping defines the semantics of the  operator when applied to two xsyearmonthduration values signature opsubtractyearmonthdurations arg as xsyearmonthduration arg as xsyearmonthduration as xsyearmonthduration rules the function returns the result of subtracting the value of arg from the value of arg the result will be an xsyearmonthduration whose length in months is equal to the length in months of arg minus the length in months of arg for handling of overflow see  limits and precision notes either duration and therefore the result may be negative examples the expression opsubtractyearmonthdurationsxsyearmonthdurationpym xsyearmonthdurationpym returns xsyearmonthdurationpm  opmultiplyyearmonthduration summary returns the result of multiplying the value of arg by arg the result is rounded to the nearest month operator mapping defines the semantics of the  operator when applied to an xsyearmonthduration and a numeric value signature opmultiplyyearmonthduration arg as xsyearmonthduration arg as xsdouble as xsyearmonthduration rules the result is the xsyearmonthduration whose length in months is equal to the result of applying the fnround function to the value obtained by multiplying the length in months of arg by the value of arg if arg is positive or negative zero the result is a zerolength duration if arg is positive or negative infinity the result overflows and is handled as discussed in  limits and precision for handling of overflow and underflow see  limits and precision error conditions a dynamic error is raised errfoca if arg is nan notes either duration and therefore the result may be negative examples the expression opmultiplyyearmonthdurationxsyearmonthdurationpym  returns xsyearmonthdurationpym  opdivideyearmonthduration summary returns the result of dividing the value of arg by arg the result is rounded to the nearest month operator mapping defines the semantics of the div operator when applied to an xsyearmonthduration and a numeric value signature opdivideyearmonthduration arg as xsyearmonthduration arg as xsdouble as xsyearmonthduration rules the result is the xsyearmonthduration whose length in months is equal to the result of applying the fnround function to the value obtained by dividing the length in months of arg by the value of arg if arg is positive or negative infinity the result is a zerolength duration if arg is positive or negative zero the result overflows and is handled as discussed in  limits and precision for handling of overflow and underflow see  limits and precision error conditions a dynamic error is raised errfoca if arg is nan notes either operand and therefore the result may be negative examples the expression opdivideyearmonthdurationxsyearmonthdurationpym  returns xsyearmonthdurationpym  opdivideyearmonthdurationbyyearmonthduration summary returns the ratio of two xsyearmonthduration values operator mapping defines the semantics of the div operator when applied to two xsyearmonthduration values signature opdivideyearmonthdurationbyyearmonthduration arg as xsyearmonthduration arg as xsyearmonthduration as xsdecimal rules the function returns the result of dividing the length in months of arg by the length in months of arg according to the rules of the opnumericdivide function for integer operands for handling of overflow and underflow see  limits and precision notes either duration and therefore the result may be negative examples the expression opdivideyearmonthdurationbyyearmonthdurationxsyearmonthdurationpym xsyearmonthdurationpym returns  the following example demonstrates how to calculate the length of an xsyearmonthduration value in months the expression opdivideyearmonthdurationbyyearmonthdurationxsyearmonthdurationpym xsyearmonthdurationpm returns   opadddaytimedurations summary returns the sum of two xsdaytimeduration values operator mapping defines the semantics of the  operator when applied to two xsdaytimeduration values signature opadddaytimedurations arg as xsdaytimeduration arg as xsdaytimeduration as xsdaytimeduration rules the function returns the result of adding the value of arg to the value of arg the result is the xsdaytimeduration whose length in seconds is equal to the sum of the length in seconds of the two input durations for handling of overflow see  limits and precision notes either duration and therefore the result may be negative examples the expression opadddaytimedurationsxsdaytimedurationpdthm xsdaytimedurationpdth returns xsdaytimedurationpdtm  opsubtractdaytimedurations summary returns the result of subtracting one xsdaytimeduration from another operator mapping defines the semantics of the  operator when applied to two xsdaytimeduration values signature opsubtractdaytimedurations arg as xsdaytimeduration arg as xsdaytimeduration as xsdaytimeduration rules the function returns the result of subtracting the value of arg from the value of arg the result is the xsdaytimeduration whose length in seconds is equal to the length in seconds of arg minus the length in seconds of arg for handling of overflow see  limits and precision notes either duration and therefore the result may be negative examples the expression opsubtractdaytimedurationsxsdaytimedurationpdth xsdaytimedurationpdthm returns xsdaytimedurationpdthm  opmultiplydaytimeduration summary returns the result of multiplying a xsdaytimeduration by a number operator mapping defines the semantics of the  operator when applied to an xsdaytimeduration and a numeric value signature opmultiplydaytimeduration arg as xsdaytimeduration arg as xsdouble as xsdaytimeduration rules the function returns the result of multiplying the value of arg by arg the result is the xsdaytimeduration whose length in seconds is equal to the length in seconds of arg multiplied by the numeric value arg if arg is positive or negative zero the result is a zerolength duration if arg is positive or negative infinity the result overflows and is handled as discussed in  limits and precision for handling of overflow and underflow see  limits and precision error conditions a dynamic error is raised errfoca if arg is nan notes either operand and therefore the result may be negative examples the expression opmultiplydaytimedurationxsdaytimedurationpthm  returns xsdaytimedurationpthm  opdividedaytimeduration summary returns the result of multiplying a xsdaytimeduration by a number operator mapping defines the semantics of the div operator when applied to two xsdaytimeduration values signature opdividedaytimeduration arg as xsdaytimeduration arg as xsdouble as xsdaytimeduration rules the function returns the result of dividing the value of arg by arg the result is the xsdaytimeduration whose length in seconds is equal to the length in seconds of arg divided by the numeric value arg if arg is positive or negative infinity the result is a zerolength duration if arg is positive or negative zero the result overflows and is handled as discussed in  limits and precision for handling of overflow and underflow see  limits and precision error conditions a dynamic error is raised errfoca if arg is nan notes either operand and therefore the result may be negative examples the expression opdividedaytimedurationxsdaytimedurationpdthms  returns xsdurationpthms  opdividedaytimedurationbydaytimeduration summary returns the ratio of two xsdaytimeduration values as a decimal number operator mapping defines the semantics of the div operator when applied to two xsdaytimeduration values signature opdividedaytimedurationbydaytimeduration arg as xsdaytimeduration arg as xsdaytimeduration as xsdecimal rules the function returns the result of dividing the value of arg by arg the result is the xsdaytimeduration whose length in seconds is equal to the length in seconds of arg divided by the length in seconds of arg the calculation is performed by applying opnumericdivide to the two xsdecimal operands for handling of overflow and underflow see  limits and precision notes either operand and therefore the result may be negative examples the expression fnroundhalftoeven opdividedaytimedurationbydaytimeduration xsdaytimedurationpdtms xsdaytimedurationpdth  returns  this examples shows how to determine the number of seconds in a duration the expression opdividedaytimedurationbydaytimedurationxsdaytimedurationpdtms xsdaytimedurationpts returns   functions and operators on dates and times this section defines operations on the xml schema part  datatypes second edition date and time types see working with timezones for a disquisition on working with date and time values with and without timezones  date and time types the operators described in this section are defined on the following date and time types xsdatetime xsdate xstime xsgyearmonth xsgyear xsgmonthday xsgmonth xsgday the only operations defined on xsgyearmonth xsgyear xsgmonthday xsgmonth and xsgday values are equality comparison and component extraction for other types further operations are provided including order comparisons arithmetic formatted display and timezone adjustment  limits and precision for a number of the above datatypes xml schema part  datatypes second edition extends the basic iso  lexical representations such as yyyymmddthhmmsss for datetime by allowing a preceding minus sign more than four digits to represent the year field  no maximum is specified  and an unlimited number of digits for fractional seconds leap seconds are not supported all minimally conforming processors must support positive year values with a minimum of  digits ie yyyy and a minimum fractional second precision of  millisecond or three digits ie ssss however conforming processors may set larger implementationdefined limits on the maximum number of digits they support in these two situations processors may also choose to support the year  and years with negative values the results of operations on dates that cross the year  are implementationdefined a processor that limits the number of digits in date and time datatype representations may encounter overflow and underflow conditions when it tries to execute the functions in  arithmetic operators on durations dates and times in these situations the processor must return  in case of time underflow it must raise a dynamic error errfodt in case of overflow  datetime datatype values as defined in section  dates and times dm xsdatetime xsdate xstime xsgyearmonth xsgyear xsgmonthday xsgmonth xsgday values referred to collectively as datetime values are represented as seven components or properties year month day hour minute second and timezone the first five components are xsinteger values the value of the second component is an xsdecimal and the value of the timezone component is an xsdaytimeduration for all the primitive datetime datatypes the timezone property is optional and may or may not be present depending on the datatype some of the remaining six properties must be present and some must be absentdm absent or missing properties are represented by the empty sequence this value is referred to as the local value in that the value retains its original timezone before comparing or subtracting xsdatetime values this local value must be translated or normalized to utc for xstime  and  are alternate lexical forms for the same value whose canonical representation is  for xsdatetime a time component  translates to  of the following day  examples an xsdatetime with lexical representation t is represented in the datamodel by        an xsdatetime with lexical representation t is represented by       pth an xsdatetime with lexical representation t is represented by        an xsdate with lexical representation  is represented by       pth an xstime with lexical representation  is represented by         constructing a datetime a function is provided for constructing a xsdatetime value from a xsdate value and a xstime value  fndatetime summary returns an xsdatetime value created by combining an xsdate and an xstime signature fndatetimearg as xsdate arg as xstime as xsdatetime properties this function is deterministic contextindependent and focusindependent rules if either arg or arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsdatetime whose date component is equal to arg and whose time component is equal to arg the timezone of the result is computed as follows if neither argument has a timezone the result has no timezone if exactly one of the arguments has a timezone or if both arguments have the same timezone the result has this timezone error conditions a dynamic error is raised errforg if the two arguments both have timezones and the timezones are different examples the expression fndatetimexsdate xstime returns xsdatetimet the expression fndatetimexsdate xstime returns xsdatetimet this is because  is an alternate lexical form for   comparison operators on duration date and time values function meaning opdatetimeequal returns true if the two supplied xsdatetime values refer to the same instant in time opdatetimelessthan returns true if the first argument represents an earlier instant in time than the second argument opdatetimegreaterthan returns true if the first argument represents a later instant in time than the second argument opdateequal returns true if and only if the starting instants of the two supplied xsdate values are the same opdatelessthan returns true if and only if the starting instant of arg is less than the starting instant of arg returns false otherwise opdategreaterthan returns true if and only if the starting instant of arg is greater than the starting instant of arg returns false otherwise optimeequal returns true if the two xstime values represent the same instant in time when treated as being times on the same date before adjusting the timezone optimelessthan returns true if the first xstime value represents an earlier instant in time than the second when both are treated as being times on the same date before adjusting the timezone optimegreaterthan returns true if the first xstime value represents a later instant in time than the second when both are treated as being times on the same date before adjusting the timezone opgyearmonthequal returns true if the two xsgyearmonth values have the same starting instant opgyearequal returns true if the two xsgyear values have the same starting instant opgmonthdayequal returns true if the two xsgmonthday values have the same starting instant when considered as days in the same year opgmonthequal returns true if the two xsgmonth values have the same starting instant when considered as months in the same year opgdayequal returns true if the two xsgday values have the same starting instant when considered as days in the same month of the same year the following comparison operators are defined on the xml schema part  datatypes second edition datetime datatypes each operator takes two operands of the same type and returns an xsboolean result xml schema part  datatypes second edition also states that the order relation on date and time datatypes is not a total order but a partial order because these datatypes may or may not have a timezone this is handled as follows if either operand to a comparison function on date or time values does not have an explicit timezone then for the purpose of the operation an implicit timezone provided by the dynamic context section c dynamic context components xp is assumed to be present as part of the value this creates a total order for all date and time values an xsdatetime can be considered to consist of seven components year month day hour minute second and timezone for xsdatetime six components year month day hour minute and second are required and timezone is optional for other datetime values of the first six components some are required and others must be absentdm timezone is always optional for example for xsdate the year month and day components are required and hour minute and second components must be absent for xstime the hour minute and second components are required and year month and day are missing for xsgday day is required and year month hour minute and second are missing note in schema  part  a new explicittimezone facet is available with values optional required or prohibited to enable the timezone to be defined as mandatory or disallowed values of the datetime datatypes xstime xsgmonthday xsgmonth and xsgday can be considered to represent a sequence of recurring time instants or time periods an xstime occurs every day an xsgmonth occurs every year comparison operators on these datatypes compare the starting instants of equivalent occurrences in the recurring series these xsdatetime values are calculated as described below comparison operators on xsdate xsgyearmonth and xsgyear compare their starting instants these xsdatetime values are calculated as described below the starting instant of an occurrence of a datetime value is an xsdatetime calculated by filling in the missing components of the local value from a reference xsdatetime an example of a suitable reference xsdatetime is t then for example the starting instant corresponding to the xsdate value  is t the starting instant corresponding to the xstime value  is t and the starting instant corresponding to the gmonthday value  is t which explains why a leap year was chosen for the reference note in the previous version of this specification the reference datetime chosen was t while this gives the same results it produces a starting instant for a gmonth or gmonthday that bears no relation to the ordinary meaning of the term and it also required special handling of short months the original choice was made to allow for leap seconds but since leap seconds are not recognized in datetime arithmetic this is not actually necessary if the xstime value written as  is to be compared filling in the missing components gives t because  is an alternative representation of  the lexical value  is converted to the time components  before the missing components are filled in this has the consequence that when ordering xstime values  is considered to be earlier than  however when ordering xsdatetime values a time component of  is considered equivalent to  on the following day note that the reference xsdatetime does not have a timezone the timezone component is never filled in from the reference xsdatetime in some cases if the datetime value does not have a timezone the implicit timezone from the dynamic context is used as the timezone note this specification uses the reference xsdatetime t in the description of the comparison operators implementations may use other reference xsdatetime values as long as they yield the same results the reference xsdatetime used must meet the following constraints when it is used to supply components into xsgmonthday values the year must allow for february  and so must be a leap year when it is used to supply missing components into xsgday values the month must allow for  days different reference xsdatetime values may be used for different operators  opdatetimeequal summary returns true if the two supplied xsdatetime values refer to the same instant in time operator mapping defines the semantics of the eq operator when applied to two xsdatetime values also used in the definition of the ne le and ge operators signature opdatetimeequalarg as xsdatetime arg as xsdatetime as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules if either arg or arg has no timezone component the effective value of the argument is obtained by substituting the implicit timezone from the dynamic evaluation context the function then returns true if and only if the effective value of arg is equal to the effective value of arg according to the algorithm defined in section  of xml schema part  datatypes second edition order relation on datetime for xsdatetime values with timezones otherwise the function returns false examples assume that the dynamic context provides an implicit timezone value of  the expression opdatetimeequalxsdatetimet xsdatetimet returns true the expression opdatetimeequalxsdatetimet xsdatetimet returns true the expression opdatetimeequalxsdatetimet xsdatetimet returns false the expression opdatetimeequalxsdatetimet xsdatetimet returns true the expression opdatetimeequalxsdatetimet xsdatetimet returns true the expression opdatetimeequalxsdatetimet xsdatetimet returns true the expression opdatetimeequalxsdatetimet xsdatetimet returns false  opdatetimelessthan summary returns true if the first argument represents an earlier instant in time than the second argument operator mapping defines the semantics of the lt operator when applied to two xsdatetime values also used in the definition of the ge operator signature opdatetimelessthanarg as xsdatetime arg as xsdatetime as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules if either arg or arg has no timezone component the effective value of the argument is obtained by substituting the implicit timezone from the dynamic evaluation context the function then returns true if and only if the effective value of arg is less than the effective value of arg according to the algorithm defined in section  of xml schema part  datatypes second edition order relation on datetime for xsdatetime values with timezones otherwise the function returns false  opdatetimegreaterthan summary returns true if the first argument represents a later instant in time than the second argument operator mapping defines the semantics of the gt operator when applied to two xsdatetime values also used in the definition of the le operator signature opdatetimegreaterthan arg as xsdatetime arg as xsdatetime as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the function call opdatetimegreaterthana b is defined to return the same result as opdatetimelessthanb a  opdateequal summary returns true if and only if the starting instants of the two supplied xsdate values are the same operator mapping defines the semantics of the eq operator when applied to two xsdate values also used in the definition of the ne le and ge operators signature opdateequalarg as xsdate arg as xsdate as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the starting instant of an xsdate is the xsdatetime at time  on that date the function returns the result of the expression opdatetimeequalxsdatetimearg xsdatetimearg examples the expression opdateequalxsdatez xsdate returns false the starting instants are xsdatetimetz and xsdatetimet these are normalized to xsdatetimetz and xsdatetimetz  the expression opdateequalxsdate xsdate returns true  opdatelessthan summary returns true if and only if the starting instant of arg is less than the starting instant of arg returns false otherwise operator mapping defines the semantics of the lt operator when applied to two xsdate values also used in the definition of the ge operator signature opdatelessthanarg as xsdate arg as xsdate as xsboolean rules the starting instant of an xsdate is the xsdatetime at time  on that date the function returns the result of the expression opdatetimelessthanxsdatetimearg xsdatetimearg examples the expression opdatelessthanxsdatez xsdate returns true the expression opdatelessthanxsdate xsdate returns false  opdategreaterthan summary returns true if and only if the starting instant of arg is greater than the starting instant of arg returns false otherwise operator mapping defines the semantics of the gt operator when applied to two xsdate values also used in the definition of the le operator signature opdategreaterthanarg as xsdate arg as xsdate as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the function call opdategreaterthana b is defined to return the same result as opdatelessthanb a examples the expression opdategreaterthanxsdatez xsdate returns true the expression opdategreaterthanxsdate xsdate returns false  optimeequal summary returns true if the two xstime values represent the same instant in time when treated as being times on the same date before adjusting the timezone operator mapping defines the semantics of the eq operator when applied to two xstime values also used in the definition of the ne le and ge operators signature optimeequalarg as xstime arg as xstime as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules each of the supplied xstime values is expanded to an xsdatetime value by associating the time with an arbitrary date the function returns the result of comparing these two xsdatetime values using opdatetimeequal the result of the function is thus the same as the value of the expression opdatetimeequal        fndatetimexsdate arg         fndatetimexsdate arg examples assume that the date components from the reference xsdatetime correspond to  the expression optimeequalxstime xstime returns false the xsdatetimes calculated using the reference date components are t and t these normalize to tz and tz  the expression optimeequalxstime xstime returns true the expression optimeequalxstime xstime returns true this not the result one might expect for xsdatetime values a time of  is equivalent to  on the following day for xstime the normalization from  to  happens before the xstime is converted into an xsdatetime for the purpose of the equality comparison for xstime any operation on  produces the same result as the same operation on  because these are two different lexical representations of the same value   optimelessthan summary returns true if the first xstime value represents an earlier instant in time than the second when both are treated as being times on the same date before adjusting the timezone operator mapping defines the semantics of the lt operator when applied to two xstime values also used in the definition of the ge operator signature optimelessthanarg as xstime arg as xstime as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules each of the supplied xstime values is expanded to an xsdatetime value by associating the time with an arbitrary date the function returns the result of comparing these two xsdatetime values using opdatetimelessthan the result of the function is thus the same as the value of the expression opdatetimelessthan        fndatetimexsdate arg         fndatetimexsdate arg examples assume that the dynamic context provides an implicit timezone value of  the expression optimelessthanxstime xstime returns false the expression optimelessthanxstime xstimez returns true the expression optimelessthanxstime xstime returns false  optimegreaterthan summary returns true if the first xstime value represents a later instant in time than the second when both are treated as being times on the same date before adjusting the timezone operator mapping defines the semantics of the gt operator when applied to two xstime values also used in the definition of the le operator signature optimegreaterthanarg as xstime arg as xstime as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the function call optimegreaterthana b is defined to return the same result as optimelessthanb a examples the expression optimegreaterthanxstime xstime returns false  opgyearmonthequal summary returns true if the two xsgyearmonth values have the same starting instant operator mapping defines the semantics of the eq operator when applied to two xsgyearmonth values also used in the definition of the ne operator signature opgyearmonthequal arg as xsgyearmonth arg as xsgyearmonth as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the starting instants of arg and arg are calculated by supplying the missing components of arg and arg from the xsdatetime template xxxxxxt the function returns the result of comparing these two starting instants using opdatetimeequal examples assume that the dynamic context provides an implicit timezone value of  opgyearmonthequalxsgyearmonth xsgyearmonth returns false the starting instants are t and t respectively opgyearmonthequalxsgyearmonth xsgyearmonthz returns false the starting instants are t and tz respectively  opgyearequal summary returns true if the two xsgyear values have the same starting instant operator mapping defines the semantics of the eq operator when applied to two xsgyear values also used in the definition of the ne operator signature opgyearequalarg as xsgyear arg as xsgyear as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the starting instants of arg and arg are calculated by supplying the missing components of arg and arg from the xsdatetime template xxxxt the function returns the result of comparing these two starting instants using opdatetimeequal examples assume that the dynamic context provides an implicit timezone value of  assume also that the xsdatetime template is xxxxt opgyearequalxsgyear xsgyear returns false the starting instants are t and t respectively and normalize to tz and tz the expression opgyearequalxsgyear xsgyear returns true  opgmonthdayequal summary returns true if the two xsgmonthday values have the same starting instant when considered as days in the same year operator mapping defines the semantics of the eq operator when applied to two xsgmonthday values also used in the definition of the ne operator signature opgmonthdayequalarg as xsgmonthday arg as xsgmonthday as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the starting instants of arg and arg are calculated by supplying the missing components of arg and arg from the xsdatetime template xxxxt or an equivalent the function returns the result of comparing these two starting instants using opdatetimeequal examples assume that the dynamic context provides an implicit timezone value of  assume for the purposes of illustration that the xsdatetime template used is xxxxt this does not affect the result the expression opgmonthdayequalxsgmonthday xsgmonthday returns true  the starting instants are t and t respectively and normalize to tz and tz  the expression opgmonthdayequalxsgmonthday xsgmonthdayz returns false  opgmonthequal summary returns true if the two xsgmonth values have the same starting instant when considered as months in the same year operator mapping defines the semantics of the eq operator when applied to two xsgmonth values also used in the definition of the ne operator signature opgmonthequalarg as xsgmonth arg as xsgmonth as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the starting instants of arg and arg are calculated by supplying the missing components of arg and arg from the xsdatetime template xxt or an equivalent the function returns the result of comparing these two starting instants using opdatetimeequal examples assume that the dynamic context provides an implicit timezone value of  assume also that the xsdatetime template chosen is xxt the expression opgmonthequalxsgmonth xsgmonth returns false  the starting instants are t and t respectively and normalize to tz and tz  the expression opgmonthequalxsgmonth xsgmonthz returns false  opgdayequal summary returns true if the two xsgday values have the same starting instant when considered as days in the same month of the same year operator mapping defines the semantics of the eq operator when applied to two xsgday values also used in the definition of the ne operator signature opgdayequalarg as xsgday arg as xsgday as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the starting instants of arg and arg are calculated by supplying the missing components of arg and arg from the xsdatetime template xxt or an equivalent the function returns the result of comparing these two starting instants using opdatetimeequal examples assume that the dynamic context provides an implicit timezone value of  assume also that the xsdatetime template is xxt the expression opgdayequalxsgday xsgday returns false  the starting instants are t and t respectively and normalize to tz and tz  the expression opgdayequalxsgday xsgdayz returns false  component extraction functions on dates and times the date and time datatypes may be considered to be composite datatypes in that they contain distinct properties or components the extraction functions specified below extract a single component from a date or time value in all cases the local value that is the original value as written without any timezone adjustment is used note a time written as  is treated as  on the following day function meaning fnyearfromdatetime returns the year component of an xsdatetime fnmonthfromdatetime returns the month component of an xsdatetime fndayfromdatetime returns the day component of an xsdatetime fnhoursfromdatetime returns the hours component of an xsdatetime fnminutesfromdatetime returns the minute component of an xsdatetime fnsecondsfromdatetime returns the seconds component of an xsdatetime fntimezonefromdatetime returns the timezone component of an xsdatetime fnyearfromdate returns the year component of an xsdate fnmonthfromdate returns the month component of an xsdate fndayfromdate returns the day component of an xsdate fntimezonefromdate returns the timezone component of an xsdate fnhoursfromtime returns the hours component of an xstime fnminutesfromtime returns the minutes component of an xstime fnsecondsfromtime returns the seconds component of an xstime fntimezonefromtime returns the timezone component of an xstime  fnyearfromdatetime summary returns the year component of an xsdatetime signature fnyearfromdatetimearg as xsdatetime as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger representing the year component in the local value of arg the result may be negative examples the expression fnyearfromdatetimexsdatetimet returns  the expression fnyearfromdatetimexsdatetimet returns  the expression fnyearfromdatetimexsdatetimet returns  the expression fnyearfromdatetimexsdatetimet returns   fnmonthfromdatetime summary returns the month component of an xsdatetime signature fnmonthfromdatetimearg as xsdatetime as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger between  and  both inclusive representing the month component in the local value of arg examples the expression fnmonthfromdatetimexsdatetimet returns  the expression fnmonthfromdatetimexsdatetimet returns  the expression fnmonthfromdatetimefnadjustdatetimetotimezonexsdatetimet xsdaytimedurationpts returns   fndayfromdatetime summary returns the day component of an xsdatetime signature fndayfromdatetimearg as xsdatetime as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger between  and  both inclusive representing the day component in the local value of arg examples the expression fndayfromdatetimexsdatetimet returns  the expression fndayfromdatetimexsdatetimet returns  the expression fndayfromdatetimefnadjustdatetimetotimezonexsdatetimet xsdaytimedurationpts returns   fnhoursfromdatetime summary returns the hours component of an xsdatetime signature fnhoursfromdatetimearg as xsdatetime as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger between  and  both inclusive representing the hours component in the local value of arg examples the expression fnhoursfromdatetimexsdatetimet returns  the expression fnhoursfromdatetimexsdatetimet returns  the expression fnhoursfromdatetimefnadjustdatetimetotimezonexsdatetimet xsdaytimedurationpts returns  the expression fnhoursfromdatetimexsdatetimet returns  the expression fnhoursfromdatetimexsdatetimet returns   fnminutesfromdatetime summary returns the minute component of an xsdatetime signature fnminutesfromdatetimearg as xsdatetime as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger value between  and  both inclusive representing the minute component in the local value of arg examples the expression fnminutesfromdatetimexsdatetimet returns  the expression fnminutesfromdatetimexsdatetimet returns   fnsecondsfromdatetime summary returns the seconds component of an xsdatetime signature fnsecondsfromdatetimearg as xsdatetime as xsdecimal properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsdecimal value greater than or equal to zero and less than  representing the seconds and fractional seconds in the local value of arg examples the expression fnsecondsfromdatetimexsdatetimet returns   fntimezonefromdatetime summary returns the timezone component of an xsdatetime signature fntimezonefromdatetimearg as xsdatetime as xsdaytimeduration properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns the timezone component of arg if any if arg has a timezone component then the result is an xsdaytimeduration that indicates deviation from utc its value may range from  to  hours both inclusive if arg has no timezone component the result is the empty sequence examples the expression fntimezonefromdatetimexsdatetimet returns xsdaytimedurationpth the expression fntimezonefromdatetimexsdatetimetz returns xsdaytimedurationpts the expression fntimezonefromdatetimexsdatetimet returns   fnyearfromdate summary returns the year component of an xsdate signature fnyearfromdatearg as xsdate as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger representing the year in the local value of arg the value may be negative examples the expression fnyearfromdatexsdate returns  the expression fnyearfromdatexsdate returns   fnmonthfromdate summary returns the month component of an xsdate signature fnmonthfromdatearg as xsdate as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger between  and  both inclusive representing the month component in the local value of arg examples the expression fnmonthfromdatexsdate returns  the expression fnmonthfromdatexsdate returns   fndayfromdate summary returns the day component of an xsdate signature fndayfromdatearg as xsdate as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger between  and  both inclusive representing the day component in the localized value of arg examples the expression fndayfromdatexsdate returns  the expression fndayfromdatexsdate returns   fntimezonefromdate summary returns the timezone component of an xsdate signature fntimezonefromdatearg as xsdate as xsdaytimeduration properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns the timezone component of arg if any if arg has a timezone component then the result is an xsdaytimeduration that indicates deviation from utc its value may range from  to  hours both inclusive if arg has no timezone component the result is the empty sequence examples the expression fntimezonefromdatexsdate returns xsdaytimedurationpth the expression fntimezonefromdatexsdatez returns xsdaytimedurationpts  fnhoursfromtime summary returns the hours component of an xstime signature fnhoursfromtimearg as xstime as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger between  and  both inclusive representing the value of the hours component in the local value of arg examples assume that the dynamic context provides an implicit timezone value of  the expression fnhoursfromtimexstime returns  the expression fnhoursfromtimexstime returns  the expression fnhoursfromtimexstime returns  the expression fnhoursfromtimefnadjusttimetotimezonexstime xsdaytimedurationpts returns  the expression fnhoursfromtimexstime returns   fnminutesfromtime summary returns the minutes component of an xstime signature fnminutesfromtimearg as xstime as xsinteger properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsinteger value between  and  both inclusive representing the value of the minutes component in the local value of arg examples the expression fnminutesfromtimexstimez returns   fnsecondsfromtime summary returns the seconds component of an xstime signature fnsecondsfromtimearg as xstime as xsdecimal properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsdecimal value greater than or equal to zero and less than  representing the seconds and fractional seconds in the local value of arg examples the expression fnsecondsfromtimexstime returns   fntimezonefromtime summary returns the timezone component of an xstime signature fntimezonefromtimearg as xstime as xsdaytimeduration properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns the timezone component of arg if any if arg has a timezone component then the result is an xsdaytimeduration that indicates deviation from utc its value may range from  to  hours both inclusive if arg has no timezone component the result is the empty sequence examples the expression fntimezonefromtimexstime returns xsdaytimedurationpth the expression fntimezonefromtimexstime returns   timezone adjustment functions on dates and time values function meaning fnadjustdatetimetotimezone adjusts an xsdatetime value to a specific timezone or to no timezone at all fnadjustdatetotimezone adjusts an xsdate value to a specific timezone or to no timezone at all the result is the date in the target timezone that contains the starting instant of the supplied date fnadjusttimetotimezone adjusts an xstime value to a specific timezone or to no timezone at all these functions adjust the timezone component of an xsdatetime xsdate or xstime value the timezone argument to these functions is defined as an xsdaytimeduration but must be a valid timezone value  fnadjustdatetimetotimezone summary adjusts an xsdatetime value to a specific timezone or to no timezone at all signatures fnadjustdatetimetotimezonearg as xsdatetime as xsdatetime fnadjustdatetimetotimezone arg as xsdatetime timezone as xsdaytimeduration as xsdatetime properties the oneargument form of this function is deterministic contextdependent and focusindependent it depends on implicit timezone the twoargument form of this function is deterministic contextindependent and focusindependent rules if timezone is not specified then the effective value of timezone is the value of the implicit timezone in the dynamic context if arg is the empty sequence then the function returns the empty sequence if arg does not have a timezone component and timezone is the empty sequence then the result is arg if arg does not have a timezone component and timezone is not the empty sequence then the result is arg with timezone as the timezone component if arg has a timezone component and timezone is the empty sequence then the result is the local value of arg without its timezone component if arg has a timezone component and timezone is not the empty sequence then the result is the xsdatetime value that is equal to arg and that has a timezone component equal to timezone error conditions a dynamic error is raised errfodt if timezone is less than pth or greater than pth or is not an integral number of minutes examples assume the dynamic context provides an implicit timezone of  pthm let tz  xsdaytimedurationpth the expression fnadjustdatetimetotimezonexsdatetimet returns xsdatetimet the expression fnadjustdatetimetotimezonexsdatetimet returns xsdatetimet the expression fnadjustdatetimetotimezonexsdatetimet tz returns xsdatetimet the expression fnadjustdatetimetotimezonexsdatetimet tz returns xsdatetimet the expression fnadjustdatetimetotimezonexsdatetimet xsdaytimedurationpth returns xsdatetimet the expression fnadjustdatetimetotimezonexsdatetimet xsdaytimedurationpth returns xsdatetimet the expression fnadjustdatetimetotimezonexsdatetimet  returns xsdatetimet the expression fnadjustdatetimetotimezonexsdatetimet  returns xsdatetimet  fnadjustdatetotimezone summary adjusts an xsdate value to a specific timezone or to no timezone at all the result is the date in the target timezone that contains the starting instant of the supplied date signatures fnadjustdatetotimezonearg as xsdate as xsdate fnadjustdatetotimezone arg as xsdate timezone as xsdaytimeduration as xsdate properties the oneargument form of this function is deterministic contextdependent and focusindependent it depends on implicit timezone the twoargument form of this function is deterministic contextindependent and focusindependent rules if timezone is not specified then the effective value of timezone is the value of the implicit timezone in the dynamic context if arg is the empty sequence then the function returns the empty sequence if arg does not have a timezone component and timezone is the empty sequence then the result is the value of arg if arg does not have a timezone component and timezone is not the empty sequence then the result is arg with timezone as the timezone component if arg has a timezone component and timezone is the empty sequence then the result is the local value of arg without its timezone component if arg has a timezone component and timezone is not the empty sequence then the function returns the value of the expression let dt be the value of fndatetimearg xstime let adt be the value of fnadjustdatetimetotimezonedt timezone the function returns the value of xsdateadt error conditions a dynamic error is raised errfodt if timezone is less than pth or greater than pth or is not an integral number of minutes examples assume the dynamic context provides an implicit timezone of  pthm let tz  xsdaytimedurationpth the expression fnadjustdatetotimezonexsdate returns xsdate the expression fnadjustdatetotimezonexsdate returns xsdate arg is converted to xsdatetimet this is adjusted to the implicit timezone giving t  the expression fnadjustdatetotimezonexsdate tz returns xsdate the expression fnadjustdatetotimezonexsdate tz returns xsdate arg is converted to the xsdatetime t this is adjusted to the given timezone giving t  the expression fnadjustdatetotimezonexsdate  returns xsdate the expression fnadjustdatetotimezonexsdate  returns xsdate  fnadjusttimetotimezone summary adjusts an xstime value to a specific timezone or to no timezone at all signatures fnadjusttimetotimezonearg as xstime as xstime fnadjusttimetotimezone arg as xstime timezone as xsdaytimeduration as xstime properties the oneargument form of this function is deterministic contextdependent and focusindependent it depends on implicit timezone the twoargument form of this function is deterministic contextindependent and focusindependent rules if timezone is not specified then the effective value of timezone is the value of the implicit timezone in the dynamic context if arg is the empty sequence then the function returns the empty sequence if arg does not have a timezone component and timezone is the empty sequence then the result is arg if arg does not have a timezone component and timezone is not the empty sequence then the result is arg with timezone as the timezone component if arg has a timezone component and timezone is the empty sequence then the result is the localized value of arg without its timezone component if arg has a timezone component and timezone is not the empty sequence then let dt be the xsdatetime value fndatetimexsdate arg let adt be the value of fnadjustdatetimetotimezonedt timezone the function returns the xstime value xstimeadt error conditions a dynamic error is raised errfodt if timezone is less than pth or greater than pth or if does not contain an integral number of minutes examples assume the dynamic context provides an implicit timezone of  pthm let tz  xsdaytimedurationpth the expression fnadjusttimetotimezonexstime returns xstime the expression fnadjusttimetotimezonexstime returns xstime the expression fnadjusttimetotimezonexstime tz returns xstime the expression fnadjusttimetotimezonexstime tz returns xstime the expression fnadjusttimetotimezonexstime  returns xstime the expression fnadjusttimetotimezonexstime  returns xstime the expression fnadjusttimetotimezonexstime xsdaytimedurationpth returns xstime  arithmetic operators on durations dates and times these functions support adding or subtracting a duration value to or from an xsdatetime an xsdate or an xstime value appendix e of xml schema part  datatypes second edition describes an algorithm for performing such operations function meaning opsubtractdatetimes returns an xsdaytimeduration representing the amount of elapsed time between the instants arg and arg opsubtractdates returns the xsdaytimeduration that corresponds to the elapsed time between the starting instant of arg and the starting instant of arg opsubtracttimes returns the xsdaytimeduration that corresponds to the elapsed time between the values of arg and arg treated as times on the same date opaddyearmonthdurationtodatetime returns the xsdatetime that is a given duration after a specified xsdatetime or before if the duration is negative opadddaytimedurationtodatetime returns the xsdatetime that is a given duration after a specified xsdatetime or before if the duration is negative opsubtractyearmonthdurationfromdatetime returns the xsdatetime that is a given duration before a specified xsdatetime or after if the duration is negative opsubtractdaytimedurationfromdatetime returns the xsdatetime that is a given duration before a specified xsdatetime or after if the duration is negative opaddyearmonthdurationtodate returns the xsdate that is a given duration after a specified xsdate or before if the duration is negative opadddaytimedurationtodate returns the xsdate that is a given duration after a specified xsdate or before if the duration is negative opsubtractyearmonthdurationfromdate returns the xsdate that is a given duration before a specified xsdate or after if the duration is negative opsubtractdaytimedurationfromdate returns the xsdate that is a given duration before a specified xsdate or after if the duration is negative opadddaytimedurationtotime returns the xstime value that is a given duration after a specified xstime or before if the duration is negative or causes wraparound past midnight opsubtractdaytimedurationfromtime returns the xstime value that is a given duration before a specified xstime or after if the duration is negative or causes wraparound past midnight  limits and precision a processor that limits the number of digits in date and time datatype representations may encounter overflow and underflow conditions when it tries to execute the functions in this section in these situations the processor must return pm or pts in case of duration underflow and  in case of time underflow it must raise a dynamic error errfodt in case of overflow the value spaces of the two totally ordered subtypes of xsduration described in  two totally ordered subtypes of duration are xsinteger months for xsyearmonthduration and xsdecimal seconds for xsdaytimeduration if a processor limits the number of digits allowed in the representation of xsinteger and xsdecimal then overflow and underflow situations can arise when it tries to execute the functions in  arithmetic operators on durations in these situations the processor must return zero in case of numeric underflow and pm or pts in case of duration underflow it must raise a dynamic error errfodt in case of overflow  opsubtractdatetimes summary returns an xsdaytimeduration representing the amount of elapsed time between the instants arg and arg operator mapping defines the semantics of the  operator when applied to two xsdatetime values signature opsubtractdatetimes arg as xsdatetime arg as xsdatetime as xsdaytimeduration properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules if either arg or arg do not contain an explicit timezone then for the purpose of the operation the implicit timezone provided by the dynamic context see section c dynamic context components xp is assumed to be present as part of the value the function returns the elapsed time between the datetime instant arg and the datetime instant arg computed according to the algorithm given in appendix e of xml schema part  datatypes second edition and expressed as a xsdaytimeduration if the normalized value of arg precedes in time the normalized value of arg then the returned value is a negative duration examples assume that the dynamic context provides an implicit timezone value of  the expression opsubtractdatetimesxsdatetimet xsdatetimetz returns xsdaytimedurationpdthm  opsubtractdates summary returns the xsdaytimeduration that corresponds to the elapsed time between the starting instant of arg and the starting instant of arg operator mapping defines the semantics of the  operator when applied to two xsdate values signature opsubtractdatesarg as xsdate arg as xsdate as xsdaytimeduration properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules if either arg or arg do not contain an explicit timezone then for the purpose of the operation the implicit timezone provided by the dynamic context see section c dynamic context components xp is assumed to be present as part of the value the starting instant of an xsdate is the xsdatetime at  on that date the function returns the result of subtracting the two starting instants using opsubtractdatetimes if the starting instant of arg precedes in time the starting instant of arg then the returned value is a negative duration examples assume that the dynamic context provides an implicit timezone value of z the expression opsubtractdatesxsdate xsdate returns xsdaytimedurationpd the normalized values of the two starting instants are       pts and       pts now assume that the dynamic context provides an implicit timezone value of  the expression opsubtractdatesxsdate xsdatez returns xsdaytimedurationpdth  the normalized values of the two starting instants are       pts and       pts the expression opsubtractdatesxsdate xsdate returns xsdaytimedurationpdth  opsubtracttimes summary returns the xsdaytimeduration that corresponds to the elapsed time between the values of arg and arg treated as times on the same date operator mapping defines the semantics of the  operator when applied to two xstime values signature opsubtracttimesarg as xstime arg as xstime as xsdaytimeduration properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules the function returns the result of the expression opsubtractdatetimes        fndatetimexsdate arg        fndatetimexsdate arg notes any other reference date would work equally well examples assume that the dynamic context provides an implicit timezone value of  assume also that the date components of the reference xsdatetime correspond to  the expression opsubtracttimesxstimez xstime returns xsdaytimedurationpthm this is obtained by subtracting from the xsdatetime value       pts the xsdatetime value       pts the expression opsubtracttimesxstime xstime returns xsdaytimedurationpts the two xsdatetime values are       pth and       pthm these normalize to       pts and       pts  the expression opsubtracttimesxstime xstime returns xsdaytimedurationpd the two normalized xsdatetime values are       pts and       pts the expression opsubtracttimesxstime xstime returns xsdaytimedurationpthms the two normalized xsdatetime values are        and         opaddyearmonthdurationtodatetime summary returns the xsdatetime that is a given duration after a specified xsdatetime or before if the duration is negative operator mapping defines the semantics of the  operator when applied to an xsdatetime and an xsyearmonthduration value signature opaddyearmonthdurationtodatetime arg as xsdatetime arg as xsyearmonthduration as xsdatetime properties this function is deterministic contextindependent and focusindependent rules the function returns the result of adding arg to the value of arg using the algorithm described in appendix e of xml schema part  datatypes second edition disregarding the rule about leap seconds if arg is negative then the result xsdatetime precedes arg the result has the same timezone as arg if arg has no timezone the result has no timezone examples the expression opaddyearmonthdurationtodatetimexsdatetimet xsyearmonthdurationpym returns xsdatetimet  opadddaytimedurationtodatetime summary returns the xsdatetime that is a given duration after a specified xsdatetime or before if the duration is negative operator mapping defines the semantics of the  operator when applied to an xsdatetime and an xsdaytimeduration value signature opadddaytimedurationtodatetime arg as xsdatetime arg as xsdaytimeduration as xsdatetime properties this function is deterministic contextindependent and focusindependent rules the function returns the result of adding arg to the value of arg using the algorithm described in appendix e of xml schema part  datatypes second edition disregarding the rule about leap seconds if arg is negative then the result xsdatetime precedes arg the result has the same timezone as arg if arg has no timezone the result has no timezone examples the expression opadddaytimedurationtodatetimexsdatetimet xsdaytimedurationpdthm returns xsdatetimet  opsubtractyearmonthdurationfromdatetime summary returns the xsdatetime that is a given duration before a specified xsdatetime or after if the duration is negative operator mapping defines the semantics of the  operator when applied to an xsdatetime and an xsyearmonthduration value signature opsubtractyearmonthdurationfromdatetime arg as xsdatetime arg as xsyearmonthduration as xsdatetime properties this function is deterministic contextindependent and focusindependent rules the function returns the xsdatetime computed by negating arg and adding the result to the value of arg using the function opaddyearmonthdurationtodatetime examples the expression opsubtractyearmonthdurationfromdatetimexsdatetimet xsyearmonthdurationpym returns xsdatetimet  opsubtractdaytimedurationfromdatetime summary returns the xsdatetime that is a given duration before a specified xsdatetime or after if the duration is negative operator mapping defines the semantics of the  operator when applied to an xsdatetime an and xsdaytimeduration values signature opsubtractdaytimedurationfromdatetime arg as xsdatetime arg as xsdaytimeduration as xsdatetime rules the function returns the xsdatetime computed by negating arg and adding the result to the value of arg using the function opadddaytimedurationtodatetime examples the expression opsubtractdaytimedurationfromdatetimexsdatetimet xsdaytimedurationpdthm returns xsdatetimet  opaddyearmonthdurationtodate summary returns the xsdate that is a given duration after a specified xsdate or before if the duration is negative operator mapping defines the semantics of the  operator when applied to an xsdate and an xsyearmonthduration value signature opaddyearmonthdurationtodate arg as xsdate arg as xsyearmonthduration as xsdate properties this function is deterministic contextindependent and focusindependent rules the function returns the result of casting arg to an xsdatetime adding arg using the function opaddyearmonthdurationtodatetime and casting the result back to an xsdate examples the expression opaddyearmonthdurationtodatexsdate xsyearmonthdurationpym returns xsdate  opadddaytimedurationtodate summary returns the xsdate that is a given duration after a specified xsdate or before if the duration is negative operator mapping defines the semantics of the  operator when applied to an xsdate and an xsdaytimeduration value signature opadddaytimedurationtodate arg as xsdate arg as xsdaytimeduration as xsdate properties this function is deterministic contextindependent and focusindependent rules the function returns the result of casting arg to an xsdatetime adding arg using the function opadddaytimedurationtodatetime and casting the result back to an xsdate examples the expression opadddaytimedurationtodatexsdatez xsdaytimedurationpdthms returns xsdatez  the starting instant of the first argument is the xsdatetime value       pts adding the second argument to this gives the xsdatetime value       pts the time components are then discarded   opsubtractyearmonthdurationfromdate summary returns the xsdate that is a given duration before a specified xsdate or after if the duration is negative operator mapping defines the semantics of the  operator when applied to an xsdate and an xsyearmonthduration value signature opsubtractyearmonthdurationfromdate arg as xsdate arg as xsyearmonthduration as xsdate properties this function is deterministic contextindependent and focusindependent rules returns the xsdate computed by negating arg and adding the result to arg using the function opaddyearmonthdurationtodate examples the expression opsubtractyearmonthdurationfromdatexsdate xsyearmonthdurationpym returns xsdate the expression opsubtractyearmonthdurationfromdatexsdatez xsyearmonthdurationpy returns xsdatez the expression opsubtractyearmonthdurationfromdatexsdate xsyearmonthdurationpym returns xsdate  opsubtractdaytimedurationfromdate summary returns the xsdate that is a given duration before a specified xsdate or after if the duration is negative operator mapping defines the semantics of the  operator when applied to an xsdate and an xsdaytimeduration signature opsubtractdaytimedurationfromdate arg as xsdate arg as xsdaytimeduration as xsdate properties this function is deterministic contextindependent and focusindependent rules returns the xsdate computed by negating arg and adding the result to arg using the function opadddaytimedurationtodate examples the expression opsubtractdaytimedurationfromdatexsdate xsdaytimedurationpdthm returns xsdate  opadddaytimedurationtotime summary returns the xstime value that is a given duration after a specified xstime or before if the duration is negative or causes wraparound past midnight operator mapping defines the semantics of the  operator when applied to an xstime and an xsdaytimeduration value signature opadddaytimedurationtotime arg as xstime arg as xsdaytimeduration as xstime rules first the days component in the canonical lexical representation of arg is set to zero  and the value of the resulting xsdaytimeduration is calculated alternatively the value of arg modulus  is used as the second argument this value is added to the value of arg converted to an xsdatetime using a reference date such as  and the time component of the result is returned note that the xstime returned may occur in a following or preceding day and may be less than arg the result has the same timezone as arg if arg has no timezone the result has no timezone examples the expression opadddaytimedurationtotimexstime xsdaytimedurationpdthm returns xstime the expression opadddaytimedurationtotimexstime xsdaytimedurationpdthm returns xstime that is       pth  opsubtractdaytimedurationfromtime summary returns the xstime value that is a given duration before a specified xstime or after if the duration is negative or causes wraparound past midnight operator mapping defines the semantics of the  operator when applied to an xstime and an xsdaytimeduration value signature opsubtractdaytimedurationfromtime arg as xstime arg as xsdaytimeduration as xstime properties this function is deterministic contextindependent and focusindependent rules the function returns the result of negating arg and adding the result to arg using the function adddaytimedurationtotime examples the expression opsubtractdaytimedurationfromtimexstime xsdaytimedurationpdthm returns xstime the expression opsubtractdaytimedurationfromtimexstime xsdaytimedurationpdthm returns xstime  formatting dates and times function meaning fnformatdatetime returns a string containing an xsdatetime value formatted for display fnformatdate returns a string containing an xsdate value formatted for display fnformattime returns a string containing an xstime value formatted for display three functions are provided to represent dates and times as a string using the conventions of a selected calendar language and country the signatures are presented first followed by the rules which apply to each of the functions  fnformatdatetime summary returns a string containing an xsdatetime value formatted for display signatures fnformatdatetimevalue as xsdatetime picture as xsstring as xsstring fnformatdatetime value as xsdatetime picture as xsstring language as xsstring calendar as xsstring place as xsstring as xsstring properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on default calendar and default language and default place and implicit timezone the fiveargument form of this function is deterministic contextdependent and focusindependent it depends on implicit timezone and namespaces rules see  the datetime formatting functions  fnformatdate summary returns a string containing an xsdate value formatted for display signatures fnformatdatevalue as xsdate picture as xsstring as xsstring fnformatdate value as xsdate picture as xsstring language as xsstring calendar as xsstring place as xsstring as xsstring properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on default calendar and default language and default place and implicit timezone the fiveargument form of this function is deterministic contextdependent and focusindependent it depends on implicit timezone and namespaces rules see  the datetime formatting functions  fnformattime summary returns a string containing an xstime value formatted for display signatures fnformattimevalue as xstime picture as xsstring as xsstring fnformattime value as xstime picture as xsstring language as xsstring calendar as xsstring place as xsstring as xsstring properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on default calendar and default language and default place and implicit timezone the fiveargument form of this function is deterministic contextdependent and focusindependent it depends on implicit timezone and namespaces rules see  the datetime formatting functions  the datetime formatting functions the fnformatdatetime fnformatdate and fnformattime functions format value as a string using the picture string specified by the picture argument the calendar specified by the calendar argument the language specified by the language argument and the country or other place name specified by the place argument the result of the function is the formatted string representation of the supplied xsdatetime xsdate or xstime value definition the three functions fnformatdatetime fnformatdate and fnformattime are referred to collectively as the date formatting functions if value is the empty sequence the function returns the empty sequence calling the twoargument form of each of the three functions is equivalent to calling the fiveargument form with each of the last three arguments set to an empty sequence for details of the language calendar and place arguments see  the language calendar and place arguments in general the use of an invalid picture language calendar or place argument results in a dynamic error errfofd by contrast use of an option in any of these arguments that is valid but not supported by the implementation is not an error and in these cases the implementation is required to output the value in a fallback representation more detailed rules are given below  the picture string the picture consists of a sequence of variable markers and literal substrings a substring enclosed in square brackets is interpreted as a variable marker substrings not enclosed in square brackets are taken as literal substrings the literal substrings are optional and if present are rendered unchanged including any whitespace if an opening or closing square bracket is required within a literal substring it must be doubled the variable markers are replaced in the result by strings representing aspects of the date andor time to be formatted these are described in detail below a variable marker consists of a component specifier followed optionally by one or two presentation modifiers andor optionally by a width modifier whitespace within a variable marker is ignored the variable marker may be separated into its components by applying the following rules the component specifier is always present and is always a single letter the width modifier may be recognized by the presence of a comma the substring between the component specifier and the comma if present or the end of the string if there is no comma contains the first and second presentation modifiers both of which are optional if this substring contains a single character this is interpreted as the first presentation modifier if it contains more than one character the last character is examined if it is valid as a second presentation modifier then it is treated as such and the preceding part of the substring constitutes the first presentation modifier otherwise the second presentation modifier is presumed absent and the whole substring is interpreted as the first presentation modifier the component specifier indicates the component of the date or time that is required and takes the following values specifier meaning default presentation modifier y year absolute value  m month in year  d day in month  d day in year  f day of week n w week in year  w week in month  h hour in day  hours  h hour in halfday  hours  p ampm marker n m minute in hour  s second in minute  f fractional seconds  z timezone  z timezone same as z but modified where appropriate to include a prefix as a time offset using gmt for example gmt or gmt for this component there is a fixed prefix of gmt or a localized variation thereof for the chosen language and the remainder of the value is formatted as for specifier z  c calendar the name or abbreviation of a calendar name n e era the name of a baseline for the numbering of years for example the reign of a monarch n a dynamic error is reported errfofd if the syntax of the picture is incorrect a dynamic error is reported errfofd if a component specifier within the picture refers to components that are not available in the given type of value for example if the picture supplied to the fnformattime refers to the year month or day component it is not an error to include a timezone component when the supplied value has no timezone in these circumstances the timezone component will be ignored the first presentation modifier indicates the style in which the value of a component is to be represented its value may be either any format token permitted as a primary format token in the second argument of the fnformatinteger function indicating that the value of the component is to be output numerically using the specified number format for example   i i w w or ww or the format token n n or nn indicating that the value of the component is to be output by name in lowercase uppercase or titlecase respectively components that can be output by name include but are not limited to months days of the week timezones and eras if the processor cannot output these components by name for the chosen calendar and language then it must use an implementationdefined fallback representation if a comma is to be used as a grouping separator within the format token then there must be a width specifier more specifically if a variable marker contains one or more commas then the last comma is treated as introducing the width modifier and all others are treated as grouping separators so y will output the year as  if the implementation does not support the use of the requested format token it must use the default presentation modifier for that component if the first presentation modifier is present then it may optionally be followed by a second presentation modifier as follows modifier meaning either a or t indicates alphabetic or traditional numbering respectively the default being implementationdefined this has the same meaning as in the second argument of fnformatinteger either c or o indicates cardinal or ordinal numbering respective for example  or seven for a cardinal number or th seventh or  for an ordinal number this has the same meaning as in the second argument of fnformatinteger the actual representation of the ordinal form of a number may depend not only on the language but also on the grammatical context for example in some languages it must agree in gender note although the formatting rules are expressed in terms of the rules for format tokens in fnformatinteger the formats actually used may be specialized to the numbering of date components where appropriate for example in italian it is conventional to use an ordinal number primo for the first day of the month and cardinal numbers due tre quattro  for the remaining days a processor may therefore use this convention to number days of the month ignoring the presence or absence of the ordinal presentation modifier whether or not a presentation modifier is included a width modifier may be supplied this indicates the number of characters or digits to be included in the representation of the value the width modifier if present is introduced by a comma or semicolon it takes the form  minwidth  maxwidth where minwidth is either an unsigned integer indicating the minimum number of characters to be output or  indicating that there is no explicit minimum and maxwidth is either an unsigned integer indicating the maximum number of characters to be output or  indicating that there is no explicit maximum if maxwidth is omitted then  is assumed both integers if present must be greater than zero a format token containing more than one digit such as  or  sets the minimum and maximum width to the number of digits appearing in the format token if a width modifier is also present then the width modifier takes precedence a numeric format token may contain optionaldigitsigns and groupingseparators as described for fnformatinteger however the grouping separator cannot be a closing square bracket  note a format token consisting of a single digit such as  does not constrain the number of digits in the output in the case of fractional seconds in particular f requests three decimal digits f requests two digits but f will produce an implementationdefined number of digits if exactly one digit is required this can be achieved using the component specifier f if the minimum and maximum width are unspecified then the output uses as many characters as are required to represent the value of the component without truncation and without padding this is referred to below as the full representation of the value for a timezone offset component specifier z the full representation consists of a sign for the offset the number of hours of the offset and if the offset is not an integral number of hours a colon  followed by the two digits of the minutes of the offset if the full representation of the value exceeds the specified maximum width then the processor should attempt to use an alternative shorter representation that fits within the maximum width where the presentation modifier is n n or nn this is done by abbreviating the name using either conventional abbreviations if available or crude righttruncation if not for example setting maxwidth to  indicates that fourletter abbreviations should be used though it would be acceptable to use a threeletter abbreviation if this is in conventional use for example tuesday might be abbreviated to tues and friday to fri in the case of the year component setting maxwidth requests omission of highorder digits from the year for example if maxwidth is set to  then the year  will be output as  in the case of the fractional seconds component the value is rounded to the specified size as if by applying the function roundhalftoevenfractionalseconds maxwidth if no mechanism is available for fitting the value within the specified maximum width for example when roman numerals are used then the value should be output in its full representation if the full representation of the value is shorter than the specified minimum width then the processor should pad the value to the specified width for decimal representations of numbers this should be done by prepending zero digits from the appropriate set of digit characters or appending zero digits in the case of the fractional seconds component for timezone offsets this should be done by first appending a colon  followed by two zero digits from the appropriate set of digit characters if the full representation does not already include a minutes component and if the specified minimum width permits adding three characters and then if necessary prepending zero digits from the appropriate set of digit characters to the hour component in other cases it should be done by appending spaces  formatting timezones special rules apply to the formatting of timezones when the component specifiers z or z are used the rules in this section override any rules given elsewhere in the case of discrepancies if the datetime value to be formatted does not include a timezone offset then the timezone component specifier is generally ignored results in no output the exception is where military timezones are used format zz in which case the string j is output indicating local time when the component specifier is z the output is the same as for component specifier z except that it is prefixed by the characters gmt or some localized equivalent the prefix is omitted however in cases where the timezone is identified by name rather than by a numeric offset from utc if the first presentation modifier is numeric and comprises one or two digits with no groupingseparator for example  or  then the timezone is formatted as a displacement from utc in hours preceded by a plus or minus sign for example  or  if the actual timezone offset is not an integral number of hours then the minutes part of the offset is appended separated by a colon for example  or  if the first presentation modifier is numeric with a groupingseparator for example  or  then the timezone offset is output in hours and minutes separated by the grouping separator even if the number of minutes is zero for example  or  if the first presentation modifier is numeric and comprises three or four digits with no groupingseparator for example  or  then the timezone offset is shown in hours and minutes with no separator for example  or  if the first presentation modifier is numeric in any of the above formats and the second presentation modifier is t then a zero timezone offset that is utc is output as z instead of a signed numeric value in this presentation modifier is absent or if the timezone offset is nonzero then the displayed timezone offset is preceded by a  sign for negative offsets or a  sign for nonnegative offsets if the first presentation modifier is z then the timezone is formatted as a military timezone letter using the convention z   a   b    m   n   o    y   the letter j meaning local time is used in the case of a value that does not specify a timezone offset timezone offsets that have no representation in this system for example indian standard time  are output as if the format  had been requested if the first presentation modifier is n then the timezone is output where possible as a timezone name for example est or cet the same timezone offset has different names in different places it is therefore recommended that this option should be used only if a country code or olson timezone name is supplied in the place argument in the absence of this information the implementation may apply a default for example by using the timezone names that are conventional in north america if no timezone name can be identified the timezone offset is output using the fallback format  the following examples illustrate options for timezone formatting variable marker place timezone offsets with time        z       z       z       z       z       zt    z   z  gmt gmt gmt gmt gmt zz  w r z   zn us hst est gmt ist  hm zn americanew_york  est  est  est  est  est  the language calendar and place arguments the set of languages calendars and places that are supported in the date formatting functions is implementationdefined when any of these arguments is omitted or is an empty sequence an implementationdefined default value is used if the fallback representation uses a different calendar from that requested the output string must identify the calendar actually used for example by prefixing the string with calendar x where x is the calendar actually used localized as appropriate to the requested language if the fallback representation uses a different language from that requested the output string must identify the language actually used for example by prefixing the string with language y where y is the language actually used localized in an implementationdependent way if a particular component of the value cannot be output in the requested format it should be output in the default format for that component the language argument specifies the language to be used for the result string of the function the value of the argument should be either the empty sequence or a value that would be valid for the xmllang attribute see xml note that this permits the identification of sublanguages based on country codes from iso  as well as identification of dialects and of regions within a country if the language argument is omitted or is set to an empty sequence or if it is set to an invalid value or a value that the implementation does not recognize then the processor uses the default language defined in the dynamic context the language is used to select the appropriate languagedependent forms of names for example of months numbers expressed as words or as ordinals twenty th twentieth hour convention  vs   vs  first day of week first week of year where appropriate this choice may also take into account the value of the place argument though this should not be used to override the language or any sublanguage that is specified as part of the language argument the choice of the names and abbreviations used in any given language is implementationdefined for example one implementation might abbreviate july as jul while another uses jly in german one implementation might represent saturday as samstag while another uses sonnabend implementations may provide mechanisms allowing users to control such choices where ordinal numbers are used the selection of the correct representation of the ordinal for example the linguistic gender may depend on the component being formatted and on its textual context in the picture string the calendar attribute specifies that the datetime date or time supplied in the value argument must be converted to a value in the specified calendar and then converted to a string using the conventions of that calendar the calendar value if present must be a valid eqname dynamic error errfofd if it is a lexical qname then it is expanded into an expanded qname using the statically known namespaces if it has no prefix then it represents an expandedqname in no namespace if the expanded qname is in no namespace then it must identify a calendar with a designator specified below dynamic error errfofd if the expanded qname is in a namespace then it identifies the calendar in an implementationdefined way if the calendar argument is omitted or is set to an empty sequence then the default calendar defined in the dynamic context is used note the calendars listed below were known to be in use during the last hundred years many other calendars have been used in the past this specification does not define any of these calendars nor the way that they map to the value space of the xsdate data type in xml schema part  datatypes second edition there may be ambiguities when dates are recorded using different calendars for example the start of a new day is not simultaneous in different calendars and may also vary geographically for example based on the time of sunrise or sunset translation of dates is therefore more reliable when the time of day is also known and when the geographic location is known when translating dates between one calendar and another the processor may take account of the values of the place andor language arguments with the place argument taking precedence information about some of these calendars and algorithms for converting between them may be found in calendrical calculations designator calendar ad anno domini christian era ah anno hegirae muhammedan era ame mauludi era solar years since mohammeds birth am anno mundi jewish calendar ap anno persici as aji saka era java be buddhist era cb cooch behar era ce common era cl chinese lunar era cs chula sakarat era ee ethiopian era fe fasli era iso iso  calendar je japanese calendar ke khalsa era sikh calendar ky kali yuga me malabar era ms monarchic solar era ns nepal samwat era os old style julian calendar rs rattanakosin bangkok era se saka era sh mohammedan solar era iran ss saka samvat te tripurabda era ve vikrama era vs vikrama samvat era at least one of the above calendars must be supported it is implementationdefined which calendars are supported the iso  calendar iso  which is included in the above list and designated iso is very similar to the gregorian calendar designated ad but it differs in several ways the iso calendar is intended to ensure that date and time formats can be read easily by other software as well as being legible for human users the iso calendar prescribes the use of particular numbering conventions as defined in iso  rather than allowing these to be localized on a perlanguage basis in particular it provides a numeric week date format which identifies dates by year week of the year and day in the week in the iso calendar the days of the week are numbered from  monday to  sunday and week  in any calendar year is the week from monday to sunday that includes the first thursday of that year the numeric values of the components year month day hour minute and second are the same in the iso calendar as the values used in the lexical representation of the date and time as defined in xml schema part  datatypes second edition the era e component with this calendar is either a minus sign for negative years or a zerolength string for positive years for dates before  january ad  year numbers in the iso and ad calendars are off by one from each other iso year  is  bc  is  bc etc iso  does not define a numbering for weeks within a month when the w component is used the convention to be adopted is that each mondaytosunday week is considered to fall within a particular month if its thursday occurs in that month the weeks that fall in a particular month under this definition are numbered starting from  thus for example  january  falls in week  because the thursday of the week  january  is the fifth thursday in january and  february  is also in week  for the same reason note the value space of the date and time data types as defined in xml schema is based on absolute points in time the lexical space of these data types defines a representation of these absolute points in time using the proleptic gregorian calendar that is the modern western calendar extrapolated into the past and the future but the value space is calendarneutral the date formatting functions produce a representation of this absolute point in time but denoted in a possibly different calendar so for example the date whose lexical representation in xml schema is  the day on which pope gregory xiii was born might be formatted using the old style julian calendar as  january  this reflects the fact that there was at that time a tenday difference between the two calendars it would be incorrect and would produce incorrect results to represent this date in an element or attribute of type xsdate as  even though this might reflect the way the date was recorded in contemporary documents when referring to years occurring in antiquity modern historians generally use a numbering system in which there is no year zero the year before  ce is thus  bce this is the convention that should be used when the requested calendar is os julian or ad gregorian when the requested calendar is iso however the conventions of iso  should be followed here the year before  is numbered zero in xml schema part  datatypes second edition version  the value space for xsdate and xsdatetime does not include a year zero however xsd  endorses the iso  convention this means that the date on which julius caesar was assassinated has the iso  lexical representation  but will be formatted as  march  bce in the julian calendar or  march  bce in the gregorian calendar dependant on the chosen localization of the names of months and eras the intended use of the place argument is to identify the place where an event represented by the datetime date or time supplied in the value argument took place or will take place if the place argument is omitted or is set to an empty sequence then the default place defined in the dynamic context is used if the value is supplied and is not the empty sequence then it should either be a country code or an olson timezone name if the value does not take this form or if its value is not recognized by the implementation then the default place defined in the dynamic context is used country codes are defined in iso  examples are de for germany and jp for japan implementations may also allow the use of codes representing subdivisions of a country from iso  or codes representing formerly used names of countries from iso  olson timezone names are defined in the publicdomain tz timezone database olson timezone database examples are americanew_york and europerome this argument is not intended to identify the location of the user for whom the date or time is being formatted that should be done by means of the language attribute this information may be used to provide additional information when converting dates between calendars or when deciding how individual components of the date and time are to be formatted for example different countries using the old style julian calendar started the new year on different days and some countries used variants of the calendar that were out of synchronization as a result of differences in calculating leap years the geographical area identified by a country code is defined by the boundaries as they existed at the time of the date to be formatted or the presentday boundaries for dates in the future if the place argument is supplied in the form of an olson timezone name that is recognized by the implementation then the date or time being formatted is adjusted to the timezone offset applicable in that timezone for example if the xsdatetime value tz is formatted with the place argument set to americanew_york then the output will be as if the value t had been supplied this adjustment takes daylight savings time into account where possible if the date in question falls during daylight savings time in new york then it is adjusted to timezone offset pth rather than pth adjustment using daylight savings time is only possible where the value includes a date and where the date is within the range covered by the timezone database  examples of date and time formatting example gregorian calendar the following examples show a selection of dates and times and the way they might be formatted these examples assume the use of the gregorian calendar as the default calendar required output expression  formatdated ymd  formatdated mdy  formatdated dmy  xii  formatdated d mi y st december  formatdated do mnn y en    dec  formatdated d mn y en   december   formatdated mnn d y en    dezember  formatdated d mnn y de   tisdag  december  formatdated fnn d mnn y sv    formatdated ymd two thousand and three formatdated yww en   einunddreiigste dezember formatdated dwo mnn de    pm formattimet hm pn en    pm formattimet hms pn en    pm pdt formattimet hms pn zn en    oclock pm pdt formattimet hms oclock pn zn en    formattimethm  formattimethmsf  gmt formattimethms z en    uhr gmt formattimethm uhr z de   pm on tuesday st december formatdatetimedt hmpn on fnn do mnn  at  formatdatetimedt mdy at hms example nongregorian calendars the following examples use calendars other than the gregorian calendar these examples use nonlatin characters which might not display correctly in all browsers depending on the system configuration description request result islamic formatdated dx mn yx ar ah     jewish with western numbering formatdated d mn y he am     jewish with traditional numbering formatdated dxdt mn yxdt he am     julian old style formatdated d mnn y en os   december  thai formatdated dxe mn yxe th be      functions related to qnames  functions to create a qname in addition to the xsqname constructor function qname values can be constructed by combining a namespace uri prefix and local name or by resolving a lexical qname against the inscope namespaces of an element node this section defines these functions leading and trailing whitespace if present is stripped from string arguments before the result is constructed function meaning fnresolveqname returns an xsqname value that is an expandedqname by taking an xsstring that has the lexical form of an xsqname a string in the form prefixlocalname or localname and resolving it using the inscope namespaces for a given element fnqname constructs an xsqname value given a namespace uri and a lexical qname  fnresolveqname summary returns an xsqname value that is an expandedqname by taking an xsstring that has the lexical form of an xsqname a string in the form prefixlocalname or localname and resolving it using the inscope namespaces for a given element signature fnresolveqnameqname as xsstring element as element as xsqname properties this function is deterministic contextindependent and focusindependent rules if qname is the empty sequence returns the empty sequence more specifically the function searches the namespace bindings of element for a binding whose name matches the prefix of qname or the zerolength string if it has no prefix and constructs an expandedqname whose local name is taken from the supplied qname and whose namespace uri is taken from the string value of the namespace binding if the qname has no prefix and there is no namespace binding for element corresponding to the default unnamed namespace then the resulting expandedqname has no namespace part the prefix or absence of a prefix in the supplied qname argument is retained in the returned expandedqname as discussed in section  terminology dm error conditions a dynamic error is raised errfoca if qname does not have the correct lexical form for an instance of xsqname a dynamic error is raised errfons if qname has a prefix and there is no namespace binding for element that matches this prefix notes sometimes the requirement is to construct an xsqname without using the default namespace this can be achieved by writing  if containsqname  then fnresolveqnameqname element else            fnqname qname if the requirement is to construct an xsqname using the namespaces in the static context then the xsqname constructor should be used examples assume that the element bound to element has a single namespace binding bound to the prefix eg fnresolveqnamehello element returns a qname with local name hello that is in no namespace fnresolveqnameegmyfunc element returns an xsqname whose namespace uri is specified by the namespace binding corresponding to the prefix eg and whose local name is myfunc  fnqname summary constructs an xsqname value given a namespace uri and a lexical qname signature fnqnameparamuri as xsstring paramqname as xsstring as xsqname properties this function is deterministic contextindependent and focusindependent rules the namespace uri in the returned qname is taken from paramuri if paramuri is the zerolength string or the empty sequence it represents no namespace the prefix or absence of a prefix in paramqname is retained in the returned xsqname value the local name in the result is taken from the local part of paramqname error conditions a dynamic error is raised errfoca if paramqname does not have the correct lexical form for an instance of xsqname a dynamic error is raised errfoca if paramuri is the zerolength string or the empty sequence and the value of paramqname contains a colon  a dynamic error may be raised errfoca if paramuri is not a valid uri xml namespaces  or iri xml namespaces  notes examples fnqnamehttpwwwexamplecomexample person returns an xsqname with namespace uri  httpwwwexamplecomexample local name  person and prefix   fnqnamehttpwwwexamplecomexample htperson returns an xsqname with namespace uri  httpwwwexamplecomexample local name  person and prefix  ht  functions and operators related to qnames this section specifies functions on qnames as defined in xml schema part  datatypes second edition function meaning opqnameequal returns true if two supplied qnames have the same namespace uri and the same local part fnprefixfromqname returns the prefix component of the supplied qname fnlocalnamefromqname returns the local part of the supplied qname fnnamespaceurifromqname returns the namespace uri part of the supplied qname fnnamespaceuriforprefix returns the namespace uri of one of the inscope namespaces for element identified by its namespace prefix fninscopeprefixes returns the prefixes of the inscope namespaces for an element node  opqnameequal summary returns true if two supplied qnames have the same namespace uri and the same local part operator mapping defines the semantics of the eq and ne operators when applied to two values of type xsqname signature opqnameequalarg as xsqname arg as xsqname as xsboolean properties this function is deterministic contextindependent and focusindependent rules the function returns true if the namespace uris of arg and arg are equal and the local names of arg and arg are equal otherwise the function returns false the namespace uri parts are considered equal if they are both absentdm or if they are both present and equal under the rules of the fncodepointequal function the local parts are also compared under the rules of the fncodepointequal function notes the prefix parts of arg and arg if any are ignored  fnprefixfromqname summary returns the prefix component of the supplied qname signature fnprefixfromqnamearg as xsqname as xsncname properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence if arg has no prefix component the function returns the empty sequence otherwise the function returns an xsncname representing the prefix component of arg  fnlocalnamefromqname summary returns the local part of the supplied qname signature fnlocalnamefromqnamearg as xsqname as xsncname properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsncname representing the local part of arg examples the expression fnlocalnamefromqnamefnqnamehttpwwwexamplecomexample person returns person  fnnamespaceurifromqname summary returns the namespace uri part of the supplied qname signature fnnamespaceurifromqnamearg as xsqname as xsanyuri properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the function returns the empty sequence otherwise the function returns an xsanyuri representing the namespace uri part of arg if arg is in no namespace the function returns the zerolength xsanyuri examples the expression fnnamespaceurifromqnamefnqnamehttpwwwexamplecomexample person returns xsanyurihttpwwwexamplecomexample  fnnamespaceuriforprefix summary returns the namespace uri of one of the inscope namespaces for element identified by its namespace prefix signature fnnamespaceuriforprefix prefix as xsstring element as element as xsanyuri properties this function is deterministic contextindependent and focusindependent rules if element has an inscope namespace whose namespace prefix is equal to prefix the function returns the namespace uri of that namespace if element has no inscope namespace whose namespace prefix is equal to prefix the function returns the empty sequence if prefix is the zerolength string or the empty sequence then if element has a default namespace that is a namespace node with no name the function returns the namespace uri of the default namespace if element has no default namespace the function returns the empty sequence prefixes are equal only if their unicode codepoints match exactly examples let e  za xmlnshttpexampleorgone xmlnszhttpexampleorgtwo  b xmlnsza the expression fnnamespaceuriforprefixz e returns httpexampleorgtwo the expression fnnamespaceuriforprefix e returns httpexampleorgone the expression fnnamespaceuriforprefix e returns httpexampleorgone the expression fnnamespaceuriforprefixxml e returns httpwwwworgxmlnamespace the expression fnnamespaceuriforprefixxml e returns httpwwwworgxmlnamespace  fninscopeprefixes summary returns the prefixes of the inscope namespaces for an element node signature fninscopeprefixeselement as element as xsstring properties this function is deterministic contextindependent and focusindependent rules the function returns a sequence of strings representing the prefixes of the inscope namespaces for element for namespace bindings that have a prefix the function returns the prefix as an xsncname for the default namespace which has no prefix it returns the zerolength string the result sequence contains no duplicates the ordering of the result sequence is implementationdependent  operators on basebinary and hexbinary  comparisons of basebinary and hexbinary values the following comparison operators on xsbasebinary and xshexbinary values are defined comparisons take two operands of the same type that is both operands must be xsbasebinary or both operands may be xshexbinary each returns a boolean value a value of type xshexbinary can be compared with a value of type xsbasebinary by casting one value to the other type see  casting to xsbasebinary and xshexbinary function meaning ophexbinaryequal returns true if two xshexbinary values contain the same octet sequence opbasebinaryequal returns true if two xsbasebinary values contain the same octet sequence  ophexbinaryequal summary returns true if two xshexbinary values contain the same octet sequence operator mapping defines the semantics of the eq and ne operators when applied to two xshexbinary values signature ophexbinaryequal value as xshexbinary value as xshexbinary as xsboolean rules the function returns true if value and value are of the same length measured in binary octets and contain the same octets in the same order otherwise it returns false  opbasebinaryequal summary returns true if two xsbasebinary values contain the same octet sequence operator mapping defines the semantics of the eq and ne operators when applied to two xsbasebinary values signature opbasebinaryequal value as xsbasebinary value as xsbasebinary as xsboolean rules the function returns true if value and value are of the same length measured in binary octets and contain the same octets in the same order otherwise it returns false  operators on notation this section specifies operators that take xsnotation values as arguments function meaning opnotationequal returns true if the two xsnotation values have the same namespace uri and the same local part  opnotationequal summary returns true if the two xsnotation values have the same namespace uri and the same local part operator mapping defines the semantics of the eq and ne operators when applied to two values of type xsnotation signature opnotationequalarg as xsnotation arg as xsnotation as xsboolean rules the function returns true if the namespace uris of arg and arg are equal and the local names of arg and arg are equal otherwise the function returns false the namespace uri parts are considered equal if they are both absentdm or if they are both present and equal under the rules of the fncodepointequal function the local parts are also compared under the rules of the fncodepointequal function notes the prefix parts of arg and arg if any are ignored  functions and operators on nodes this section specifies functions and operators on nodes nodes are formally defined in section  nodes dm function meaning fnname returns the name of a node as an xsstring that is either the zerolength string or has the lexical form of an xsqname fnlocalname returns the local part of the name of arg as an xsstring that is either the zerolength string or has the lexical form of an xsncname fnnamespaceuri returns the namespace uri part of the name of arg as an xsanyuri value fnlang this function tests whether the language of node or the context item if the second argument is omitted as specified by xmllang attributes is the same as or is a sublanguage of the language specified by testlang opissamenode returns true if the two arguments refer to the same node opnodebefore returns true if the node identified by the first argument precedes the node identified by the second argument in document order opnodeafter returns true if the node identified by the first argument follows the node identified by the second argument in document order fnroot returns the root of the tree to which arg belongs this will usually but not necessarily be a document node fnpath returns a path expression that can be used to select the supplied node relative to the root of its containing document fnhaschildren returns true if the supplied node has one or more child nodes of any kind fninnermost returns every node within the input sequence that is not an ancestor of another member of the input sequence the nodes are returned in document order with duplicates eliminated fnoutermost returns every node within the input sequence that has no ancestor that is itself a member of the input sequence the nodes are returned in document order with duplicates eliminated for the illustrative examples below assume an xquery or transformation operating on a purchaseorder document containing a number of lineitem elements each lineitem has child elements called description price quantity etc whose content is different for each lineitem quantity has simple content of type xsdecimal further assume that variables item item etc are each bound to single lineitem element nodes in the document in sequence and that the value of the quantity child of the first lineitem is  let po  purchaseorder  lineitem    descriptionlarge widgetdescription    priceprice    quantityquantity  lineitem  lineitem    descriptionsmall widgetdescription    priceprice    quantityquantity  lineitem  lineitem    descriptiontiny widgetdescription    priceprice    quantityquantity  lineitempurchaseorder let item  polineitem let item  polineitem let item  polineitem  fnname summary returns the name of a node as an xsstring that is either the zerolength string or has the lexical form of an xsqname signatures fnname as xsstring fnnamearg as node as xsstring properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context item  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument if the argument is supplied and is the empty sequence the function returns the zerolength string if the node identified by arg has no name that is if it is a document node a comment a text node or a namespace node having no name the function returns the zerolength string otherwise the function returns the value of the expression fnstringfnnodenamearg error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp  fnlocalname summary returns the local part of the name of arg as an xsstring that is either the zerolength string or has the lexical form of an xsncname signatures fnlocalname as xsstring fnlocalnamearg as node as xsstring properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context item  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument if the argument is supplied and is the empty sequence the function returns the zerolength string if the node identified by arg has no name that is if it is a document node a comment a text node or a namespace node having no name the function returns the zerolength string otherwise the function returns the local part of the expandedqname of the node identified by arg as determined by the dmnodename accessor defined in section  nodename accessor dm this will be an xsstring whose lexical form is an xsncname error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp  fnnamespaceuri summary returns the namespace uri part of the name of arg as an xsanyuri value signatures fnnamespaceuri as xsanyuri fnnamespaceuriarg as node as xsanyuri properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context node  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument if the node identified by arg is neither an element nor an attribute node or if it is an element or attribute node whose expandedqname as determined by the dmnodename accessor in the section  nodename accessor dm is in no namespace then the function returns the zerolength xsanyuri value otherwise the result will be the namespace uri part of the expandedqname of the node identified by arg as determined by the dmnodename accessor defined in section  nodename accessor dm returned as an xsanyuri value error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp  fnlang summary this function tests whether the language of node or the context item if the second argument is omitted as specified by xmllang attributes is the same as or is a sublanguage of the language specified by testlang signatures fnlangtestlang as xsstring as xsboolean fnlangtestlang as xsstring node as node as xsboolean properties the oneargument form of this function is deterministic contextdependent and focusdependent the twoargument form of this function is deterministic contextindependent and focusindependent rules the behavior of the function if the second argument is omitted is exactly the same as if the context item  had been passed as the second argument the language of the argument node or the context item if the second argument is omitted is determined by the value of the xmllang attribute on the node or if the node has no such attribute by the value of the xmllang attribute on the nearest ancestor of the node that has an xmllang attribute if there is no such ancestor then the function returns false if testlang is the empty sequence it is interpreted as the zerolength string the relevant xmllang attribute is determined by the value of the xpath expression ancestororself@xmllanglast if this expression returns an empty sequence the function returns false otherwise the function returns true if and only if based on a caseless default match as specified in section  of the unicode standard either testlang is equal to the stringvalue of the relevant xmllang attribute or testlang is equal to some substring of the stringvalue of the relevant xmllang attribute that starts at the start of the stringvalue and ends immediately before a hyphen  the character  is hyphenminus xd error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp examples the expression fnlangen would return true if the context node were any of the following four elements para xmllangen div xmllangenparaand now and foreverparadiv para xmllangen para xmllangenus the expression fnlangfr would return false if the context node were para xmllangen  opissamenode summary returns true if the two arguments refer to the same node operator mapping defines the semantics of the is operator when applied to two nodes signature opissamenodearg as node arg as node as xsboolean rules if the node identified by the value of arg is the same node as the node identified by the value of arg that is the two nodes have the same identity then the function returns true otherwise the function returns false examples the expression opissamenodeitem item returns true the expression opissamenodeitem item returns false  opnodebefore summary returns true if the node identified by the first argument precedes the node identified by the second argument in document order operator mapping defines the semantics of the  operator when applied to two nodes signature opnodebeforearg as node arg as node as xsboolean rules if the node identified by the value of arg occurs in document order before the node identified by the value of arg then the function returns true otherwise it returns false the rules determining the order of nodes within a single document and in different documents can be found in section  document order dm examples the expression opnodebeforeitem item returns true the expression opnodebeforeitem item returns false  opnodeafter summary returns true if the node identified by the first argument follows the node identified by the second argument in document order operator mapping defines the semantics of the  operator when applied to two nodes signature opnodeafterarg as node arg as node as xsboolean rules if the node identified by the value of arg occurs in document order after the node identified by the value of arg the function returns true otherwise it returns false the rules determining the order of nodes within a single document and in different documents can be found in section  document order dm examples the expression opnodeafteritem item returns false the expression opnodeafteritem item returns false the expression opnodeafteritem item returns true  fnroot summary returns the root of the tree to which arg belongs this will usually but not necessarily be a document node signatures fnroot as node fnrootarg as node as node properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the function is called without an argument the context item  is used as the default argument the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument the function returns the value of the expression argancestororselfnode error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp examples these examples use some variables which could be defined in xquery  an xml query language as let i  toolwrenchtoollet o  order i quantityquantity orderlet odoc  document olet newi  otool or they could be defined in xsl transformations xslt version  as xslvariable namei aselement  toolwrenchtoolxslvariablexslvariable nameo aselement  order    xslcopyof selecti    quantityquantity  orderxslvariablexslvariable nameodoc  xslcopyof selectoxslvariablexslvariable namenewi selectotool fnrooti returns the element node i fnrootoquantity returns the element node o fnrootodocquantity returns the document node odoc fnrootnewi returns the element node o the final three examples could be made typesafe by wrapping their operands with fnexactlyone  fnpath summary returns a path expression that can be used to select the supplied node relative to the root of its containing document signatures fnpath as xsstring fnpatharg as node as xsstring properties the oneargument form of this function is deterministic contextdependent and focusdependent the twoargument form of this function is deterministic contextindependent and focusindependent rules the behavior of the function if the argument is omitted is exactly the same as if the context item  had been passed as the argument if arg is the empty sequence the function returns the empty sequence if arg is a document node the function returns the string  otherwise the function constructs a string that consists of a sequence of steps one for each ancestororself of arg other than the root node this string is prefixed by qhttpwwwworgxpathfunctionsroot if the root node is not a document node each step consists of the character  followed by a string whose form depends on the kind of node selected by that step as follows for an element node qurilocalposition where uri is the namespace uri of the node name or the empty string if the node is in no namespace local is the local part of the node name and position is an integer representing the position of the selected node among its likenamed siblings for an attribute node if the node is in no namespace @local where local is the local part of the node name otherwise @qurilocal where uri is the namespace uri of the node name and local is the local part of the node name for a text node textposition where position is an integer representing the position of the selected node among its text node siblings for a comment node commentposition where position is an integer representing the position of the selected node among its comment node siblings for a processinginstruction node processinginstructionlocalposition where local is the name of the processing instruction node and position is an integer representing the position of the selected node among its likenamed processinginstruction node siblings for a namespace node if the namespace node has a name namespaceprefix where prefix is the local part of the name of the namespace node which represents the namespace prefix if the namespace node has no name that is it represents the default namespace namespaceqhttpwwwworgxpathfunctionslocalname examples let e  fnparsexmlxml versionp xmlnshttpexamplecomone xmllangde authorfriedrich von schillerfreude schner gtterfunkenbrtochter aus elysiumbrwir betreten feuertrunkenbrhimmlische dein heiligtump          the expression fnpathe returns  the expression fnpathep returns qhttpexamplecomonep the expression fnpathep@xmllang returns qhttpexamplecomonep@qhttpwwwworgxmlnamespacelang the expression fnpathep@author returns qhttpexamplecomonep@author the expression fnpathepbr returns qhttpexamplecomonepqhttpexamplecomonebr the expression fnpathetextstartswithnormalizespace tochter returns qhttpexamplecomoneptext let emp              employee xmlidid               empnreempnr               firstjohnfirst               lastbrownlast            employee          the expression fnpathemp returns qhttpwwwworgxpathfunctionsroot the expression fnpathemp@xmlid returns qhttpwwwworgxpathfunctionsroot@qhttpwwwworgxmlnamespaceid the expression fnpathempempnr returns qhttpwwwworgxpathfunctionsrootqempnr  fnhaschildren summary returns true if the supplied node has one or more child nodes of any kind signatures fnhaschildren as xsboolean fnhaschildrennode as node as xsboolean properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context item  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument provided that the supplied argument node matches the expected type node the result of the function call fnhaschildrennode is defined to be the same as the result of the expression fnexistsnodechildnode error conditions the following errors may be raised when node is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp notes if node is an empty sequence the result is false the motivation for this function is to support streamed evaluation according to the streaming rules in xsl transformations xslt version  the following construct is not streamable xslif testexistsrow  ul    xslforeach selectrow       lixslvalueof selectli    xslforeach  ulxslif   this is because it makes two downward selections to read the child row elements the use of fnhaschildren in the xslif conditional is intended to circumvent this restriction although the function was introduced to support streaming use cases it has general utility as a convenience function  fninnermost summary returns every node within the input sequence that is not an ancestor of another member of the input sequence the nodes are returned in document order with duplicates eliminated signature fninnermostnodes as node as node properties this function is deterministic contextindependent and focusindependent rules the effect of the function call fninnermostnodes is defined to be equivalent to the result of the expression nodes except nodesancestornode that is the function takes as input a sequence of nodes and returns every node within the sequence that is not an ancestor of another node within the sequence the nodes are returned in document order with duplicates eliminated examples if the source document contains nested sections represented by div elements the expression innermostdiv returns those div elements that do not contain further div elements  fnoutermost summary returns every node within the input sequence that has no ancestor that is itself a member of the input sequence the nodes are returned in document order with duplicates eliminated signature fnoutermostnodes as node as node properties this function is deterministic contextindependent and focusindependent rules the effect of the function call fnoutermostnodes is defined to be equivalent to the result of the expression nodesnotancestornode intersect nodes that is the function takes as input a sequence of nodes and returns every node within the sequence that does not have another node within the sequence as an ancestor the nodes are returned in document order with duplicates eliminated notes the formulation nodes except nodesdescendantnode might appear to be simpler but does not correctly account for attribute nodes as these are not descendants of their parent element the motivation for the function was based on xslt streaming use cases there are cases where the xsl transformations xslt version  streaming rules allow the construct outermostsection but do not allow section the function can therefore be useful in cases where it is known that sections will not be nested as well as cases where the application actually wishes to process all sections except those that are nested within another examples if the source document contains nested sections represented by div elements the expression outermostdiv returns those div elements that are not contained within further div elements  functions and operators on sequences a sequence is an ordered collection of zero or more items an item is either a node or an atomic value the terms sequence and item are defined formally in xquery  an xml query language and xml path language xpath   general functions and operators on sequences the following functions are defined on sequences these functions work on any sequence without performing any operations that are sensitive to the individual items in the sequence function meaning opconcatenate returns the concatenation of two sequences fnempty returns true if the argument is the empty sequence fnexists returns true if the argument is a nonempty sequence fnhead returns the first item in a sequence fntail returns all but the first item in a sequence fninsertbefore returns a sequence constructed by inserting an item or a sequence of items at a given position within an existing sequence fnremove returns a new sequence containing all the items of target except the item at position position fnreverse reverses the order of items in a sequence fnsubsequence returns the contiguous sequence of items in the value of sourceseq beginning at the position indicated by the value of startingloc and continuing for the number of items indicated by the value of length fnunordered returns the items of sourceseq in an implementation dependent order as in the previous section for the illustrative examples below assume an xquery or transformation operating on a nonempty purchase order document containing a number of lineitem elements the variable seq is bound to the sequence of lineitem nodes in document order the variables item item etc are bound to separate individual lineitem nodes in the sequence  opconcatenate summary returns the concatenation of two sequences operator mapping defines the semantics of the infix operator  when applied to any two sequences signature opconcatenateseq as item seq as item as item properties this function is deterministic contextindependent and focusindependent rules the function returns a sequence consisting of all the items in seq followed by all the items in seq notes if either sequence is the empty sequence the other operand is returned examples the expression opconcatenate     returns      the expression opconcatenate    returns    the expression opconcatenate  returns   fnempty summary returns true if the argument is the empty sequence signature fnemptyarg as item as xsboolean properties this function is deterministic contextindependent and focusindependent rules if the value of arg is the empty sequence the function returns true otherwise the function returns false examples the expression fnempty returns true the expression fnemptyfnremovehello world  returns false  fnexists summary returns true if the argument is a nonempty sequence signature fnexistsarg as item as xsboolean properties this function is deterministic contextindependent and focusindependent rules if the value of arg is a nonempty sequence the function returns true otherwise the function returns false examples the expression fnexistsfnremovehello  returns false the expression fnexistsfnremovehello world  returns true  fnhead summary returns the first item in a sequence signature fnheadarg as item as item properties this function is deterministic contextindependent and focusindependent rules the function returns the value of the expression arg notes if arg is the empty sequence the empty sequence is returned otherwise the first item in the sequence is returned examples the expression fnhead to  returns  the expression fnheada b c returns a the expression fnhead returns   fntail summary returns all but the first item in a sequence signature fntailarg as item as item properties this function is deterministic contextindependent and focusindependent rules the function returns the value of the expression subsequencearg  notes if arg is the empty sequence or a sequence containing a single item then the empty sequence is returned examples the expression fntail to  returns     the expression fntaila b c returns b c the expression fntaila returns  the expression fntail returns   fninsertbefore summary returns a sequence constructed by inserting an item or a sequence of items at a given position within an existing sequence signature fninsertbefore target as item position as xsinteger inserts as item as item properties this function is deterministic contextindependent and focusindependent rules the value returned by the function consists of all items of target whose index is less than position followed by all items of inserts followed by the remaining elements of target in that order notes if target is the empty sequence inserts is returned if inserts is the empty sequence target is returned if position is less than one  the first position the effective value of position is one  if position is greater than the number of items in target then the effective value of position is equal to the number of items in target plus  the value of target is not affected by the sequence construction examples let abc  a b c the expression fninsertbeforeabc  z returns z a b c the expression fninsertbeforeabc  z returns z a b c the expression fninsertbeforeabc  z returns a z b c the expression fninsertbeforeabc  z returns a b z c the expression fninsertbeforeabc  z returns a b c z  fnremove summary returns a new sequence containing all the items of target except the item at position position signature fnremovetarget as item position as xsinteger as item properties this function is deterministic contextindependent and focusindependent rules the function returns a sequence consisting of all items of target whose index is less than position followed by all items of target whose index is greater than position notes if position is less than  or greater than the number of items in target target is returned if target is the empty sequence the empty sequence is returned examples let abc  a b c the expression fnremoveabc  returns a b c the expression fnremoveabc  returns b c the expression fnremoveabc  returns a b c the expression fnremove  returns   fnreverse summary reverses the order of items in a sequence signature fnreversearg as item as item properties this function is deterministic contextindependent and focusindependent rules the function returns a sequence containing the items in arg in reverse order notes if arg is the empty sequence the empty sequence is returned examples let abc  a b c the expression fnreverseabc returns c b a the expression fnreversehello returns hello the expression fnreverse returns   fnsubsequence summary returns the contiguous sequence of items in the value of sourceseq beginning at the position indicated by the value of startingloc and continuing for the number of items indicated by the value of length signatures fnsubsequencesourceseq as item startingloc as xsdouble as item fnsubsequence sourceseq as item startingloc as xsdouble length as xsdouble as item properties this function is deterministic contextindependent and focusindependent rules in the twoargument case returns sourceseqfnroundstartingloc le position in the threeargument case returns sourceseqfnroundstartingloc le position          and position lt fnroundstartingloc  fnroundlength notes the first item of a sequence is located at position  not position  if sourceseq is the empty sequence the empty sequence is returned if startingloc is zero or negative the subsequence includes items from the beginning of the sourceseq if length is not specified the subsequence includes items to the end of sourceseq if length is greater than the number of items in the value of sourceseq following startingloc the subsequence includes items to the end of sourceseq as an exception to the previous two notes if startingloc is inf and length is inf then fnroundstartingloc  fnroundlength is nan since position lt nan is always false the result is an empty sequence the reason the function accepts arguments of type xsdouble is that many computations on untyped data return an xsdouble result and the reason for the rounding rules is to compensate for any imprecision in these floatingpoint computations examples let seq  item item item item item the expression fnsubsequenceseq  returns item item the expression fnsubsequenceseq   returns item item  fnunordered summary returns the items of sourceseq in an implementation dependent order signature fnunorderedsourceseq as item as item properties this function is deterministic contextindependent and focusindependent rules the function returns the items of sourceseq in an implementation dependent order notes query optimizers may be able to do a better job if the order of the output sequence is not specified for example when retrieving prices from a purchase order if an index exists on prices it may be more efficient to return the prices in index order rather than in document order examples the expression fnunordered     returns some permutation of       functions that compare values in sequences the functions in this section rely on comparisons between the items in one or more sequences function meaning fndistinctvalues returns the values that appear in a sequence with duplicates eliminated fnindexof returns a sequence of positive integers giving the positions within the sequence seq of items that are equal to search fndeepequal this function assesses whether two sequences are deepequal to each other to be deepequal they must contain items that are pairwise deepequal and for two items to be deepequal they must either be atomic values that compare equal or nodes of the same kind with the same name whose children are deepequal  fndistinctvalues summary returns the values that appear in a sequence with duplicates eliminated signatures fndistinctvaluesarg as xsanyatomictype as xsanyatomictype fndistinctvalues arg as xsanyatomictype collation as xsstring as xsanyatomictype properties the oneargument form of this function is deterministic contextdependent and focusindependent it depends on collations and implicit timezone the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri and implicit timezone rules the function returns the sequence that results from removing from arg all but one of a set of values that are equal to one another values are compared using the eq operator subject to the caveats defined below values of type xsuntypedatomic are compared as if they were of type xsstring values that cannot be compared because the eq operator is not defined for their types are considered to be distinct the collation used by this function is determined according to the rules in  choosing a collation this collation is used when string comparison is required for xsfloat and xsdouble values positive zero is equal to negative zero and although nan does not equal itself if arg contains multiple nan values a single nan is returned if xsdatetime xsdate or xstime values do not have a timezone they are considered to have the implicit timezone provided by the dynamic context for the purpose of comparison note that xsdatetime xsdate or xstime values can compare equal even if their timezones are different the order in which the sequence of values is returned is implementation dependent which value of a set of values that compare equal is returned is implementation dependent if the input sequence contains values of different numeric types that differ from each other by small amounts then the eq operator is not transitive because of rounding effects occurring during type promotion in the situation where the input contains three values a b and c such that a eq b b eq c but a ne c then the number of items in the result of the function as well as the choice of which items are returned is implementation dependent subject only to the constraints that a no two items in the result sequence compare equal to each other and b every input item that does not appear in the result sequence compares equal to some item that does appear in the result sequence for example this arises when computing     distinctvalues            xsfloat            xsdecimal            xsdouble  because the values of type xsfloat and xsdouble both compare equal to the value of type xsdecimal but not equal to each other notes if arg is the empty sequence the function returns the empty sequence examples the expression fndistinctvalues    returns some permutation of    the expression fndistinctvaluesxsuntypedatomiccherry xsuntypedatomicplum xsuntypedatomicplum returns some permutation of xsuntypedatomiccherry xsuntypedatomicplum  fnindexof summary returns a sequence of positive integers giving the positions within the sequence seq of items that are equal to search signatures fnindexof seq as xsanyatomictype search as xsanyatomictype as xsinteger fnindexof seq as xsanyatomictype search as xsanyatomictype collation as xsstring as xsinteger properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations and implicit timezone the threeargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri and implicit timezone rules the function returns a sequence of positive integers giving the positions within the sequence seq of items that are equal to search the collation used by this function is determined according to the rules in  choosing a collation this collation is used when string comparison is required the items in the sequence seq are compared with search under the rules for the eq operator values of type xsuntypedatomic are compared as if they were of type xsstring values that cannot be compared because the eq operator is not defined for their types are considered to be distinct if an item compares equal then the position of that item in the sequence seq is included in the result the first item in a sequence is at position  not position  the result sequence is in ascending numeric order notes if the value of seq is the empty sequence or if no item in seq matches search then the function returns the empty sequence no error occurs if noncomparable values are encountered so when comparing two atomic values the effective boolean value of fnindexofa b is true if a and b are equal false if they are not equal or not comparable examples the expression fnindexof     returns  the expression fnindexof       returns   the expression fnindexofa sport and a pastime a returns   the expression fnindexofcurrentdate  returns  if @a is an attribute of type xsnmtokens whose string value is red green blue and whose typed value is therefore red green blue then fnindexof@a blue returns  this is because the function calling mechanism atomizes the attribute node to produce a sequence of three xsnmtoken values  fndeepequal summary this function assesses whether two sequences are deepequal to each other to be deepequal they must contain items that are pairwise deepequal and for two items to be deepequal they must either be atomic values that compare equal or nodes of the same kind with the same name whose children are deepequal signatures fndeepequalparameter as item parameter as item as xsboolean fndeepequal parameter as item parameter as item collation as xsstring as xsboolean properties the twoargument form of this function is deterministic contextdependent and focusindependent it depends on collations and implicit timezone the threeargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri and implicit timezone rules the collation argument identifies a collation which is used at all levels of recursion when strings are compared but not when names are compared according to the rules in  choosing a collation if the two sequences are both empty the function returns true if the two sequences are of different lengths the function returns false if the two sequences are of the same length the function returns true if and only if every item in the sequence parameter is deepequal to the item at the same position in the sequence parameter the rules for deciding whether two items are deepequal follow call the two items i and i respectively if i and i are both atomic values they are deepequal if and only if i eq i is true or if both values are nan if the eq operator is not defined for i and i the function returns false if one of the pair i or i is an atomic value and the other is not the function returns false if i and i are both nodes they are compared as described below if the two nodes are of different kinds the result is false if the two nodes are both document nodes then they are deepequal if and only if the sequence itext is deepequal to the sequence itext if the two nodes are both element nodes then they are deepequal if and only if all of the following conditions are satisfied the two nodes have the same name that is nodenamei eq nodenamei either both nodes are both annotated as having simple content or both nodes are annotated as having complex content for this purpose simple content means either a simple type or a complex type with simple content complex content means a complex type whose variety is mixed elementonly or empty note it is a consequence of this rule that validating a document d against a schema will usually but not necessarily result in a document that is not deepequal to d the exception is when the schema allows all elements to have mixed content the two nodes have the same number of attributes and for every attribute a in i@ there exists an attribute a in i@ such that a and a are deepequal one of the following conditions holds both element nodes are annotated as having simple content as defined in b above and the typed value of i is deepequal to the typed value of i both element nodes have a type annotation that is a complex type with variety elementonly and the sequence i is deepequal to the sequence i both element nodes have a type annotation that is a complex type with variety mixed and the sequence itext is deepequal to the sequence itext both element nodes have a type annotation that is a complex type with variety empty if the two nodes are both attribute nodes then they are deepequal if and only if both the following conditions are satisfied the two nodes have the same name that is nodenamei eq nodenamei the typed value of i is deepequal to the typed value of i if the two nodes are both processing instruction nodes then they are deepequal if and only if both the following conditions are satisfied the two nodes have the same name that is nodenamei eq nodenamei the string value of i is equal to the string value of i if the two nodes are both namespace nodes then they are deepequal if and only if both the following conditions are satisfied the two nodes either have the same name or are both nameless that is fndeepequalnodenamei nodenamei the string value of i is equal to the string value of i when compared using the unicode codepoint collation if the two nodes are both text nodes or comment nodes then they are deepequal if and only if their stringvalues are equal error conditions a type error is raised errfoty if either input sequence contains a function item notes the two nodes are not required to have the same type annotation and they are not required to have the same inscope namespaces they may also differ in their parent their base uri and the values returned by the isid and isidrefs accessors see section  isid accessor dm and section  isidrefs accessor dm the order of children is significant but the order of attributes is insignificant the contents of comments and processing instructions are significant only if these nodes appear directly as items in the two sequences being compared the content of a comment or processing instruction that appears as a descendant of an item in one of the sequences being compared does not affect the result however the presence of a comment or processing instruction if it causes a text node to be split into two text nodes may affect the result the result of fndeepequal currentdatetime is false it does not raise an error examples let at  attendees name lastparker            firstpeter name lastbarker firstbob name lastparker            firstpeter attendees the expression fndeepequalat at returns false the expression fndeepequalatname atname returns false the expression fndeepequalatname atname returns true the expression fndeepequalatname peter parker returns false  functions that test the cardinality of sequences the following functions test the cardinality of their sequence arguments function meaning fnzeroorone returns arg if it contains zero or one items otherwise raises an error fnoneormore returns arg if it contains one or more items otherwise raises an error fnexactlyone returns arg if it contains exactly one item otherwise raises an error the functions fnzeroorone fnoneormore and fnexactlyone defined in this section check that the cardinality of a sequence is in the expected range they are particularly useful with regard to static typing for example the function call fnremoveseq fnindexofseq abc requires the result of the call on fnindexof to be a singleton integer but the static type system cannot infer this writing the expression as fnremoveseq fnexactlyonefnindexofseq abc will provide a suitable static type at query analysis time and ensures that the length of the sequence is correct with a dynamic check at query execution time the type signatures for these functions deliberately declare the argument type as item permitting a sequence of any length a more restrictive signature would defeat the purpose of the function which is to defer cardinality checking until query execution time  fnzeroorone summary returns arg if it contains zero or one items otherwise raises an error signature fnzerooronearg as item as item properties this function is deterministic contextindependent and focusindependent rules except in error cases the function returns arg unchanged error conditions a dynamic error is raised errforg if arg contains more than one item  fnoneormore summary returns arg if it contains one or more items otherwise raises an error signature fnoneormorearg as item as item properties this function is deterministic contextindependent and focusindependent rules except in error cases the function returns arg unchanged error conditions a dynamic error is raised errforg if arg is an empty sequence  fnexactlyone summary returns arg if it contains exactly one item otherwise raises an error signature fnexactlyonearg as item as item properties this function is deterministic contextindependent and focusindependent rules except in error cases the function returns arg unchanged error conditions a dynamic error is raised errforg if arg is an empty sequence or a sequence containing more than one item  union intersection and difference function meaning opunion constructs a sequence containing every node that occurs in the values of either arg or arg eliminating duplicates and sorting the result in document order opintersect constructs a sequence containing every node that occurs in the values of both arg and arg eliminating duplicates and sorting the result in document order opexcept constructs a sequence containing every node that occurs in the value of arg but not in the value of arg eliminating duplicates and sorting the result in document order as in the previous sections for the illustrative examples below assume an xquery or transformation operating on a purchase order document containing a number of lineitem elements the variables item item etc are bound to individual lineitem nodes in the sequence we use sequences of these nodes in some of the examples below  opunion summary constructs a sequence containing every node that occurs in the values of either arg or arg eliminating duplicates and sorting the result in document order operator mapping defines the semantics of the union or  operator when applied to two sequences of nodes signature opunionarg as node arg as node as node rules the function returns a sequence containing every node that occurs in the values of either arg or arg eliminating duplicate nodes nodes are returned in document order two nodes n and n are duplicates if they satisfy opissamenoden n notes if either operand is the empty sequence the result is a sequence containing the nodes in the other operand in document order after eliminating duplicates examples let seq  item item let seq  item item item let seq  item item the expression opunionseq seq returns item item the expression opunionseq seq returns item item item the expression opunionseq  returns item item  opintersect summary constructs a sequence containing every node that occurs in the values of both arg and arg eliminating duplicates and sorting the result in document order operator mapping defines the semantics of the intersect operator when applied to two sequences of nodes signature opintersectarg as node arg as node as node rules the function returns a sequence containing every node that occurs in the values of both arg and arg eliminating duplicate nodes nodes are returned in document order two nodes n and n are duplicates if they satisfy opissamenoden n notes if either operand is the empty sequence the function returns the empty sequence examples let seq  item item let seq  item item item let seq  item item the expression opintersectseq seq returns item item the expression opintersectseq seq returns item the expression opintersectseq  returns  the expression opintersectitem item returns   opexcept summary constructs a sequence containing every node that occurs in the value of arg but not in the value of arg eliminating duplicates and sorting the result in document order operator mapping defines the semantics of the except operator when applied to two sequences of nodes signature opexceptarg as node arg as node as node rules the function returns a sequence containing every node that occurs in the value of arg provided that it does not occur in the value of arg duplicate nodes are eliminated and nodes are returned in document order two nodes n and n are duplicates if they satisfy opissamenoden n notes if arg is the empty sequence the empty sequence is returned if arg is the empty sequence a sequence is returned containing the nodes in arg in document order after eliminating duplicates examples let seq  item item let seq  item item item let seq  item item the expression opexceptseq seq returns  the expression opexceptseq seq returns  the expression opexceptseq seq returns item the expression opexceptseq  returns item item the expression opexceptseq seq returns item  aggregate functions aggregate functions take a sequence as argument and return a single value computed from values in the sequence except for fncount the sequence must consist of values of a single type or one if its subtypes or they must be numeric xsuntypedatomic values are permitted in the input sequence and handled by special conversion rules the type of the items in the sequence must also support certain operations function meaning fncount returns the number of items in a sequence fnavg returns the average of the values in the input sequence arg that is the sum of the values divided by the number of values fnmax returns a value that is equal to the highest value appearing in the input sequence fnmin returns a value that is equal to the lowest value appearing in the input sequence fnsum returns a value obtained by adding together the values in arg  fncount summary returns the number of items in a sequence signature fncountarg as item as xsinteger properties this function is deterministic contextindependent and focusindependent rules the function returns the number of items in the value of arg notes returns  if arg is the empty sequence examples let seq  item item let seq     let seq   the expression fncountseq returns  the expression fncountseq returns  the expression fncountseq returns  the expression fncountseq   returns   fnavg summary returns the average of the values in the input sequence arg that is the sum of the values divided by the number of values signature fnavgarg as xsanyatomictype as xsanyatomictype properties this function is deterministic contextindependent and focusindependent rules if arg is the empty sequence the empty sequence is returned if arg contains values of type xsuntypedatomic they are cast to xsdouble duration values must either all be xsyearmonthduration values or must all be xsdaytimeduration values for numeric values the numeric promotion rules defined in  arithmetic operators on numeric values are used to promote all values to a single common type after these operations arg must contain items of a single type which must be one of the four numeric types xsyearmonthduration or xsdaytimeduration or one if its subtypes the function returns the average of the values as sumarg div countarg but the implementation may use an otherwise equivalent algorithm that avoids arithmetic overflow error conditions a type error is raised errforg if the input sequence contains items of incompatible types as described above examples let d  xsyearmonthdurationpy let d  xsyearmonthdurationpm let seq     the expression fnavgseq returns  the result is of type xsdecimal the expression fnavgd d returns xsyearmonthdurationpym fnavgd seq raises a type error errforg the expression fnavg returns  the expression fnavgxsfloatinf xsfloatinf returns xsfloatnan the expression fnavgseq xsfloatnan returns xsfloatnan  fnmax summary returns a value that is equal to the highest value appearing in the input sequence signatures fnmaxarg as xsanyatomictype as xsanyatomictype fnmaxarg as xsanyatomictype collation as xsstring as xsanyatomictype properties the zeroargument form of this function is deterministic contextdependent and focusindependent it depends on collations and implicit timezone the oneargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri and implicit timezone rules the following rules are applied to the input sequence arg values of type xsuntypedatomic in arg are cast to xsdouble numeric and xsanyuri values are converted to the least common type reachable by a combination of type promotion and subtype substitution see section b type promotion xp and section b operator mapping xp the items in the resulting sequence may be reordered in an arbitrary order the resulting sequence is referred to below as the converted sequence the function returns an item from the converted sequence rather than the input sequence if the converted sequence is empty the function returns the empty sequence all items in the converted sequence must be derived from a single base type for which the le operator is defined in addition the values in the sequence must have a total order if datetime values do not have a timezone they are considered to have the implicit timezone provided by the dynamic context for the purpose of comparison duration values must either all be xsyearmonthduration values or must all be xsdaytimeduration values if the converted sequence contains the value nan the value nan is returned if the items in the converted sequence are of type xsstring or types derived by restriction from xsstring then the determination of the item with the smallest value is made according to the collation that is used if the type of the items in the converted sequence is not xsstring and collation is specified the collation is ignored the collation used by this function is determined according to the rules in  choosing a collation the function returns the result of the expression    if every v in c satisfies c ge v   then c    else fnmaxfnsubsequencec  evaluated with collation as the default collation if specified and with c as the converted sequence error conditions a type error is raised errforg if the input sequence contains items of incompatible types as described above notes because the rules allow the sequence to be reordered if there are two or items that are equal highest the specific item whose value is returned is implementation dependent this can arise for example if two different strings compare equal under the selected collation or if two different xsdatetime values compare equal despite being in different timezones if the converted sequence contains exactly one value then that value is returned the default type when the fnmax function is applied to xsuntypedatomic values is xsdouble this differs from the default type for operators such as gt and for sorting in xquery and xslt which is xsstring examples the expression fnmax returns  the expression fnmaxxsinteger xsfloat xsdouble returns xsdoublee fnmaxzero raises a type error errforg the expression fnmaxfncurrentdate xsdate returns xsdate assuming that the current date is during the st century the expression fnmaxa b c returns c assuming a typical default collation  fnmin summary returns a value that is equal to the lowest value appearing in the input sequence signatures fnminarg as xsanyatomictype as xsanyatomictype fnminarg as xsanyatomictype collation as xsstring as xsanyatomictype properties the zeroargument form of this function is deterministic contextdependent and focusindependent it depends on collations and implicit timezone the oneargument form of this function is deterministic contextdependent and focusindependent it depends on collations and static base uri and implicit timezone rules the following rules are applied to the input sequence values of type xsuntypedatomic in arg are cast to xsdouble numeric and xsanyuri values are converted to the least common type reachable by a combination of type promotion and subtype substitution see section b type promotion xp and section b operator mapping xp the items in the resulting sequence may be reordered in an arbitrary order the resulting sequence is referred to below as the converted sequence the function returns an item from the converted sequence rather than the input sequence if the converted sequence is empty the empty sequence is returned all items in the converted sequence must be derived from a single base type for which the le operator is defined in addition the values in the sequence must have a total order if datetime values do not have a timezone they are considered to have the implicit timezone provided by the dynamic context for the purpose of comparison duration values must either all be xsyearmonthduration values or must all be xsdaytimeduration values if the converted sequence contains the value nan the value nan is returned if the items in the converted sequence are of type xsstring or types derived by restriction from xsstring then the determination of the item with the smallest value is made according to the collation that is used if the type of the items in the converted sequence is not xsstring and collation is specified the collation is ignored the collation used by this function is determined according to the rules in  choosing a collation the function returns the result of the expression    if every v in c satisfies c le v    then c    else fnminfnsubsequencec  evaluated with collation as the default collation if specified and with c as the converted sequence error conditions a type error is raised errforg if the input sequence contains items of incompatible types as described above notes because the rules allow the sequence to be reordered if there are two or items that are equal lowest the specific item whose value is returned is implementation dependent this can arise for example if two different strings compare equal under the selected collation or if two different xsdatetime values compare equal despite being in different timezones if the converted sequence contains exactly one value then that value is returned the default type when the fnmin function is applied to xsuntypedatomic values is xsdouble this differs from the default type for operators such as lt and for sorting in xquery and xslt which is xsstring examples the expression fnmin returns  the expression fnminxsinteger xsfloat xsdouble returns xsdoublee fnminzero raises a type error errforg fnminxsfloate xsfloate can return either positive or negative zero the two items are equal so it is implementation dependent which is returned the expression fnminfncurrentdate xsdate returns xsdate assuming that the current date is set to a reasonable value the expression fnmina b c returns a assuming a typical default collation  fnsum summary returns a value obtained by adding together the values in arg signatures fnsumarg as xsanyatomictype as xsanyatomictype fnsum arg as xsanyatomictype zero as xsanyatomictype as xsanyatomictype properties this function is deterministic contextindependent and focusindependent rules any values of type xsuntypedatomic in arg are cast to xsdouble the items in the resulting sequence may be reordered in an arbitrary order the resulting sequence is referred to below as the converted sequence if the converted sequence is empty then the singleargument form of the function returns the xsinteger value  the twoargument form returns the value of the argument zero if the converted sequence contains the value nan nan is returned all items in arg must be numeric or derived from a single base type in addition the type must support addition duration values must either all be xsyearmonthduration values or must all be xsdaytimeduration values for numeric values the numeric promotion rules defined in  arithmetic operators on numeric values are used to promote all values to a single common type the sum of a sequence of integers will therefore be an integer while the sum of a numeric sequence that includes at least one xsdouble will be an xsdouble the result of the function using the second signature is the result of the expression if fncountc eq  then    zeroelse if fncountc eq  then    celse    c  fnsumsubsequencec  where c is the converted sequence the result of the function using the first signature is the result of the expression fnsumarg  error conditions a type error is raised errforg if the input sequence contains items of incompatible types as described above notes the second argument allows an appropriate value to be defined to represent the sum of an empty sequence for example when summing a sequence of durations it would be appropriate to return a zerolength duration of the appropriate type this argument is necessary because a system that does dynamic typing cannot distinguish an empty sequence of integers for example from an empty sequence of durations if the converted sequence contains exactly one value then that value is returned examples let d  xsyearmonthdurationpy let d  xsyearmonthdurationpm let seq  d d let seq     the expression fnsumd d returns xsyearmonthdurationpym the expression fnsumseq lt xsyearmonthdurationpm xsyearmonthdurationpm returns xsyearmonthdurationpm the expression fnsumseq returns  the expression fnsum returns  the expression fnsum returns  the expression fnsum to  lt   returns  fnsumd e raises a type error errforg the expression fnsumd d ein augenblick returns xsyearmonthdurationpym there is no requirement that the zero value should be the same type as the items in arg or even that it should belong to a type that supports addition  functions and operators that generate sequences function meaning opto returns a sequence of consecutive integers in a given range  opto summary returns a sequence of consecutive integers in a given range operator mapping defines the semantics of the to operator when applied to two integer arguments signature optofirstval as xsinteger lastval as xsinteger as xsinteger rules the function returns the sequence containing every xsinteger whose value is between the value of firstval inclusive and the value of lastval inclusive in monotonic increasing order if the value of the first operand is greater than the value of the second the function returns the empty sequence if the values of the two operands are equal the function returns a sequence containing a single xsinteger equal to that value examples the expression  to  returns    the expression  to  returns  the expression  to  returns   functions on node identifiers  fnid summary returns the sequence of element nodes that have an id value matching the value of one or more of the idref values supplied in arg signatures fnidarg as xsstring as element fnidarg as xsstring node as node as element properties the oneargument form of this function is deterministic contextdependent and focusdependent the twoargument form of this function is deterministic contextindependent and focusindependent rules the function returns a sequence in document order with duplicates eliminated containing every element node e that satisfies all the following conditions e is in the target document the target document is the document containing node or the document containing the context item  if the second argument is omitted the behavior of the function if node is omitted is exactly the same as if the context item had been passed as node e has an id value equal to one of the candidate idref values where an element has an id value equal to v if either or both of the following conditions are true the isid property see section  isid accessor dm of the element node is true and the typed value of the element node is equal to v under the rules of the eq operator using the unicode codepoint collation httpwwwworgxpathfunctionscollationcodepoint the element has an attribute node whose isid property see section  isid accessor dm is true and whose typed value is equal to v under the rules of the eq operator using the unicode code point collation httpwwwworgxpathfunctionscollationcodepoint each xsstring in arg is parsed as if it were of type idrefs that is each xsstring in arg is treated as a whitespaceseparated sequence of tokens each acting as an idref these tokens are then included in the list of candidate idrefs if any of the tokens is not a lexically valid idref that is if it is not lexically an xsncname it is ignored formally the candidate idref values are the strings in the sequence given by the expression for s in arg return     fntokenizefnnormalizespaces   castable as xsidref if several elements have the same id value then e is the one that is first in document order error conditions a dynamic error is raised errfodc if node or the context item if the second argument is absent is a node in a tree whose root is not a document node the following errors may be raised when node is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp notes the effect of this function is anomalous in respect of element nodes with the isid property for legacy reasons this function returns the element that has the isid property whereas it would be more appropriate to return its parent that being the element that is uniquely identified by the id a new function elementwithid is being introduced with the desired behavior if the data model is constructed from an infoset an attribute will have the isid property if the corresponding attribute in the infoset had an attribute type of id typically this means the attribute was declared as an id in a dtd if the data model is constructed from a psvi an element or attribute will have the isid property if its typed value is a single atomic value of type xsid or a type derived by restriction from xsid no error is raised in respect of a candidate idref value that does not match the id of any element in the document if no candidate idref value matches the id value of any element the function returns the empty sequence it is not necessary that the supplied argument should have type xsidref or xsidrefs or that it should be derived from a node with the isidrefs property an element may have more than one id value this can occur with synthetic data models or with data models constructed from a psvi where the element and one of its attributes are both typed as xsid if the source document is wellformed but not valid it is possible for two or more elements to have the same id value in this situation the function will select the first such element it is also possible in a wellformed but invalid document to have an element or attribute that has the isid property but whose value does not conform to the lexical rules for the xsid type such a node will never be selected by this function examples let emp              employee xmlidid               empnreempnr               firstjohnfirst               lastbrownlast            employee          the expression ididname returns employee the xmlid attribute has the isid property so the employee element is selected the expression idename returns empnr assuming the empnr element is given the type xsid as a result of schema validation the element will have the isid property and is therefore selected note the difference from the behavior of fnelementwithid  fnelementwithid summary returns the sequence of element nodes that have an id value matching the value of one or more of the idref values supplied in arg signatures fnelementwithidarg as xsstring as element fnelementwithidarg as xsstring node as node as element properties the oneargument form of this function is deterministic contextdependent and focusdependent the twoargument form of this function is deterministic contextindependent and focusindependent rules note the effect of this function is identical to fnid in respect of elements that have an attribute with the isid property however it behaves differently in respect of element nodes with the isid property whereas the fnid for legacy reasons returns the element that has the isid property this parent returns the element identified by the id which is the parent of the element having the isid property the function returns a sequence in document order with duplicates eliminated containing every element node e that satisfies all the following conditions e is in the target document the target document is the document containing node or the document containing the context item  if the second argument is omitted the behavior of the function if node is omitted is exactly the same as if the context item had been passed as node e has an id value equal to one of the candidate idref values where an element has an id value equal to v if either or both of the following conditions are true the element has an child element node whose isid property see section  isid accessor dm is true and whose typed value is equal to v under the rules of the eq operator using the unicode code point collation httpwwwworgxpathfunctionscollationcodepoint the element has an attribute node whose isid property see section  isid accessor dm is true and whose typed value is equal to v under the rules of the eq operator using the unicode code point collation httpwwwworgxpathfunctionscollationcodepoint each xsstring in arg is parsed as if it were of type idrefs that is each xsstring in arg is treated as a whitespaceseparated sequence of tokens each acting as an idref these tokens are then included in the list of candidate idrefs if any of the tokens is not a lexically valid idref that is if it is not lexically an xsncname it is ignored formally the candidate idref values are the strings in the sequence given by the expression for s in arg return    fntokenizefnnormalizespaces   castable as xsidref if several elements have the same id value then e is the one that is first in document order error conditions a dynamic error is raised errfodc if node or the context item if the second argument is omitted is a node in a tree whose root is not a document node the following errors may be raised when node is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp notes this function is equivalent to the fnid function except when dealing with idvalued element nodes whereas the fnid function selects the element containing the identifier this function selects its parent if the data model is constructed from an infoset an attribute will have the isid property if the corresponding attribute in the infoset had an attribute type of id typically this means the attribute was declared as an id in a dtd if the data model is constructed from a psvi an element or attribute will have the isid property if its typed value is a single atomic value of type xsid or a type derived by restriction from xsid no error is raised in respect of a candidate idref value that does not match the id of any element in the document if no candidate idref value matches the id value of any element the function returns the empty sequence it is not necessary that the supplied argument should have type xsidref or xsidrefs or that it should be derived from a node with the isidrefs property an element may have more than one id value this can occur with synthetic data models or with data models constructed from a psvi where the element and one of its attributes are both typed as xsid if the source document is wellformed but not valid it is possible for two or more elements to have the same id value in this situation the function will select the first such element it is also possible in a wellformed but invalid document to have an element or attribute that has the isid property but whose value does not conform to the lexical rules for the xsid type such a node will never be selected by this function examples let emp              employee xmlidid               empnreempnr               firstjohnfirst               lastbrownlast            employee          the expression ididname returns employee the xmlid attribute has the isid property so the employee element is selected the expression idename returns employee assuming the empnr element is given the type xsid as a result of schema validation the element will have the isid property and is therefore its parent is selected note the difference from the behavior of fnid  fnidref summary returns the sequence of element or attribute nodes with an idref value matching the value of one or more of the id values supplied in arg signatures fnidrefarg as xsstring as node fnidrefarg as xsstring node as node as node properties the oneargument form of this function is deterministic contextdependent and focusdependent the twoargument form of this function is deterministic contextindependent and focusindependent rules the function returns a sequence in document order with duplicates eliminated containing every element or attribute node n that satisfies all the following conditions n is in the target document the target document is the document containing node or the document containing the context item  if the second argument is omitted the behavior of the function if node is omitted is exactly the same as if the context item had been passed as node n has an idref value equal to one of the candidate id values where a node n has an idref value equal to v if both of the following conditions are true the isidrefs property see section  isidrefs accessor dm of n is true the sequence fntokenizefnnormalizespacefnstringn   contains a string that is equal to v under the rules of the eq operator using the unicode code point collation httpwwwworgxpathfunctionscollationcodepoint each xsstring in arg is parsed as if it were of lexically of type xsid these xsstrings are then included in the list of candidate xsids if any of the strings in arg is not a lexically valid xsid that is if it is not lexically an xsncname it is ignored more formally the candidate id values are the strings in the sequence arg castable as xsncname error conditions a dynamic error is raised errfodc if node or the context item if the second argument is omitted is a node in a tree whose root is not a document node the following errors may be raised when node is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp notes an element or attribute typically acquires the isidrefs property by being validated against the schema type xsidref or xsidrefs or for attributes only by being described as of type idref or idrefs in a dtd no error is raised in respect of a candidate id value that does not match the idref value of any element or attribute in the document if no candidate id value matches the idref value of any element or attribute the function returns the empty sequence it is possible for two or more nodes to have an idref value that matches a given candidate id value in this situation the function will return all such nodes however each matching node will be returned at most once regardless how many candidate id values it matches it is possible in a wellformed but invalid document to have a node whose isidrefs property is true but that does not conform to the lexical rules for the xsidref type the effect of the above rules is that illformed candidate id values and illformed idref values are ignored if the data model is constructed from a psvi the typed value of a node that has the isidrefs property will contain at least one atomic value of type xsidref or a type derived by restriction from xsidref it may also contain atomic values of other types these atomic values are treated as candidate id values if their lexical form is valid as an xsncname and they are ignored otherwise  fngenerateid summary this function returns a string that uniquely identifies a given node signatures fngenerateid as xsstring fngenerateidarg as node as xsstring properties the zeroargument form of this function is deterministic contextdependent and focusdependent the oneargument form of this function is deterministic contextindependent and focusindependent rules if the argument is omitted it defaults to the context item  the behavior of the function if the argument is omitted is exactly the same as if the context item had been passed as the argument if the argument is the empty sequence the result is the zerolength string in other cases the function returns a string that uniquely identifies a given node the returned identifier must consist of ascii alphanumeric characters and must start with an alphabetic character thus the string is syntactically an xml name an implementation is free to generate an identifier in any convenient way provided that it always generates the same identifier for the same node and that different identifiers are always generated from different nodes an implementation is under no obligation to generate the same identifiers each time a document is transformed or queried error conditions the following errors may be raised when arg is omitted if the context item is absentdm dynamic error errxpdyxp if the context item is not a node type error errxptyxp notes there is no guarantee that a generated unique identifier will be distinct from any unique ids specified in the source document there is no inverse to this function it is not directly possible to find the node with a given generated id of course it is possible to search a given sequence of nodes using an expression such as nodesgenerateidid it is advisable but not required for implementations to generate ids that are distinct even when compared using a caseblind collation examples the primary use case for this function is to generate hyperlinks for example when generating html an anchor for a given section sect can be generated by writing in either xslt or xquery a namegenerateidsect and a link to that section can then be produced with code such as see a hrefgenerateidsectherea note that anchors generated in this way will not necessarily be the same each time a document is republished  functions giving access to external information  fndoc summary retrieves a document using a uri supplied as an xsstring and returns the corresponding document node signature fndocuri as xsstring as documentnode properties this function is deterministic contextdependent and focusindependent it depends on available documents and static base uri rules if uri is the empty sequence the result is an empty sequence if uri is a relative uri reference it is resolved relative to the value of the static base uri property from the static context the resulting absolute uri is promoted to an xsstring if the available documents described in section  dynamic context xp provides a mapping from this string to a document node the function returns that document node the uri may include a fragment identifier by default this function is deterministic two calls on this function return the same document node if the same uri reference after resolution to an absolute uri reference is supplied to both calls thus the following expression if it does not raise an error will always be true docfooxml is docfooxml however for performance reasons implementations may provide a user option to evaluate the function without a guarantee of determinism the manner in which any such option is provided is implementationdefined if the user has not selected such an option a call of the function must either return a deterministic result or must raise a dynamic error errfodc note if uri is read from a source document it is generally appropriate to resolve it relative to the base uri property of the relevant node in the source document this can be achieved by calling the fnresolveuri function and passing the resulting absolute uri as an argument to the fndoc function if two calls to this function supply different absolute uri references as arguments the same document node may be returned if the implementation can determine that the two arguments refer to the same resource by defining the semantics of this function in terms of a stringtodocumentnode mapping in the dynamic context the specification is acknowledging that the results of this function are outside the purview of the language specification itself and depend entirely on the runtime environment in which the expression is evaluated this runtime environment includes not only an unpredictable collection of resources the web but configurable machinery for locating resources and turning their contents into document nodes within the xpath data model both the set of resources that are reachable and the mechanisms by which those resources are parsed and validated are implementation dependent one possible processing model for this function is as follows the resource identified by the uri reference is retrieved if the resource cannot be retrieved a dynamic error is raised errfodc the data resulting from the retrieval action is then parsed as an xml document and a tree is constructed in accordance with the xquery and xpath data model xdm  if the toplevel media type is known and is text the content is parsed in the same way as if the media type were textxml otherwise it is parsed in the same way as if the media type were applicationxml if the contents cannot be parsed successfully a dynamic error is raised errfodc otherwise the result of the function is the document node at the root of the resulting tree this tree is then optionally validated against a schema various aspects of this processing are implementationdefined implementations may provide external configuration options that allow any aspect of the processing to be controlled by the user in particular the set of uri schemes that the implementation recognizes is implementationdefined implementations may allow the mapping of uris to resources to be configured by the user using mechanisms such as catalogs or userwritten uri handlers the handling of nonxml media types is implementationdefined implementations may allow instances of the data model to be constructed from nonxml resources under user control it is implementationdefined whether dtd validation andor schema validation is applied to the source document implementations may provide userdefined error handling options that allow processing to continue following an error in retrieving a resource or in parsing and validating its content when errors have been handled in this way the function may return either an empty sequence or a fallback document provided by the error handler implementations may provide user options that relax the requirement for the function to return deterministic results error conditions a dynamic error may be raised errfodc if uri is not a valid uri a dynamic error is raised errfodc if the available documents provides no mapping for the absolutized uri a dynamic error is raised errfodc if the resource cannot be retrieved or cannot be parsed successfully as xml a dynamic error is raised errfodc if the implementation is not able to guarantee that the result of the function will be deterministic and the user has not indicated that an unstable result is acceptable  fndocavailable summary the function returns true if and only if the function call fndocuri would return a document node signature fndocavailableuri as xsstring as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on available documents and static base uri rules if uri is an empty sequence this function returns false if a call on fndocuri would return a document node this function returns true a dynamic error is raised errfodc if uri is not a valid uri according to the rules applied by the implementation of fndoc otherwise this function returns false if this function returns true then calling fndocuri within the same execution scope must return a document node however if nondeterministic processing has been selected for the fndoc function this guarantee is lost  fncollection summary returns a sequence of nodes representing a collection of documents indentified by a collection uri or a default collection if no uri is supplied signatures fncollection as node fncollectionarg as xsstring as node properties this function is deterministic contextdependent and focusindependent it depends on available node collections and static base uri rules this function takes an xsstring as argument and returns a sequence of nodes obtained by interpreting arg as an xsanyuri and resolving it according to the mapping specified in available node collections described in section c dynamic context components xp if available node collections provides a mapping from this string to a sequence of nodes the function returns that sequence if available node collections maps the string to an empty sequence then the function returns an empty sequence if arg is not specified the function returns the sequence of the nodes in the default node collection in the dynamic context see section c dynamic context components xp if the value of arg is a relative xsanyuri it is resolved against the value of the baseuri property from the static context if arg is the empty sequence the function behaves as if it had been called without an argument see above by default this function is deterministic this means that repeated calls on the function with the same argument will return the same result however for performance reasons implementations may provide a user option to evaluate the function without a guarantee of determinism the manner in which any such option is provided is implementationdefined if the user has not selected such an option a call to this function must either return a deterministic result or must raise a dynamic error errfodc there is no requirement that the returned nodes should be in document order nor is there a requirement that the result should contain no duplicates error conditions a dynamic error is raised errfodc if no uri is supplied and the value of the default collection is absentdm a dynamic error is raised errfodc if available node collections provides no mapping for the absolutized uri a dynamic error is raised errfodc if arg is not a valid xsanyuri notes this function provides a facility for users to work with a collection of documents which may be contained in a directory or in the rows of a relational table or in some other implementationspecific construct an implementation may also use external variables to identify external resources but fncollection provides functionality not provided by external variables specifying resources using uris is useful because uris are dynamic can be parameterized and do not rely on an external environment  fnuricollection summary returns a sequence of xsanyuri values representing the uris in a resource collection signatures fnuricollection as xsanyuri fnuricollectionarg as xsstring as xsanyuri properties this function is deterministic contextdependent and focusindependent it depends on available resource collections and static base uri rules the zeroargument form of the function returns the uris in the default resource collection described in section c dynamic context components xp if the value of arg is a relative xsanyuri it is resolved against the value of the baseuri property from the static context if arg is the empty sequence the function behaves as if it had been called without an argument see above the singleargument form of the function returns the sequence of uris corresponding to the supplied uri in the available resource collections described in section c dynamic context components xp error conditions a dynamic error is raised errfodc if no uri is supplied that is if the the function is called with no arguments or with a single argument that evaluates to an empty sequence and the value of the default resource collection is absentdm a dynamic error is raised errfodc if available resource collections provides no mapping for the absolutized uri a dynamic error is raised errfodc if arg is not a valid xsanyuri notes there are several reasons why it might be appropriate to use this function in preference to the fncollection function it allows resources to be retrieved that are not wellformed xml documents for example the returned uris might be referenced using the fnunparsedtext function rather than the fndoc function in xslt  it allows the documents to be processed in streaming mode using the xslstream instruction it allows recovery from failures to read parse or validate individual documents by calling the fndoc function within the scope of trycatch it allows selection of which documents to read based on their uri for example they can be filtered to select those whose uris end in xml or those that use the https scheme an application might choose to limit the number of uris processed in a single run for example it might process only the first  uris in the collection or it might present the uris to the user and allow the user to select which of them need to be further processed it allows the uris to be modified before they are dereferenced for example by adding or removing query parameters or by redirecting the request to a local cache or to a mirror site for some of these use cases this assumes that the cost of calling fncollection might be significant for example it might involving retrieving all the documents in the collection over the network and parsing them this will not necessarily be true of all implementations some implementations might ensure that calling fnuricollection and then applying fndoc to each of the returned uris delivers the same result as calling fncollection with the same argument however this is not guaranteed there is no requirement that the uris returned by this function should all be distinct and no assumptions can be made about the order of uris in the sequence unless the implementation defines otherwise  fnunparsedtext summary the fnunparsedtext function reads an external resource for example a file and returns a string representation of the resource signatures fnunparsedtexthref as xsstring as xsstring fnunparsedtexthref as xsstring encoding as xsstring as xsstring properties this function is deterministic contextdependent and focusindependent it depends on static base uri rules the href argument must be a string in the form of a uri reference which must contain no fragment identifier and must identify a resource for which a string representation is available if the uri is a relative uri reference then it is resolved relative to the static base uri property from the static context the mapping of uris to the string representation of a resource is the mapping defined in the available text resourcesxp component of the dynamic context if the value of the href argument is an empty sequence the function returns an empty sequence the encoding argument if present is the name of an encoding the values for this attribute follow the same rules as for the encoding attribute in an xml declaration the only values which every implementation is required to recognize are utf and utf the encoding of the external resource is determined as follows external encoding information is used if available otherwise if the media type of the resource is textxml or applicationxml see rfc  or if it matches the conventions textxml or applicationxml see rfc  andor its successors then the encoding is recognized as specified in extensible markup language xml  fifth edition otherwise the value of the encoding argument is used if present otherwise the processor may use implementationdefined heuristics to determine the likely encoding otherwise utf is assumed the result of the function is a string containing the string representation of the resource retrieved using the uri error conditions a dynamic error is raised errfout if href contains a fragment identifier or if it cannot be used to retrieve the string representation of a resource a dynamic error is raised errfout if the value of the encoding argument is not a valid encoding name if the processor does not support the specified encoding if the string representation of the retrieved resource contains octets that cannot be decoded into unicode characters using the specified encoding or if the resulting characters are not permitted xml characters a dynamic error is raised errfout if encoding is absent and the processor cannot infer the encoding using external information and the encoding is not utf notes if it is appropriate to use a base uri other than the dynamic base uri for example when resolving a relative uri reference read from a source document then it is advisable to resolve the relative uri reference using the fnresolveuri function before passing it to the fnunparsedtext function there is no essential relationship between the sets of uris accepted by the two functions fnunparsedtext and fndoc a uri accepted by one may or may not be accepted by the other and if a uri is accepted by both there is no essential relationship between the results different resource representations are permitted by the architecture of the web there are no constraints on the mime type of the resource the fact that the resolution of uris is defined by a mapping in the dynamic context means that in effect various aspects of the behavior of this function are implementationdefined implementations may provide external configuration options that allow any aspect of the processing to be controlled by the user in particular the set of uri schemes that the implementation recognizes is implementationdefined implementations may allow the mapping of uris to resources to be configured by the user using mechanisms such as catalogs or userwritten uri handlers the handling of media types is implementationdefined implementations may provide userdefined error handling options that allow processing to continue following an error in retrieving a resource or in reading its content when errors have been handled in this way the function may return a fallback document provided by the error handler implementations may provide user options that relax the requirement for the function to return deterministic results the rules for determining the encoding are chosen for consistency with xml inclusions xinclude version  second edition files with an xml media type are treated specially because there are use cases for this function where the retrieved text is to be included as unparsed xml within a cdata section of a containing document and because processors are likely to be able to reuse the code that performs encoding detection for xml external entities if the text file contains characters such as  and  these will typically be output as lt and amp if the string is serialized as xml or html if these characters actually represent markup for example if the text file contains html then an xslt stylesheet can attempt to write them as markup to the output file using the disableoutputescaping attribute of the xslvalueof instruction note however that xslt implementations are not required to support this feature examples this xslt example attempts to read a file containing boilerplate html and copy it directly to the serialized output file xsloutput methodhtmlxsltemplate match  xslvalueof selectunparsedtextheaderhtml iso                disableoutputescapingyes  xslapplytemplates  xslvalueof selectunparsedtextfooterhtml iso                disableoutputescapingyesxsltemplate  fnunparsedtextlines summary the fnunparsedtextlines function reads an external resource for example a file and returns its contents as a sequence of strings one for each line of text in the string representation of the resource signatures fnunparsedtextlineshref as xsstring as xsstring fnunparsedtextlines href as xsstring encoding as xsstring as xsstring properties this function is deterministic contextdependent and focusindependent it depends on static base uri rules the unparsedtextlines function reads an external resource for example a file and returns its string representation as a sequence of strings separated at newline boundaries the result of the singleargument function is the same as the result of the expression fntokenizefnunparsedtexthref rnrnnotpositionlast and  the result of the twoargument function is the same as the result of the expression fntokenizefnunparsedtexthref encoding rnrnnotpositionlast and  the result is thus a sequence of strings containing the text of the resource retrieved using the uri each string representing one line of text lines are separated by one of the sequences xa xd or xdxa the characters representing the newline are not included in the returned strings if there are two adjacent newline sequences a zerolength string will be returned to represent the empty line but if the external resource ends with the sequence xa xd or xdxa the result will be as if this final line ending were not present error conditions error conditions are the same as for the fnunparsedtext function notes see the notes for fnunparsedtext  fnunparsedtextavailable summary because errors in evaluating the fnunparsedtext function are nonrecoverable these two functions are provided to allow an application to determine whether a call with particular arguments would succeed signatures fnunparsedtextavailablehref as xsstring as xsboolean fnunparsedtextavailable href as xsstring encoding as xsstring as xsboolean properties this function is deterministic contextdependent and focusindependent it depends on static base uri rules the fnunparsedtextavailable function determines whether a call on the fnunparsedtext function with identical arguments would return a string if the first argument is an empty sequence the function returns false in other cases the function returns true if a call on fnunparsedtext with the same arguments would succeed and false if a call on fnunparsedtext with the same arguments would fail with a nonrecoverable dynamic error the functions fnunparsedtext and fnunparsedtextavailable have the same requirement for determinism as the functions fndoc and fndocavailable this means that unless the user has explicitly stated a requirement for a reduced level of determinism either of these functions if called twice with the same arguments during the course of a transformation must return the same results each time moreover the results of a call on fnunparsedtextavailable must be consistent with the results of a subsequent call on unparsedtext with the same arguments notes this requires that the unparsedtextavailable function should actually attempt to read the resource identified by the uri and check that it is correctly encoded and contains no characters that are invalid in xml implementations may avoid the cost of repeating these checks for example by caching the validated contents of the resource to anticipate a subsequent call on the unparsedtext or unparsedtextlines function alternatively implementations may be able to rewrite an expression such as if unparsedtextavailablea then unparsedtexta else  to generate a single call internally since the function unparsedtextlines succeeds or fails under exactly the same circumstances as unparsedtext the unparsedtextavailabl function may equally be used to test whether a call on unparsedtextlines would succeed  fnenvironmentvariable summary returns the value of a system environment variable if it exists signature fnenvironmentvariablename as xsstring as xsstring properties this function is deterministic contextdependent and focusindependent it depends on environment variables rules the set of available environment variablesxp is a set of name value pairs forming part of the dynamic context in which the name is unique within the set of pairs the name and value are arbitrary strings if the name argument matches the name of one of these pairs the function returns the corresponding value if there is no environment variable with a matching name the function returns the empty sequence the collation used for matching names is implementationdefined but must be the same as the collation used to ensure that the names of all environment variables are unique the function is deterministic which means that if it is called several times within the same execution scope with the same arguments it must return the same result notes on many platforms the term environment variable has a natural meaning in terms of facilities provided by the operating system this interpretation of the concept does not exclude other interpretations such as a mapping to a set of configuration parameters in a database system environment variable names are usually case sensitive names are usually of the form letter_ letter_digit but this varies by platform on some platforms there may sometimes be multiple environment variables with the same name in this case it is implementationdependent as to which is returned see for example posix chapter  environment variables implementations may use prefixes or other naming conventions to disambiguate the names the requirement to ensure that the function is deterministic means in practice that the implementation must make a snapshot of the environment variables at some time during execution and return values obtained from this snapshot rather than using live values that are subject to change at any time operating system environment variables may be associated with a particular process while queries and stylesheets may execute across multiple processes or multiple machines in such circumstances implementations may choose to provide access to the environment variables associated with the process in which the query or stylesheet processing was initiated security advice queries from untrusted sources should not be permitted unrestricted access to environment variables for example the name of the account under which the query is running may be useful information to a wouldbe intruder an implementation may therefore choose to restrict access to the environment or may provide a facility to make fnenvironmentvariable always return the empty sequence  fnavailableenvironmentvariables summary returns a list of environment variable names that are suitable for passing to fnenvironmentvariable as a possibly empty sequence of strings signature fnavailableenvironmentvariables as xsstring properties this function is deterministic contextdependent and focusindependent it depends on environment variables rules the function returns a sequence of strings being the names of the environment variables in the dynamic context in some implementationdependent order the function is deterministic that is the set of available environment variables does not vary during evaluation notes the function returns a list of strings containing no duplicates it is intended that the strings in this list should be suitable for passing to fnenvironmentvariable see also the note on security under the definition of the fnenvironmentvariable function if access to environment variables has been disabled fnavailableenvironmentvariables always returns the empty sequence  parsing and serializing  fnparsexml summary this function takes as input an xml document represented as a string and returns the document node at the root of an xdm tree representing the parsed document signature fnparsexmlarg as xsstring as documentnodeelement properties this function is nondeterministic contextdependent and focusindependent it depends on static base uri rules if arg is the empty sequence the function returns the empty sequence the precise process used to construct the xdm instance is implementationdefined in particular it is implementationdefined whether dtd andor schema validation is invoked and it is implementationdefined whether an xml  or xml  parser is used the static base uri property from the static context of the fnparsexml function call is used both as the base uri used by the xml parser to resolve relative entity references within the document and as the base uri of the document node that is returned the document uri of the returned node is absent the function is not deterministic that is if the function is called twice with the same arguments it is implementationdependent whether the same node is returned on both occasions error conditions a dynamic error is raised errfodc if the content of arg is not a wellformed and namespacewellformed xml document a dynamic error is raised errfodc if dtdbased validation is carried out and the content of arg is not valid against its dtd notes since the xml document is presented to the parser as a string rather than as a sequence of octets the encoding specified within the xml declaration has no meaning if the xml parser accepts input only in the form of a sequence of octets then the processor must ensure that the string is encoded as octets in a way that is consistent with rules used by the xml parser to detect the encoding the primary use case for this function is to handle input documents that contain nested xml documents embedded within cdata sections since the content of the cdata section are exposed as text the receiving query or stylesheet may pass this text to the fnparsexml function to create a tree representation of the nested document similarly nested xml within comments is sometimes encountered and lexical xml is sometimes returned by extension functions for example functions that access web services or read from databases a use case arises in xslt where there is a need to preprocess an input document before parsing for example an application might wish to edit the document to remove its doctype declaration this can be done by reading the raw text using the fnunparsedtext function editing the resulting string and then passing it to the fnparsexml function examples the expression fnparsexmlalphaabcdalpha returns a newly created document node having an alpha element as its only child the alpha element in turn is the parent of a text node whose string value is abcd  fnparsexmlfragment summary this function takes as input an xml external entity represented as a string and returns the document node at the root of an xdm tree representing the parsed document fragment signature fnparsexmlfragmentarg as xsstring as documentnode properties this function is nondeterministic contextdependent and focusindependent it depends on static base uri rules if arg is the empty sequence the function returns the empty sequence the input must be a namespacewellformed external general parsed entity more specifically it must be a string conforming to the production rule extparsedentxml in extensible markup language xml  fifth edition it must contain no entity references other than references to predefined entities and it must satisfy all the rules of namespaces in xml for namespacewellformed documents with the exception that the rule requiring it to be a wellformed document is replaced by the rule requiring it to be a wellformed external general parsed entity the string is parsed to form a sequence of nodes which become children of the new document node in the same way as the content of any element is converted into a sequence of children for the resulting element node schema validation is not invoked which means that the nodes in the returned document will all be untyped the precise process used to construct the xdm instance is implementationdefined in particular it is implementationdefined whether an xml  or xml  parser is used the static base uri from the static context of the fnparsexmlfragment function call is used as the base uri of the document node that is returned the document uri of the returned node is absent the function is not deterministic that is if the function is called twice with the same arguments it is implementationdependent whether the same node is returned on both occasions error conditions a dynamic error is raised errfodc if the content of arg is not a wellformed external general parsed entity if it contains entity references other than references to predefined entities or if a document that incorporates this wellformed parsed entity would not be namespacewellformed notes see also the notes for the fnparsexml function the main differences between fnparsexml and fnparsexmlfragment are that for fnparsexml the children of the resulting document node must contain exactly one element node and no text nodes wheras for fnparsexmlfragment the resulting document node can have any number including zero of element and text nodes among its children an additional difference is that the text declaration at the start of an external entity has slightly different syntax from the xml declaration at the start of a wellformed document note that all whitespace outside the text declaration is significant including whitespace that precedes the first element node one use case for this function is to handle xml fragments stored in databases which frequently allow zeroormore top level element nodes another use case is to parse the contents of a cdata section embedded within another xml document examples the expression fnparsexmlfragmentalphaabcdalphabetaabcdbeta returns a newly created document node having two elements named alpha and beta as its children each of these elements in turn is the parent of a text node the expression fnparsexmlfragmenthe was isoi kind returns a newly created document node having three children a text node whose string value is he was  an element node named i having a child text node with string value so and a text node whose string value is  kind the expression fnparsexmlfragment returns a document node having no children the expression fnparsexmlfragment  returns a document node whose children comprise a single text node whose string value is a single space the expression fnparsexmlfragmentxml version encodingutf standaloneyesa results in a dynamic error errfodc because the standalone keyword is not permitted in the text declaration that appears at the start of an external general parsed entity thus it is not the case that any input accepted by the fnparsexml function will also be accepted by fnparsexmlfragment  fnserialize summary this function serializes the supplied input sequence arg as described in xslt and xquery serialization  returning the serialized representation of the sequence as a string signatures fnserializearg as item as xsstring fnserialize arg as item params as elementoutputserializationparameters as xsstring properties this function is deterministic contextindependent and focusindependent rules the value of arg acts as the input sequence to the serialization process which starts with sequence normalization the singleargument version of this function has the same effect as the twoargument version called with params set to an empty sequence this in turn is the same as the effect of passing an outputserializationparameters element with no child elements the params argument is used to identify a set of serialization parameters these are supplied in the form of an outputserializationparameters element having the format described in section  setting serialization parameters by means of a data model instance ser the final stage of serialization that is encoding is skipped if the serializer does not allow this phase to be skipped then the sequence of octets returned by the serializer is decoded into a string by reversing the character encoding performed in the final stage error conditions if the host language makes serialization an optional feature and the implementation does not support serialization then a dynamic error errfodc is raised the serialization process will raise an error if arg is an attribute or namespace node if any serialization error occurs including the detection of an invalid value for a serialization parameter this results in the fnserialize call failing with a dynamic error notes one use case for this function arises when there is a need to construct an xml document containing nested xml documents within a cdata section or on occasions within a comment see fnparsexml for further details another use case arises when there is a need to call an extension function that expects a lexical xml document as input there are also use cases where the application wants to postprocess the output of a query or transformation for example by adding an internal dtd subset or by inserting proprietary markup delimiters such as the    used by some templating languages examples given the output parameters let params  outputserializationparameters xmlnsoutputhttpwwwworgxsltxqueryserialization  outputomitxmldeclaration valueyesoutputserializationparameters          let data  a b          the following call might produce the output shown the expression fnserializedata params returns a b  context functions the following functions are defined to obtain information from the static or dynamic context function meaning fnposition returns the context position from the dynamic context fnlast returns the context size from the dynamic context fncurrentdatetime returns the current date and time with timezone fncurrentdate returns the current date fncurrenttime returns the current time fnimplicittimezone returns the value of the implicit timezone property from the dynamic context fndefaultcollation returns the value of the default collation property from the static context fnstaticbaseuri this function returns the value of the static base uri property from the static context  fnposition summary returns the context position from the dynamic context signature fnposition as xsinteger properties this function is deterministic contextdependent and focusdependent rules returns the context position from the dynamic context see section c dynamic context components xp error conditions a dynamic error is raised errxpdyxp if the context item is absentdm  fnlast summary returns the context size from the dynamic context signature fnlast as xsinteger properties this function is deterministic contextdependent and focusdependent rules returns the context size from the dynamic context see section c dynamic context components xp error conditions a dynamic error is raised errxpdyxp if the context item is absentdm examples the expression  to fnlast   returns   fncurrentdatetime summary returns the current date and time with timezone signature fncurrentdatetime as xsdatetimestamp properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules returns the current datetime with timezone from the dynamic context see section c dynamic context components xp this is an xsdatetime that is current at some time during the evaluation of a query or transformation in which fncurrentdatetime is executed this function is deterministic the precise instant during the query or transformation represented by the value of fncurrentdatetime is implementation dependent if the implementation supports data types from xsd  then the returned value will be an instance of xsdatetimestamp otherwise the only guarantees are that it will be an instance of xsdatetime and will have a timezone component notes the returned xsdatetime will always have an associated timezone which will always be the same as the implicit timezone in the dynamic context examples fncurrentdatetime returns an xsdatetimestamp corresponding to the current date and time for example a call of fncurrentdatetime might return tz corresponding to the current time on may   in timezone z  fncurrentdate summary returns the current date signature fncurrentdate as xsdate properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules returns xsdatefncurrentdatetime this is an xsdate with timezone that is current at some time during the evaluation of a query or transformation in which fncurrentdate is executed this function is deterministic the precise instant during the query or transformation represented by the value of fncurrentdate is implementation dependent notes the returned date will always have an associated timezone which will always be the same as the implicit timezone in the dynamic context examples fncurrentdate returns an xsdate corresponding to the current date for example a call of fncurrentdate might return   fncurrenttime summary returns the current time signature fncurrenttime as xstime properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules returns xstimefncurrentdatetime this is an xstime with timezone that is current at some time during the evaluation of a query or transformation in which fncurrenttime is executed this function is deterministic the precise instant during the query or transformation represented by the value of fncurrenttime is implementation dependent notes the returned time will always have an associated timezone which will always be the same as the implicit timezone in the dynamic context examples fncurrenttime returns an xstime corresponding to the current time for example a call of fncurrenttime might return   fnimplicittimezone summary returns the value of the implicit timezone property from the dynamic context signature fnimplicittimezone as xsdaytimeduration properties this function is deterministic contextdependent and focusindependent it depends on implicit timezone rules returns the value of the implicit timezone property from the dynamic context components of the dynamic context are discussed in section c dynamic context components xp  fndefaultcollation summary returns the value of the default collation property from the static context signature fndefaultcollation as xsstring properties this function is deterministic contextdependent and focusindependent it depends on collations rules returns the value of the default collation property from the static context components of the static context are discussed in section c static context components xp notes the default collation property can never be absent if it is not explicitly defined a system defined default can be invoked if this is not provided the unicode codepoint collation httpwwwworgxpathfunctionscollationcodepoint is used  fnstaticbaseuri summary this function returns the value of the static base uri property from the static context signature fnstaticbaseuri as xsanyuri properties this function is deterministic contextdependent and focusindependent it depends on static base uri rules the function returns the value of the static base uri property from the static context if the property is absent the empty sequence is returned components of the static context are discussed in section  static context xp  notes xquery  and xslt  give an implementation freedom to use different base uris during the static analysis phase and the dynamic evaluation phase that is for compiletime and runtime resources respectively in this situation the fnstaticbaseuri function should return a uri suitable for locating resources needed during dynamic evaluation  higherorder functions  functions on functions the following functions operate on function items that is values referring to a function function meaning fnfunctionlookup returns the function having a given name and arity if there is one fnfunctionname returns the name of the function identified by a function item fnfunctionarity returns the arity of the function identified by a function item  fnfunctionlookup summary returns the function having a given name and arity if there is one signature fnfunctionlookupname as xsqname arity as xsinteger as function properties this function is deterministic contextdependent and focusdependent rules a call to fnfunctionlookup returns the function obtained by looking up the expanded qname supplied as name and the arity supplied as arity in the named functions component of the dynamic context specifically the dynamic context of the call to fnfunctionlookup furthermore if that function has an implementationdependent implementation see note below then the implementation of the function returned by fnfunctionlookup is associated with the static and dynamic context of the call to fnfunctionlookup note the above rule deliberately uses the same wording as the corresponding rule for named function references the term a function with an implementationdependent implementation essentially means a function whose implementation is provided by the language processor rather than by the stylesheet or query author this rule is therefore relevant to builtin functions and vendorsupplied extension functions whose result depends on the context of the function call otherwise if no known function can be identified by name and arity an empty sequence is returned if the arguments to fnfunctionlookup identify a function that is present in the static context of the function call the function will always return the same function that a static reference to this function would bind to if there is no such function in the static context then the results depend on what is present in the dynamic context which is implementationdefined notes this function can be useful where there is a need to make a dynamic decision on which of several staticallyknown functions to call it can thus be used as a substitute for polymorphism in the case where the application has been designed so several functions implement the same interface the function can also be useful in cases where a query or stylesheet module is written to work with alternative versions of a library module in such cases the author of the main module might wish to test whether an imported library module contains or does not contain a particular function and to call a function in that module only if it is available in the version that was imported a static call would cause a static error if the function is not available whereas getting the function using fnfunctionlookup allows the caller to take fallback action in this situation if the function that is retrieved by fnfunctionlookup is contextdependent that is if it has dependencies on the static or dynamic context of its caller the context that applies is the static andor dynamic context of the call to the fnfunctionlookup function itself the context thus effectively forms part of the closure of the returned function in practice this applies only where the target of fnfunctionlookup is a builtin function because userdefined functions never depend on the static or dynamic context of the function call the rule applies recursively since fnfunctionlookup is itself a contextdependent builtin function these specifications do not define any circumstances in which the dynamic context will contain functions that are not present in the static context but neither do they rule this out for example an api may provide the ability to add functions to the dynamic context equally these specifications do not define any mechanism for creating contextdependent functions other than the builtin contextdepedendent functions but neither do they rule out the existence of such functions examples the expression fnfunctionlookupxsqnamefnsubstring abcd  returns bcd the expression fnfunctionlookupxsqnamexsdatetimestamp  xsdatetime tz returns an xsdatetime value set to the specified date time and timezone if the implementation supports xsd  then the result will be an instance of the derived type xsdatetimestamp the query is written to ensure that no failure occurs when the implementation does not recognize the type xsdatetimestamp the expression let f  fnfunctionlookupxsqnamezipbinaryentry  return if existsf then fhref entry else  returns the result of calling zipbinaryentryhref entry if the function is available or an empty sequence otherwise  fnfunctionname summary returns the name of the function identified by a function item signature fnfunctionnamefunc as function as xsqname properties this function is deterministic contextindependent and focusindependent rules if func refers to a named function fnfunctionnamefunc returns the name of that function otherwise func refers to an anonymous function fnfunctionnamefunc returns an empty sequence the prefix part of the returned qname is implementation dependent examples the expression fnfunctionnamefnsubstring returns fnqnamehttpwwwworgxpathfunctions fnsubstring the namespace prefix of the returned qname is not predictable the expression fnfunctionnamefunctionnodecountnode returns   fnfunctionarity summary returns the arity of the function identified by a function item signature fnfunctionarityfunc as function as xsinteger properties this function is deterministic contextindependent and focusindependent rules the fnfunctionarity function returns the arity number of arguments of the function identified by func examples the expression fnfunctionarityfnsubstring returns  the expression fnfunctionarityfunctionnodenamenode returns  the expression let initial  fnsubstring   return fnfunctionarityinitial returns   basic higherorder functions the following functions take function items as an argument function meaning fnforeach applies the function item f to every item from the sequence seq in turn returning the concatenation of the resulting sequences in order fnfilter returns those items from the sequence seq for which the supplied function f returns true fnfoldleft processes the supplied sequence from left to right applying the supplied function repeatedly to each item in turn together with an accumulated result value fnfoldright processes the supplied sequence from right to left applying the supplied function repeatedly to each item in turn together with an accumulated result value fnforeachpair applies the function item f to successive pairs of items taken one from seq and one from seq returning the concatenation of the resulting sequences in order  fnforeach summary applies the function item f to every item from the sequence seq in turn returning the concatenation of the resulting sequences in order signature fnforeachseq as item f as functionitem as item as item properties this function is deterministic contextindependent and focusindependent rules the effect of the function is equivalent to the following implementation in xquery declare function fnforeachseq f   if fnemptyseq  then   else ffnheadseq fnforeachfntailseq f or its equivalent in xslt xslfunction namefnforeach  xslparam nameseq  xslparam namef  xslif testfnexistsseq    xslsequence selectffnheadseq fnforeachfntailseq f  xslifxslfunction          notes the function call fnforeachseq f is equivalent to the expression for i in seq return fi assuming that ordering mode is ordered examples the expression fnforeach to  functiona  a  a  returns      the expression fnforeachjohn jane fnstringtocodepoints returns         the expression fnforeach  xsint returns    fnfilter summary returns those items from the sequence seq for which the supplied function f returns true signature fnfilterseq as item f as functionitem as xsboolean as item properties this function is deterministic contextindependent and focusindependent rules the effect of the function is equivalent to the following implementation in xquery declare function fnfilter        seq as item        f as functionitem as xsboolean        as item   if fnemptyseq  then   else  fnheadseqf eq fntrue          fnfilterfntailseq f        or its equivalent in xslt xslfunction namefnfilter asitem  xslparam nameseq asitem  xslparam namef asfunctionitem as xsboolean  xslif testfnexistsseq    xslsequence selectfnheadseqf eq fntrue fnfilterfntailseq f  xslifxslfunction          error conditions as a consequence of the function signature and the function calling rules a type error occurs if the supplied function f returns anything other than a single xsboolean item there is no conversion to an effective boolean value notes the function call fnfilterseq f has a very similar effect to the expression seqf there are some differences however in the case of fnfilter the function f is required to return a boolean there is no special treatment for numeric predicate values and no conversion to an effective boolean value also with a filter expression seqf the focus within the predicate is different from that outside this means that the use of a contextsensitive function such as fnlang will give different results in the two cases examples the expression fnfilter to  functiona a mod    returns       fnfoldleft summary processes the supplied sequence from left to right applying the supplied function repeatedly to each item in turn together with an accumulated result value signature fnfoldleft seq as item zero as item f as functionitem item as item as item properties this function is deterministic contextindependent and focusindependent rules the effect of the function is equivalent to the following implementation in xquery declare function fnfoldleft        seq as item        zero as item        f as functionitem item as item         as item   if fnemptyseq  then zero  else fnfoldleftfntailseq fzero fnheadseq f or its equivalent in xslt xslfunction namefnfoldleft asitem  xslparam nameseq asitem  xslparam namezero asitem  xslparam namef asfunctionitem item as item  xslchoose    xslwhen testfnemptyseq      xslsequence selectzero    xslwhen    xslotherwise      xslsequence selectfnfoldleftfntailseq fzero fnheadseq f    xslotherwise  xslchoosexslfunction          error conditions as a consequence of the function signature and the function calling rules a type error occurs if the supplied function f cannot be applied to two arguments where the first argument is either the value of zero or the result of a previous application of f and the second is seq or any trailing subsequence of seq notes this operation is often referred to in the functional programming literature as folding or reducing a sequence it takes a function that operates on a pair of values and applies it repeatedly with an accumulated result as the first argument and the next item in the sequence as the second argument the accumulated result is initially set to the value of the zero argument which is conventionally a value such as zero in the case of addition one in the case of multiplication or a zerolength string in the case of string concatenation that causes the function to return the value of the other argument unchanged examples the expression fnfoldleft to   functiona b  a  b  returns  this returns the sum of the items in the sequence the expression fnfoldleft  functiona b  a  b  returns  this returns the product of the items in the sequence the expression fnfoldlefttrue false false false functiona b  a or b  returns true this returns true if any item in the sequence has an effective boolean value of true the expression fnfoldlefttrue false false false functiona b  a and b  returns false this returns true only if every item in the sequence has an effective boolean value of true the expression fnfoldleft to   functiona b b a returns  this reverses the order of the items in a sequence the expression fnfoldleft to   fnconcat   returns  the expression fnfoldleft to  zero fnconcatf      returns fffffzero       fnfoldright summary processes the supplied sequence from right to left applying the supplied function repeatedly to each item in turn together with an accumulated result value signature fnfoldright seq as item zero as item f as functionitem item as item as item properties this function is deterministic contextindependent and focusindependent rules the effect of the function is equivalent to the following implementation in xquery declare function fnfoldright        seq as item         zero as item         f as functionitem item as item         as item   if fnemptyseq  then zero  else ffnheadseq fnfoldrightfntailseq zero f or its equivalent in xslt xslfunction namefnfoldright asitem  xslparam nameseq asitem  xslparam namezero asitem  xslparam namef asfunctionitem item as item  xslchoose    xslwhen testfnemptyseq      xslsequence selectzero    xslwhen    xslotherwise      xslsequence selectffnheadseq fnfoldrightfntailseq zero f    xslotherwise  xslchoosexslfunction          error conditions as a consequence of the function signature and the function calling rules a type error occurs if the supplied function f cannot be applied to two arguments where the first argument is any item in the sequence seq and the second is either the value of zero or the result of a previous application of f notes this operation is often referred to in the functional programming literature as folding or reducing a sequence it takes a function that operates on a pair of values and applies it repeatedly with the next item in the sequence as the first argument and the result of processing the remainder of the sequence as the second argument the accumulated result is initially set to the value of the zero argument which is conventionally a value such as zero in the case of addition one in the case of multiplication or a zerolength string in the case of string concatenation that causes the function to return the value of the other argument unchanged in cases where the function performs an associative operation on its two arguments such as addition or multiplication fnfoldright produces the same result as fnfoldleft examples the expression fnfoldright to   functiona b  a  b  returns  this returns the sum of the items in the sequence the expression fnfoldright to   fnconcat   returns  the expression fnfoldright to  zero concatf      returns f f f f f zero  fnforeachpair summary applies the function item f to successive pairs of items taken one from seq and one from seq returning the concatenation of the resulting sequences in order signature fnforeachpair seq as item seq as item f as functionitem item as item as item properties this function is deterministic contextindependent and focusindependent rules the effect of the function is equivalent to the following implementation in xquery declare function fnforeachpairseq seq f   iffnexistsseq and fnexistsseq    then      ffnheadseq fnheadseq     fnforeachpairfntailseq fntailseq f      else  or its equivalent in xslt xslfunction namefnforeachpair  xslparam nameseq  xslparam nameseq  xslparam namef  xslif testfnexistsseq and fnexistsseq    xslsequence selectffnheadseq fnheadseq    xslsequence selectfnforeachpairfntailseq fntailseq f  xslifxslfunction          examples the expression fnforeachpaira b c x y z concat returns ax by cz the expression fnforeachpair to   to  functiona ba  b returns       constructor functions  constructor functions for xml schema builtin atomic types every builtin atomic type that is defined in xml schema part  datatypes second edition except xsanyatomictype and xsnotation has an associated constructor function the type xsuntypedatomic defined in section  schema information dm and the two derived types xsyearmonthduration and xsdaytimeduration defined in section  schema information dm also have associated constructor functions implementations may additionally provide a constructor functions for the new data type xsdatetimestamp introduced in schema  part  a constructor function is not defined for xsanyatomictype as there are no atomic values with type annotation xsanyatomictype at runtime although this can be a statically inferred type a constructor function is not defined for xsnotation since it is defined as an abstract type in xml schema part  datatypes second edition if the static context see section  static context xp contains a type derived from xsnotation then a constructor function is defined for it see  constructor functions for userdefined types the form of the constructor function for an atomic type egtype is egtypearg as xsanyatomictype as egtype if arg is the empty sequence the empty sequence is returned for example the signature of the constructor function corresponding to the xsunsignedint type defined in xml schema part  datatypes second edition is xsunsignedintarg as xsanyatomictype as xsunsignedint calling the constructor function xsunsignedint returns the xsunsignedint value  another call of that constructor function that returns the same xsunsignedint value is xsunsignedint the same result would also be returned if the constructor function were to be called with a node that had a typed value equal to the xsunsignedint  the standard features described in section  atomization xp would atomize the node to extract its typed value and then call the constructor with that value if the value passed to a constructor is not in the lexical space of the datatype to be constructed and cannot be converted to a value in the value space of the datatype under the rules in this specification then an dynamic error is raised errforg the semantics of the constructor function  xstypearg  are identical to the semantics of  arg cast as xstype  see  casting if the argument to a constructor function is a literal the result of the function may be evaluated statically if an error is found during such evaluation it may be reported as a static error special rules apply to constructor functions for xsqname and types derived from xsqname and xsnotation see  constructor functions for xsqname and xsnotation the following constructor functions for the builtin atomic types are supported xsstringarg as xsanyatomictype as xsstring xsbooleanarg as xsanyatomictype as xsboolean xsdecimalarg as xsanyatomictype as xsdecimal xsfloatarg as xsanyatomictype as xsfloat implementations should return negative zero for xsfloate but because xml schema part  datatypes second edition does not distinguish between the values positive zero and negative zero implementations may return positive zero in this case xsdoublearg as xsanyatomictype as xsdouble implementations should return negative zero for xsdoublee but because xml schema part  datatypes second edition does not distinguish between the values positive zero and negative zero implementations may return positive zero in this case xsdurationarg as xsanyatomictype as xsduration xsdatetimearg as xsanyatomictype as xsdatetime xstimearg as xsanyatomictype as xstime xsdatearg as xsanyatomictype as xsdate xsgyearmontharg as xsanyatomictype as xsgyearmonth xsgyeararg as xsanyatomictype as xsgyear xsgmonthdayarg as xsanyatomictype as xsgmonthday xsgdayarg as xsanyatomictype as xsgday xsgmontharg as xsanyatomictype as xsgmonth xshexbinaryarg as xsanyatomictype as xshexbinary xsbasebinaryarg as xsanyatomictype as xsbasebinary xsanyuriarg as xsanyatomictype as xsanyuri xsqnamearg as xsanyatomictype as xsqname see  constructor functions for xsqname and xsnotation for special rules xsnormalizedstringarg as xsanyatomictype as xsnormalizedstring xstokenarg as xsanyatomictype as xstoken xslanguagearg as xsanyatomictype as xslanguage xsnmtokenarg as xsanyatomictype as xsnmtoken xsnamearg as xsanyatomictype as xsname xsncnamearg as xsanyatomictype as xsncname xsidarg as xsanyatomictype as xsid xsidrefarg as xsanyatomictype as xsidref xsentityarg as xsanyatomictype as xsentity see  casting to xsentity for rules related to constructing values of type xsentity and types derived from it xsintegerarg as xsanyatomictype as xsinteger xsnonpositiveintegerarg as xsanyatomictype as xsnonpositiveinteger xsnegativeintegerarg as xsanyatomictype as xsnegativeinteger xslongarg as xsanyatomictype as xslong xsintarg as xsanyatomictype as xsint xsshortarg as xsanyatomictype as xsshort xsbytearg as xsanyatomictype as xsbyte xsnonnegativeintegerarg as xsanyatomictype as xsnonnegativeinteger xsunsignedlongarg as xsanyatomictype as xsunsignedlong xsunsignedintarg as xsanyatomictype as xsunsignedint xsunsignedshortarg as xsanyatomictype as xsunsignedshort xsunsignedbytearg as xsanyatomictype as xsunsignedbyte xspositiveintegerarg as xsanyatomictype as xspositiveinteger xsyearmonthdurationarg as xsanyatomictype as xsyearmonthduration xsdaytimedurationarg as xsanyatomictype as xsdaytimeduration xsuntypedatomicarg as xsanyatomictype as xsuntypedatomic xsdatetimestamparg as xsanyatomictype as xsdatetimestamp available only if the implementation supports xsd   constructor functions for xsqname and xsnotation special rules apply to constructor functions for the types xsqname and xsnotation for two reasons values cannot belong directly to the type xsnotation only to its subtypes the lexical representation of these types uses namespace prefixes whose meaning is contextdependent these constraints result in the following rules there is no constructor function for xsnotation constructors are defined however for xsqname for types derived or constructed from xsqname and for types derived or constructed from xsnotation when converting from an xsstring the prefix within the lexical xsqname supplied as the argument is resolved to a namespace uri using the statically known namespaces from the static context if the lexical xsqname has no prefix the namespace uri of the resulting expandedqname is the default elementtype namespace from the static context components of the static context are defined in section  static context xp a dynamic error is raised errfons if the prefix is not bound in the static context as described in section  terminology dm the supplied prefix is retained as part of the expandedqname value when a constructor function for a namespacesensitive type is used as a literal function item or in a partial function application for example fnqname or fnqname the namespace bindings that are relevant are those from the static context of the literal function item or partial function application when a constructor function for a namespacesensitive type is obtained by means of the fnfunctionlookup function the relevant namespace bindings are those from the static context of the call on fnfunctionlookup note when the supplied argument to the xsqname constructor function is a node the node is atomized in the usual way and if the result is xsuntypedatomic it is then converted as if a string had been supplied the effect might not be what is desired for example given the attribute xsitypemytype the expression xsqname@xsitype might fail on the grounds that the prefix my is undeclared this is because the namespace bindings are taken from the static context that is from the query or stylesheet and not from the source document containing the @xsitype attribute the solution to this problem is to use the function call resolveqname@xsitype  instead  constructor functions for xml schema builtin list types each of the three builtin list types defined in xml schema part  datatypes second edition namely xsnmtokens xsentities and xsidrefs has an associated constructor function the function signatures are as follows xsnmtokensarg as xsanyatomictype as xsnmtoken xsentitiesarg as xsanyatomictype as xsentity xsidrefsarg as xsanyatomictype as xsidref the semantics are equivalent to casting to the corresponding types from xsstring all three of these types have the facet minlength   meaning that there must always be at least one item in the list the return type however allows for the fact that when the argument to the function is an empty sequence the result is an empty sequence note in the case of atomic types it is possible to use an expression such as xsdate@dateofbirth to convert an attribute value to an instance of xsdate knowing that this will work both in the case where the attribute is already annotated as xsdate and also in the case where it is xsuntypedatomic this approach does not work with list types because it is not permitted to use a value of type xsnmtoken as input to the constructor function xsnmtokens instead it is necessary to use conditional logic that performs the conversion only in the case where the input is untyped if @x instance of attribute xsuntypedatomic then xsnmtokens@x else data@x  constructor functions for xml schema builtin union types in the case of an implementation that supports xsd  there is a constructor function associated with the builtin union type xserror the function signature is as follows xserrorarg as xsanyatomictype as xserror the semantics are equivalent to casting to the corresponding union type see  casting to union types note because xserror has no member types and therefore has an empty value space casting will always fail with a dynamic error except in the case where the supplied argument is an empty sequence in which case the result is also an empty sequence  constructor functions for userdefined types for every userdefined simple type in the static context see section  static context xp there is a constructor function whose name is the same as the name of the type and whose effect is to create a value of that type from the supplied argument the rules for constructing userdefined types are defined in the same way as the rules for constructing builtin derived types defined in  constructor functions for xml schema builtin atomic types special rules apply to constructor functions for namespacesensitive types that is atomic types derived from xsqname and xsnotation list types that have a namespacesensitive item type and union types that have a namespacesensitive member type see  constructor functions for xsqname and xsnotation consider a situation where the static context contains an atomic type called hatsize defined in a schema whose target namespace is bound to the prefix eg in such a case the following constructor function is available to users eghatsizearg as xsanyatomictype as myhatsize in the case of an atomic type a the return type of the function is a reflecting the fact that the result will be an empty sequence if the input is an empty sequence for a union or list type the return type of the function is specified only as xsanyatomictype implementations performing static type checking will often be able to compute a more specific result type for example if the target type is a list type whose item type is the atomic type a the result will always be an instance of a if the target type is a pure union type u then the result will always be an instance of u in general however applications needing interoperable behavior on implementations that do strict static type checking will need to use a treat as expression to assert the specific type of the result to construct an instance of a userdefined type that is not in a namespace it is necessary to use a cast expression or undeclare the default function namespace for example if the userdefined type apple is derived from xsinteger but is not in a namespace an instance of this type can be constructed as follows using a cast expression this requires that the default elementtype namespace is no namespace  cast as apple the following shows the use of the constructor function declare default function namespace  apple  casting constructor functions and cast expressions accept an expression and return a value of a given type they both convert a source value sv of a source type st to a target value tv of the given target type tt with identical semantics and different syntax the name of the constructor function is the same as the name of the builtin xml schema part  datatypes second edition datatype or the datatype defined in section  schema information dm of xquery and xpath data model xdm  see  constructor functions for xml schema builtin atomic types or the userderived datatype see  constructor functions for userdefined types that is the target for the conversion and the semantics are exactly the same as for a cast expression for example xsdate  means exactly the same as   cast as xsdate  the cast expression takes a type name to indicate the target type of the conversion see section  cast xp if the type name allows the empty sequence and the expression to be cast is the empty sequence the empty sequence is returned if the type name does not allow the empty sequence and the expression to be cast is the empty sequence a type error is raised errxptyxp where the argument to a cast is a literal the result of the function may be evaluated statically if an error is encountered during such evaluation it may be reported as a static error the general rules for casting from primitive types to primitive types are defined in  casting from primitive types to primitive types and subsections describe the rules for specific target types the general rules for casting from xsstring and xsuntypedatomic follow in  casting from xsstring and xsuntypedatomic casting to nonprimitive types including atomic types derived by resctriction union types and list types is described in  casting involving nonprimitive types casting from derived types is defined in  casting from derived types to parent types  casting within a branch of the type hierarchy and  casting across the type hierarchy when casting from xsstring or xsuntypedatomic the semantics in  casting from xsstring and xsuntypedatomic apply regardless of target type  casting from primitive types to primitive types this section defines casting between the  primitive types defined in xml schema part  datatypes second edition as well as xsuntypedatomic xsinteger and the two derived types of xsduration xsyearmonthduration and xsdaytimeduration these four types are not primitive types but they are treated as primitive types in this section the type conversions that are supported between primitive atomic types are indicated in the table below casts between other nonprimitive types are defined in terms of these primitives in this table there is a row for each primitive type acting as the source of the conversion and there is a column for each primitive type acting as the target of the conversion the intersections of rows and columns contain one of three characters y indicates that a conversion from values of the type to which the row applies to the type to which the column applies is supported n indicates that there are no supported conversions from values of the type to which the row applies to the type to which the column applies and m indicates that a conversion from values of the type to which the row applies to the type to which the column applies may succeed for some values in the value space and fail for others xml schema part  datatypes second edition defines xsnotation as an abstract type thus casting to xsnotation from any other type including xsnotation is not permitted and raises a static error errxpstxp however casting from one subtype of xsnotation to another subtype of xsnotation is permitted casting is not supported to or from xsanysimpletype thus there is no row or column for this type in the table below for any node that has not been validated or has been validated as xsanysimpletype the typed value of the node is an atomic value of type xsuntypedatomic there are no atomic values with the type annotation xsanysimpletype at runtime casting to xsanysimpletype is not permitted and raises a static error errxpstxp similarly casting is not supported to or from xsanyatomictype and will raise a static error errxpstxp there are no atomic values with the type annotation xsanyatomictype at runtime although this can be a statically inferred type if casting is attempted from an st to a tt for which casting is not supported as defined in the table below a type error is raised errxptyxp in the following table the columns and rows are identified by short codes that identify simple types as follows ua  xsuntypedatomic auri  xsanyuri b  xsbasebinary bool  xsboolean dat  xsdate gday  xsgday dbl  xsdouble dec  xsdecimal dt  xsdatetime dtd  xsdaytimeduration dur  xsduration flt  xsfloat hxb  xshexbinary gmd  xsgmonthday gmon  xsgmonth int  xsinteger not  xsnotation qn  xsqname str  xsstring tim  xstime gym  xsgyearmonth ymd  xsyearmonthduration gyr  xsgyear in the following table the notation st indicates that the source s of the conversion is indicated in the column below the notation and that the target t is indicated in the row to the right of the notation st ua str flt dbl dec int dur ymd dtd dt tim dat gym gyr gmd gday gmon bool b hxb auri qn not ua y y m m m m m m m m m m m m m m m m m m m m m str y y m m m m m m m m m m m m m m m m m m m m m flt y y y y m m n n n n n n n n n n n y n n n n n dbl y y y y m m n n n n n n n n n n n y n n n n n dec y y y y y y n n n n n n n n n n n y n n n n n int y y y y y y n n n n n n n n n n n y n n n n n dur y y n n n n y y y n n n n n n n n n n n n n n ymd y y n n n n y y y n n n n n n n n n n n n n n dtd y y n n n n y y y n n n n n n n n n n n n n n dt y y n n n n n n n y y y y y y y y n n n n n n tim y y n n n n n n n n y n n n n n n n n n n n n dat y y n n n n n n n y n y y y y y y n n n n n n gym y y n n n n n n n n n n y n n n n n n n n n n gyr y y n n n n n n n n n n n y n n n n n n n n n gmd y y n n n n n n n n n n n n y n n n n n n n n gday y y n n n n n n n n n n n n n y n n n n n n n gmon y y n n n n n n n n n n n n n n y n n n n n n bool y y y y y y n n n n n n n n n n n y n n n n n b y y n n n n n n n n n n n n n n n n y y n n n hxb y y n n n n n n n n n n n n n n n n y y n n n auri y y n n n n n n n n n n n n n n n n n n y n n qn y y n n n n n n n n n n n n n n n n n n n y m not y y n n n n n n n n n n n n n n n n n n n y m  casting to xsstring and xsuntypedatomic casting is permitted from any primitive type to the primitive types xsstring and xsuntypedatomic when a value of any simple type is cast as xsstring the derivation of the xsstring value tv depends on the st and on the sv as follows if st is xsstring or a type derived from xsstring tv is sv if st is xsanyuri the type conversion is performed without escaping any characters if st is xsqname or xsnotation if the qualified name has a prefix then tv is the concatenation of the prefix of sv a single colon  and the local name of sv otherwise tv is the localname if st is a numeric type the following rules apply if st is xsinteger tv is the canonical lexical representation of sv as defined in xml schema part  datatypes second edition there is no decimal point if st is xsdecimal then if sv is in the value space of xsinteger that is if there are no significant digits after the decimal point then the value is converted from an xsdecimal to an xsinteger and the resulting xsinteger is converted to an xsstring using the rule above otherwise the canonical lexical representation of sv is returned as defined in xml schema part  datatypes second edition if st is xsfloat or xsdouble then tv will be an xsstring in the lexical space of xsdouble or xsfloat that when converted to an xsdouble or xsfloat under the rules of  casting from xsstring and xsuntypedatomic produces a value that is equal to sv or is nan if sv is nan in addition tv must satisfy the constraints in the following subbullets if sv has an absolute value that is greater than or equal to  one millionth and less than  one million then the value is converted to an xsdecimal and the resulting xsdecimal is converted to an xsstring according to the rules above as though using an implementation of xsdecimal that imposes no limits on the totaldigits or fractiondigits facets if sv has the value positive or negative zero tv is  or  respectively if sv is positive or negative infinity tv is the string inf or inf respectively in other cases the result consists of a mantissa which has the lexical form of an xsdecimal followed by the letter e followed by an exponent which has the lexical form of an xsinteger leading zeroes and  signs are prohibited in the exponent for the mantissa there must be a decimal point and there must be exactly one digit before the decimal point which must be nonzero the  sign is prohibited there must be at least one digit after the decimal point apart from this mandatory digit trailing zero digits are prohibited note the above rules allow more than one representation of the same value for example the xsfloat value whose exact decimal representation is e might be represented by any of the strings e e or e inter alia it is implementationdependent which of these representations is chosen if st is xsdatetime xsdate or xstime tv is the local value the components of tv are individually cast to xsstring using the functions described in castingtodatetimes and the results are concatenated together the year component is cast to xsstring using egconvertyeartostring the month day hour and minute components are cast to xsstring using egconverttocharstring the second component is cast to xsstring using egconvertsecondstostring the timezone component if present is cast to xsstring using egconverttztostring note that the hours component of the resulting string will never be  midnight is always represented as  if st is xsyearmonthduration or xsdaytimeduration tv is the canonical representation of sv as defined in  xsyearmonthduration or  xsdaytimeduration respectively if st is xsduration then let sym be sv cast as xsyearmonthduration and let sdt be sv cast as xsdaytimeduration now let the next intermediate value tym be sym cast as tt  and let tdt be sdt cast as tt  if tym is pm then tv is tdt otherwise tym and tdt are merged according to the following rules if tdt is pts then tv is tym otherwise tv is the concatenation of all the characters in tym and all the characters except the first p and the optional negative sign in tdt in all other cases tv is the xml schema part  datatypes second edition canonical representation of sv for datatypes that do not have a canonical lexical representation defined an implementation dependent canonical representation may be used to cast as xsuntypedatomic the value is cast as xsstring as described above and the type annotation changed to xsuntypedatomic note the string representations of numeric values are backwards compatible with xpath  except for the special values positive and negative infinity negative zero and values outside the range e to e  casting to numeric types  casting to xsfloat when a value of any simple type is cast as xsfloat the xsfloat tv is derived from the st and the sv as follows if st is xsfloat then tv is sv and the conversion is complete if st is xsdouble then tv is obtained as follows if sv is the xsdouble value inf inf nan positive zero or negative zero then tv is the xsfloat value inf inf nan positive zero or negative zero respectively otherwise sv can be expressed in the form m  e where the mantissa m and exponent e are signed xsintegers whose value range is defined in xml schema part  datatypes second edition and the following rules apply if m the mantissa of sv is outside the permitted range for the mantissa of an xsfloat value  to  then it is divided by n where n is the lowest positive xsinteger that brings the result of the division within the permitted range and the exponent e is increased by n this is integer division in effect the binary value of the mantissa is truncated on the right let m be the mantissa and e the exponent after this adjustment if e exceeds  the maximum exponent value in the value space of xsfloat then tv is the xsfloat value inf or inf depending on the sign of m if e is less than  the minimum exponent value in the value space of xsfloat then tv is the xsfloat value positive or negative zero depending on the sign of m otherwise tv is the xsfloat value m  e if st is xsdecimal or xsinteger then tv is xsfloat sv cast as xsstring and the conversion is complete if st is xsboolean sv is converted to e if sv is true and to e if sv is false and the conversion is complete if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic note xsd  adds the value inf to the lexical space as an alternative to inf xsd  also adds negative zero to the value space note implementations should return negative zero for xsfloate but because xml schema part  datatypes second edition does not distinguish between the values positive zero and negative zero implementations may return positive zero in this case  casting to xsdouble when a value of any simple type is cast as xsdouble the xsdouble value tv is derived from the st and the sv as follows if st is xsdouble then tv is sv and the conversion is complete if st is xsfloat or a type derived from xsfloat then tv is obtained as follows if sv is the xsfloat value inf inf nan positive zero or negative zero then tv is the xsdouble value inf inf nan positive zero or negative zero respectively otherwise sv can be expressed in the form m  e where the mantissa m and exponent e are signed xsinteger values whose value range is defined in xml schema part  datatypes second edition and tv is the xsdouble value m  e if st is xsdecimal or xsinteger then tv is xsdouble sv cast as xsstring and the conversion is complete if st is xsboolean sv is converted to e if sv is true and to e if sv is false and the conversion is complete if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic note xsd  adds the value inf to the lexical space as an alternative to inf xsd  also adds negative zero to the value space note implementations should return negative zero for xsdoublee but because xml schema part  datatypes second edition does not distinguish between the values positive zero and negative zero implementations may return positive zero in this case  casting to xsdecimal when a value of any simple type is cast as xsdecimal the xsdecimal value tv is derived from st and sv as follows if st is xsdecimal xsinteger or a type derived from them then tv is sv converted to an xsdecimal value if need be and the conversion is complete if st is xsfloat or xsdouble then tv is the xsdecimal value within the set of xsdecimal values that the implementation is capable of representing that is numerically closest to sv if two values are equally close then the one that is closest to zero is chosen if sv is too large to be accommodated as an xsdecimal see xml schema part  datatypes second edition for implementationdefined limits on numeric values a dynamic error is raised errfoca if sv is one of the special xsfloat or xsdouble values nan inf or inf a dynamic error is raised errfoca if st is xsboolean sv is converted to  if sv is  or true and to  if sv is  or false and the conversion is complete if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic  casting to xsinteger when a value of any simple type is cast as xsinteger the xsinteger value tv is derived from st and sv as follows if st is xsinteger or a type derived from xsinteger then tv is sv converted to an xsinteger value if need be and the conversion is complete if st is xsdecimal xsfloat or xsdouble then tv is sv with the fractional part discarded and the value converted to xsinteger thus casting  returns  and  returns  casting e returns  if sv is too large to be accommodated as an integer see xml schema part  datatypes second edition for implementationdefined limits on numeric values a dynamic error is raised errfoca if sv is one of the special xsfloat or xsdouble values nan inf or inf a dynamic error is raised errfoca if st is xsboolean sv is converted to  if sv is  or true and to  if sv is  or false and the conversion is complete if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic  casting to duration types when a value of type xsuntypedatomic xsstring a type derived from xsstring xsyearmonthduration or xsdaytimeduration is cast as xsduration xsyearmonthduration or xsdaytimeduration tv is derived from st and sv as follows if st is the same as tt then tv is sv if st is xsduration or a type derived from xsduration but not xsdaytimeduration or a type derived from xsdaytimeduration and tt is xsyearmonthduration then tv is derived from sv by removing the day hour minute and second components from sv if st is xsduration or a type derived from duration but not xsyearmonthduration or a type derived from xsyearmonthduration and tt is xsdaytimeduration then tv is derived from sv by removing the year and month components from sv if st is xsyearmonthduration or xsdaytimeduration and tt is xsduration then tv is derived from sv as defined in  casting from derived types to parent types if st is xsyearmonthduration and tt is xsdaytimeduration the cast is permitted and returns a xsdaytimeduration with value  seconds if st is xsdaytimeduration and tt is xsyearmonthduration the cast is permitted and returns a xsyearmonthduration with value  months if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic note that casting from xsduration to xsyearmonthduration or xsdaytimeduration loses information to avoid this users can cast the xsduration value to both an xsyearmonthduration and an xsdaytimeduration and work with both values  casting to date and time types in several situations casting to date and time types requires the extraction of a component from sv or from the result of fncurrentdatetime and converting it to an xsstring these conversions must follow certain rules for example converting an xsinteger year value requires converting to an xsstring with four or more characters preceded by a minus sign if the value is negative this document defines four functions to perform these conversions these functions are for illustrative purposes only and make no recommendations as to style or efficiency references to these functions from the following text are not normative the arguments to these functions come from functions defined in this document thus the functions below assume that they are correct and do no range checking on them declare function egconvertyeartostringyear as xsinteger as xsstring   let plusminus  if year   then  else    let yearstring  fnabsyear cast as xsstring   let length  fnstringlengthyearstring   return     if length    then fnconcatplusminus  yearstring     else     if length    then fnconcatplusminus  yearstring       else       if length    then fnconcatplusminus  yearstring       else fnconcatplusminus yearstring                     declare function egconverttocharstringvalue as xsinteger as xsstring   let string  value cast as xsstring   return      if fnstringlengthstring   then fnconcat string     else string                     declare function egconvertsecondstostringseconds as xsdecimal as xsstring   let string  seconds cast as xsstring   let intlength  fnstringlengthseconds cast as xsinteger cast as xsstring   return      if intlength   then fnconcat string     else string                     declare function egconverttztostringtz as xsdaytimeduration as xsstring   if emptytz      then    else if tz eq xsdaytimedurationpts     then z   else      let tzh  fnhoursfromdurationtz     let tzm  fnminutesfromdurationtz     let plusminus  if tzh   then  else      let tzhstring  egconverttocharstringfnabstzh     let tzmstring  egconverttocharstringfnabstzm     return fnconcatplusminus tzhstring  tzmstring                     conversion from primitive types to date and time types follows the rules below when a value of any primitive type is cast as xsdatetime the xsdatetime value tv is derived from st and sv as follows if st is xsdatetime then tv is sv if st is xsdate then let syr be egconvertyeartostring fnyearfromdate sv  let smo be egconverttocharstring fnmonthfromdate sv  let sda be egconverttocharstring fndayfromdate sv  and let stz be egconverttztostring fntimezonefromdate sv  tv is xsdatetime fnconcat syr   smo   sda  t  stz   if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic when a value of any primitive type is cast as xstime the xstime value tv is derived from st and sv as follows if st is xstime then tv is sv if st is xsdatetime then tv is xstime fnconcat egconverttocharstring fnhoursfromdatetime sv   egconverttocharstring fnminutesfromdatetime sv   egconvertsecondstostring fnsecondsfromdatetime sv  egconverttztostring fntimezonefromdatetime sv   if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic when a value of any primitive type is cast as xsdate the xsdate value tv is derived from st and sv as follows if st is xsdate then tv is sv if st is xsdatetime then let syr be egconvertyeartostring fnyearfromdatetime sv  let smo be egconverttocharstring fnmonthfromdatetime sv  let sda be egconverttocharstring fndayfromdatetime sv  and let stz be egconverttztostringfntimezonefromdatetime sv  tv is xsdate fnconcat syr   smo   sda stz   if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic when a value of any primitive type is cast as xsgyearmonth the xsgyearmonth value tv is derived from st and sv as follows if st is xsgyearmonth then tv is sv if st is xsdatetime then let syr be egconvertyeartostring fnyearfromdatetime sv  let smo be egconverttocharstring fnmonthfromdatetime sv  and let stz be egconverttztostring fntimezonefromdatetime sv  tv is xsgyearmonth fnconcat syr   smo stz   if st is xsdate then let syr be egconvertyeartostring fnyearfromdate sv  let smo be egconverttocharstring fnmonthfromdate sv  and let stz be egconverttztostring fntimezonefromdate sv  tv is xsgyearmonth fnconcat syr   smo stz   if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic when a value of any primitive type is cast as xsgyear the xsgyear value tv is derived from st and sv as follows if st is xsgyear then tv is sv if st is xsdatetime let syr be egconvertyeartostring fnyearfromdatetime sv  and let stz be egconverttztostring fntimezonefromdatetime sv  tv is xsgyearfnconcat syr stz  if st is xsdate let syr be egconvertyeartostring fnyearfromdate sv  and let stz be egconverttztostring fntimezonefromdate sv  tv is xsgyearfnconcat syr stz  if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic when a value of any primitive type is cast as xsgmonthday the xsgmonthday value tv is derived from st and sv as follows if st is xsgmonthday then tv is sv if st is xsdatetime then let smo be egconverttocharstring fnmonthfromdatetime sv  let sda be egconverttocharstring fndayfromdatetime sv  and let stz be egconverttztostring fntimezonefromdatetime sv  tv is xsgyearmonth fnconcat  smo  sda stz   if st is xsdate then let smo be egconverttocharstring fnmonthfromdate sv  let sda be egconverttocharstring fndayfromdate sv  and let stz be egconverttztostring fntimezonefromdate sv  tv is xsgyearmonth fnconcat  smo   sda stz   if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic when a value of any primitive type is cast as xsgday the xsgday value tv is derived from st and sv as follows if st is xsgday then tv is sv if st is xsdatetime then let sda be egconverttocharstring fndayfromdatetime sv  and let stz be egconverttztostring fntimezonefromdatetime sv  tv is xsgday fnconcat  sda stz  if st is xsdate then let sda be egconverttocharstring fndayfromdate sv  and let stz be egconverttztostring fntimezonefromdate sv  tv is xsgday fnconcat  sda stz  if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic when a value of any primitive type is cast as xsgmonth the xsgmonth value tv is derived from st and sv as follows if st is xsgmonth then tv is sv if st is xsdatetime then let smo be egconverttocharstring fnmonthfromdatetime sv  and let stz be egconverttztostring fntimezonefromdatetime sv  tv is xsgmonth fnconcat   smo stz  if st is xsdate then let smo be egconverttocharstring fnmonthfromdate sv  and let stz be egconverttztostring fntimezonefromdate sv  tv is xsgmonth fnconcat  smo stz  if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic  casting to xsboolean when a value of any primitive type is cast as xsboolean the xsboolean value tv is derived from st and sv as follows if st is xsboolean then tv is sv if st is xsfloat xsdouble xsdecimal or xsinteger and sv is     e or nan then tv is false if st is xsfloat xsdouble xsdecimal or xsinteger and sv is not one of the above values then tv is true if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic  casting to xsbasebinary and xshexbinary values of type xsbasebinary can be cast as xshexbinary and vice versa since the two types have the same value space casting to xsbasebinary and xshexbinary is also supported from the same type and from xsuntypedatomic xsstring and subtypes of xsstring using xml schema part  datatypes second edition semantics  casting to xsanyuri casting to xsanyuri is supported only from the same type xsuntypedatomic or xsstring when a value of any primitive type is cast as xsanyuri the xsanyuri value tv is derived from the st and sv as follows if st is xsuntypedatomic or xsstring see  casting from xsstring and xsuntypedatomic  casting to xsqname and xsnotation casting from xsstring or xsuntypedatomic to xsqname or xsnotation is described in  casting from xsstring and xsuntypedatomic it is also possible to cast from xsnotation to xsqname or from xsqname to any type derived by restriction from xsnotation casting to xsnotation itself is not allowed because xsnotation is an abstract type the resulting xsqname or xsnotation has the same prefix local name and namespace uri parts as the supplied value note see  constructor functions for xsqname and xsnotation for a discussion of how the combination of atomization and casting might not produce the desired effect  casting to xsentity xml schema part  datatypes second edition says that the value space of entity is the set of all strings that match the ncname production  and have been declared as an unparsed entity in a document type definition however xsl transformations xslt version  and xquery  an xml query language do not check that constructed values of type xsentity match declared unparsed entities thus this rule is relaxed in this specification and in casting to xsentity and types derived from it no check is made that the values correspond to declared unparsed entities  casting from xsstring and xsuntypedatomic this section applies when the supplied value sv is an instance of xsstring or xsuntypedatomic including types derived from these by restriction if the value is xsuntypedatomic it is treated in exactly the same way as a string containing the same sequence of characters the supplied string is mapped to a typed value of the target type as defined in xml schema part  datatypes second edition whitespace normalization is applied as indicated by the whitespace facet for the datatype the resulting whitespacenormalized string must be a valid lexical form for the datatype the semantics of casting follow the rules of xml schema validation for example  cast as xsunsignedint returns the xsunsignedint typed value  this could also be written xsunsignedint the target type can be any simple type other than an abstract type specifically it can be a type whose variety is atomic union or list in each case the effect of casting to the target type is the same as constructing an element with the supplied value as its content validating the element using the target type as the governing type and atomizing the element to obtain its typed value when the target type is a derived type that is restricted by a pattern facet the lexical form is first checked against the pattern before further casting is attempted see  casting to derived types if the lexical form does not conform to the pattern a dynamic error errforg is raised for example consider a userdefined type myboolean which is derived by restriction from xsboolean and specifies the pattern facet value the expression true cast as myboolean would fail with a dynamic error errforg facets other than pattern are checked after the conversion for example if there is a userdefined datatype called myheight defined as a restriction of xsinteger with the facet maxinclusive value then the expression  cast as myheight would fail with a dynamic error errforg casting to the types xsnotation xsanysimpletype or xsanyatomictype is not permitted because these types are abstract they have no immediate instances special rules apply when casting to namespacesensitive types the types xsqname and xsnotation are namespacesensitive any type derived by restriction from a namespacesensitive type is itself namespacesensitive as is any union type having a namespacesensitive type among its members and any list type having a namespacesensitive type as its item type for details see  constructor functions for xsqname and xsnotation note this version of the specification allows casting between xsqname and xsnotation in either direction this was not permitted in the previous recommendation this version also removes the rule that only a string literal rather than a dynamic string may be cast to an xsqname when casting to a numeric type if the value is too large or too small to be accurately represented by the implementation it is handled as an overflow or underflow as defined in  arithmetic operators on numeric values if the target type is xsfloat or xsdouble the string  and equivalents such as  or  should be converted to the value negative zero however if the implementation is reliant on an implementation of xml schema  in which negative zero is not part of the value space for these types these lexical forms may be converted to positive zero in casting to xsdecimal or to a type derived from xsdecimal if the value is not too large or too small but nevertheless cannot be represented accurately with the number of decimal digits available to the implementation the implementation may round to the nearest representable value or may raise a dynamic error errfoca the choice of rounding algorithm and the choice between rounding and error behavior and is implementationdefined in casting to xsdate xsdatetime xsgyear or xsgyearmonth or types derived from these if the value is too large or too small to be represented by the implementation a dynamic error errfodt is raised in casting to a duration value if the value is too large or too small to be represented by the implementation a dynamic error errfodt is raised for xsanyuri the extent to which an implementation validates the lexical form of xsanyuri is implementation dependent if the cast fails for any other reason a dynamic error errforg is raised  casting involving nonprimitive types casting from xsstring and xsuntypedatomic to any other type primitive or nonprimitive has been described in  casting from xsstring and xsuntypedatomic this section defines how other casts to nonprimitive types operate including casting to types derived by restriction to union types and to list types  casting to derived types casting a value to a derived type can be separated into four cases note that xsuntypedatomic xsinteger and the two derived types of xsdurationxsyearmonthduration and xsdaytimeduration are treated as primitive types when sv is an instance of a type that is derived by restriction from tt this is described in section  casting from derived types to parent types when sv is an instance of a type derived by restriction from the same primitive type as tt this is described in  casting within a branch of the type hierarchy when the derived type is derived directly or indirectly from a different primitive type than the primitive type of st this is described in  casting across the type hierarchy when sv is an immediate instance of tt the cast always succeeds returning sv unchanged  casting from derived types to parent types it is always possible to cast an atomic value a to a type t if the relation a instance of t is true provided that t is not an abstract type for example it is possible to cast an xsunsignedshort to an xsunsignedint to an xsinteger to an xsdecimal or to a union type whose member types are xsinteger and xsdouble since the value space of the original type is a subset of the value space of the target type such a cast is always successful for the expression a instance of t to be true t must be either an atomic type or a union type that has no constraining facets it cannot be a list type nor a union type derived by restriction from another union type nor a union type that has a list type among its member types the result will have the same value as the original but will have a new type annotation if t is an atomic type then the type annotation of the result is t if t is a union type then the type of the result is an atomic type m such that m is one of the atomic types in the transitive membership of the union type t and a instance of m is true if there is more than one type m that satisfies these conditions which could happen for example if t is the union of two overlapping types such as xsint and xspositiveinteger then the first one is used taking the member types in the order in which they appear within the definition of the union type  casting within a branch of the type hierarchy it is possible to cast an sv to a tt if the type of the sv and the tt type are both derived by restriction directly or indirectly from the same primitive type provided that the supplied value conforms to the constraints implied by the facets of the target type this includes the case where the target type is derived from the type of the supplied value as well as the case where the type of the supplied value is derived from the target type for example an instance of xsbyte can be cast as xsunsignedshort provided the value is not negative if the value does not conform to the facets defined for the target type then a dynamic error is raised errforg see xml schema part  datatypes second edition in the case of the pattern facet which applies to the lexical space rather than the value space the pattern is tested against the canonical lexical representation of the value as defined for the source type or the result of casting the value to an xsstring in the case of types that have no canonical lexical representation defined for them note that this will cause casts to fail if the pattern excludes the canonical lexical representation of the source type for example if the type mydistance is defined as a restriction of xsdecimal with a pattern that requires two digits after the decimal point casting of an xsinteger to mydistance will always fail because the canonical representation of an xsinteger does not conform to this pattern in some cases casting from a parent type to a derived type requires special rules see  casting to duration types for rules regarding casting to xsyearmonthduration and xsdaytimeduration see  casting to xsentity below for casting to xsentity and types derived from it  casting across the type hierarchy when the st and the tt are derived directly or indirectly from different primitive types this is called casting across the type hierarchy casting across the type hierarchy is logically equivalent to three separate steps performed in order errors can occur in either of the latter two steps cast the sv up the hierarchy to the primitive type of the source as described in  casting from derived types to parent types if sv is an instance of xsstring or xsuntypedatomic check its value against the pattern facet of tt and raise a dynamic error errforg if the check fails cast the value to the primitive type of tt as described in  casting from primitive types to primitive types if tt is derived from xsnotation assume for the purposes of this rule that casting to xsnotation succeeds cast the value down to the tt as described in  casting within a branch of the type hierarchy  casting to union types if the target type of a cast expression or a constructor function is a type with variety union the supplied value must be one of the following a value of type xsstring or xsuntypedatomic this case follows the general rules for casting from strings and has already been described in  casting from xsstring and xsuntypedatomic if the union type has a pattern facet the pattern is tested against the supplied value after whitespace normalization using the whitespace normalization rules of the member datatype against which validation succeeds a value that is an instance of one of the atomic types in the transitive membership of the union type and of the union type itself this case has already been described in  casting from derived types to parent types this situation only applies when the value is an instance of the union type which means it will never apply when the union is derived by facetbased restriction from another union type a value that is castable to one or more of the atomic types in the transitive membership of the union type in the sense that the castable as operator returns true in this case the supplied value is cast to each atomic type in the transitive membership of the union type in turn in the order in which the member types appear in the declaration until one of these casts is successful if none of them is successful a dynamic error occurs errforg if the union type has constraining facets then the resulting value must satisfy these facets otherwise a dynamic error occurs errforg if the union type has a pattern facet the pattern is tested against the canonical representation of the result value only the atomic types in the transitive membership of the union type are considered the union type may have list types in its transitive membership but unless the supplied value is of type xsstring or xsuntypedatomic in which case the rules in  casting from xsstring and xsuntypedatomic apply any list types in the membership are effectively ignored if more than one of these conditions applies then the casting is done according to the rules for the first condition that applies if none of these conditions applies the cast fails with a dynamic error errforg example consider a type u whose member types are xsinteger and xsdate the expression  cast as u returns the xsinteger value  the expression currentdate cast as u returns the current date as an instance of xsdate the expression  cast as u returns the xsinteger value  example consider a type v whose member types are xsshort and xsnegativeinteger the expression  cast as v returns the xsshort value  the expression  cast as v returns the xsnegativeinteger value  the expression  cast as v returns the xsshort value  the expression  cast as v raises a dynamic error errforg on the grounds that the string  is not in the lexical space of the union type example consider a type w that is derived from the above type v by restriction with a pattern facet of dd the expression  cast as v returns the xsshort value  the expression  cast as v raises an dynamic error errforg on the grounds that the string  does not match the pattern facet  casting to list types if the target type of a cast expression or a constructor function is a type with variety list the supplied value must be of type xsstring or xsuntypedatomic the rules follow the general principle for all casts from xsstring outlined in  casting from xsstring and xsuntypedatomic the semantics of the operation are consistent with validation that is the effect of casting a string s to a list type l is the same as constructing an element or attribute node whose string value is s validating it using l as the governing type and atomizing the resulting node the result will always be either failure or a sequence of zero or more atomic values each of which is an instance of the item type of l or if the item type of l is a union type an instance of one of the atomic types in its transitive membership if the item type of the list type is namespacesensitive then the namespace bindings in the static context will be used to resolve any namespace prefix in the same way as when the target type is xsqname if the list type has a pattern facet the pattern must match the supplied value after collapsing whitespace an operation equivalent to the use of the fnnormalizespace function for example the expression cast a b c d as xsnmtokens produces a sequence of four xsnmtoken values a b c d for example given a userdefined type mycoordinates defined as a list of xsinteger with the facet xslength value the expression mycoordinates  will return a sequence of two xsinteger values   while the expression mycoordinates   will result in a dynamic error because the length of the list does not conform to the length facet the expression mycoordinates  will also fail because the strings  and  are not in the lexical space of xsinteger a references a normative references character model for the world wide web  fundamentals character model for the world wide web  fundamentals available at httpwwwworgtrreccharmod ieee  ieee ieee standard for floatingpoint arithmetic iso  iso international organization for standardization codes for the representation of names of countries and their subdivisions  part  country codes iso  iso  iso international organization for standardization information technologylanguage independent arithmeticpart  integer and floating point arithmetic isoiec  locale data markup language unicode technical standard  locale data markup language available at httpwwwunicodeorgreportstr legacy extended iris for xml resource identification legacy extended iris for xml resource identification henry s thomson richard tobin and norman walsh eds world wide web consortium  november  available at httpwwwworgtrleiri rfc  ietf rfc  xml media types available at httpwwwietforgrfcrfctxt rfc  ietf rfc  xml media types available at httpwwwietforgrfcrfctxt rfc  ietf rfc  uniform resource identifiers uri generic syntax available at httpwwwietforgrfcrfctxt rfc  ietf rfc  internationalized resource identifiers iris available at httpwwwietforgrfcrfctxt olson timezone database the tz timezone database available at httpwwwtwinsuncomtztzlinkhtm it is implementationdefined which version of the database is used the unicode standard the unicode consortium reading ma addisonwesley  the unicode standard as updated from time to time by the publication of new versions see httpwwwunicodeorgstandardversions for the latest version and additional information on versions of the standard and of the unicode character database the version of unicode to be used is implementationdefined but implementations are recommended to use the latest unicode version currently version  unicode collation algorithm unicode technical standard  unicode collation algorithm available at httpwwwunicodeorgreportstr unicode normalization forms unicode standard annex  unicode normalization forms available at httpwwwunicodeorgreportstr as with the unicode standard the version to be used is implementationdefined unicode regular expressions unicode technical standard  unicode regular expressions available at httpwwwunicodeorgreportstr extensible markup language xml  fifth edition extensible markup language xml  fifth edition tim bray jean paoli michael sperbergmcqueen et al editors world wide web consortium  nov  this version is httpwwwworgtrrecxml the latest version is available at httpwwwworgtrxml extensible markup language xml  recommendation extensible markup language xml  second edition tim bray jean paoli michael sperbergmcqueen et al editors world wide web consortium  aug  this version is httpwwwworgtrrecxml the latest version is available at httpwwwworgtrxml xml path language xpath version  xml path language xpath version  james clark and steven derose editors world wide web consortium  nov  this version is httpwwwworgtrrecxpath the latest version is available at httpwwwworgtrxpath xml path language xpath  xml path language xpath  second edition don chamberlin anders berglund scott boag et al editors world wide web consortium  december  this version is httpwwwworgtrrecxpath the latest version is available at httpwwwworgtrxpath xml path language xpath  xml path language xpath  jonathan robie don chamberlin michael dyck john snelson editors world wide web consortium  april  this version is httpwwwworgtrrecxpath the latest version is available at httpwwwworgtrxpath xquery  and xpath  functions and operators xquery  and xpath  functions and operators second edition ashok malhotra jim melton and norman walsh editors world wide web consortium  december  this version is httpwwwworgtrrecxpathfunctions the latest version is available at httpwwwworgtrxpathfunctions xsl transformations xslt version  xsl transformations xslt version  second edition michael kay editor world wide web consortium  january  this version is httpwwwworgtrrecxslt the latest version is available at httpwwwworgtrxslt xquery and xpath data model xdm  xquery and xpath data model xdm  norman walsh anders berglund john snelson editors world wide web consortium  april  this version is httpwwwworgtrrecxpathdatamodel the latest version is available at httpwwwworgtrxpathdatamodel xslt and xquery serialization  xslt and xquery serialization  henry zongaro andrew coleman michael sperbergmcqueen editors world wide web consortium  april  this version is httpwwwworgtrrecxsltxqueryserialization the latest version is available at httpwwwworgtrxsltxqueryserialization xquery  and xpath  formal semantics xquery  and xpath  formal semantics second edition jrme simon denise draper peter frankhauser et al editors world wide web consortium  december  this version is httpwwwworgtrrecxquerysemantics the latest version is available at httpwwwworgtrxquerysemantics xquery  an xml query language xquery  an xml query language second edition don chamberlin anders berglund scott boag et al editors world wide web consortium  december  this version is httpwwwworgtrrecxquery the latest version is available at httpwwwworgtrxquery xquery  an xml query language xquery  an xml query language jonathan robie don chamberlin michael dyck john snelson editors world wide web consortium  april  this version is httpwwwworgtrrecxquery the latest version is available at httpwwwworgtrxquery xml inclusions xinclude version  second edition xml inclusions xinclude version  second edition jonathan marsh david orchard and daniel veillard editors world wide web consortium  nov  this version is httpwwwworgtrrecxinclude the latest version is available at httpwwwworgtrxinclude xml schema part  datatypes second edition xml schema part  datatypes second edition oct   available at httpwwwworgtrxmlschema schema  part  wc xml schema definition language xsd  part  datatypes david peterson sandy gao ashok malhotra et al editors world wide web consortium  apr  this version is httpwwwworgtrrecxmlschema the latest version is available at httpwwwworgtrxmlschema namespaces in xml namespaces in xml  third edition tim bray dave hollander andrew layman et al editors world wide web consortium  dec  this version is httpwwwworgtrrecxmlnames the latest version is available at httpwwwworgtrxmlnames a nonnormative references xsl transformations xslt version  xsl transformations xslt version  michael kay editor world wide web consortium  december  this version is httpwwwworgtrwdxslt the latest version is available at httpwwwworgtrxslt calendrical calculations edward m reingold and nachum dershowitz calendrical calculations millennium edition nd edition cambridge university press isbn     character model for the world wide web  normalization character model for the world wide web  normalization last call working draft available at httpwwwworgtrwdcharmodnorm html  html  recommendation  december  available at httpwwwworgtrrechtml iso  iso international organization for standardization representations of dates and times  available from httpwwwisoorg posix the open group base specifications isuse  ieee std  available at httppubsopengrouporgonlinepubs working with timezones world wide web consortium working group note working with timezones october   available at httpwwwworgtrnotetimezone b error summary the error text provided with these errors is nonnormative errfoar division by zero this error is raised whenever an attempt is made to divide by zero errfoar numeric operation overflowunderflow this error is raised whenever numeric operations result in an overflow or underflow errfoca input value too large for decimal raised when casting to xsdecimal if the supplied value exceeds the implementationdefined limits for the data type errfoca invalid lexical value raised by fnresolveqname and fnqname when a supplied value does not have the lexical form of a qname or uri respectively and when casting to decimal if the supplied value is nan or infinity errfoca input value too large for integer raised when casting to xsinteger if the supplied value exceeds the implementationdefined limits for the data type errfoca nan supplied as floatdouble value raised when multiplying or dividing a duration by a number if the number supplied is nan errfoca string to be cast to decimal has too many digits of precision raised when casting a string to xsdecimal if the string has more digits of precision than the implementation can represent the implementation also has the option of rounding errfoch codepoint not valid raised by fncodepointstostring if the input contains an integer that is not the codepoint of a valid xml character errfoch unsupported collation raised by any function that uses a collation if the requested collation is not recognized errfoch unsupported normalization form raised by fnnormalizeunicode if the requested normalization form is not supported by the implementation errfoch collation does not support collation units raised by functions such as fncontains if the requested collation does not operate on a characterbycharacter basis errfodc no context document raised by fnid fnidref and fnelementwithid if the node that identifies the tree to be searched is a node in a tree whose root is not a document node errfodc error retrieving resource raised by fndoc fncollection and fnuricollection to indicate that either the supplied uri cannot be dereferenced to obtain a resource or the resource that is returned is not parseable as xml errfodc function not defined as deterministic raised by fndoc fncollection to indicate that it is not possible to return a result that is guaranteed deterministic errfodc invalid argument to fncollection raised by fncollection if the argument is not a valid xsanyuri errfodc invalid argument to fndoc or fndocavailable raised optionally by fndoc and fndocavailable if the argument is not a valid xsanyuri errfodc string passed to fnparsexml is not a wellformed xml document raised by fnparsexml if the supplied string is not a wellformed and namespacewellformed xml document or if dtd validation is requested and the document is not valid against its dtd errfodc the processor does not support serialization raised when fnserialize is called and the processor does not support serialization in cases where the host language makes serialization an optional feature errfodf invalid decimal format name this error is raised if the decimal format name supplied to fnformatnumber is not a valid qname or if the prefix in the qname is undeclared or if there is no decimal format in the static context with a matching name errfodf invalid decimal format picture string this error is raised if the picture string supplied to fnformatnumber has invalid syntax errfodt overflowunderflow in datetime operation raised when casting to datetime data types or performing arithmetic with datetime values if arithmetic overflow or underflow occurs errfodt overflowunderflow in duration operation raised when casting to duration data types or performing arithmetic with duration values if arithmetic overflow or underflow occurs errfodt invalid timezone value raised by adjustdatetotimezone and related functions if the supplied timezone is invalid errfoer unidentified error error code used by fnerror when no other error code is provided errfofd invalid datetime formatting parameters this error is raised if the picture string or calendar supplied to fnformatdate fnformattime or fnformatdatetime has invalid syntax errfofd invalid datetime formatting component this error is raised if the picture string supplied to fnformatdate selects a component that is not present in a date or if the picture string supplied to fnformattime selects a component that is not present in a time errfons no namespace found for prefix raised by fnresolveqname and analagous functions if a supplied qname has a prefix that has no binding to a namespace errfons baseuri not defined in the static context raised by fnresolveuri if no base uri is available for resolving a relative uri errforg invalid value for castconstructor a generalpurpose error raised when casting if a cast between two data types is allowed in principle but the supplied value cannot be converted for example when attempting to cast the string nine to an integer errforg invalid argument to fnresolveuri raised when either argument to fnresolveuri is not a valid uriiri errforg fnzeroorone called with a sequence containing more than one item raised by fnzeroorone if the supplied value contains more than one item errforg fnoneormore called with a sequence containing no items raised by fnoneormore if the supplied value is an empty sequence errforg fnexactlyone called with a sequence containing zero or more than one item raised by fnexactlyone if the supplied value is not a singleton sequence errforg invalid argument type raised by functions such as fnmax fnmin fnavg fnsum if the supplied sequence contains values inappropriate to this function errforg the two arguments to fndatetime have inconsistent timezones raised by fndatetime if the two arguments both have timezones and the timezones are different errforg error in resolving a relative uri against a base uri in fnresolveuri a catchall error for fnresolveuri recognizing that the implementation can choose between a variety of algorithms and that some of these may fail for a variety of reasons errforx invalid regular expression flags raised by regular expression functions such as fnmatches and fnreplace if the regular expression flags contain a character other than imsx errforx invalid regular expression raised by regular expression functions such as fnmatches and fnreplace if the regular expression is syntactically invalid errforx regular expression matches zerolength string for functions such as fnreplace and fntokenize raises an error if the supplied regular expression is capable of matching a zero length string errforx invalid replacement string raised by fnreplace to report errors in the replacement string errfoty argument to fndata contains a node that does not have a typed value raised by fndata or by implicit atomization if applied to a node with no typed value the main example being an element validated against a complex type that defines it to have elementonly content errfoty the argument to fndata contains a function item raised by fndata or by implicit atomization if the sequence to be atomized contains a function item errfoty the argument to fnstring is a function item raised by fnstring or by implicit string conversion if the input sequence contains a function item errfoty an argument to fndeepequal contains a function item raised by fndeepequal if either input sequence contains a function item errfout invalid href argument to fnunparsedtext etc a dynamic error is raised if the href argument contains a fragment identifier or if it cannot be used to retrieve a resource containing text errfout cannot decode resource retrieved by fnunparsedtext etc a dynamic error is raised if the retrieved resource contains octets that cannot be decoded into unicode characters using the specified encoding or if the resulting characters are not permitted xml characters this includes the case where the processor does not support the requested encoding errfout cannot infer encoding of resource retrieved by fnunparsedtext etc a dynamic error is raised if encoding is absent and the processor cannot infer the encoding using external information and the encoding is not utf c illustrative userwritten functions nonnormative certain functions that were proposed for inclusion in this function library have been excluded on the basis that it is straightforward for users to implement these functions themselves using xslt  or xquery  this appendix provides sample implementations of some of these functions to emphasize that these functions are examples of functions that vendors may write their names carry the prefix eg vendors are free to define such functions in any namespace a group of vendors may also choose to create a collection of such useful functions and put them in a common namespace c egifempty and egifabsent in some situations users may want to provide default values for missing information that may be signaled by elements that are omitted have no value or have the empty sequence as their value for example a missing middle initial may be indicated by omitting the element or a nonexistent bonus signaled with an empty sequence this section includes examples of functions that provide such defaults these functions return xsanyatomictype users may want to write functions that return more specific types c egifempty egifemptynode as node value as xsanyatomictype as xsanyatomictype if the first argument is the empty sequence or an element without simple or complex content egifempty returns the second argument otherwise it returns the content of the first argument xslt implementation xslfunction nameegifempty asxsanyatomictype  xslparam namenode asnode  xslparam namevalue asxsanyatomictype  xslsequence selectnodechildnode valuexslfunction xquery implementation declare function egifempty   node as node  value as xsanyatomictype as xsanyatomictype   nodechildnode value                     c egifabsent egifabsentnode as node value as xsanyatomictype as xsanyatomictype if the first argument is the empty sequence egifabsent returns the second argument otherwise it returns the content of the first argument xslt implementation xslfunction nameegifabsent asxsanyatomictype  xslparam namenode asnode  xslparam namevalue asxsanyatomictype  xslsequence selectnode valuexslfunction xquery implementation declare function egifabsent   node as node  value as xsanyatomictype as xsanyatomictype   node value                     c union intersection and difference on sequences of values c egvalueunion egvalueunion arg as xsanyatomictype arg as xsanyatomictype as xsanyatomictype this function returns a sequence containing all the distinct items in arg and arg in an arbitrary order xslt implementation xslfunction nameegvalueunion asxsanyatomictype  xslparam namearg asxsanyatomictype  xslparam namearg asxsanyatomictype  xslsequence     selectfndistinctvaluesarg arg xslfunction xquery implementation declare function egvalueunion   arg as xsanyatomictype  arg as xsanyatomictype as xsanyatomictype   fndistinctvaluesarg arg                     c egvalueintersect egvalueintersect arg as xsanyatomictype arg as xsanyatomictype as xsanyatomictype this function returns a sequence containing all the distinct items that appear in both arg and arg in an arbitrary order xslt implementation xslfunction nameegvalueintersect asxsanyatomictype  xslparam namearg asxsanyatomictype  xslparam namearg asxsanyatomictype  xslsequence      selectfndistinctvaluesargargxslfunction xquery implementation declare function egvalueintersect   arg as xsanyatomictype  arg as xsanyatomictype  as xsanyatomictype   fndistinctvaluesargarg                     c egvalueexcept egvalueexcept arg as xsanyatomictype arg as xsanyatomictype as xsanyatomictype this function returns a sequence containing all the distinct items that appear in arg but not in arg in an arbitrary order xslt implementation xslfunction nameegvalueexcept asxsanyatomictype  xslparam namearg asxsanyatomictype  xslparam namearg asxsanyatomictype  xslsequence     selectfndistinctvaluesargnotargxslfunction xquery implementation declare function egvalueexcept   arg as xsanyatomictype  arg as xsanyatomictype as xsanyatomictype   fndistinctvaluesargnotarg c egindexofnode egindexofnodeseq as node search as node as xsinteger this function returns a sequence of positive integers giving the positions within the sequence seq of nodes that are identical to search the nodes in the sequence seq are compared with search under the rules for the is operator if a node compares identical then the position of that node in the sequence seq is included in the result if the value of seq is the empty sequence or if no node in seq matches search then the empty sequence is returned the index is based not based the result sequence is in ascending numeric order xslt implementation xslfunction nameegindexofnode asxsinteger  xslparam nameseq asnode  xslparam namesearch asnode  xslsequence selectfilter      functioni as xsinteger as xsboolean seqi is search        to countseq      xslfunction xquery implementation declare function egindexofnodeseq as node search as node as xsinteger     fnfilter      functioni as xsinteger as xsboolean seqi is search        to fncountseq     an alternative implementation which might be faster in systems where indexing into a sequence is slow is declare function egindexofnodeseq as node search as node as xsinteger   fnforeachpairfunctionnode index      ifnode is search then index else     seq  to fncountseq c egstringpad egstringpadpadstring as xsstring padcount as xsinteger as xsstring returns a xsstring consisting of a given number of copies of an xsstring argument concatenated together xslt implementation xslfunction nameegstringpad asxsstring  xslparam namepadstring asxsstring  xslparam namepadcount asxsinteger  xslsequence select     fnstringjoinfor i in  to padcount return padstring xslfunction                 xquery implementation declare function egstringpad   padstring as xsstring  padcount as xsinteger as xsstring    fnstringjoinfor i in  to padcount return padstring                 this returns the zerolength string if padstring is the empty sequence which is consistent with the general principle that if an xsstring argument is the empty sequence it is treated as if it were the zerolength string c egdistinctnodesstable egdistinctnodesstablearg as node as node this function illustrates one possible implementation of a distinctnodes function it removes duplicate nodes by identity preserving the first occurrence of each node xpath argemptysubsequencearg  position intersect                  xslt implementation xslfunction nameegdistinctnodesstable asnode  xslparam namearg asnode  xslsequence select    fnfoldleft      functionfoundsofar as node this as node as node         if foundsofar intersect this        then foundsofar        else foundsofar this        seq   xslfunction                 xquery implementation declare function distinctnodesstable arg as node as node    fnfoldleft      functionfoundsofar as node this as node as node         if foundsofar intersect this        then foundsofar        else foundsofar this        seq c finding minima and maxima the fnmin and fnmax functions allow one to determine the smallest and largest values in a set of values but they do not directly allow one to determine the elements having the smallest or largest value for some property for example the employees earning the highest or lowest salary the functions in this section show how this can be achieved the functions take as input an arbitrary sequence of items typically but not necessarily a sequence of elements and a function that computes a property value for each of these items this must be a value of an atomic type for which order comparisons are defined the functions return those items from the input sequence that have a higher or lower value for the given property than any others in the sequence if there are several that are joint highest or lowest then they are all returned c eghighest the function eghighest returns the items having the highest value for the supplied function xslt implementation xslfunction nameeghighest asitem  xslparam namef asfunctionitem as xsanyatomictype  xslparam nameseq asitem  xslsequence select     foldleft       functionhighestsofar as item this as item as item          let thisvalue  fthis         let highestvalue  fhighestsofar         return           if thisvalue gt highestvalue             then this           else if thisvalue eq highestvalue             then highestsofar this           else highestsofar        headseq tailseqxslfunction xquery implementation declare function eghighest                     f as functionitem as xsanyatomictype                      seq as item                  as item      fnfoldleft       functionhighestsofar as item this as item as item          let thisvalue  fthis         let highestvalue  fhighestsofar         return           if thisvalue gt highestvalue             then this           else if thisvalue eq highestvalue             then highestsofar this           else highestsofar        fnheadseq fntailseq to find the employees with the highest salary the function might be called as eghighestfunctionempempsalary employee c eglowest the function eglowest returns the items having the lowest value for the supplied function xslt implementation xslfunction nameeglowest asitem  xslparam namef asfunctionitem as xsanyatomictype  xslparam nameseq asitem  xslsequence select     foldleft       functionlowestsofar as item this as item as item          let thisvalue  fthis         let lowestvalue  flowestsofar         return           if thisvalue lt lowestvalue             then this           else if thisvalue eq lowestvalue             then lowestsofar this           else lowestsofar        headseq tailseqxslfunction xquery implementation declare function eghighest                     f as functionitem as xsanyatomictype                      seq as item                  as item      fnfoldleft       functionlowestsofar as item this as item as item          let thisvalue  fthis         let lowestvalue  flowestsofar         return           if thisvalue gt lowestvalue             then this           else if thisvalue eq lowestvalue             then lowestsofar this           else lowestsofar        fnheadseq fntailseq to find the employees with the lowest total number of hours worked the function might be called as eglowestfunctionempsumemptimesheetperiodhours employee c sorting both xslt and xquery include constructs for sorting sequences however it can often be convenient to invoke sorting via a simple function call the example function in this section takes two arguments a sequence to be sorted and a function to compute a sort key and it returns the items from the input sequence in sorted order of this sort key xslt implementation xslfunction nameegsort asitem  xslparam namef asfunctionitem as xsanyatomictype  xslparam nameseq asitem  xslperformsort selectseq    xslsort selectf  xslperformsortxslfunction xquery implementation declare function egsort                     f as functionitem as xsanyatomictype                      seq as item                  as item      for item in seq order by fitem return item to obtain a list of employees sorted by salary the function might be called as egsortfunctionempempsalary employee d checklist of implementationdefined features nonnormative it is implementationdefined which version of unicode is supported but it is recommended that the most recent version of unicode be used see conformance it is implementationdefined whether the type system is based on xml schema  or xml schema  see conformance it is implementationdefined which version of the unicode standard is supported but it is recommended that the most recent version of unicode be used see strings characters and codepoints some functions such as fndistinctvalues and fnunordered produce results in an implementationdefined or implementationdependent order in such cases there is no guarantee that the order of results from different calls will be the same these functions are said to be nondeterministic with respect to ordering see properties of functions where the results of a function are described as being to a greater or lesser extent implementationdefined or implementationdependent this does not by itself remove the requirement that the results should be deterministic that is that repeated calls with the same explicit and implicit arguments must return identical results see properties of functions in the case of a document node d returned by the fndoc function or a document node at the root of a tree containing a node returned by the fncollection function it will always be true that either fndocumenturid returns the empty sequence or that the following expression is true fndocfndocumenturid is d it is implementationdefined whether this guarantee also holds for document nodes obtained by other means for example a document node passed as the initial context node of a query or transformation see fndocumenturi in addition the values of value converted to an xsstring and label may be directed to a trace data set the destination of the trace output is implementationdefined the format of the trace output is implementation dependent the ordering of output from calls of the fntrace function is implementation dependent see fntrace they may provide an implementationdefined mechanism that allows users to choose between raising an error and returning a result that is modulo the largest representable integer value see iso  see arithmetic operators on numeric values for xsdecimal values the number of digits of precision returned by the numeric operators is implementationdefined if the number of digits in the result exceeds the number of digits that the implementation supports the result is truncated or rounded in an implementationdefined manner see arithmetic operators on numeric values for xsdecimal values the number of digits of precision returned by the numeric operators is implementationdefined if the number of digits in the result exceeds the number of digits that the implementation supports the result is truncated or rounded in an implementationdefined manner see arithmetic operators on numeric values the ieee  specification also describes handling of two exception conditions called dividebyzero and invalidoperation the ieee dividebyzero exception is raised not only by a direct attempt to divide by zero but also by operations such as log the ieee invalidoperation exception is raised by attempts to call a function with an argument that is outside the functions domain for example sqrt or log these ieee exceptions do not cause a dynamic error at the application level rather they result in the relevant function or operator returning nan the underlying ieee exception may be notified to the application or to the user by some implementationdefined warning condition but the observable effect on an application using the functions and operators defined in this specification is simply to return nan with no error see arithmetic operators on numeric values the ieee  specification distinguishes two nan values a quiet nan and a signaling nan these two values are not distinguishable in the xdm model the value spaces of xsfloat and xsdouble each include only a single nan value this does not prevent the implementation distinguishing them internally and triggering different implementationdefined warning conditions but such distinctions do not affect the observable behavior of an application using the functions and operators defined in this specification see arithmetic operators on numeric values the implementation may adopt a different algorithm provided that it is equivalent to this formulation in all cases where implementationdependent or implementationdefined behavior does not affect the outcome for example the implementationdefined precision of the result of xsdecimal division see opnumericintegerdivide xsd  allows the string inf as a representation of positive infinity xsd  does not it is implementationdefined whether xsd  is supported see fnnumber any other format token which indicates a numbering sequence in which that token represents the number  one but see the note below it is implementationdefined which numbering sequences additional to those listed above are supported if an implementation does not support a numbering sequence represented by the given token it must use a format token of  see fnformatinteger for all format tokens other than the first kind above one that consists of decimal digits there may be implementationdefined lower and upper bounds on the range of numbers that can be formatted using this format token indeed for some numbering sequences there may be intrinsic limits for example the format token x circled digit one  has a range imposed by the unicode character repertoire   to  in unicode versions prior to  increased in subsequent versions for the numbering sequences described above any upper bound imposed by the implementation must not be less than  one thousand and any lower bound must not be greater than  numbers that fall outside this range must be formatted using the format token  see fnformatinteger the set of languages for which numbering is supported is implementationdefined if the lang argument is absent or is set to an empty sequence or is invalid or is not a language supported by the implementation then the number is formatted using the default language from the dynamic context see fnformatinteger either a or t to indicate alphabetic or traditional numbering respectively the default being implementationdefined see fnformatinteger it is implementationdefined what combinations of values of the format token the language and the cardinalordinal modifier are supported if ordinal numbering is not supported for the combination of the format token the language and the string appearing in parentheses the request is ignored and cardinal numbers are generated instead see fnformatinteger the use of the a or t modifier disambiguates between numbering sequences that use letters in many languages there are two commonly used numbering sequences that use letters one numbering sequence assigns numeric values to letters in alphabetic sequence and the other assigns numeric values to each letter in some other manner traditional in that language in english these would correspond to the numbering sequences specified by the format tokens a and i in some languages the first member of each sequence is the same and so the format token alone would be ambiguous in the absence of the a or t modifier the default is implementationdefined see fnformatinteger the static context provides a set of decimal formats one of the decimal formats is unnamed the others if any are identified by a qname there is always an unnamed decimal format available but its contents are implementationdefined see defining a decimal format ieee states that the preferred quantum is languagedefined in this specification it is implementationdefined see trigonometric and exponential functions ieee defines various rounding algorithms for inexact results and states that the choice of rounding direction and the mechanisms for influencing this choice are languagedefined in this specification the rounding direction and any mechanisms for influencing it are implementationdefined see trigonometric and exponential functions because the set of collations that are supported is implementationdefined an implementation has the option to support all collation uris in which case it will never raise this error see choosing a collation conforming implementations must support normalization form nfc and may support normalization forms nfd nfkc nfkd and fullynormalized they may also support other normalization forms with implementationdefined semantics see fnnormalizeunicode it is possible to define collations that do not have the ability to decompose a string into units suitable for substring matching an argument to a function defined in this section may be a uri that identifies a collation that is able to compare two strings but that does not have the capability to split the string into collation units such a collation may cause the function to fail or to give unexpected results or it may be rejected as an unsuitable argument the ability to decompose strings into collation units is an implementationdefined property of the collation see functions based on substring matching all minimally conforming processors must support positive year values with a minimum of  digits ie yyyy and a minimum fractional second precision of  millisecond or three digits ie ssss however conforming processors may set larger implementationdefined limits on the maximum number of digits they support in these two situations processors may also choose to support the year  and years with negative values the results of operations on dates that cross the year  are implementationdefined see limits and precision all minimally conforming processors must support positive year values with a minimum of  digits ie yyyy and a minimum fractional second precision of  millisecond or three digits ie ssss however conforming processors may set larger implementationdefined limits on the maximum number of digits they support in these two situations processors may also choose to support the year  and years with negative values the results of operations on dates that cross the year  are implementationdefined see limits and precision the format token n n or nn indicating that the value of the component is to be output by name in lowercase uppercase or titlecase respectively components that can be output by name include but are not limited to months days of the week timezones and eras if the processor cannot output these components by name for the chosen calendar and language then it must use an implementationdefined fallback representation see the picture string indicates alphabetic or traditional numbering respectively the default being implementationdefined this has the same meaning as in the second argument of fnformatinteger see the picture string a format token consisting of a single digit such as  does not constrain the number of digits in the output in the case of fractional seconds in particular f requests three decimal digits f requests two digits but f will produce an implementationdefined number of digits if exactly one digit is required this can be achieved using the component specifier f see the picture string the set of languages calendars and places that are supported in the date formatting functions is implementationdefined when any of these arguments is omitted or is an empty sequence an implementationdefined default value is used see the language calendar and place arguments the set of languages calendars and places that are supported in the date formatting functions is implementationdefined when any of these arguments is omitted or is an empty sequence an implementationdefined default value is used see the language calendar and place arguments the choice of the names and abbreviations used in any given language is implementationdefined for example one implementation might abbreviate july as jul while another uses jly in german one implementation might represent saturday as samstag while another uses sonnabend implementations may provide mechanisms allowing users to control such choices see the language calendar and place arguments the choice of the names and abbreviations used in any given language for calendar units such as days of the week and months of the year is implementationdefined see the language calendar and place arguments the calendar value if present must be a valid eqname dynamic error errfofd if it is a lexical qname then it is expanded into an expanded qname using the statically known namespaces if it has no prefix then it represents an expandedqname in no namespace if the expanded qname is in no namespace then it must identify a calendar with a designator specified below dynamic error errfofd if the expanded qname is in a namespace then it identifies the calendar in an implementationdefined way see the language calendar and place arguments at least one of the above calendars must be supported it is implementationdefined which calendars are supported see the language calendar and place arguments various aspects of this processing are implementationdefined implementations may provide external configuration options that allow any aspect of the processing to be controlled by the user in particular see fndoc it is implementationdefined whether dtd validation andor schema validation is applied to the source document see fndoc by default this function is deterministic this means that repeated calls on the function with the same argument will return the same result however for performance reasons implementations may provide a user option to evaluate the function without a guarantee of determinism the manner in which any such option is provided is implementationdefined if the user has not selected such an option a call to this function must either return a deterministic result or must raise a dynamic error errfodc see fncollection the processor may use implementationdefined heuristics to determine the likely encoding otherwise see fnunparsedtext the fact that the resolution of uris is defined by a mapping in the dynamic context means that in effect various aspects of the behavior of this function are implementationdefined implementations may provide external configuration options that allow any aspect of the processing to be controlled by the user in particular see fnunparsedtext the collation used for matching names is implementationdefined but must be the same as the collation used to ensure that the names of all environment variables are unique see fnenvironmentvariable the precise process used to construct the xdm instance is implementationdefined in particular it is implementationdefined whether dtd andor schema validation is invoked and it is implementationdefined whether an xml  or xml  parser is used see fnparsexml the precise process used to construct the xdm instance is implementationdefined in particular it is implementationdefined whether an xml  or xml  parser is used see fnparsexmlfragment if the arguments to fnfunctionlookup identify a function that is present in the static context of the function call the function will always return the same function that a static reference to this function would bind to if there is no such function in the static context then the results depend on what is present in the dynamic context which is implementationdefined see fnfunctionlookup if st is xsfloat or xsdouble then tv is the xsdecimal value within the set of xsdecimal values that the implementation is capable of representing that is numerically closest to sv if two values are equally close then the one that is closest to zero is chosen if sv is too large to be accommodated as an xsdecimal see xml schema part  datatypes second edition for implementationdefined limits on numeric values a dynamic error is raised errfoca if sv is one of the special xsfloat or xsdouble values nan inf or inf a dynamic error is raised errfoca see casting to xsdecimal if st is xsdecimal xsfloat or xsdouble then tv is sv with the fractional part discarded and the value converted to xsinteger thus casting  returns  and  returns  casting e returns  if sv is too large to be accommodated as an integer see xml schema part  datatypes second edition for implementationdefined limits on numeric values a dynamic error is raised errfoca if sv is one of the special xsfloat or xsdouble values nan inf or inf a dynamic error is raised errfoca see casting to xsinteger in casting to xsdecimal or to a type derived from xsdecimal if the value is not too large or too small but nevertheless cannot be represented accurately with the number of decimal digits available to the implementation the implementation may round to the nearest representable value or may raise a dynamic error errfoca the choice of rounding algorithm and the choice between rounding and error behavior and is implementationdefined see casting from xsstring and xsuntypedatomic the tz timezone database available at httpwwwtwinsuncomtztzlinkhtm it is implementationdefined which version of the database is used see olson timezone database the unicode consortium reading ma addisonwesley  the unicode standard as updated from time to time by the publication of new versions see httpwwwunicodeorgstandardversions for the latest version and additional information on versions of the standard and of the unicode character database the version of unicode to be used is implementationdefined but implementations are recommended to use the latest unicode version currently version  see the unicode standard unicode standard annex  unicode normalization forms available at httpwwwunicodeorgreportstr as with the unicode standard the version to be used is implementationdefined see unicode normalization forms e changes since previous recommendation nonnormative e substantive changes  december  in the working draft of  december  the following changes were made relative to the first edition of the functions and operators specification for xpath  and xquery  published on  january  errata e through e were applied a twoargument version of the fnround function was introduced bugzilla  a singleargument version of the fnstringjoin function was introduced specifications for the functions fnformatdate fnformattime and fnformatdatetime were transferred from the xslt  specification the specification of fnformatnumber was transferred from the xslt specification a function fnformatinteger was introduced the function fngenerateid was introduced transferred from the xslt specification a range of trigonometric functions was defined in a new namespace new functions fnparsexml and fnserialize were defined the fnparse function was subsequently renamed fnparsexml a new function fnanalyzestring was defined the syntax of regular expressions was extended to allow noncapturing groups a new flag was introduced for the flags argument of functions that use regular expressions the q flag causes all characters in a regular expression to be treated as ordinary characters rather than metacharacters supporting the new language feature of higherorder functions a number of functions were defined that operate on function items as their arguments fnmap subsequently renamed fnforeach fnfilter fnmappairs subsequently renamed fnforeachpair fnfoldleft fnfoldright the function fnpartialapply however which was introduced in the previous version of this working draft has now been dropped in favor of custom syntax for partial application using  as a placeholder for missing arguments the description of the fnerror function was rewritten to allow for the introduction of trycatch facilities into xquery and xslt the section describing what it means for functions to be contextual andor deterministic was rewritten the term deterministic has replaced stable e substantive changes  june  in the last call working draft of  june  the following substantive changes are made relative to the draft of  december  the version number of the specification is changed from  to  new functions mathexp mathexp mathlog mathlog mathatan and mathpow are defined the trigonometric and exponential functions are now specified by reference to ieee  in the rules for fnformatdatetime and related functions the rules for formatting of timezones have been expanded and clarified the country argument is renamed place and its value may now be an olson timezone name the rules for the fnnormalizeunicode function are now defined directly by reference to the unicode specifications rather than the wc working draft on the character model for the world wide web which never progressed beyond working draft status the rules for the normalization form fully_normalized are now defined normatively in this specification the syntax for the picture string used by fnformatinteger has been extended to allow grouping positions to be associated with optional digit positions two convenience functions fnhead and fntail are added reflecting the increased role played by headtail recursive functions when writing code to take advantage of higherorder functions the function fnpartialapply has been removed as this functionality is now provided by custom syntax partial function application using  as a placeholder for missing arguments new functions fnfunctionname fnfunctionarity and fnfunctionlookup are available a new function fnparsexmlfragment was introduced this change went unremarked in the change log up to and including the candidate recommendation of  january  casting from a dynamic string to an xsqname or a type derived from xsnotation is now permitted the restriction that the argument must be a string literal has been removed bug  zeroargument forms have been introduced for the functions fndata fndocumenturi and fnnodename fnbaseuri fnnilled and fnhaschildren with the argument defaulting to the context item in each case bug  the new function fnparse is renamed fnparsexml bug  the rules for handling of negative zero have been clarified where operations return negative zero then in general implementations must respect this the only exception is for casting from string to float or double where the lexical form  may result in positive zero for compatibility with existing xml schema  processors bug  the functions fnunparsedtext and fnunparsedtextavailable have been transferred unchanged from xslt  bug  and fnunparsedtextlines has been transferred from the xslt  draft the function fnuricollection has been added this was originally defined as an output of the work on streaming in xslt  its purpose is to give applications greater control of the processing of individual documents within a large collection the rules for the fnresolveuri function have been rewritten to refer to more uptodate specifications specifically the iri and leiri specifications implementations are required to support the iri syntax as a minimum and are permitted to support the legacy extensions defined in leiri two new functions fnenvironmentvariable and fnavailableenvironmentvariables have been defined casting from a string or xsuntypedatomic value to a union or list type is now allowed references to the formal semantics have been removed rules for the precision of the results of trigonometric and exponential functions have been removed and replaced with a normative reference to the rules in the ieee specifications the functions fnunparsedtextlines fnhaschildren fninnermost and fnoutermost have been transferred from the xslt  working draft the function fnpath has been added references to ieee  to define the semantics of operations on bit and bit floating point have been updated to refer to ieee  the error codes produced by fncollection have been clarified possibly involving incompatible changes in regular expressions without the m option the metacharacter  now matches everything except xa and xd previously it was defined to match everything except xa which was an unnecessary and unintended incompatibility with regular expressions in xsd e substantive changes candidate recommendation in this candidate recommendation the following substantive changes are made relative to the last call working draft draft of  june  functions with dependencies on the static or dynamic context can now be bound to function items for example by the use of fnfunctionlookup and the rules for doing so have been clarified the specification of fnformatinteger makes a more precise distinction between situations where the processor must report an error in the supplied picture and situations where it must adopt a fallback representation the conditions under which the static base uri used during static analysis can differ from the base uri used during evaluation are now more clearly and consistently described the concept of dynamic base uri is dropped the syntax for regular expressions is now described by reference to the xsd  specification as well as the xsd  specification xsd  gives a much clearer exposition of the syntax and semantics of regular expressions without introducing any intended changes to the functionality some edge cases for capturing subgroups in regular expressions are described the role of the schema for the data returned by fnanalyzestring is more clearly defined in the result of fnpath dependencies on the default namespace for functions have been removed by ensuring that any function calls in the return path use fullyqualified names in the specification of fndeepequal the consequences of the existing rules for comparing validated against unvalidated trees are more carefully explained the rules for the fnunparsedtext function have been expressed at a higher level of abstraction using the context in the same way as the fndoc function and making use of concepts such as the distinction in web architecture between a resource and its representation a number of rules have been added which were previously omitted concerning casts and constructors where the target type is a union or list type e substantive changes post candidate recommendation the following changes were made subsequent to the candidate recommendation of  january  the functions fnmap and fnmappairs are renamed fnforeach and fnforeachpair respectively this change is made to remove the risk of potential confusion and syntactic conflicts if and when a map data type is added to the language as proposed in the current xslt  working draft bug  the arguments of the functions fnforeach and fnforeachpair fnfilter fnfoldleft and fnfoldright are reordered this change has been made in the interests of usability and consistency with other functions bug  the regular expression matching the format modifier in the picture string supplied to fnformatinteger has been corrected to match the accompanying prose bug  the function signature for the xsqname constructor function has been corrected to show that the supplied value may be an empty sequence the error arose because in xpath  this constructor was a special case requiring that the supplied argument be an string literal bug  the function signature for the fnadjustdatetimetotimezone function has been corrected to show that the returned value may be an empty sequence making the signature consistent with the prose description and with the xpath xquery  version of the specification bug  the calendar argument of functions in the fnformatdate family may now be an eqname for consistency and the error conditions for the arguments to these functions are more clearly spelled out bug  a section has been added to describe the constructor function xserror present in implementations that support xsd  the existence of such a function is a consequence of general rules included in the published candidate recommendation but the function was not listed along with other constructor functions for builtin xsd types bug  a paragraph has been added explaining how to interpret the weekinmonth w component for the fnformatdate family of functions in the case where the chosen calendar is the iso calendar bug  it is now stated that it is an error in a regular expression to use a unicode block name which is not defined in the versions of unicode supported by the processor this differs from the treatment of this condition in xsd  bug  error conditions are now properly categorized as type errors or dynamic errors and in particular where the error condition xpdy was previously categorized as a type error this has been corrected bug  it is now stated that failure to cast to a union type is always a dynamic error not a type error bug  it is now noted that the argument versions of the functions fnformatdate fnformatdatetime and fnformattime are dependent on the namespaces in the static context since the calendar argument is a lexical qname bug  the rules for the use of fnfunctionlookup when applied to contextdependent builtin functions have been clarified the intent of the rules is unchanged but they have been explained more carefully to prevent possible misinterpretation bug  e editorial changes the following editorial changes have been made since the first edition of the functions and operators specification for xpath  and xquery  published on  january  these are not explicitly marked in the changehighlighted version of the specification references to the formal semantics which in nearly all cases were references to detailed rules for static type inferencing have been removed as the formal semantics is not being maintained bug  a quick reference section containing links to the functions has been added before the full table of contents the endofdocument indexes have been dropped in this draft any readers disappointed by this decision are invited to make representations to the editor since they can easily be reinstated the section on constructor functions has been moved so that it is now adjacent to the closelyrelated section on casting the function fndatetime has been moved out of the section describing constructor functions and is no longer described as a special constructor function it is now an ordinary function described in the appropriate section along with other functions on dates and times this allows the term constructor function to be associated exclusively with singleargument functions whose name is the same as the type name of the value that they return and avoids any suggestion that this function has special behavior similarly the functions fntrue and fnfalse are no longer described as constructor functions where a function is referred to by name the reference is now always in the form for example fnbaseuri rather than fnbaseuri the latter form is used only to indicate a call on the function in which no arguments are supplied the specification of each function now consists of a set of standard subsections summary operator mapping signature properties rules error conditions notes and examples the summary of the effect of each function is now just that it never contains any information that cannot be found in the more detailed rules and it does not attempt to list unusual or error conditions such rules have been moved into separate paragraphs sometimes the language used in the summary is relatively informal although the summary remains normative it must be regarded as being subservient to the rules that follow functions are always called never invoked the specification no longer discusses functions it now specifies or defines them a seperate section for each function now lists the properties of the function whether or not it is deterministic contextdependent or focusdependent these properties are linked to their definitions rules have been rewritten in a more consistent style if arg is x the function returns y avoiding alternatives such as returns y if arg is x and avoiding the passive is returned in nearly all cases the language used for error conditions has been standardized to the form an error is raised code if  the section heading for a section that defines a function is now always the name of the function some function definitions have been moved into subsections to achieve this statements within the rules of a function that follow inevitably from other rules have in many cases been downgraded to notes an example is the statement that fnremoveseq n returns an empty sequence if seq is an empty sequence the functions for durations and those for datestimes have been split into separate sections the fnboolean function has been moved from general functions and operators on sequences to functions on boolean values in the interests of automating the testing of examples the convention has been adopted that the result of an example expression is wherever possible given in the form of a simple xpath expression specifically a numeric or string literal is used for numbers and strings the expressions true and false for booleans constructors such as xsdurationpts for other atomic types expressions such as     for sequences the expression will always return a value of the correct type so the xsdouble value zero is shown as e not as  which is the way the value would be serialized on output the value nan is given as xsdoublenan previously results were sometimes given in this form sometimes in the form of a serialization of the result value and sometimes particularly for dates times and durations in the form of an informal description in some cases where one function can be readily specified in terms of another the opportunity has been taken to simplify the specification for example all the operator support functions of the form opxxgreaterthan are now specified by reference to the corresponding opxxlessthan function with the arguments reversed this reduces the risk of introducing errors and inconsistencies in some cases the rules for a function have been reordered for example the rule describing how an empty sequence is handled now generally comes before any rule that works only if the argument is not an empty sequence some nonnormative examples and notes have been added the nonnormative example functions in appendix d have been revised and new functions are supplied to illustrate use cases for higherorder functions the appendix describing error codes gives more information the checklist of implementationdefined features is now automatically aligned with the text e changes since the proposed recommendation the following changes are made subsequent to the proposed recommendation of  october  these are all minor editorial changes further details can be found in the referenced wc bugzilla entries bug  a trivial copyedit in the description of error fodc bug  a couple of trivial copyedits in the description of fnunparsedtextlines plus a nonnormative note to clarify the relationship between fnunparsedtextavailable and fnunparsedtextlines bug  removed a possible ambiguity in the text to clarify how fnunparsedtextlines handles a newline at the end of the input file bug  clarified the definition of deterministic to link it explicitly to the definition of execution scope the linkage of the terms was previously implicit bug  where appropriate references to other specifications have been updated to refer to the latest version bug  an incompatibility relating to regular expressions was listed in the wrong part of f compatibility between xpath  and xpath  f compatibility with previous versions nonnormative this section summarizes the extent to which this specification is compatible with previous versions it describes first the incompatibilities between xpath  and xpath  or xquery  then the incompatibilities between xpath  or xquery  and xpathxquery  f compatibility between xpath  and xpath  note xpath  and xquery  were aligned so all references to xpath  in this section apply equally to xquery  this appendix summarizes the relationship between certain functions defined in xml path language xpath version  and the corresponding functions defined in this document the first column of the table provides the name of the function the second column describes the differences in the semantics of the corresponding functions the functions appear in the order they appear in xml path language xpath version  a more detailed version of this information can be found in xquery  and xpath  functions and operators this appendix does not include incompatibilities that arise solely from the change in function calling rules that occurred between xpath  and xpath  that is incompatibilities that can be avoided by ensuring that xpath  compatibility mode is enabled for example in xpath  the fnname function when applied to a sequence of three nodes would return the name of the first in document order in xpath  and xpath  such a call is a type error unless xpath  compatiblity mode is enabled similarly functions such as fnsubstring fncontains and fntranslate that expect string arguments will raise a type error in xpath  if called with a boolean or numeric argument unless xpath  compatibility mode is enabled a more complete list of these incompatibilities can be found in xquery  and xpath  functions and operators in addition this appendix does not include incompatibilities that arise when the default collation is set to something other than unicode codepoint collation this appendix does not include incompatibilities that might arise due to xpath  defining the specification with greater clarity or precision for example an implementation of fnsum in xpath  that returned nan when given an empty nodeset as the argument would not have contradicted any explicit statement in the specification while xpath  is explicit that the expected result in this case is zero function notes fnlast because the result is an integer rather than a double the precision of subsequent computations may be different fnposition because the result is an integer rather than a double the precision of subsequent computations may be different fncount because the result is an integer rather than a double the precision of subsequent computations may be different fnid xpath  raises a type error with boolean and numeric arguments the rules for recognizing a node as an id value changed in xpath  the whole string is treated as a unit while in xpath  each string is treated as a list fnname the rules for determining the prefix are more precisely defined in xml path language xpath  fnstring representations of numeric values are xpath  compatible except for the special values positive and negative infinity and for values outside the range e to e fnstringlength because the result is an integer rather than a double the precision of subsequent computations may be different fnsum xpath  raises an error if the sequence contains values that cannot be added together such as strings xpath  returns nan fnfloor in xpath  if the argument is  the result is  in xpath  the result is nan fnceiling in xpath  if the argument is  the result is  in xpath  the result is nan fnround in xpath  if the argument is  the result is  in xpath  the result is nan f compatibility between xpath  and xpath  note xpath  and xquery  were aligned and xpath  and xquery  are aligned so all references to xpath  in this section apply equally to xquery  and all references to xpath  apply equally to xquery  the only incompatibilities between this version of the specification and the version that applied to xpath  and xquery  are clarifications where this version of the specification describes the intended behavior more precisely such clarifications have been made mainly to the description of functions that have significant interactions with the processing environment examples are fnresolveuri fncollection and fndoc in regular expressions without the m option the metacharacter  now matches everything except xa and xd previously it was defined to match everything except xa which was an unnecessary and unintended incompatibility with regular expressions in xsd note that xd rarely appears in xml documents because it is ordinarily removed by the process of normalizing line endings some functions appearing in this specification previously appeared as part of the specification of xslt  incompatibilities applying to these functions are as follows the rules for timezone formatting using the z component in the second argument of fnformatdate fnformatdatetime and fnformattime were previously very unclear and have been completely revised the new rules are likely to be different from the interpretation adopted by particular xslt  processors error codes have been changed to fit with the coding scheme used in this specification note however that in xslt  there was no interoperable way of testing error codes and the specification explicitly made the error codes nonnormative