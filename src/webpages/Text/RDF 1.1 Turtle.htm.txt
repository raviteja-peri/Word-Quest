rdf  turtle rdf  turtle terse rdf triple language wc recommendation  february  this version httpwwwworgtrrecturtle latest published version httpwwwworgtrturtle test suite httpwwwworgtrnoterdftestcases implementation report httpwwwworgturtlereportsindexhtml previous version httpwwwworgtrprturtle editors eric prudhommeaux wc gavin carothers lex machina inc authors david beckett tim bernerslee wc eric prudhommeaux wc gavin carothers lex machina inc please check the errata for any errors or issues reported since publication the english version of this specification is the only normative version nonnormative translations may also be available copyright   wc mit ercim keio beihang all rights reserved wc liability trademark and document use rules apply abstract the resource description framework rdf is a generalpurpose language for representing information in the web this document defines a textual syntax for rdf called turtle that allows an rdf graph to be completely written in a compact and natural text form with abbreviations for common usage patterns and datatypes turtle provides levels of compatibility with the ntriples ntriples format as well as the triple pattern syntax of the sparql wc recommendation status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document is a part of the rdf  document suite the document defines turtle the terse rdf triple language a concrete syntax for rdf rdfconcepts this document was published by the rdf working group as a recommendation if you wish to make comments regarding this document please send them to publicrdfcomments@worg subscribe archives all comments are welcome please see the working groups implementation report this document has been reviewed by wc members by software developers and by other wc groups and interested parties and is endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy table of contents  introduction  turtle language  simple triples  predicate lists  object lists  iris  rdf literals  quoted literals  numbers  booleans  rdf blank nodes  nesting unlabeled blank nodes in turtle  collections  examples  turtle compared to sparql  conformance  media type and content encoding  turtle grammar  white space  comments  iri references  escape sequences  grammar  parsing  parser state  rdf term constructors  rdf triples constructors  parsing example a embedding turtle in html documents a xhtml a parsing turtle in html b internet media type file extension and macintosh file type c acknowledgements d change log d changes since january  proposed recommendation d changes from february  candidate recommendation to january  proposed recommendation d changes from august  first public working draft to candidate recommendation d changes from january  team submission to first public working draft e references e normative references e informative references  introduction this section is nonnormative this document defines turtle the terse rdf triple language a concrete syntax for rdf rdfconcepts a turtle document is a textual representations of an rdf graph the following turtle document describes the relationship between green goblin and spiderman example  @base httpexampleorg @prefix rdf httpwwwworgrdfsyntaxns @prefix rdfs httpwwwworgrdfschema @prefix foaf httpxmlnscomfoaf @prefix rel httpwwwperceivenetschemasrelationship greengoblin    relenemyof spiderman     a foafperson      in the context of the marvel universe    foafname green goblin spiderman    relenemyof greengoblin     a foafperson     foafname spiderman @ru  this example introduces many of features of the turtle language @base and relative iris @prefix and prefixed names predicate lists separated by  object lists separated by  the token a and literals the turtle grammar for triples is a subset of the sparql  query language sparqlquery grammar for triplesblock the two grammars share production and terminal names where possible the construction of an rdf graph from a turtle document is defined in turtle grammar and parsing  turtle language this section is nonnormative a turtle document allows writing down an rdf graph in a compact textual form an rdf graph is made up of triples consisting of a subject predicate and object comments may be given after a  that is not part of another lexical token and continue to the end of the line  simple triples the simplest triple statement is a sequence of subject predicate object terms separated by whitespace and terminated by  after each triple example  httpexampleorgspiderman httpwwwperceivenetschemasrelationshipenemyof httpexampleorggreengoblin   predicate lists often the same subject will be referenced by a number of predicates the predicateobjectlist production matches a series of predicates and objects separated by  following a subject this expresses a series of rdf triples with that subject and each predicate and object allocated to one triple thus the  symbol is used to repeat the subject of triples that vary only in predicate and object rdf terms these two examples are equivalent ways of writing the triples about spiderman example  httpexampleorgspiderman httpwwwperceivenetschemasrelationshipenemyof httpexampleorggreengoblin httpxmlnscomfoafname spiderman  example  httpexampleorgspiderman httpwwwperceivenetschemasrelationshipenemyof httpexampleorggreengoblin httpexampleorgspiderman httpxmlnscomfoafname spiderman   object lists as with predicates often objects are repeated with the same subject and predicate the objectlist production matches a series of objects separated by  following a predicate this expresses a series of rdf triples with the corresponding subject and predicate and each object allocated to one triple thus the  symbol is used to repeat the subject and predicate of triples that only differ in the object rdf term these two examples are equivalent ways of writing spidermans name in two languages example  httpexampleorgspiderman httpxmlnscomfoafname spiderman @ru  example  httpexampleorgspiderman httpxmlnscomfoafname spiderman httpexampleorgspiderman httpxmlnscomfoafname @ru  there are three types of rdf term defined in rdf concepts iris internationalized resource identifiers literals and blank nodes turtle provides a number of ways of writing each  iris iris may be written as relative or absolute iris or prefixed names relative and absolute iris are enclosed in  and  and may contain numeric escape sequences described below for example httpexampleorggreengoblin relative iris like greengoblin are resolved relative to the current base iri a new base iri can be defined using the @base or base directive specifics of this operation are defined in section  iri references the token a in the predicate position of a turtle triple represents the iri httpwwwworgrdfsyntaxnstype  a prefixed name is a prefix label and a local part separated by a colon  a prefixed name is turned into an iri by concatenating the iri associated with the prefix and the local part the @prefix or prefix directive associates a prefix label with an iri subsequent @prefix or prefix directives may remap the same prefix label note the turtle language originally permitted only the syntax including the @ character for writing prefix and base directives the caseinsensitive prefix and base forms were added to align turtles syntax with that of sparql it is advisable to serialize rdf using the @prefix and @base forms until rdf  turtle parsers are widely deployed to write httpwwwperceivenetschemasrelationshipenemyof using a prefixed name define a prefix label for the vocabulary iri httpwwwperceivenetschemasrelationship as someprefix then write someprefixenemyof which is equivalent to writing httpwwwperceivenetschemasrelationshipenemyof this can be written using either the original turtle syntax for prefix declarations example  @prefix someprefix httpwwwperceivenetschemasrelationship httpexampleorggreengoblin someprefixenemyof httpexampleorgspiderman   or sparqls syntax for prefix declarations example  prefix someprefix httpwwwperceivenetschemasrelationshiphttpexampleorggreengoblin someprefixenemyof httpexampleorgspiderman   note prefixed names are a superset of xml qnames they differ in that the local part of prefixed names may include leading digits eg leg or isbn non leading colons eg ogvideoheight reserved character escape sequences eg wgslatlong the following turtle document contains examples of all the different ways of writing iris in turtle example   a triple with all absolute irishttponeexamplesubject httponeexamplepredicate httponeexampleobject @base httponeexample subject predicate object       relative iris eg httponeexamplesubjectbase httponeexamplesubject predicate object       relative iris eg httponeexamplesubject@prefix p httptwoexample psubject ppredicate pobject       prefixed name eg httptwoexamplesubjectprefix p httptwoexamplepsubject ppredicate pobject       prefixed name eg httptwoexamplesubject@prefix p path                      prefix p now stands for httponeexamplepathpsubject ppredicate pobject       prefixed name eg httponeexamplepathsubject@prefix  httpanotherexample      empty prefixsubject predicate object          prefixed name eg httpanotherexamplesubjectsubject a subject                   same as subject httpwwwworgrdfsyntaxnstype subject httpexampleuserampchannelrd a subject   a multiscript subject iri  note the @prefix and @base directives require a trailing  after the iri the equalivent prefix and base must not have a trailing  after the iri part of the directive  rdf literals literals are used to identify values such as strings numbers dates example  @prefix foaf httpxmlnscomfoaf httpexampleorggreengoblin foafname green goblin httpexampleorgspiderman foafname spiderman   quoted literals quoted literals grammar production rdfliteral have a lexical form followed by a language tag a datatype iri or neither the representation of the lexical form consists of an initial delimiter eg  u a sequence of permitted characters or numeric escape sequence or string escape sequence and a final delimiter the corresponding rdf lexical form is the characters between the delimiters after processing any escape sequences if present the language tag is preceded by a @ u if there is no language tag there may be a datatype iri preceeded by  ue ue the datatype iri in turtle may be written using either an absolute iri a relative iri or prefixed name if there is no datatype iri and no language tag the datatype is xsdstring  uc may not appear in any quoted literal except as part of an escape sequence other restrictions depend on the delimiter literals delimited by  u may not contain the characters  lf ua or cr ud literals delimited by  may not contain the characters  lf or cr literals delimited by  may not contain the sequence of characters  literals delimited by  may not contain the sequence of characters  example  @prefix rdfs httpwwwworgrdfschema @prefix show httpexampleorgvocabshow @prefix xsd httpwwwworgxmlschema show rdfslabel that seventies showxsdstring              literal with xml schema string datatypeshow rdfslabel that seventies showhttpwwwworgxmlschemastring   same as aboveshow rdfslabel that seventies show                                              same againshow showlocalname that seventies show@en                   literal with a language tagshow showlocalname cette srie des annes soixantedix@fr   literal delimited by single quoteshow showlocalname cette srie des annes septante@frbe    literal with a region subtagshow showblurb this is a multiline                         literal with embedded new lines and quotesliteral with many quotes and up to two sequential apostrophes    numbers numbers can be written like other literals with lexical form and datatype eg xsddecimal turtle has a shorthand syntax for writing integer values arbitrary precision decimal values and double precision floating point values data type abbreviated lexical description xsdinteger  xsdinteger integer values may be written as an optional sign and a series of digits integers match the regular expression  xsddecimal  xsddecimal arbitraryprecision decimals may be written as an optional sign zero or more digits a decimal point and one or more digits decimals match the regular expression  xsddouble e exsddouble doubleprecision floating point values may be written as an optionally signed mantissa with an optional decimal point the letter e or e and an optionally signed integer exponent the exponent matches the regular expression  and the mantissa one of these regular expressions   or  example  @prefix  httpexampleorgelements                                                                               httpenwikipediaorgwikihelium                                                                                      atomicnumber                  xsdinteger                                                                          atomicmass             xsddecimal                                                                          specificgravity e       xsddouble                                                                         booleans boolean values may be written as either true or false casesensitive and represent rdf literals with the datatype xsdboolean example  @prefix  httpexampleorgstats httpsomecountryexamplecensus    islandlocked false             xsdboolean  rdf blank nodes rdf blank nodes in turtle are expressed as _ followed by a blank node label which is a series of name characters the characters in the label are built upon pn_chars_base liberalized as follows the characters _ and digits may appear anywhere in a blank node label the character  may appear anywhere except the first or last character the characters  ub u to uf and uf to u are permitted anywhere except the first character a fresh rdf blank node is allocated for each unique blank node label in a document repeated use of the same blank node label identifies the same rdf blank node example  @prefix foaf httpxmlnscomfoaf _alice foafknows _bob _bob foafknows _alice   nesting unlabeled blank nodes in turtle in turtle fresh rdf blank nodes are also allocated when matching the production blanknodepropertylist and the terminal anon both of these may appear in the subject or object position of a triple see the turtle grammar that subject or object is a fresh rdf blank node this blank node also serves as the subject of the triples produced by matching the predicateobjectlist production embedded in a blanknodepropertylist the generation of these triples is described in predicate lists blank nodes are also allocated for collections described below example  @prefix foaf httpxmlnscomfoaf  someone knows someone else who has the name bob foafknows  foafname bob   the turtle grammar allows blanknodepropertylists to be nested in this case each inner  establishes a new subject blank node which reverts to the outer node at the  and serves as the current subject for predicate object lists the use of predicateobjectlist within a blanknodepropertylist is a common idiom for representing a series of properties of a node abbreviated example  @prefix foaf httpxmlnscomfoaf  foafname alice  foafknows     foafname bob     foafknows         foafname eve      foafmbox bob@examplecom   corresponding simple triples example  _a httpxmlnscomfoafname alice _a httpxmlnscomfoafknows _b _b httpxmlnscomfoafname bob _b httpxmlnscomfoafknows _c _c httpxmlnscomfoafname eve _b httpxmlnscomfoafmbox bob@examplecom   collections rdf provides a collection rdfmt structure for lists of rdf nodes the turtle syntax for collections is a possibly empty list of rdf terms enclosed by  this collection represents an rdffirstrdfrest list structure with the sequence of objects of the rdffirst statements being the order of the terms enclosed by  the  syntax must appear in the subject or object position of a triple see the turtle grammar the blank node at the head of the list is the subject or object of the containing triple example  @prefix  httpexampleorgfoo  the object of this triple is the rdf collection blank nodesubject predicate  a b c   an empty collection value  rdfnilsubject predicate    examples this section is nonnormative this example is a turtle translation of example  in the rdfxml syntax specification examplettl example  @prefix rdf httpwwwworgrdfsyntaxns @prefix dc httppurlorgdcelements @prefix ex httpexampleorgstuff httpwwwworgtrrdfsyntaxgrammar  dctitle rdfxml syntax specification revised   exeditor     exfullname dave beckett    exhomepage httppurlorgnetdajobe    an example of an rdf collection of two literals example  prefix  httpexampleorgstuffa b  apple banana            which is short for examplettl example  @prefix  httpexampleorgstuff @prefix rdf httpwwwworgrdfsyntaxns a b   rdffirst apple    rdfrest  rdffirst banana               rdfrest rdfnil     an example of two identical triples containing literal objects containing newlines written in plain and long literal forms the line breaks in this example are line feed characters ua examplettl example  @prefix  httpexampleorgstuff a b the first linenthe second linen  more a b the first linethe second line  more  as indicated by the grammar a collection can be either a subject or an object this subject or object will be the novel blank node for the first object if the collection has one or more objects or rdfnil if the collection is empty for example example  @prefix  httpexampleorgstuff   e p w  is syntactic sugar for noting that the blank nodes b b and b do not occur anywhere else in the rdf graph example  @prefix rdf httpwwwworgrdfsyntaxns     _b  rdffirst             rdfrest   _b     _b  rdffirst             rdfrest   _b     _b  rdffirst  e           rdfrest   rdfnil     _b  p         w  rdf collections can be nested and can involve other syntactic forms example  prefix  httpexampleorgstuff p q     p q  is syntactic sugar for example  @prefix rdf httpwwwworgrdfsyntaxns     _b  rdffirst             rdfrest   _b     _b  rdffirst  _b     _b  p         q     _b  rdfrest   _b     _b  rdffirst  _b     _b  rdffirst             rdfrest   rdfnil     _b  rdfrest   rdfnil   turtle compared to sparql this section is nonnormative the sparql  query languagef sparql sparqlquery uses a turtle style syntax for its triplesblock production this production differs from the turtle language in that sparql permits rdf literals as the subject of rdf triples sparql permits variables name or name in any part of the triple of the form turtle allows prefix and base declarations anywhere outside of a triple in sparql they are only allowed in the prologue at the start of the sparql query sparql uses case insensitive keywords except for a turtles @prefix and @base declarations are case sensitive the sparql dervied prefix and base are case insensitive true and false are case insensitive in sparql and case sensitive in turtle true is not a valid boolean value in turtle for further information see the syntax for iris and sparql grammar sections of the sparql query document sparqlquery  conformance as well as sections marked as nonnormative all authoring guidelines diagrams examples and notes in this specification are nonnormative everything else in this specification is normative the key words must must not required should should not recommended may and optional in this specification are to be interpreted as described in rfc this specification defines conformance criteria for turtle documents turtle parsers a conforming turtle document is a unicode string that conforms to the grammar and additional constraints defined in section  turtle grammar starting with the turtledoc production a turtle document serializes an rdf graph a conforming turtle parser is a system capable of reading turtle documents on behalf of an application it makes the serialized rdf dataset as defined in section  parsing available to the application usually through some form of api the iri that identifies the turtle language is httpwwwworgnsformatsturtle note this specification does not define how turtle parsers handle nonconforming input documents  media type and content encoding the media type of turtle is textturtle the content encoding of turtle content is always utf charset parameters on the mime type are required until such time as the text media type tree permits utf to be sent without a charset parameter see section b internet media type file extension and macintosh file type for the media type registration form  turtle grammar a turtle document is a unicodeunicode character string encoded in utf unicode characters only in the range u to uffff inclusive are allowed  white space white space production ws is used to separate two terminals which would otherwise be misrecognized as one terminal rule names below in capitals indicate where white space is significant these form a possible choice of terminals for constructing a turtle parser white space is significant in the production string  comments comments in turtle take the form of  outside an iriref or string and continue to the end of line marked by characters ud or ua or end of file if there is no end of line after the comment marker comments are treated as white space  iri references relative iris are resolved with base iris as per uniform resource identifier uri generic syntax rfc using only the basic algorithm in section  neither syntaxbased normalization nor schemebased normalization described in sections  and  of rfc are performed characters additionally allowed in iri references are treated in the same way that unreserved characters are treated in uri references per section  of internationalized resource identifiers iris rfc the @base or base directive defines the base iri used to resolve relative iris per rfc section  base uri embedded in content section  base uri from the encapsulating entity defines how the inscope base iri may come from an encapsulating document such as a soap envelope with an xmlbase directive or a mime multipart document with a contentlocation header the retrieval uri identified in  base uri from the retrieval uri is the url from which a particular turtle document was retrieved if none of the above specifies the base uri the default base uri section  default base uri is used each @base or base directive sets a new inscope base uri relative to the previous one  escape sequences there are three forms of escapes used in turtle documents numeric escape sequences represent unicode code points escape sequence unicode code point u hex hex hex hex a unicode character in the range u to uffff inclusive corresponding to the value encoded by the four hexadecimal digits interpreted from most significant to least significant digit u hex hex hex hex hex hex hex hex a unicode character in the range u to uffff inclusive corresponding to the value encoded by the eight hexadecimal digits interpreted from most significant to least significant digit where hex is a hexadecimal character hex    af  af string escape sequences represent the characters traditionally escaped in string literals escape sequence unicode code point t u b u n ua r ud f uc  u  u  uc reserved character escape sequences consist of a  followed by one of @_ and represent the character to the right of the  context where each kind of escape sequence can be used numeric escapes string escapes reserved character escapes iris used as rdf terms or as in @prefix prefix @base or base declarations yes no no local names no no yes strings yes yes no note encoded sequences are in the character range for iris and are explicitly allowed in local names these appear as a  followed by two hex characters and represent that same sequence of three characters these sequences are not decoded during processing a term written as httpaexampleoobar in turtle designates the iri httpaexampleoobar and not iri httpaexamplefoobar a term written as exoobar with a prefix @prefix ex httpaexample also designates the iri httpaexampleoobar  grammar the ebnf used here is defined in xml  ebnfnotation production labels consisting of a number and a final s eg s reference the production with that number in the sparql  query language grammar sparqlquery notes keywords in single quotes @base @prefix a true false are casesensitive keywords in double quotes base prefix are caseinsensitive escape sequences uchar and echar are case sensitive when tokenizing the input and choosing grammar rules the longest match is chosen the turtle grammar is ll and lalr when the rules with uppercased names are used as terminals the entry point into the grammar is turtledoc in signed numbers no white space is allowed between the sign and the number the s anon   ws  token allows any amount of white space and comments between s the single space version is used in the grammar for clarity the strings @prefix and @base match the pattern for langtag though neither prefix nor base are registered language subtags this specification does not define whether a quoted literal followed by either of these tokens eg a@base is in the turtle language  turtledoc  statement  statement  directive  triples   directive  prefixid  base  sparqlprefix  sparqlbase  prefixid  @prefix pname_ns iriref   base  @base iriref  s sparqlbase  base iriref s sparqlprefix  prefix pname_ns iriref  triples  subject predicateobjectlist  blanknodepropertylist predicateobjectlist  predicateobjectlist  verb objectlist  verb objectlist  objectlist  object  object  verb  predicate  a  subject  iri  blanknode  collection  predicate  iri  object  iri  blanknode  collection  blanknodepropertylist  literal  literal  rdfliteral  numericliteral  booleanliteral  blanknodepropertylist   predicateobjectlist   collection   object   numericliteral  integer  decimal  double s rdfliteral  string langtag   iri s booleanliteral  true  false  string  string_literal_quote  string_literal_single_quote  string_literal_long_single_quote  string_literal_long_quote s iri  iriref  prefixedname s prefixedname  pname_ln  pname_ns s blanknode  blank_node_label  anon productions for terminals  iriref   xx  uchar   xnull xfcontrol codes xspace  s pname_ns  pn_prefix  s pname_ln  pname_ns pn_local s blank_node_label  _ pn_chars_u   pn_chars   pn_chars s langtag  @ azaz  azaz  integer     decimal       double      exponent    exponent   exponent s exponent  ee    string_literal_quote   xxcxaxd  echar  uchar   x xc xanew line xdcarriage return   string_literal_single_quote   xxcxaxd  echar  uchar   x xc xanew line xdcarriage return   string_literal_long_single_quote        echar  uchar   string_literal_long_quote        echar  uchar   uchar  u hex hex hex hex  u hex hex hex hex hex hex hex hex s echar   tbnrf s ws  x  x  xd  xa  xspace xcharacter tabulation xdcarriage return xanew line  s anon   ws  s pn_chars_base  az  az  xcxd  xdxf  xfxff  xxd  xfxfff  xcxd  xxf  xcxfef  xxdff  xfxfdcf  xfdfxfffd  xxeffff s pn_chars_u  pn_chars_base  _ s pn_chars  pn_chars_u      xb  xxf  xfx s pn_prefix  pn_chars_base pn_chars   pn_chars s pn_local  pn_chars_u      plx pn_chars      plx pn_chars    plx s plx  percent  pn_local_esc s percent   hex hex s hex    af  af s pn_local_esc   _                                    @    parsing the rdf  concepts and abstract syntax specification rdfconcepts defines three types of rdf term iris literals and blank nodes literals are composed of a lexical form and an optional language tag bcp or datatype iri an extra type prefix is used during parsing to map string identifiers to namespace iris this section maps a string conforming to the grammar in section  grammar to a set of triples by mapping strings matching productions and lexical tokens to rdf terms or their components eg language tags lexical forms of literals grammar productions change the parser state and emit triples  parser state parsing turtle requires a state of five items iri baseuri  when the base production is reached the second rule argument iriref is the base uri used for relative iri resolution mapprefix  iri namespaces  the second and third rule arguments pname_ns and iriref in the prefixid production assign a namespace name iriref for the prefix pname_ns outside of a prefixid production any pname_ns is substituted with the namespace note that the prefix may be an empty string per the pname_ns production pn_prefix  mapstring  blank node bnodelabels  a mapping from string to blank node rdf_term cursubject  the cursubject is bound to the subject production rdf_term curpredicate  the curpredicate is bound to the verb production if token matched was a curpredicate is bound to the iri httpwwwworgrdfsyntaxnstype  rdf term constructors this table maps productions and lexical tokens to rdf terms or components of rdf terms listed in section  parsing production type procedure iriref iri the characters between  and  are taken with the numeric escape sequences unescaped to form the unicode string of the iri relative iri resolution is performed per section  pname_ns prefix when used in a prefixid or sparqlprefix production the prefix is the potentially empty unicode string matching the first argument of the rule is a key into the namespaces map iri when used in a prefixedname production the iri is the value in the namespaces map corresponding to the first argument of the rule pname_ln iri a potentially empty prefix is identified by the first sequence pname_ns the namespaces map must have a corresponding namespace the unicode string of the iri is formed by unescaping the reserved characters in the second argument pn_local and concatenating this onto the namespace string_literal_single_quote lexical form the characters between the outermost s are taken with numeric and string escape sequences unescaped to form the unicode string of a lexical form string_literal_quote lexical form the characters between the outermost s are taken with numeric and string escape sequences unescaped to form the unicode string of a lexical form string_literal_long_single_quote lexical form the characters between the outermost s are taken with numeric and string escape sequences unescaped to form the unicode string of a lexical form string_literal_long_quote lexical form the characters between the outermost s are taken with numeric and string escape sequences unescaped to form the unicode string of a lexical form langtag language tag the characters following the @ form the unicode string of the language tag rdfliteral literal the literal has a lexical form of the first rule argument string if the  iri rule matched the datatype is iri and the literal has no language tag if the langtag rule matched the datatype is rdflangstring and the language tag is langtag if neither matched the datatype is xsdstring and the literal has no language tag integer literal the literal has a lexical form of the input string and a datatype of xsdinteger decimal literal the literal has a lexical form of the input string and a datatype of xsddecimal double literal the literal has a lexical form of the input string and a datatype of xsddouble booleanliteral literal the literal has a lexical form of the true or false depending on which matched the input and a datatype of xsdboolean blank_node_label blank node the string matching the second argument pn_local is a key in bnodelabels if there is no corresponding blank node in the map one is allocated anon blank node a blank node is generated blanknodepropertylist blank node a blank node is generated note the rules for blanknodepropertylist in the next section collection blank node for nonempty lists a blank node is generated note the rules for collection in the next section iri for empty lists the resulting iri is rdfnil note the rules for collection in the next section  rdf triples constructors a turtle document defines an rdf graph composed of set of rdf triples the subject production sets the cursubject the verb production sets the curpredicate each object n in the document produces an rdf triple cursubject curpredicate n  property lists beginning the blanknodepropertylist production records the cursubject and curpredicate and sets cursubject to a novel blank node b finishing the blanknodepropertylist production restores cursubject and curpredicate the node produced by matching blanknodepropertylist is the blank node b collections beginning the collection production records the cursubject and curpredicate each object in the collection production has a cursubject set to a novel blank node b and a curpredicate set to rdffirst for each object objectn after the first produces a tripleobjectn rdfrest objectn  finishing the collection production creates an additional triple cursubject rdfrest rdfnil  and restores cursubject and curpredicate the node produced by matching collection is the first blank node b for nonempty lists and rdfnil for empty lists  parsing example this section is nonnormative the following informative example shows the semantic actions performed when parsing this turtle document with an lalr parser example  @prefix ericfoaf httpwwwworgpeopleericericpfoafrdf @prefix  httpxmlnscomfoaf ericfoafericp givenname eric               knows httpnormanwalshnameknowswhodanbrickley                        mbox mailtotimbl@worg                        httpgetopenidcomamyvdh           map the prefix ericfoaf to the iri httpwwwworgpeopleericericpfoafrdf map the empty prefix to the iri httpxmlnscomfoaf assign cursubject the iri httpwwwworgpeopleericericpfoafrdfericp assign curpredicate the iri httpxmlnscomfoafgivenname emit an rdf triple rdfericp givenname eric  assign curpredicate the iri httpxmlnscomfoafknows emit an rdf triple rdfericp knows whodanbrickley  emit an rdf triple rdfericp knows _  save cursubject and reassign to the blank node _ save curpredicate assign curpredicate the iri httpxmlnscomfoafmbox emit an rdf triple _ mbox mailtotimbl@worg  restore cursubject and curpredicate to their saved values rdfericp knows emit an rdf triple rdfericp knows httpgetopenidcomamyvdh  a embedding turtle in html documents this section is nonnormative html html script tags can be used to embed data blocks in documents turtle can be easily embedded in html this way example  script typetextturtle@prefix dc httppurlorgdcterms @prefix frbr httppurlorgvocabfrbrcore httpbooksexamplecomworksuqjgzsqkdhn a frbrwork      dccreator wil wheaton@en      dctitle just a geek@en      frbrrealization httpbooksexamplecomproductsbook         httpbooksexamplecomproductsebook httpbooksexamplecomproductsbook a frbrexpression      dctype httpbooksexamplecomproducttypesbook httpbooksexamplecomproductsebook a frbrexpression      dctype httpbooksexamplecomproducttypesebook script turtle content should be placed in a script tag with the type attribute set to textturtle  and  symbols do not need to be escaped inside of script tags the character encoding of the embedded turtle will match the html documents encoding a xhtml this section is nonnormative like javascript turtle authored for html texthtml can break when used in xhtml applicationxhtmlxml the solution is the same one used for javascript example  script typetextturtle cdata@prefix frbr httppurlorgvocabfrbrcore httpbooksexamplecomworksuqjgzsqkdhn a frbrwork  script when embedded in xhtml turtle data blocks must be enclosed in cdata sections those cdata markers must be in turtle comments if the character sequence  occurs in the document it must be escaped using strings escapes uduue this will also make turtle safe in polyglot documents served as both texthtml and applicationxhtmlxml failing to use cdata sections or escape  may result in a non wellformed xml document a parsing turtle in html this section is nonnormative there are no syntactic or grammar differences between parsing turtle that has been embedded and normal turtle documents a turtle document parsed from an html dom will be a stream of character data rather than a stream of utf encoded bytes no decoding is necessary if the html document has already been parsed into dom each script data block is considered to be its own turtle document @prefix and @base declarations in a turtle data bloc are scoped to that data block and do not effect other data blocks the html lang attribute or xhtml xmllang attribute have no effect on the parsing of the data blocks the base uri of the encapsulating html document provides a base uri embedded in content per rfc section  b internet media type file extension and macintosh file type contact eric prudhommeaux see also how to register a media type for a wc specification internet media type registration consistency of use tag finding  june  revised  september  the internet media type  mime type for turtle is textturtle it is recommended that turtle files have the extension ttl all lowercase on all platforms it is recommended that turtle files stored on macintosh hfs file systems be given a file type of text this information that follows has been submitted to the iesg for review approval and registration with iana type name text subtype name turtle required parameters none optional parameters charset  this parameter is required when transferring nonascii data if present the value of charset is always utf encoding considerations the syntax of turtle is expressed over code points in unicode unicode the encoding is always utf utf unicode code points may also be expressed using an uxxxx u to uffff or uxxxxxxxx syntax for u onwards where x is a hexadecimal digit afaf security considerations turtle is a generalpurpose assertion language applications may evaluate given data to infer more assertions or to dereference iris invoking the security considerations of the scheme for that iri note in particular the privacy issues in rfc section  for http iris data obtained from an inaccurate or malicious data source may lead to inaccurate or misleading conclusions as well as the dereferencing of unintended iris care must be taken to align the trust in consulted resources with the sensitivity of the intended use of the data inferences of potential medical treatments would likely require different trust than inferences for trip planning turtle is used to express arbitrary application data security considerations will vary by domain of use security tools and protocols applicable to text eg pgp encryption md sum validation passwordprotected compression may also be used on turtle documents securityprivacy protocols must be imposed which reflect the sensitivity of the embedded information turtle can express data which is presented to the user for example rdf schema labels application rendering strings retrieved from untrusted turtle documents must ensure that malignant strings may not be used to mislead the reader the security considerations in the media type registration for xml rfc section  provide additional guidance around the expression of arbitrary data and markup turtle uses iris as term identifiers applications interpreting data expressed in turtle should address the security issues of internationalized resource identifiers iris rfc section  as well as uniform resource identifier uri generic syntax rfc section  multiple iris may have the same appearance characters in different scripts may look similar a cyrillic  may appear similar to a latin o a character followed by combining characters may have the same visual representation as another character latin small letter e followed by combining acute accent has the same visual representation as latin small letter e with acute any person or application that is writing or interpreting data in turtle must take care to use the iri that matches the intended semantics and avoid iris that make look similar further information about matching of similar characters can be found in unicode security considerations unicodesecurity and internationalized resource identifiers iris rfc section  interoperability considerations there are no known interoperability issues published specification this specification applications which use this media type no widely deployed applications are known to use this media type it may be used by some web services and clients consuming their data additional information magic numbers turtle documents may have the strings @prefix or @base case sensitive or the strings prefix or base case insensitive near the beginning of the document file extensions ttl base uri the turtle @base iriref or base iriref term can change the current base uri for relative irirefs in the query language that are used sequentially later in the document macintosh file type codes text person  email address to contact for further information eric prudhommeaux eric@worg intended usage common restrictions on usage none authorchange controller the turtle specification is the product of the rdf wg the wc reserves change control over this specifications c acknowledgements this work was described in the paper new syntaxes for rdf which discusses other rdf syntaxes and the background to the turtle submitted to www referred to as ntriples plus there this work was started during the semantic web advanced development europe swadeurope project funded by the eu ist programme ist  and further development supported by the institute for learning and research technology at the university of bristol uk sep  valuable contributions to this version were made by gregg kellogg andy seaborn sandro hawke and the members of the rdf working group the document was improved through the review process by the wider community d change log d changes since january  proposed recommendation missing prefix added in example  in response to comment from lars svensson error in grammar productions  and  fixed error in grammar productions  and  fixed d changes from february  candidate recommendation to january  proposed recommendation the addition of sparqlprefix and sparqlbase which allow for using sparql style base and prefix directives in a turtle document was marked at risk in the candidate recommendation publication this feature is no longer at risk the title of this document was changed from turtle to rdf  turtle removed the obsolete links to tests in sec  d changes from august  first public working draft to candidate recommendation renaming for string_ productions to string_literal_quote sytle names rather than numbers local part of prefix names can now include  turtle in html renaming of grammar tokens and rules around iris reserved character escape sequences string escape sequences limited to strings numeric escape sequences limited to iris and strings support toplevel blankpredicateobject lists whitespace required between @prefix and prefix label d changes from january  team submission to first public working draft adopted three additional string syntaxes from sparql string_literal string_literal_long string_literal_long adopted sparqls syntax for prefixed names see editors draft s in names in all positions of a local name apart from the first or last eg exfirstname digits in the first character of the pn_local lexical token eg extm adopted sparqls iri resolution and prefix substitution text explicitly allowed reuse of the same prefix added parsing rules see also the prewc submission changelog e references e normative references bcp a phillips m davis tags for identifying languages september  ietf best current practice url httptoolsietforghtmlbcp ebnfnotation tim bray jean paoli c m sperbergmcqueen eve maler franois yergeau ebnf notation  november  wc recommendation url httpwwwworgtrrecxmlsecnotation rdfconcepts richard cyganiak david wood markus lanthaler rdf  concepts and abstract syntax wc recommendation  february  url httpwwwworgtrrecrdfconcepts the latest edition is available at httpwwwworgtrrdfconcepts rfc s bradner key words for use in rfcs to indicate requirement levels march  internet rfc  url httpwwwietforgrfcrfctxt rfc m murata s stlaurent d kohn xml media types rfc  january  rfc url httpwwwietforgrfcrfctxt rfc t bernerslee r fielding l masinter uniform resource identifier uri generic syntax rfc  january  rfc url httpwwwietforgrfcrfctxt rfc m drst m suignard internationalized resource identifiers iris january  rfc url httpwwwietforgrfcrfctxt unicode the unicode standard url httpwwwunicodeorgversionslatest utf f yergeau utf a transformation format of iso  ietf rfc  november  url httpwwwietforgrfcrfctxt e informative references html robin berjon steve faulkner travis leithead erika doyle navara edward oconnor silvia pfeiffer html  february  wc candidate recommendation url httpwwwworgtrhtml ntriples gavin carothers andy seabourne rdf  ntriples wc recommendation  february  url httpwwwworgtrrecntriples the latest edition is available at httpwwwworgtrntriples rdfmt patrick j hayes peter f patelschneider rdf  semantics wc recommendation  february  url httpwwwworgtrrecrdfmt the latest edition is available at httpwwwworgtrrdfmt sparqlquery steven harris andy seaborne sparql  query language  march  wc recommendation url httpwwwworgtrsparqlquery unicodesecurity mark davis michel suignard unicode security considerations url httpwwwunicodeorgreportstr