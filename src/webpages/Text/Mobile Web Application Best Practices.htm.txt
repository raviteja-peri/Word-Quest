mobile web application best practices mobile web application best practices wc recommendation  december  this version httpwwwworgtrrecmwabp latest version httpwwwworgtrmwabp previous version httpwwwworgtrprmwabp editors adam connors google bryan sullivan att until  please refer to the errata for this document which may include some normative corrections see also translations copyright  wc mit ercim keio all rights reserved wc liability trademark and document use rules apply abstract the goal of this document is to aid the development of rich and dynamic mobile web applications it collects the most relevant engineering practices promoting those that enable a better user experience and warning against those that are considered harmful status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this is the wc recommendation of mobile web application best practices this document was developed by the mobile web best practices working group as part of the mobile web initiative since publication as a proposed recommendation on  october  the working group clarified that alternative compression formats such as exi referred to in section  use transfer compression may not share some of the impediments of common compression formats a diff version is available no substantive change has been made the document contains statements that may be regarded as forwardlooking when this document is published  december  examples provided in the how to do it sections sometimes reference ongoing works on technologies that the working group expects to become prevalent in the development community soon these sections should be taken with a grain of salt depending on the actual evolution of these technologies the best practices statements should remain valid in any case an implementation report is available comments on this specification may be sent to publicbpwgcomments@worg with public archive this document has been reviewed by wc members by software developers and by other wc groups and interested parties and is endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web this document was produced by a group operating under the  february  wc patent policy this document is informative only wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy table of contents  introduction  purpose of the document  audience  scope  best practices  web application  mobile context  delivery context  relationship to other best practices and recommendations  terminology  structure of best practice statements  best practice statements  application data  use cookies sparingly  use appropriate clientside storage technologies for local data  replicate local data  security and privacy  do not execute unescaped or untrusted json data  user awareness and control  ensure the user is informed about use of personal and device information  enable automatic signin  conservative use of resources  use transfer compression  minimize application and data size  avoid redirects  optimize network requests  minimize external resources  aggregate static images into a single composite resource sprites  include background images inline in css style sheets  cache resources by fingerprinting resource references  cache ajax data  do not send cookie information unnecessarily  keep dom size reasonable  user experience  optimize for application startup time  minimize perceived latency  design for multiple interaction methods  preserve focus on dynamic page updates  use fragment ids to drive application view  make telephone numbers clicktocall  ensure paragraph text flows  ensure consistency of state between devices  consider mobile specific technologies for initiating web applications  use meta viewport element to identify desired screen size  handling variations in the delivery context  prefer serverside detection where possible  use clientside detection when necessary  use device classification to simplify content adaptation  support a nonjavascript variant if appropriate  offer users a choice of interfaces  further considerations  consider use of canvas element or svg for dynamic graphics  inform the user about automatic network access  provide sufficient means to control automatic network access appendices appendix  best practice dependent device properties appendix  references  mwi references  device independence  web protocols and languages  other references appendix  acknowledgments list of best practices the following best practices are discussed in this document and listed here for convenience use cookies sparingly use appropriate clientside storage technologies for local data replicate local data do not execute unescaped or untrusted json data ensure the user is informed about use of personal and device information enable automatic signin use transfer compression minimize application and data size avoid redirects optimize network requests minimize external resources aggregate static images into a single composite resource sprites include background images inline in css style sheets cache resources by fingerprinting resource references cache ajax data do not send cookie information unnecessarily keep dom size reasonable optimize for application startup time minimize perceived latency design for multiple interaction methods preserve focus on dynamic page updates use fragment ids to drive application view make telephone numbers clicktocall ensure paragraph text flows ensure consistency of state between devices consider mobile specific technologies for initiating web applications use meta viewport element to identify desired screen size prefer serverside detection where possible use clientside detection when necessary use device classification to simplify content adaptation support a nonjavascript variant if appropriate offer users a choice of interfaces the following advisory notes from the mobile web best practices working group are also discussed in this document and listed here for convenience consider use of canvas element or svg for dynamic graphics inform the user about automatic network access provide sufficient means to control automatic network access  introduction  purpose of the document this document sets out a series of recommendations designed to facilitate development and delivery of web applications on mobile devices the recommendations are offered to creators maintainers and operators of mobile web sites  audience readers of this document are expected to be familiar with the creation of web applications and to have a general familiarity with the technologies involved but are not expected to have a background in mobile technologies or previous experience with mobile web best practices bp mwbp the document is not targeted solely at developers others such as interaction and graphic designers site administrators and tool developers are encouraged to read it  scope these recommendations expand on the recommendations of bp where the focus of bp is primarily the extension of web browsing to mobile devices this document considers the development of web applications on mobile devices  best practices the approach in writing this document has been to collate and present the most relevant engineering practices prevalent in the development community today and identify those that a facilitate the exploitation of device capabilities to enable a better user experience or b are considered harmful and can have nonobvious detrimental effects on the overall quality of an application the goal of this document is not to invent or endorse future technologies however there are a number of cases where explicitly omitting a best practice that referred to an emerging technology on the grounds that it was too recent to have received wide adoption would have unnecessarily excluded a valuable recommendation as such some best practices have been included on the grounds that the working group believes that they will soon become fully qualified best practices eg in prevalent use within the development community in building a web application it is not necessary to implement all best practices instead each best practice should be considered as a possible measure that might be implemented towards the goal of providing as rich and dynamic an experience as possible on a mobile web browser  web application for the purposes of this document the term web application refers to a web page xhtml or a variant thereof  css or collection of web pages delivered over http which use serverside or clientside processing eg javascript to provide an applicationlike experience within a web browser web applications are distinct from simple web content the focus of bp in that they include locally executable elements of interactivity and persistent state while the focus of this document is the best practices that apply to applications running in a web browser in many cases these recommendations are equally applicable to other kinds of web runtime such as the wc work on web widgets widgets and also in a number of vendorspecific initiatives  mobile context in a world where the line between mobile and nonmobile is necessarily blurred and a document that restricts its focus solely to best practices that are uniquely mobile would most likely be very short with this in mind the focus of this document is to address those aspects of web application development for which there are additional nontrivial concerns associated with the mobile context this applies equally both to the limitations of the mobile context eg small screen intermittent connectivity and also the additional scope and features that should be considered when developing for the mobile context eg device context  location presence of personal data on the device etc  delivery context this document builds on some of the concepts described by the ubiquitous web applications working group uwa and the device independence principles dip it also discusses device and delivery channel characteristics which the uwa has named delivery context dcodi this document does not make any explicit assumptions about features of the delivery context but most best practices assume devices with support for standard xhtml javascript and css capability at the time of writing developers of relatively complex web applications targeting mid to highend devices are most likely to benefit from these best practices but as the technology evolves it is expected that the range of relevant devices will increase additionally some best practices are relevant only if the device exposes certain capabilities for example access to device information such as location in these cases the requirements are summarized as a separate subheading saying that applications should be sensitive to the delivery context implies that some level of device knowledge and content adaptation is required for best practices specifically related to this area see  handling variations in delivery context  relationship to other best practices and recommendations these recommendations are complementary to the recommendations of mobile web best practices  bp though their focus is somewhat orthogonal whereas bp focused on delivering a good experience on a broad range of devices this documents focus is on making use of advanced device capabilities to deliver the best possible experience on those devices that can support it for this reason while readers of this document are likely to benefit from reading bp it is not a prerequisite  terminology note that the term javascript is used in place of the arguably more correct term ecmascript in order to provide consistency with the companion web application technologies json and ajax which are in common use and both implicitly refer to javascript in their names also the terms ajax and xmlhttprequest xhr are used to refer to any asynchronous browser request  structure of best practice statements the heading a summary of the functional area to be addressed by these statements what it means an explanation of the intention of the best practice statement how to do it a discussion of the techniques and device capabilities required to implement this best practice requires a summary of device capabilities required in order for this best practice to apply  best practice statements  application data most applications have the need to store data of various forms both intrinsic content eg the emails of an email application the calendar events of a calendar application and supplementary personalization settings eg preferred theme default view etc these best practices relate to the appropriate technologies and techniques to use for managing a web applications data  use cookies sparingly  what it means cookies are a common and effective means to store small amounts of state on the client they are appropriate for simple personalization data and are commonly used to store a token representing user identity in order to enable automatic signin information stored in cookies however is sent to the server for every request and so using them for excessive amounts of data can negatively impact performance particularly on a mobile network also in the mobile context cookie support cannot be relied upon since it may be disabled either in the device configuration or by the mobile network for this reason applications should endeavor to remain functional even if cookies are unavailable see bp cookies do not rely on cookies being available for more cookie related caveats  use appropriate clientside storage technologies for local data  what it means if supported by the device clientside storage apis provide a mechanism to store more extensive amounts of data than would be appropriate with cookies at the time of writing work is still undergoing to unify these apis see the wc webapps working group webapps and device apis working group dap for more information additionally some examples of existing technologies that support clientside storage apis are bondi bondi html html and opera widgets opera making use of clientside storage in web applications is a powerful technique that brings web applications into parity with native applications in terms of startup time and responsiveness two key advantages are worth noting explicitly application data stored locally can be displayed immediately when the application is started without the need for a server roundtrip allowing startup latency to be reduced by making updates locally at first and replicating changes back to the server in the background when connectivity is available web applications can continue to operate responsively even when the network signal is unreliable  how to do it each technology offers a variety of storage facilities that range from simple key  value models appropriate for relatively simple unstructured data to full sql database apis appropriate for more extensive and structured content for a good technical discussion of these facilities in the context of html see offline web applications offline  clientside storage  requires local storage api  replicate local data to a server if necessary  what it means if a clientside storage api is being used the data in it is not visible to the users other devices whilst this is appropriate for some forms of data eg preferences and state relevant only to a given device it is often necessary to send this data back to a server in order to provide a consistent view across devices eg between mobile and desktop instances of an application and make it possible to recover data if the device is lost or damaged see  ensure consistency of state between devices for further discussion on these topics as a rule of thumb data that needs to be shared with other devices or recovered in the case of a lost or damaged device should be replicated back to the server as soon as possible  how to do it the technologies that provide clientside storage apis provide facilities to detect the current network connectivity for example html provides a property on the navigator object navigatoronline to indicate whether the client is currently online and dispatches two events on the window object to indicate a change of network state online and offline however these apis should be used with caution even if the browser is reporting an online state on an intermittent network this is no guarantee that a subsequent connection will succeed the most effective approach is to fail gracefully in the event of a connection failure store unsaved data in a queue of uncommitted changes and set a timer to try again later  clientside storage  requires local storage api  security and privacy use trusted information and protect all personally identifiable information mobile web applications are subject to the same security considerations and risks as desktop web applications and as such most desktop related security advice is applicable to mobile for example see owasp owasp for a good summary of common web security best practices this document does not attempt to provide an exhaustive survey of security issues but the following best practice has been called out on the grounds that it is specifically relevant to mobile  do not execute unescaped or untrusted json data  what it means a common technique is to use json to transfer data to a client and then use javascripts eval function to parse it this is a powerful technique since on constrained devices eval can execute more quickly than the alternatives however direct execution of a datafeed that contains unescaped usergenerated data represents a significant security risk and should be avoided inadvertently executing malicious javascript is particularly dangerous on mobile devices where personal information current location contact data etc may be exposed  how to do it where possible instead of parsing json data by executing it with the eval function use a json parser for example a javascript implementation of a json parser jsonparse if this is impractical ensure that the data contains no usergenerated content eg the server is responsible for the content of all fields in the datafeed or that any usergenerated content is correctly escaped see rfc rfc for details on how to ensure a json datafeed is suitably escaped and can be safely passed into javascripts eval function  user awareness and control allow the user to control application behaviour that might not otherwise be apparent such as access to the network and access to device data for example pictures music and video clips contacts calendar pim data call history system data battery coverage roaming location media recording record audiovideo clip get new picture device context eg location connectivity profile setting note that where possible it is preferable to rely on the browsers native functionality to notify the user of these activities however the best practices below provide further advice on appropriate application behaviour in situations where the native functionality of the browser may not be sufficient  ensure the user is informed about use of personal and device information  what it means ensure that the user is informed if the application needs to access personal or device information the user should be informed of the types of information that will be used by the application and whether  how that data will be exchanged with the server these notices should be provided when the user first accesses the web application or on first access to user information it should provide the user with enough information to judge whether or not they want to allow the application access to their data  how to do it in many cases use of apis that provide access to personal or device information causes a native confirmation dialog to be presented to the user in this case the application should not force the user to confirm again at the application level but should make clear in the ui that displayed data has been accessed from the device if the user declines a prompt to allow application access to personal or device information the application must recover gracefully for example if a request to a device api fails do not automatically retry if this will lead to the user being presented with repeated native confirmation dialog boxes  device data  requires device data apis  enable automatic signin  what it means if an application requires user identity it is usual to prompt for user credentials username and password and provide the option to signin automatically on next usage session this is especially important on a mobile device where data input is more difficult than on a desktop note that if automatic signin is enabled a signout link should also be provided  how to do it user credentials can be stored in a cookie or in local storage however it is important not to store unencrypted password information since this is insecure typically a securely hashed token which if necessary can be revoked on the server is stored locally in order to enable automatic signin  conservative use of resources the most effective way to ensure that applications run smoothly and with low latency is to minimize use of device memory processor power and network bandwidth which are more limited on mobile devices than on the desktop  use transfer compression  what it means compress content for efficient delivery  how to do it http  compression which uses the gzip and deflate algorithms is widely supported web servers should be configured to serve appropriately compressed responses note however that the cost in time and battery usage of decompressing data should be balanced against the gains in transport efficiency when configuring http  compression note that most image formats especially jpegs do not benefit from compression but svg does most other media formats eg audio video do not benefit from compression very small files eg k generally do not benefit from compression where supported alternative compression formats such as exi exi that do not share some of the above impediments may provide benefit  minimize application and data size  what it means this section elaborates on the best practices of bp minimize smaller applications will download and execute more quickly and more reliably than larger ones on constrained devices  how to do it process html javascript and css files to remove whitespace and minify before delivery minification  optimization may take a number of forms from simple removal of white space and comments to the global substitution of tokens variables method names selector names with shorter alternatives in general minification based upon a lexical  grammatical understanding of that source is less fragile and is preferred to simple regularexpression based tools see the javascript compressorrater jscomp for a comparison of javascript minification tools  avoid redirects  what it means the redirection of requests using http xx status or html meta refresh is typically used to exchange information between servers eg account authentication the delay incurred by redirects is much higher over mobile networks and so the number of redirects should be kept to a minimum  how to do it try not to use redirects if more than two redirects are required consider using an interstitial page to communicate to the user that the application is still working  optimize network requests  what it means establishing the necessary connections in order to complete an http request can take significantly longer on a mobile network than on a fixed network even though bandwidth is typically more restricted on a mobile network it is still preferable to make fewer larger requests  how to do it consider the following possibilities when designing an application batching requests since a single request for more data is likely to provide a better user experience than several smaller requests wherever possible batch up multiple requests at the application level throttle lowpriority requests in some applications certain requests may be less critical than others eg logging requests throttle lowpriority requests to ensure they dont block the network and prevent more critical requests from being serviced quickly back off during periods of inactivity if the application polls for updates it should monitor user activity and poll less frequently during inactive periods device context if supported by the device use awareness of current connectivity eg wifi to select an appropriate level of interaction  minimize external resources  what it means a web application typically requires a number of resources style sheets scripts image etc each of which requires an http request as above http requests are particularly expensive on a mobile network and so fewer larger requests should be favored over a larger number of smaller requests  how to do it as far as makes sense after taking into account  minimize perceived latency combine all style sheets into a single resource and all scripts into a single resource if multiple scripts and style sheets are required as part of the authoring process then try to arrange that they are merged before the page is served  aggregate static images into a single composite resource sprites  what it means web applications often depend on a number of static images to provide icons buttons etc if served as a separate image each one incurs an additional http request which is detrimental to performance  how to do it define candidate images as css background images and combine them into a single image for transfer spriting to optimize efficiency combine images of similar sizes and color palettes also combine images that do not change often since if one of the component images changes the entire combination image will need to be refreshed to render individual components of a resource use css positioning and clipping note that this technique should only be applied to decorative images eg those that dont require an alt text spriting informational images leads to an undesirable coupling of content and layout and is detrimental to accessibility  css  requires css clipping and positioning support  include background images inline in css style sheets  what it means visual effects eg background images and gradients are often used to improve the look and feel of an application these can be included in css as base encoded strings in order to avoid an additional http request note that base encoding adds around  to the image size after gzip compression and this additional cost should be weighed against the benefits of fewer requests  how to do it background images can be encoded using the data uri scheme urldataimagepngbase data  css  requires rfc rfc data uri support  cache resources by fingerprinting resource references  what it means dynamic resources that change occasionally eg a users avatar can still be cached by identifying them with a uri that includes a hash of the resource content using this technique means that the browser does not need to check the resource headers in order to validate its cache instead any change in the resource will lead naturally to a corresponding change in the resource reference for example img srchttpwwwexamplecomuserimagesjoeblogsfdada where the actual resource at joeblogsxxx could be either generated in some offline process or served dynamically  how to do it set the resource caching policy to never expire by setting the expires header to a date in the far future reference the resource using a uri that contains a hash of the content if the content changes this reference will change and the browser will fetch the updated data  cache ajax data  what it means if possible data designed to be accessed by ajax requests from the client should be cached in the same way as primary content  how to do it the standard caching techniques expires header and cachecontrol header as well as resource fingerprinting see  can be used on ajax data as readily as primary content pages  do not send cookie information unnecessarily  what it means static resources do not need cookie information and so performance can be improved by serving them from a path or subdomain for which the applications cookies are out of scope  how to do it use a different domain subdomain or path name for static resources to the main application and restrict the valid path of cookies such that they will not be exchanged when they are not needed for example setcookie somepreferenceinformationpurple pathmyapp application data served from myapp will receive cookie information static data served from static will not receive unneeded cookie information  keep dom size reasonable  what it means the inmemory size of the document object model dom may be limited on mobile devices large  complex pages may exceed this limit and cause unpredictable errors  how to do it limit the amount of information in the dom at a single time using pagination or other appropriate techniques  user experience given the additional complexities of interacting with an application on a mobile device special consideration should be given to the overall user experience user experience is influenced by a number of factors including latency interaction method and data consistency  optimize for application startup time  what it means user experience is strongly influenced by the initial startup time of an application offline web application technologies like html appcache htmloffline bring web applications into parity with native applications in terms of their startup time and their ability to be used even where network coverage is intermittent the following steps should be considered to minimize the start time of a web application  how to do it consider the following techniques to help minimize application start time use offline technology offline web technologies for example appcache allow the resources of a web application its html javascript and css files to be specified and stored locally so that the application can start without requiring a roundtrip to the server consider partitioning large scripts in complex web applications javascript parsing can contribute a significant portion of start time if some functionality is rarely used it should be moved into separate scripts that can be loaded on demand lowering the amount of core code that needs to be parsed at startup use local storage where appropriate store a snapshot of the last application state so it can be displayed immediately on startup without requiring a server roundtrip minimize number of local storage queries the number of local storage queries required to generate the initial view is a significant contribution to startup latency try to minimize the number of local storage queries required before the first view can be displayed  minimize perceived latency  what it means lowering perceived latency is an important factor in improving the overall usability of a web application  how to do it a number of techniques can be used to lower perceived latency enable incremental rendering place javascript at the bottom of the page since browsers rendering halts while parsing javascript and configure the page so that any useful information that might be available is viewable while the main content of the application is still loading keep the user informed of activity use spinners progress bars to keep the user informed during network and device api accesses so that they do not think the application is halted avoid page reloads to reflect changes in state or show different views within an application update pages dynamically by manipulating the dom rather than reloading them preload probable next views preload data for frequently traversed paths in the application so it can be displayed more quickly when the user requests it  design for multiple interaction methods  what it means interaction methods vary across devices three main interaction methods should be considered when designing the ui focus based the browser focus jumps from element to element pointer based keybased navigation controls a pointer that can cover any part of the screen touch based events are related directly to a finger or stylus touch position on the screen the optimum configuration of ui elements varies depending on the interaction method used by the device ideally the ui should be adapted based on a knowledge of the interaction methods supported by the target device if this is not possible then the ui should be designed to provide a good experience for each of these different interaction methods additionally note that as always new interaction methods are likely to emerge in the future particularly in the fields of voice and assistive technology for additional nonmobile specific guidelines on accessibility and designing for assistive technologies see web content accessibility guidelines wcag  wcag  how to do it particularly where navigation of content requires multiple links ie backforward in a carousel the following factors should be considered focus based the current focus of the page is easily determined because the focus element will be highlighted focus area will jump automatically from one selectable element to another eg from link to link without affecting usability even when widely spaced pointer based selectable elements that are associated with each other need to be close as moving the pointer can be slow selectable elements need to be large enough to be easily selected  since the pointer often moves in steps of between    pixels selectable elements should have rollovers to make it clear when the pointer has entered their active area touch based selectable elements may be but dont have to be widely spaced since the user can select them directly selectable elements must be large enough to be easily selected eg list items should have a screen height of at least around cm no elements are in focus until they are selected so extra information cannot be passed to the user eg rollovers will not work  preserve focus on dynamic page updates  what it means the javascript focus method can be used to move the focus to the part of a page that has changed however if unexpected this can confuse or irritate the user especially if returning to the previous focus is not easy  how to do it use the javascript focus method only if it is essential to the use of the application and does not inhibit user controlinteraction  use fragment ids to drive application view  what it means web applications can switch views without a full page reload by showing and hiding sections of content however this means that the browser back button doesnt work by default and it is not possible to link directly to specific views within an application usability is enhanced by enabling both of these features enabling deep links eg to the content of a specific email means the user can bookmark this view and return to it quickly enabling the browser history provides a natural method to navigate application views that is natively supported by the browser  how to do it assign a uri with a distinguishing fragment identifier eg httpmyappexampleorgmyappview use javascript to interrogate the browser location in order to determine which view to display for further discussion on this topic see unique urls pattern ajaxunique on the ajax design patterns web site note that showing and hiding content in this way can have adverse affects on accessibility if not carefully handled see waiaria aria for more information on writing accessible rich web applications  make telephone numbers clicktocall  what it means standardized uri schemes have been defined for some common device functions eg making phone calls sending an sms and managing address books these uri schemes if supported can enable users to easily use these functions from web applications  how to do it the most broadly supported scheme is tel as described in rfc rfc code such as the following can be used to enable clicktocall a hreftelphonenumberphonenumbera note that phonenumber should always be entered using the full international prefix eg  to ensure that it works outside of its home country similarly rfc rfc can be used to send a gsm sms text message as follows a hrefsmsphonenumberbodymessagephonenumbera note that at the time of writing support for this rfc is limited and device compatibility should be verified before deployment  ensure paragraph text flows  what it means on small screens it is important that paragraph text flows both so that it doesnt require horizontal scrolling and so that it will reflow if the view orientation is changed see bp measures for more details  how to do it do not use absolute or pixel measures use percentage and relative measures for containers so that text can reflow automatically  ensure consistency of state between devices  what it means this recommendation builds on the recommendation in bp  thematic consistency and expands it to consider the application preferences personalization data and state that form part of the overall experience on a mobile web application user credentials valid on one device should be valid on other devices user preferences captured on one device should be accessible on other devices data updated on one device should be viewable consistently on other devices an important example of this is offering a consistent experience where data entered on a desktop is available on a mobile and vice versa  how to do it for any application data that is not exclusively relevant to the current device favor storing it on the server so it can be shared by other devices see  application data for more details  consider mobile specific technologies for initiating web applications  what it means networkinitiated content delivery push methods allow notifications and updates to be sent to the user even when they are outside of the application context  how to do it push method support may be disclosed through a user agent profile uaprof document if published by the device vendor or through a device classification repository if supported by the user agent options for push methods include oma push a widely supported enabler providing methods for userconfirmed and automatic content push directed to mobile browsers and other useragents see oma push specifications omapush for more details sms qr codes alternative vendorspecific initiatives  use meta viewport element to identify desired screen size  what it means certain classes of browser attempt to display desktop pages on a small screen by automatically zooming the display this can be problematic for applications that have already been optimized for a small screen the viewport meta tag tells the device at what scale to render the page  how to do it a typical viewport setting looks like this meta nameviewport contentwidthdevicewidth initialscale  and is inserted into the head element of the html document this setting informs the browser to always render the page at  eg no browser based scaling and is appropriate for pages specifically designed for the target screensize  handling variation in the delivery context variations in the delivery context such as different device capabilities is a prominent feature of the mobile web web applications should adapt to known or discoverable properties of the delivery context by adjusting the content navigation or page flow with a view to offering a good user experience on as broad a range of devices as possible  prefer serverside detection where possible  what it means where possible use the evidence available on the server to determine the properties of the delivery context and adapt the responses to the client before transfer thus improving the user experience and avoiding transfer of unnecessary or incompatible data  how to do it in its most basic form the minimum evidence from the requesting device is the http request header fields typically the following header fields provide evidence of device capabilities accept this list of mime types can aid in the selection or creation of alternative content representations to suit the requesting device this field is not always reliable however and its value often includes  suggesting that clients can accept every mime type useragent as a generally unique albeit opaque string it can be used as a key into a device description repository ddr the set of properties recorded in these repositories varies from implementation to implementation the wc ddr simple api defines a common interface and a means of expressing the vocabulary of properties for such repositories xwapprofile this is a reference to the user agent profile uaprof for the requesting device in practice the referenced profile is not always guaranteed to be available valid or uptodate so the value of this field is sometimes used with a ddr where corrections to the profiles are stored some devices may send an additional field xwapprofilediff advertising temporary or permanent variations of a specific device with respect to its standard profile  use clientside capability detection where necessary  what it means where it is not possible to determine certain properties of the delivery context from the server this information may be available at the client once obtained at the client the information can be used directly to adapt the presentation or it can used to request alternative adapted content from the server  how to do it there are a few clientside solutions available to the developer javascript this is the most common solution a script determines the device  browser properties and manipulates the content and behaviour of the application accordingly this can be done in two ways by encapsulating the differing behaviors in the control logic of the application eg if some_api_exists   typically the delivery context information is gathered at the start of the session though dynamic information eg current screen orientation should be refreshed during the session by passing the gathered information back to the server and requesting alternative content eg either by dynamically adding a new script element to the dom or by an xhr request css media types css media types allow different stylesheets to be associated with different media types eg print screen mobile and are traditionally used to repurpose content for these destinations since the list of recognized media types is limited however and devices are notoriously idiosyncratic in their interpretation of types it is in general not a helpful technology in this context see media types cssmt for more details css media queries media queries are an extension to the mediatypes paradigm that allow developers to apply specific style rules based on the device display characteristics eg screen width orientation or resolution at the time of writing this specification is not fully supported but can provide a useful way to modify the page layout for example to reflow sections of text in a more maintainable declarative way than is possible with script see media queries cssmq for more details  use device classification to simplify content adaptation  what it means if a large number of devices are being targeted or if the application is sensitive to the permutations of a large number of configuration properties the number of application variants required might quickly become unmanageable to combat this classify target devices and build a single application variant for each class this allows you to exploit device capabilities with a manageable code base  how to do it identify the target devices for the application and assign these to device classes of varying capability focus on application variants that work in each class rather than building devicespecific exceptions for every variation in device configuration device classes should be defined on an application by application basis so that the variants can be tailored accordingly example  possible definition of application classes based on rendering and device api capabilities class  basic xhtml support no or very basic scripting no xhr support even if these kind of devices are not being explicitly supported it is often advisable to support a nonxhr version in case javascript has been disabled on the device class  full ajax and javascript support class  advanced device apis for example access to location api device pim data or application cache example  possible definition of application classes based on supported userinteraction modes class  pointer based class  touch based  support a nonjavascript variant if appropriate  what it means scripted and xhr based applications are not supported on all browsers if broadest reach is a primary concern then consider providing a variant of the application that uses synchronous form posts in place of xhr requests this best practice is related albeit with a differing focus to bp   objects_or_script  how to do it essentially this bp states that it is favorable to support class  devices as defined in the first example above if appropriate doing this will ensure that the application can be used across as broad a range of devices as possible furthermore in some cases a nonjavascript version can be useful for simple operations in lowbandwidth situations in some cases however a particular application simply has no nonjavascript counterpart eg a web based game an instant messaging client in which case the server should return a response with human readable content explaining the situation in more detail ideally content should be adapted before transfer by checking whether or not the device supports javascript using a ddr or local index however in some cases eg if the device has disabled javascript javascript may still be sent to a device that cant process it to cover this case a noscript element should always be included and contain a suitably informative message  offer users a choice of interfaces  what it means not only is device characteristic detection imperfect it cannot always account for the differing use cases of an application therefore automatic detection is not sufficient as the only mechanism for determining which version is appropriate  how to do it where multiple versions of an application exist eg to support the various device classifications always offer the user the opportunity to change the selection always attempt to default to the most appropriate ui on first use always remember the users preference for future visits in a cookie or local data store  further considerations the mobile web best practices working group would like to draw the attention of web application developers on the following considerations these considerations should not be viewed as best practices because they are not prevalent in the development community at the time of writing they are published as advisory notes  consider use of canvas element or svg for dynamic graphics  what it means canvas and svg provide alternative options for incorporating graphics in a web application support for these technologies varies across devices so in many cases the choice of which technology to use will depend on the target devices for a given application the canvas element specifies a display region where javascript can be used to draw simple graphics in contrast svg is an xml language for defining vector graphic elements that are added to a dom which can be modified using javascript svg is wellsuited for graphics that must be scalable and whose components need to be modified eg panning and zooming a map whereas canvas is better suited where a static bitmap is sufficient eg drawing a scatterchart or creating visual effects if speed is important canvas may be more effective however since canvas generates a flat bitmap it is not inherently accessible and so should not be used as the sole means of conveying information  how to do it see the canvas element in the html specification html section  for information on how to use the canvas element see wc scalable vector graphics svg home page svg for information on how to use svg  inform the user about automatic network access  what it means network traffic on a mobile device depletes the battery and may incur expense  so it is important to inform the user when accessing the network whenever an application makes asynchronous xhr data requests whether in response to a user action or automatically this should be indicated in an appropriate manner so that the user remains informed and in control  how to do it applications should disclose how they use network resources a simple icon indicating background activity is usually sufficient and does not interrupt the flow of the application if extensive background network activity is required the user should be informed when they first visit the site when they first signin or in associated help pages the kinds of detailed information that could be disclosed in associated help pages or terms of service are how often the application will interact with the internet  eg every  minutes hourly daily for how long the automatic behavior will continue how heavy the overall usage is expected to be or the type of service plan recommended  provide sufficient means to control automatic network access  what it means if an application makes automatic network requests eg to poll the server for updates or to automatically store an updated client state a means to control this activity should be provided  how to do it all applications that access the network automatically should provide a means for the user to disable that activity when automatic network activity is disabled periodically prompt the user to make network requests consider allowing the user to adjust the polling schedule and to control which activities are allowed to initiate network requests appendix  best practice dependent device properties the following device properties included in the ddr core vocabulary ddrvocab are of particular value in supporting best practices recommended in this document they should be available in any ddr supporting the wcs ddr core vocabulary display width display height display color depth input devices markup support stylesheet support image format support input mode support cookie support script support appendix  references  mwi references mwbp mobile web best practices  jo rabin editor wc recommendation  july  see httpwwwworgtrmobilebp  device independence dcodi delivery context overview for device independence  r gimson r lewis s sathish editors wc working group note  march  see httpwwwworgtrdidco digloss glossary of terms for device independence r lewis editor wc working draft work in progress  january  see httpwwwworgtrwddigloss dip device independence principles r gimson editor wc working group note  september  see httpwwwworgtrnotediprinc  web protocols and languages css cascading style sheets css level  specification hkon wium lie bert bos editors wc recommendation  january  revised  april  see httpwwwworgtrreccss css cascading style sheets level  css specification bert bos hkon wium lie chris lilley ian jacobs editors wc recommendation  may  revised  april  see httpwwwworgtrreccss http hypertext transfer protocol  http request for comments  t bernerslee r fielding h frystyk may  see httpwwwworgprotocolsrfcrfc http hypertext transfer protocol  http request for comments  r fielding j gettys j mogul h frystyk l masinter p leach t bernerslee june  see httpwwwworgprotocolsrfcrfchtml xml extensible markup language xml  fifth edition tim bray jean paoli c m sperbergmcqueen eve maler franois yergeau editors wc recommendation  november  see httpwwwworgtrrecxml  other references ajaxunique unique urls pattern on ajax design patterns web site see httpajaxpatternsorgunique_urls aria accessible rich internet applications waiaria  james craig et al wc working draft  september  see httpwwwworgtrwaiaria bondi omtp reference implementation see httpbondiomtporg cssmq media queries hkon wium lie tantek elik daniel glazman anne van kesteren wc candidate recommendation  july  see httpwwwworgtrcssmediaqueries cssmt cascading style sheets level  revision  css  specification bert bos et al wc candidate recommendation  september  see httpwwwworgtrcssmediahtml dap wc device apis working group see httpwwwworgdap ddr device description repository simple api jo rabin et al wc recommendation  december  see httpwwwworgtrddrsimpleapi ddrvocab device description repository core vocabulary jo rabin et al wc working group note  april  see httpwwwworgtrddrcorevocabulary exi efficient xml interchange wc candidate recommendation john schneider and takuki kamiya  december  see httpwwwworgtrexi html html ian hickson and david hyatt wc working draft  october  see httpwwwworgtrhtml htmloffline html ian hickson and david hyatt wc working draft  october  see httpwwwworgtrhtmlofflinehtmloffline jscomp the javascript compressorrater see httpcompressorraterthruherenet jsonparse implementation of a secure json parser in javascript see httpsgithubcomdouglascrockfordjsonjsrawmasterjson_parsejs offline offline web applications anne van kesteren and ian hickson wc working group note  may  see httpwwwworgtrofflinewebapps omapush oma push see httpwwwopenmobileallianceorgtechnicalwapindexaspx opera opera web widget api see httpdevoperacomlibrarieswidgetobject owasp open web application security project see httpwwwowasporgindexphpmain_page rfc the data url scheme lmasinter ietf august  see httpwwwietforgrfcrfctxt rfc the tel uri for telephone numbers h schulzrinne ietf december  see httpwwwietforgrfcrfctxt rfc the applicationjson media type for javascript object notation json d crockford july  see httpwwwietforgrfcrfc rfc uri scheme for global system for mobile communications gsm short message service sms e wilde and a vahasipila ietf january  see httpwwwietforgrfcrfctxt svg wc scalable vector graphics svg home page see httpwwwworggraphicssvg uaprof open mobile alliance omatsuaprofv_a user agent profile approved version   feb  see httpwwwopenmobileallianceorgtechnicalrelease_programdocsuaprofv_aomatsuaprofv_apdf wcag web content accessibility guidelines  b caldwell m cooper l guarino reid g vanderheiden et al wc recommendation  december  see httpwwwworgtrwcag webapps wc webapps working group see httpwwwworgwebapps widgets widget packaging and configuration marcos cceres wc working draft  october  see httpwwwworgtrwidgets wtai wap forum wapwtaia wireless telephony application interface specification see httpwwwopenmobileallianceorgtechaffiliateslicenseagreementaspdocnamewapwapwtaiapdf xhtmlbasic xhtml basic   second edition shane mccarron masayasu ishikawa editors wc recommendation  november  see httpwwwworgtrrecxhtmlbasic appendix  acknowledgments the editors would like to thank members of the bpwg for contributions of various kinds the editors would also like to thank contributors to the public list and contributors of last call comments whose comments have been taken into account in the creation of this document the editors acknowledge significant written contributions from  daniel appelquist vodafone  jo rabin mtld mobile top level domain dotmobi  phil archer wc  jeff sonstein rochester institute of technology  franois daoust wc  scott hughes vodafone