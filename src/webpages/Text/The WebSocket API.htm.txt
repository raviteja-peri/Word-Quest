the websocket api the websocket api wc candidate recommendation  september  this version httpwwwworgtrcrwebsockets latest published version httpwwwworgtrwebsockets latest editors draft httpdevworghtmlwebsockets previous versions httpwwwworgtrwdwebsockets httpwwwworgtrwdwebsockets httpwwwworgtrcrwebsockets httpwwwworgtrwdwebsockets httpwwwworgtrwdwebsockets httpwwwworgtrwdwebsockets httpwwwworgtrwdwebsockets editor ian hickson google inc copyright   wc mit ercim keio all rights reserved wc liability trademark and document use rules apply the bulk of the text of this specification is also available in the whatwg web applications  specification under a license that permits reuse of the specification text abstract this specification defines an api that enables web pages to use the websocket protocol defined by the ietf for twoway communication with a remote host status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr if you wish to make comments regarding this document in a manner that is tracked by the wc please submit them via using our public bug database if you do not have an account then you can enter feedback using this form feedback comments please enter your feedback carefully indicating the title of the section for which you are submitting feedback quoting the text thats wrong today if appropriate if youre suggesting a new feature its really important to say what the problem youre trying to solve is thats more important than the solution in fact please dont use section numbers as these tend to change rapidly and make your feedback harder to understand note your ip address and user agent will be publicly recorded for spam prevention purposes you can also email feedback to publicwebapps@worg subscribe archives or whatwg@whatwgorg subscribe archives all feedback is welcome notifications of changes to this specification are sent along with notifications of changes to related specifications using the following mechanisms email notifications of changes commitwatchers mailing list complete source diffs httplistswhatwgorglistinfocgicommitwatcherswhatwgorg browsable versioncontrol record of all changes cvsweb interface with sidebyside diffs httpdevworgcvswebhtml annotated summary with unified diffs httphtmlorgtoolswebappstracker raw subversion interface svn checkout httpsvnwhatwgorgwebapps the wc web applications working group is the wc working group responsible for this specifications progress along the wc recommendation track this specification is the  september  candidate recommendation comments and bugs submitted against the  august  last call working draft are tracked in a comment tracking document publication as a candidate recommendation does not imply endorsement by the wc membership this is a draft document and may be updated replaced or obsoleted by other documents at any time it is inappropriate to cite this document as other than work in progress this specification is being developed in conjunction with an rfc for a wire protocol the websocket protocol available from the following location rfc  the websocket protocol httptoolsietforghtmlrfc this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy candidate recommendation exit criteria to exit the candidate recommendation cr stage the following criteria must have been met there will be at least two interoperable implementations passing all approved test cases in the test suite for this specification an implementation is to be available ie for download shipping ie not private and not experimental ie intended for a wide audience the working group will decide when the test suite is of sufficient quality to test interoperability and will produce an implementation report hosted together with the test suite a minimum of one month of the cr stage will have elapsed ie not until after  october  this is to ensure that enough time is given for any remaining major errors to be caught the cr period will be extended if implementations are slow to appear table of contents  introduction  conformance requirements  dependencies  terminology  the websocket interface  feedback from the protocol  ping and pong frames  parsing websocket urls  event definitions  garbage collection references acknowledgements  introduction this section is nonnormative to enable web applications to maintain bidirectional communications with serverside processes this specification introduces the websocket interface this interface does not allow for raw access to the underlying network for example this interface could not be used to implement an irc client without proxying messages through a custom server  conformance requirements all diagrams examples and notes in this specification are nonnormative as are all sections explicitly marked nonnormative everything else in this specification is normative the key words must must not required should should not recommended may and optional in the normative parts of this document are to be interpreted as described in rfc for readability these words do not appear in all uppercase letters in this specification rfc requirements phrased in the imperative as part of algorithms such as strip any leading space characters or return false and abort these steps are to be interpreted with the meaning of the key word must should may etc used in introducing the algorithm some conformance requirements are phrased as requirements on attributes methods or objects such requirements are to be interpreted as requirements on user agents conformance requirements phrased as algorithms or specific steps may be implemented in any manner so long as the end result is equivalent in particular the algorithms defined in this specification are intended to be easy to follow and not intended to be performant the only conformance class defined by this specification is user agents user agents may impose implementationspecific limits on otherwise unconstrained inputs eg to prevent denial of service attacks to guard against running out of memory or to work around platformspecific limitations when support for a feature is disabled eg as an emergency measure to mitigate a security problem or to aid in development or for performance reasons user agents must act as if they had no support for the feature whatsoever and as if the feature was not mentioned in this specification for example if a particular feature is accessed via an attribute in a web idl interface the attribute itself would be omitted from the objects that implement that interface  leaving the attribute on the object but making it return null or throw an exception is insufficient  dependencies this specification relies on several other underlying specifications html many fundamental concepts from html are used by this specification html webidl the idl blocks in this specification use the semantics of the webidl specification webidl  terminology the construction a foo object where foo is actually an interface is sometimes used instead of the more accurate an object implementing the interface foo the term dom is used to refer to the api set made available to scripts in web applications and does not necessarily imply the existence of an actual document object or of any other node objects as defined in the dom core specifications domcore an idl attribute is said to be getting when its value is being retrieved eg by author script and is said to be setting when a new value is assigned to it  the websocket interface constructordomstring url optional domstring or domstring protocolsinterface websocket  eventtarget   readonly attribute domstring url   ready state  const unsigned short connecting    const unsigned short open    const unsigned short closing    const unsigned short closed    readonly attribute unsigned short readystate  readonly attribute unsigned long bufferedamount   networking           attribute eventhandler onopen           attribute eventhandler onerror           attribute eventhandler onclose  readonly attribute domstring extensions  readonly attribute domstring protocol  void closeclamp optional unsigned short code optional domstring reason   messaging           attribute eventhandler onmessage           attribute domstring binarytype  void senddomstring data  void sendblob data  void sendarraybuffer data  void sendarraybufferview data the websocketurl protocols constructor takes one or two arguments the first argument url specifies the url to which to connect the second protocols if present is either a string or an array of strings if it is a string it is equivalent to an array consisting of just that string if it is omitted it is equivalent to the empty array each string in the array is a subprotocol name the connection will only be established if the server reports that it has selected one of these subprotocols the subprotocol names must all be strings that match the requirements for elements that comprise the value of secwebsocketprotocol header fields as defined by the websocket protocol specification wsp when the websocket constructor is invoked the ua must run these steps parse a websocket urls components from the url argument to obtain host port resource name and secure if this fails throw a syntaxerror exception and abort these steps wsp if secure is false but the origin of the entry script has a scheme component that is itself a secure protocol eg https then throw a securityerror exception if port is a port to which the user agent is configured to block access then throw a securityerror exception user agents typically block access to wellknown ports like smtp access to ports  and  should not be blocked including the unlikely cases when secure is false but port is  or secure is true but port is  if protocols is absent let protocols be an empty array otherwise if protocols is present and a string let protocols instead be an array consisting of just that string if any of the values in protocols occur more than once or otherwise fail to match the requirements for elements that comprise the value of secwebsocketprotocol header fields as defined by the websocket protocol specification then throw a syntaxerror exception and abort these steps wsp let origin be the ascii serialization of the origin of the entry script converted to ascii lowercase return a new websocket object and continue these steps in the background without blocking scripts establish a websocket connection given the set host port resource name secure along with the protocols list an empty list for the extensions and origin the headers to send appropriate cookies must be a cookie header whose value is the cookiestring computed from the users cookie store and the url url for these purposes this is not a nonhttp api wsp cookies when the user agent validates the servers response during the establish a websocket connection algorithm if the status code received from the server is not  eg it is a redirect the user agent must fail the websocket connection following http procedures here could introduce serious security problems in a web browser context for example consider a host with a websocket server at one path and an open http redirector at another suddenly any script that can be given a particular websocket url can be tricked into communicating to and potentially sharing secrets with any host on the internet even if the script checks that the url has the right hostname if the establish a websocket connection algorithm fails it triggers the fail the websocket connection algorithm which then invokes the close the websocket connection algorithm which then establishes that the websocket connection is closed which fires the close event as described below this constructor must be visible when the scripts global object is either a window object or an object implementing the workerutils interface the url attribute must return the result of resolving the url that was passed to the constructor it doesnt matter what it is resolved relative to since we already know it is an absolute url the readystate attribute represents the state of the connection it can have the following values connecting numeric value  the connection has not yet been established open numeric value  the websocket connection is established and communication is possible closing numeric value  the connection is going through the closing handshake or the close method has been invoked closed numeric value  the connection has been closed or could not be opened when the object is created its readystate must be set to connecting  the extensions attribute must initially return the empty string after the websocket connection is established its value might change as defined below the extensions attribute returns the extensions selected by the server if any currently this will only ever be the empty string the protocol attribute must initially return the empty string after the websocket connection is established its value might change as defined below the protocol attribute returns the subprotocol selected by the server if any it can be used in conjunction with the array form of the constructors second argument to perform subprotocol negotiation the close method must run the following steps if the methods first argument is present but is not an integer equal to  or in the range  to  throw an invalidaccesserror exception and abort these steps if the methods second argument is present then run these substeps let raw reason be the methods second argument let unicode reason be the result of converting raw reason to a sequence of unicode characters let reason be the result of encoding unicode reason as utf if reason is longer than  bytes then throw a syntaxerror exception and abort these steps rfc run the first matching steps from the following list if the readystate attribute is in the closing  or closed  state do nothing the connection is already closing or is already closed if it has not already a close event will eventually fire as described below if the websocket connection is not yet established wsp fail the websocket connection and set the readystate attributes value to closing  wsp the fail the websocket connection algorithm invokes the close the websocket connection algorithm which then establishes that the websocket connection is closed which fires the close event as described below if the websocket closing handshake has not yet been started wsp start the websocket closing handshake and set the readystate attributes value to closing  wsp if the first argument is present then the status code to use in the websocket close message must be the integer given by the first argument wsp if the second argument is also present then reason must be provided in the close message after the status code rfc wsp the start the websocket closing handshake algorithm eventually invokes the close the websocket connection algorithm which then establishes that the websocket connection is closed which fires the close event as described below otherwise set the readystate attributes value to closing  the websocket closing handshake is started and will eventually invoke the close the websocket connection algorithm which will establish that the websocket connection is closed and thus the close event will fire as described below the bufferedamount attribute must return the number of bytes of application data utf text and binary data that have been queued using send but that as of the last time the event loop started executing a task had not yet been transmitted to the network this thus includes any text sent during the execution of the current task regardless of whether the user agent is able to transmit text asynchronously with script execution this does not include framing overhead incurred by the protocol or buffering done by the operating system or network hardware if the connection is closed this attributes value will only increase with each call to the send method the number does not reset to zero once the connection closes in this simple example the bufferedamount attribute is used to ensure that updates are sent either at the rate of one update every ms if the network can handle that rate or at whatever rate the network can handle if that is too fast var socket  new websocketwsgameexamplecomupdatessocketonopen  function    setintervalfunction     if socketbufferedamount        socketsendgetupdatedata    the bufferedamount attribute can also be used to saturate the network without sending the data at a higher rate than the network can handle though this requires more careful monitoring of the value of the attribute over time when a websocket object is created its binarytype idl attribute must be set to the string blob on getting it must return the last value it was set to on setting if the new value is either the string blob or the string arraybuffer then set the idl attribute to this new value otherwise throw a syntaxerror exception this attribute allows authors to control how binary data is exposed to scripts by setting the attribute to blob binary data is returned in blob form by setting it to arraybuffer it is returned in arraybuffer form user agents can use this as a hint for how to handle incoming binary data if the attribute is set to blob it is safe to spool it to disk and if it is set to arraybuffer it is likely more efficient to keep the data in memory naturally user agents are encouraged to use more subtle heuristics to decide whether to keep incoming data in memory or not eg based on how big the data is or how common it is for a script to change the attribute at the last minute this latter aspect is important in particular because it is quite possible for the attribute to be changed after the user agent has received the data but before the user agent has fired the event for it the senddata method transmits data using the connection if the readystate attribute is connecting it must throw an invalidstateerror exception otherwise the user agent must run the appropriate set of steps from the following list if the argument is a string let data be the result of converting the data argument to a sequence of unicode characters if the websocket connection is established and the websocket closing handshake has not yet started then the user agent must send a websocket message comprised of data using a text frame opcode if the data cannot be sent eg because it would need to be buffered but the buffer is full the user agent must close the websocket connection with prejudice any invocation of this method with a string argument that does not throw an exception must increase the bufferedamount attribute by the number of bytes needed to express the argument as utf unicode rfc wsp if the argument is a blob object if the websocket connection is established and the websocket closing handshake has not yet started then the user agent must send a websocket message comprised of data using a binary frame opcode if the data cannot be sent eg because it would need to be buffered but the buffer is full the user agent must close the websocket connection with prejudice the data to be sent is the raw data represented by the blob object any invocation of this method with a blob argument that does not throw an exception must increase the bufferedamount attribute by the size of the blob objects raw data in bytes wsp fileapi if the argument is an arraybuffer object if the websocket connection is established and the websocket closing handshake has not yet started then the user agent must send a websocket message comprised of data using a binary frame opcode if the data cannot be sent eg because it would need to be buffered but the buffer is full the user agent must close the websocket connection with prejudice the data to be sent is the data stored in the buffer described by the arraybuffer object any invocation of this method with an arraybuffer argument that does not throw an exception must increase the bufferedamount attribute by the length of the arraybuffer in bytes wsp typedarray if the argument is an arraybufferview object if the websocket connection is established and the websocket closing handshake has not yet started then the user agent must send a websocket message comprised of data using a binary frame opcode if the data cannot be sent eg because it would need to be buffered but the buffer is full the user agent must close the websocket connection with prejudice the data to be sent is the data stored in the section of the buffer described by the arraybuffer object that the arraybufferview object references any invocation of this method with an arraybufferview argument that does not throw an exception must increase the bufferedamount attribute by the length of the arraybufferview in bytes wsp typedarray the following are the event handlers and their corresponding event handler event types that must be supported as idl attributes by all objects implementing the websocket interface event handler event handler event type onopen open onmessage message onerror error onclose close  feedback from the protocol when the websocket connection is established the user agent must queue a task to run these steps change the readystate attributes value to open  change the extensions attributes value to the extensions in use if is not the null value wsp change the protocol attributes value to the subprotocol in use if is not the null value wsp act as if the user agent had received a setcookiestring consisting of the cookies set during the servers opening handshake for the url url given to the websocket constructor cookies rfc wsp fire a simple event named open at the websocket object when a websocket message has been received with type type and data data the user agent must queue a task to follow these steps wsp if the readystate attributes value is not open  then abort these steps let event be an event that uses the messageevent interface with the event type message which does not bubble is not cancelable and has no default action html initialize events origin attribute to the unicode serialization of the origin of the url that was passed to the websocket objects constructor if type indicates that the data is text then initialize events data attribute to data if type indicates that the data is binary and binarytype is set to blob then initialize events data attribute to a new blob object that represents data as its raw data fileapi if type indicates that the data is binary and binarytype is set to arraybuffer then initialize events data attribute to a new readonly arraybuffer object whose contents are data typedarray dispatch event at the websocket object user agents are encouraged to check if they can perform the above steps efficiently before they run the task picking tasks from other task queues while they prepare the buffers if not for example if the binarytype attribute was set to blob when the data arrived and the user agent spooled all the data to disk but just before running the above task for this particular message the script switched binarytype to arraybuffer the user agent would want to page the data back to ram before running this task so as to avoid stalling the main thread while it created the arraybuffer object here is an example of how to define a handler for the message event in the case of text frames mysocketonmessage  function event   if eventdata  on     turnlampon   else if eventdata  off     turnlampoff   the protocol here is a trivial one with the server just sending on or off messages when the websocket closing handshake is started the user agent must queue a task to change the readystate attributes value to closing  if the close method was called the readystate attributes value will already be set to closing  when this task runs wsp when the websocket connection is closed possibly cleanly the user agent must queue a task to run the following substeps change the readystate attributes value to closed  if the user agent was required to fail the websocket connection or the websocket connection is closed with prejudice fire a simple event named error at the websocket object wsp create an event that uses the closeevent interface with the event type close which does not bubble is not cancelable has no default action whose wasclean attribute is initialized to true if the connection closed cleanly and false otherwise whose code attribute is initialized to the websocket connection close code and whose reason attribute is initialized to the websocket connection close reason decoded as utf with error handling and dispatch the event at the websocket object wsp user agents must not convey any failure information to scripts in a way that would allow a script to distinguish the following situations a server whose host name could not be resolved a server to which packets could not successfully be routed a server that refused the connection on the specified port a server that failed to correctly perform a tls handshake eg the server certificate cant be verified a server that did not complete the opening handshake eg because it was not a websocket server a websocket server that sent a correct opening handshake but that specified options that caused the client to drop the connection eg the server specified a subprotocol that the client did not offer a websocket server that abruptly closed the connection after successfully completing the opening handshake in all of these cases the the websocket connection close code would be  as required by the websocket protocol specification wsp allowing a script to distinguish these cases would allow a script to probe the users local network in preparation for an attack in particular this means the code  is not used by the user agent unless the server erroneously uses it in its close frame of course the task source for all tasks queued in this section is the websocket task source  ping and pong frames the websocket protocol specification defines ping and pong frames that can be used for keepalive heartbeats network status probing latency instrumentation and so forth these are not currently exposed in the api user agents may send ping and unsolicited pong frames as desired for example in an attempt to maintain local network nat mappings to detect failed connections or to display latency metrics to the user user agents must not use pings or unsolicited pongs to aid the server it is assumed that servers will solicit pongs whenever appropriate for the servers needs  parsing websocket urls the steps to parse a websocket urls components from a string url are as follows these steps return either a host a port a resource name and a secure flag or they fail if the url string is not an absolute url then fail this algorithm resolve the url string with the url character encoding set to utf rfc it doesnt matter what it is resolved relative to since we already know it is an absolute url at this point if url does not have a scheme component whose value when converted to ascii lowercase is either ws or wss then fail this algorithm if url has a fragment component then fail this algorithm if the scheme component of url is ws set secure to false otherwise the scheme component is wss set secure to true let host be the value of the host component of url converted to ascii lowercase if url has a port component then let port be that components value otherwise there is no explicit port if there is no explicit port then if secure is false let port be  otherwise let port be  let resource name be the value of the path component which might be empty of url if resource name is the empty string set it to a single character uf solidus  if url has a query component then append a single uf question mark character  to resource name followed by the value of the query component return host port resource name and secure  event definitions constructordomstring type optional closeeventinit eventinitdictinterface closeevent  event   readonly attribute boolean wasclean  readonly attribute unsigned short code  readonly attribute domstring reasondictionary closeeventinit  eventinit   boolean wasclean  unsigned short code  domstring reason the wasclean attribute must return the value it was initialized to when the object is created this attribute must be initialized to false it represents whether the connection closed cleanly or not the code attribute must return the value it was initialized to when the object is created this attribute must be initialized to zero it represents the websocket connection close code provided by the server the reason attribute must return the value it was initialized to when the object is created this attribute must be initialized to empty string it represents the websocket connection close reason provided by the server  garbage collection a websocket object whose readystate attributes value was set to connecting  as of the last time the event loop started executing a task must not be garbage collected if there are any event listeners registered for open events message events error events or close events a websocket object whose readystate attributes value was set to open  as of the last time the event loop started executing a task must not be garbage collected if there are any event listeners registered for message events error or close events a websocket object whose readystate attributes value was set to closing  as of the last time the event loop started executing a task must not be garbage collected if there are any event listeners registered for error or close events a websocket object with an established connection that has data queued to be transmitted to the network must not be garbage collected wsp if a websocket object is garbage collected while its connection is still open the user agent must start the websocket closing handshake with no status code for the close message wsp if a user agent is to make disappear a websocket object this happens when a document object goes away the user agent must follow the first appropriate set of steps from the following list if the websocket connection is not yet established wsp fail the websocket connection wsp if the websocket closing handshake has not yet been started wsp start the websocket closing handshake with the status code to use in the websocket close message being  wsp otherwise do nothing references all references are normative unless marked nonnormative cookies http state management mechanism a barth ietf domcore dom a van kesteren wc fileapi file api a ranganathan wc html html i hickson wc rfc key words for use in rfcs to indicate requirement levels s bradner ietf rfc utf a transformation format of iso  f yergeau ietf typedarray typed array specification d herman k russell khronos unicode the unicode standard unicode consortium webidl web idl c mccormack wc wsp the websocket protocol i fette a melnikov ietf acknowledgements for a full list of acknowledgements please see the html specification html