best practices for creating mmi modality components best practices for creating mmi modality components wc working group note  march  this version httpwwwworgtrnotemmimcbp latest version httpwwwworgtrmmimcbp previous version this is the first version editor ingmar kliche  deutsche telekom ag authors deborah dahl invited expert james a larson invited expert b helena rodriguez telecom paristech muthuselvam selvaraj until  while at hp copyright   wc mit ercim keio all rights reserved wc liability trademark and document use rules apply abstract this document describes modality components in the mmi architecture which are responsible for controlling the various input and output modalities on various devices by providing guidelines and suggestions for designing modality components also this document shows several possible examples of modality components  face identification  formfilling using handwriting recognition and  video display status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this is the  march  wc working group note of best practices for creating mmi modality components the multimodal interaction working group once published a working draft of the multimodal architecture and interfaces mmi architecture on  october  with this content however the working group concluded that the description on how to create modality components and examples of possible modality components should be published as a working group note rather than part of the mmi architecture specification the goal of this working group note is to provide guidelines and suggestions for designing modality components in the mmi architecture and make it easier to author concrete modality components for multimodal web applications also this document shows several possible examples of modality components  face identification  formfilling using handwriting recognition and  video display this wc working group note has been developed by the multimodal interaction working group of the wc multimodal interaction activity comments for this note are welcomed and should have a subject starting with the prefix arch please send them to wwwmultimodal@worg the public email list for issues related to multimodal this list is archived and acceptance of this archiving policy is requested automatically upon first post to subscribe to this list send an email to wwwmultimodalrequest@worg with the word subscribe in the subject line for more information about the multimodal interaction activity please see the multimodal interaction activity statement this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy publication as a working group note does not imply endorsement by the wc membership this is a draft document and may be updated replaced or obsoleted by other documents at any time it is inappropriate to cite this document as other than work in progress table of contents  introduction  modality component guidelines  guideline  each modality component must implement all of the mmi lifecycle events  guideline  identify other functions of the modality component that are relevant to the interaction manager  guideline  if the component uses media specify the media format for example audio formats for speech recognition or inkml for handwriting recognition  guideline  specify protocols for use between the component and the interaction manager im eg sip or http  guideline  specify supported human languages eg english german chinese and locale if relevant  guideline  specify supporting languages required by the component if any  guideline  modality components sending data to the interaction manager must use the format where appropriate  guideline  specify error codes and their meanings to be returned to the im  modality component design suggestions  design suggestion  consider constructing a complex modality component with multiple functions if one function handles the errors generated by another function  design suggestion  consider constructing a complex modality component with multiple functions rather than several simple modality components if the functions need to be synchronized  design suggestion  consider constructing a nested modality component with multiple child modality components if the children modality components are frequently used together but do not handle ther errors generated by the other children components and the children components do not need to be extensively synchronized  example simple modality face identification  functions of a possible face identification component  event syntax  examples of events for starting the component  example output event  example simple modality formfilling using handwriting recognition  functions of a possible handwriting recognition component  event syntax  examples of events for preparing the component  examples of events for starting the component  example output event  example simple modality video display  functions of a possible video display component  event syntax  examples of events for starting the component appendix a references  introduction the wc multimodal interaction mmi working group develops an architecture mmiarch for the multimodal interaction framework mmif the multimodal architecture describes a general and flexible framework for interoperability of the various components of the multimodal framework eg modality components mc and the interaction manager im in an abstract way among others it defines interfaces and messages between the constituents of the framework but it is up to the implementation to decide how these messages are transferred in case of a distributed implementation this note is an informative supplement to the multimodal architecture and interfaces specification mmiarch in contrast to the multimodal architecture specification which defines normative conformance for multimodal constituents the intention of this document is to provide additional informative guidelines for authors of mmi modality components its purpose is to assist authors in maximizing the usefulness of their multimodal architecture conformant constituents by describing additional information which will enable constituents to be more easily incorporated into a multimodal system this additional suggested information includes for example descriptions of how the constituent behaves with respect to the optional aspects of the architecture the specific goals of the guidelines in this document are to promote interoperability when constituents from different vendors are used in the same system by suggesting important information that can be provided along with a constituent that will enable others to use the constituent effectively  modality component guidelines  provide suggestions for authoring modality components in order to maximize their effectiveness  modality component design suggestions  provide illustrations of these suggestions using sample modality components for face identification and handwriting recognition  example simple modality face identification and  example simple modality formfilling using handwriting recognition   modality component guidelines the following guidelines guarantee that modalities are portable from interaction manager to interaction manager  guideline  each modality component must implement all of the mmi lifecycle events the mmi lifecycle events are the mechanism through which a modality component communicates with the interaction manager the modality component mc author must define how the modality component will respond to each lifecycle event a modality component must respond to every lifecycle event it receives from the interaction manager in the cases where a response is required as defined by the mmi architecture for example if a modality component presents a static display it must respond to a pause event with a pauseresponse event even if the static display modality component does nothing else in response to the pause event for each lifecycle event define the parameters and syntax of the data element of the corresponding the lifecycle event that will be used in performing that function for example the startrequest event for a speech recognition modality component might include parameters like timeout confidence threshold max nbest and grammar  guideline  identify other functions of the modality component that are relevant to the interaction manager define an extensionnotification event to communicate these functions to and from the interaction manager  guideline  if the component uses media specify the media format for example audio formats for speech recognition or inkml for handwriting recognition  guideline  specify protocols for use between the component and the interaction manager im eg sip or http  guideline  specify supported human languages eg english german chinese and locale if relevant  guideline  specify supporting languages required by the component if any for example ssml for a speech synthesis simple modality component srgs and sisr for a speech recognition simple modality component voicexml ssml srgs and sisr for a speech complex modality component  guideline  modality components sending data to the interaction manager must use the emma format where appropriate if a modality component captures or generates information then it should format the information using the emma format and use an extension event to send that information to the interaction manager  guideline  specify error codes and their meanings to be returned to the im the mc developer must specify all error codes that are specific to the component if the mc is based on another technology the developer can provide a reference to that technology specification for instance if the mc is based on voicexml a reference to the voicexml spec for voicexml errors can be included instead of listing each voicexml error errors such as xml errors and mmi protocol errors must be handled in accordance with the guidelines laid out in the mmi architecture these errors do not need to be documented  modality component design suggestions the following design suggestions should be helpful for modality component authors to make modalities portable from interaction manager to interaction manager  design suggestion  consider constructing a complex modality component with multiple functions if one function handles the errors generated by another function for example if the asr fails to recognize a users utterance a prompt may be presented to the user asking the user to try again by the tts function as another example if the asr fails to recognize a users utterance a gui function might display the nbest list on a screen so the user can select the desired word efficiency concerns may indicate that two modality components be combined into a single complex modality component  design suggestion  consider constructing a complex modality component with multiple functions rather than several simple modality components if the functions need to be synchronized for example a tts function must be synchronized with a visual talking head so that the lip movements are synchronized with the words as another example a tts functions presents information about the each graphical item that the user places in focus again efficiency concerns may indicate that the tts and talking head be two modality components be combined into a single complex modality component  design suggestion  consider constructing a nested modality component with multiple child modality components if the children modality components are frequently used together but do not handle ther errors generated by the other children components and the children components do not need to be extensively synchronized writing an application using a nested modality component may be easier than writing the same application using multiple modality components if the nested modality component hides much of the complexity of managing the children modality components  example simple modality face identification  functions of a possible face identification component consider a theoretical face identification modality component that takes an image or images of a face and returns the set of possible matches and the confidence of the face identification software in each match an api to that modality component would include events for starting the component providing data and for receiving results back from the component this particular example includes the information needed to run this component in the startrequest and donenotification events that is in this example no extensionnotification events are used although extensionnotification events could be part of another modality components api this example assumes that an image has already been acquired from some source however another possibility would be to also include image acquisition in the operation of the component depending on the capabilities of the modality component other possible information that might be included would be some useful nonfunctional information as the capturing context of the still picture eg indoor picture or outdoor picture or the type of image eg a portrait photography or a street photography or would be some technical information as the algorithm to be used or the image format to expect we emphasize that this is just an example to indicate the kinds of information that might be used by a multimodal application that includes face recognition the actual interface used in real applications should be defined by experts in the field the use case is a face identification component that identifies one of a set of employees on the basis of face images the mmi runtime framework could use the following events to communicate with such a component table  component behavior of face identification with respect to modality component guidelines guideline component information guideline  each modality component must implement all of the mmi life cycle events see table  for the details of the implementation of the lifecycle events guideline  identify other functions of the modality component that are relevant to the interaction manager all the functions of the component are covered in the lifecycle events no other functions are needed guideline  if the component uses media specify the media format the component uses the jpeg format for images to be identified and for its image database guideline  specify protocols supported by the component for transmitting media eg sip the component uses http for transmitting media guideline  specify supported human languages this component does not support any human languages guideline  specify supporting languages required by the component this component does not require any markup languages guideline  modality components sending data to the interaction manager must use the emma format this component uses emma table  component behavior of face identification for each lifecycle event life cycle event component implementation newcontextrequest standard the component requests a new context from the im newcontextresponse standard the component starts a new context and assigns the new context id to it preparerequest the component prepares resources to be used in identification specifically the image database prepareresponse standard if the database of known users is not found the error message known users not found is returned in the statusinfo element startrequest the component starts processing if possible using a specified image image database threshold and limit on the size of nbest results to be returned startresponse standard if the database of known users is not found the error message known users not found is returned in the statusinfo element donenotification identification results in emma format are reported in the data fieldthe mode is photograph the medium is visual the function is identification and verbal is false cancelrequest this component stops processing when it receives a cancelrequest it always performs a hard stop whether or not the im requests a hard stop cancelresponse standard pauserequest this component cannot pause pauseresponse statusinfo field is cannot pause resumerequest this component cannot resume resumeresponse statusinfo field is cannot resume extensionnotification this component does not use extensionnotification it ignores any extensionnotification events that are sent to it by the im clearcontextrequest standard clearcontextresponse standard statusrequest standard statusresponse the component returns a standard life cycle response the automaticupdate attribute is false because this component does not supply automatic updates note standard means that the component does not do anything over and above the actions specified by the mmi architecture  event syntax  examples of events for starting the component to start the component a startrequest event from the im to the face identification component is sent asking it to start an identification it assumes that images found at a certain uri are to be identified by comparing them against a known set of employees found at another uri the confidence threshold of the component is set to  and the im requests a maximum of five possible matches mmi xmlnshttpwwwworgmmiarch version  mmistartrequest sourceurirtfuri contexturi requestidrequest    mmidata      faceidentificationparameters threshold unknownsomeuri knownuriemployees maxnbest    mmidata  mmistartrequestmmimmi as part of support for the lifecycle events a modality component is required to respond to a startrequest event with a startresponse event heres an example of a startresponse from the face identification component to the im informing the im that the face identification component has successfully started mmi xmlnshttpwwwworgmmiarch version  mmistartresponse sourceurifaceuri contexturi requestidrequest statussuccess mmimmi heres an example of a startresponse event from the face identification component to the im in the case of failure with an example failure message in this case the failure message indicates that the known images cannot be found mmi xmlnshttpwwwworgmmiarch version  mmistartresponse sourceurifaceuri contexturi requestidrequest statusfailure    mmistatusinfo      known users not found    mmistatusinfo  mmistartresponsemmimmi  example output event heres an example of an output event sent from the face identification component to the im using emma to represent the identification results two results with different confidences are returned mmi xmlnshttpwwwworgmmiarch version  mmidonenotification sourceurifaceuri contexturi statussuccess requestidrequest    mmidata      emmaemma version xmlnsemmahttpwwwworgemma        emmaoneof emmamediumvisual emmaverbalfalse emmamodephotograph emmafunctionidentification          emmainterpretation idint emmaconfidence            personperson            namemary smithname          emmainterpretation          emmainterpretation idint emmaconfidence            personperson            namejim jonesname          emmainterpretation        emmaoneof      emmaemma    mmidata  mmidonenotificationmmimmi this is an example of emma output in the case where the face image doesnt match any of the employees mmi xmlnshttpwwwworgmmiarch version  mmidonenotification sourceurifaceuri contexturi statussuccess requestidrequest     mmidata      emmaemma version xmlnsemmahttpwwwworgemma        emmainterpretation idint emmaconfidence         uninterpretedtrue emmamediumvisual emmamodephotograph         emmafunctionidentification      emmaemma    mmidata  mmidonenotificationmmimmi   example simple modality formfilling using handwriting recognition  functions of a possible handwriting recognition component consider an ink recognition modality component for handwriting recognition hwr that takes digital ink written using an electronic pen or stylus performs recognition and returns the recognized text an api to such a modality component would include events for initializing the component requesting for recognition by providing digital ink data and for receiving recognized text result possibly an nbest list back from the component as shown in the below figure figure  example of japanese handwriting recognition this example assumes that handwriting ink is captured represented in wc inkml format and sent to the im requesting for recognition to text the following sequences of events explain the ink recognition request the im requests the ink recognition modality by sending the preparerequest event along with the parameters for configuring the hwr system ink recognition modality responds with the prepareresponse event with the status of the configuration of the hwr system im sends the startrequest event to the ink recognition modality where the events data field contains the inkml data to be recognized once the recognition is completed the ink recognition modality notifies the results to the im using the donenotification event along with the recognition choices nbest list the use case is a formfilling application which accepts handwriting input provided by the user on the form fields the inputs are recognized and displayed back as text in the corresponding fields an ink capture modality may be used to capture the ink and send it to im for recognition the communication between the ink capture modality and the im is not covered here for the sake of brevity the below section explains the details of the communication between the mmi runtime framework rtf of the im and the ink recognition modality table  component behavior of ink modality with respect to modality component guidelines guideline component information guideline  each modality component must implement all of the mmi life cycle events see table  for the details of the implementation of the lifecycle events guideline  identify other functions of the modality component that are relevant to the interaction manager all the functions of the component are covered in the lifecycle events no other functions are needed guideline  if the component uses media specify the media format the component uses wc inkml format to represent handwriting data digital ink guideline  specify protocols supported by the component for transmitting media eg sip the component uses http for transmitting media other standard protocols such as tcp may also be explored guideline  specify supported human languages virtually any human language script can be supported based on the hwr component capability guideline  specify supporting languages required by the component wc inkml for representing the handwriting data guideline  modality components sending data to the interaction manager must use the emma format this component uses emma table  component behavior of handwriting recognition for each lifecycle event life cycle event component implementation newcontextrequest standard the component requests a new context from the im newcontextresponse standard the component starts a new context and assigns the new context id to it preparerequest the component prepares resources to be used in recognition based on the script parameter it first selects an appropriate recognizer it also configures the recognizer with other parameters such as recognition confidence threshold limit on the size of nbest results to be returned etc when available prepareresponse standard if the recognizer failed to find a matching recognizer for the request language script a relevant error message is returned in the statusinfo element startrequest the component performs recognition of the handwriting input startresponse standardthe status of recognition as success or failure is returned in the statusinfo element donenotification identification results in emma format are reported in the data field the mode is ink the medium is tactile the function is transcription and verbal is true cancelrequest this component stops processing when it receives a cancelrequest it always performs a hard stop irrespective of the im request cancelresponse standard pauserequest this component cannot pause pauseresponse statusinfo field is cannot pause resumerequest this component cannot resume resumeresponse statusinfo field is cannot resume extensionnotification this component does not use extensionnotification it ignores any extensionnotification events that are sent to it by the im clearcontextrequest standard clearcontextresponse standard statusrequest standard statusresponse the component returns a standard life cycle response the automaticupdate attribute is false because this component does not supply automatic updates note standard means that the component does not do anything over and above the actions specified by the mmi architecture  event syntax  examples of events for preparing the component im send a preparerequest event to the ink recognition component the ink recognition component selects an appropriate recognizer that matches the given language script in this example it is set to english_lowercase the recogrammarxml grammar file contains constraints that aid the recognizer the confidence threshold of the component is set to  and the im requests a maximum of five possible matches based on the capability of the recognizer other possible parameters such as a user profile that contains userspecific information can be provided mmimmi version xmlnsmmihttpwwwworgmmiarch  mmipreparerequest sourceurirtfuri contexturi requestidrequest    mmidata      inkrecognitionparameters grammarrecogrammarxml threshold scriptenglish_lowercase maxnbest    mmidata  mmipreparerequestmmimmi as part of support for the life cycle events a modality component is required to respond to a preparerequest event with a prepareresponse event heres an example of a prepareresponse from the ink recognition component to the im informing the im that the ink recognition component has successfully initialized mmimmi xmlnsmmihttpwwwworgmmiarch version  mmiprepareresponse sourceuriinkrecognizeruri contexturi requestidrequest statussuccessmmimmi heres an example of a prepareresponse event from the ink recognition component to the im in the case of failure with an example failure message in this case the failure message indicates that the language script is not supported mmimmi xmlnsmmihttpwwwworgmmiarch version  mmiprepareresponse sourceuriinkrecognizeruri contexturi requestidrequest statusfailure    mmistatusinfo      given language script not supported    mmistatusinfo  mmiprepareresponsemmimmi  examples of events for starting the component to start the component and recognize the handwriting data a startrequest event from the im to the ink recognition component is sent the data field of the event contains inkml representation of the ink data along with the ink additional information such as the reference coordinate system and capture devices resolution may also be provided in the inkml data the below example shows that the ink strokes have x and y channels and the ink has been captured at a resolution of  dpi the example ink data contains strokes of the japanese character  te which means hand mmimmi xmlnsmmihttpwwwworgmmiarch version  mmistartrequest sourceuriinkrecognizeruri contexturi requestidrequest    mmidata      inkink version xmlnsinkhttpwwwworginkml        inkdefinitions          inkcontext iddevicecontext            inktraceformat idstrokeformat              inkchannel namex typedecimal                inkchannelproperty nameresolution value unitsin              inkchannel              inkchannel namey typedecimal                inkchannelproperty nameresolution value unitsin              inkchannel            inktraceformat          inkcontext        inkdefinitions       inktracegroup contextrefdevicecontext        inktrace                                                                                                            inktrace        inktrace                                                                                                                                                                                 inktrace        inktrace                                                                                                                                                                                                                                                                   inktrace        inktrace                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  inktrace       inktracegroup      inkink    mmidata   mmistartrequestmmimmi as part of support for the life cycle events a modality component is required to respond to a startrequest event with a startresponse event heres an example of a startresponse from the ink recognition component to the im informing the im that the ink recognition component has successfully started mmimmi xmlnsmmihttpwwwworgmmiarch version  mmistartresponse sourceuriinkrecognizeruri contexturi requestidrequest statussuccessmmimmi heres an example of a startresponse event from the ink recognition component to the im in the case of failure with an example failure message in this case the failure message indicates that the recognition failed due to invalid data format of the handwriting data mmimmi xmlnsmmihttpwwwworgmmiarch version  mmistartresponse sourceuriinkrecognizeruri contexturi requestidrequest statusfailure    mmistatusinfo      invalid data format    mmistatusinfo  mmistartresponsemmimmi  example output event heres an example of an output event sent from the ink recognition component to the im using emma to represent the identification results two results with different confidences are returned mmimmi xmlnsmmihttpwwwworgmmiarch version  mmidonenotification sourceuriinkrecognizeruri contexturi statussuccess requestidrequest    mmidata      emmaemma version xmlnsemmahttpwwwworgemma        emmaoneof emmamediumtactile emmaverbaltrue         emmamodeink emmafunctiontranscription          emmainterpretation idint emmaconfidence            text  text          emmainterpretation          emmainterpretation idint emmaconfidence           text  text          emmainterpretation        emmaoneof      emmaemma    mmidata  mmidonenotificationmmimmi this is an example of emma output in the case where the recognizer is unable to find a suitable match to the input handwriting the emma output contains an empty interpretation result mmimmi xmlnsmmihttpwwwworgmmiarch version  mmidonenotification sourceuriinkrecognizeruri contexturi statussuccess requestidrequest     mmidata      emmaemma version xmlnsemmahttpwwwworgemma        emmainterpretation idint emmaconfidence         emmamediumtactile emmaverbaltrue emmamodeink         emmafunctiontranscription emmauninterpretedtrue      emmaemma    mmidata  mmidonenotificationmmimmi  example simple modality video display  functions of a possible video display component consider a theoretical video display modality component that receives a video file and displays it in a screen an api to that modality component would include events for starting the component providing the video file and for receiving player status information back from the component this example includes the information needed to run this component in the startrequest event and shows a display codec problem in order to focus in the behavior of the output modality component this example assumes that the video file is given from some source however another possibility would be to also include video acquisition in a composite inputoutput and more complex realtime display component depending on the capabilities of the modality component other possible information that might be included would be the video formats supported the mmi runtime framework could use the following events to communicate with such a component table  component behavior of video display with respect to modality component guidelines guideline component information guideline  each modality component must implement all of the mmi life cycle events see table  for the details of the implementation of the lifecycle events guideline  identify other functions of the modality component that are relevant to the interaction manager all the functions of the component are covered in the lifecycle events no other functions are needed guideline  if the component uses media specify the media format the component uses for the moment only the h codec format guideline  specify protocols supported by the component for transmitting media eg sip the component uses http for transmitting media guideline  specify supported human languages this component does not support any human languages guideline  specify supporting languages required by the component this component does not require any markup languages guideline  modality components sending data to the interaction manager must use the emma format this component uses emma table  component behavior of video display for each lifecycle event life cycle event component implementation newcontextrequest standard the component requests a new context from the im newcontextresponse standard the component starts a new context and assigns the new context id to it preparerequest the component prepares resources to be used in display configuration specifically the supported formats table prepareresponse standard if the recognizer failed to find a matching recognizer for the request language script a relevant error message is returned in the statusinfo element startrequest the component starts displaying video if possible the mmidata element might hold a videodisplayparameters element containing a videofile attribute the videofile attribute contains the uri referencing the video content startresponse standardif the current video format wvm is not found in the supported codec formats table the error message codec not supported is returned in the statusinfo element donenotification display state in emma format are reported in the data field the mode is video the medium is visual the function is playing and verbal is false cancelrequest this component stops processing when it receives a cancelrequest it always performs a hard stop irrespective of the im request cancelresponse standard pauserequest standard pauseresponse standard resumerequest standard resumeresponse standard extensionnotification this component does not use extensionnotification it ignores any extensionnotification events that are sent to it by the im clearcontextrequest standard clearcontextresponse standard statusrequest standard statusresponse the component returns a standard life cycle response the automaticupdate attribute is false because this component does not supply automatic updates note standard means that the component does not do anything over and above the actions specified by the mmi architecture  event syntax  examples of events for starting the component to start the component a startrequest event from the im to the display component is sent asking it to start a video display it gives information about a video file in a certain uri mmi xmlnshttpwwwworgmmiarch version  mmistartrequest sourceurirtfuri contexturi requestidrequest    mmidata      videodisplayparameters videofilesomeuri    mmidata  mmistartrequestmmimmi as part of support for the lifecycle events a modality component is required to respond to a startrequest event with a startresponse event heres an example of a startresponse from the display component to the im informing the im that the component is successfully started and video is displaying  mmi xmlnshttpwwwworgmmiarch version  mmistartresponse sourceuridisplayuri contexturi requestidrequest statussuccess mmimmi heres an example of a startresponse event from the display component to the im in the case of failure with an example failure message in this case the failure message indicates that the video codec is not supported mmi xmlnshttpwwwworgmmiarch version  mmistartresponse sourceuridisplayuri contexturi requestidrequest statusfailure    mmistatusinfo      wvm codec not supported    mmistatusinfo  mmistartresponsemmimmi a references mmiarch multimodal architecture and interfaces working draft  jim barnett et al editors this specification describes a loosely coupled architecture for multimodal user interfaces which allows for coresident and distributed implementations and focuses on the role of markup and scripting and the use of well defined interfaces between its constituents world wide web consortium  mmif wc multimodal interaction framework  james a larson tv raman and dave raggett editors world wide web consortium  emma extensible multimodal annotation markup language emma michael johnson et al editors emma is an xml format for annotating application specific interpretations of user input with information such as confidence scores time stamps input modality and alternative recognition hypotheses world wide web consortium  voicexml voice extensible markup language voicexml version   matt oshry et al editors world wide web consortium  ssml speech synthesis markup language ssml version   daniel c burnett et al editors world wide web consortium  srgs speech recognition grammar specification version   andrew hunt et al editors world wide web consortium  sisr semantic interpretation for speech recognition sisr version   luc van tichelen al editors world wide web consortium 