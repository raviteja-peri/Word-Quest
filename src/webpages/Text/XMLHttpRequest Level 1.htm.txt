xmlhttprequest level  xmlhttprequest level  wc working draft  january  this version httpwwwworgtrwdxmlhttprequest latest version httpwwwworgtrxmlhttprequest latest editor draft httpdvcsworghgxhrrawfiledefaultxhroverviewhtml previous versions httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest httpwwwworgtrwdxmlhttprequest editor anne van kesteren mozilla upstream whatwg version julian aubourg creative area  jungkee song samsung electronics hallvord r m steen mozilla copyright   wc mit ercim keio beihang all rights reserved wc liability trademark and document use rules apply abstract the xmlhttprequest specification defines an api that provides scripted client functionality for transferring data between a client and a server status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document is published as a snapshot of the xmlhttprequest living specification if you wish to make comments regarding this document in a manner that is tracked by the wc please submit them via using our public bug database or please send comments to publicwebapps@worg archived with xhr at the start of the subject line the wc web applications working group is the wc working group responsible for this specifications progress along the wc recommendation track this specification is the  january  working draft publication as a working draft does not imply endorsement by the wc membership this is a draft document and may be updated replaced or obsoleted by other documents at any time it is inappropriate to cite this document as other than work in progress work on this specification is also done at the whatwg the wc web applications working group actively pursues convergence of xmlhttprequest specification with the whatwg this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy table of contents  introduction  specification history  conformance  dependencies  extensibility  terminology  interface xmlhttprequest  task sources  constructor  garbage collection  event handlers  states  request  the open method  the setrequestheader method  the timeout attribute  the withcredentials attribute  the upload attribute  the send method  infrastructure for the send method  the abort method  response  the status attribute  the statustext attribute  the getresponseheader method  the getallresponseheaders method  response entity body  the overridemimetype method  the responsetype attribute  the response attribute  the responsetext attribute  the responsexml attribute  events summary  interface formdata references acknowledgments  introduction this section is nonnormative the xmlhttprequest object is an api for fetching resources the name of the object is xmlhttprequest for compatibility with the web though each component of this name is potentially misleading first the object supports any text based format including xml second it can be used to make requests over both http and https some implementations support protocols in addition to http and https but that functionality is not covered by this specification finally it supports requests in a broad sense of the term as it pertains to http namely all activity involved with http requests or responses for the defined http methods some simple code to do something with data from an xml document fetched over the network function processdatadata    taking care of datafunction handler   ifthisreadystate  thisdone     ifthisstatus          thisresponsexml  null        thisresponsexmlgetelementbyidtesttextcontent        success      processdatathisresponsexmlgetelementbyidtesttextcontent      return         something went wrong    processdatanull  var client  new xmlhttprequestclientonreadystatechange  handlerclientopenget unicornxmlclientsend if you just want to log a message to the server function logmessage   var client  new xmlhttprequest  clientopenpost log  clientsetrequestheadercontenttype textplaincharsetutf  clientsendmessage or if you want to check the status of a document on the server function fetchstatusaddress   var client  new xmlhttprequest  clientonreadystatechange  function      in case of network errors this might not give reliable results    ifthisreadystate  thisdone      returnstatusthisstatus    clientopenhead address  clientsend  specification history the xmlhttprequest object was initially defined as part of the whatwgs html effort long after microsoft shipped an implementation it moved to the wc in  extensions eg progress events and crossorigin requests to xmlhttprequest were developed in a separate draft xmlhttprequest level  until end of  at which point the two drafts were merged and xmlhttprequest became a single entity again from a standards perspective since  the development work required for getting the spec finalized has taken place both in the whatwg and in the wc web applications working group xmlhttprequest level  the first stable recommendation track specification for the xmlhttprequest feature standardizes all parts of xmlhttprequest that are compatibly supported across major implementations implementors should be able to rely on this specification and the related test suite in order to create interoperable implementations some features included in the whatwg specification are left out because they are not yet widely implemented or used these features are fetching data urls the urlsearchparams type in send method the additional methods other than append defined in the interface formdata historical discussion can be found in the following mailing list archives whatwg@whatwgorg publicwebapi@worg publicappformats@worg publicwebapps@worg  conformance all diagrams examples and notes in this specification are nonnormative as are all sections explicitly marked nonnormative everything else in this specification is normative the key words must must not required should should not recommended may and optional in the normative parts of this specification are to be interpreted as described in rfc for readability these words do not appear in all uppercase letters in this specification rfc  dependencies this specification relies on several underlying specifications crossorigin resource sharing a conforming user agent must support the algorithms of the crossorigin resource sharing specification cors dom a conforming user agent must support at least the subset of the functionality defined in dom that this specification relies upon such as various exceptions and eventtarget dom dom parsing and serialization a conforming user agent must support at least the serialize concept from dom parsing and serialization domps encoding standard a conforming user agent must support at least the subset of the functionality defined in encoding standard that this specification relies upon such as the utf encoding encoding file api a conforming user agent must support at least the subset of the functionality defined in file api that this specification relies upon such as the blob and file interfaces fileapi html a conforming user agent must support at least the subset of the functionality defined in html that this specification relies upon such as the basics of the window object and serializing a document object html http a conforming user agent must support some version of the http protocol requirements regarding http are made throughout the specification http progress events a conforming user agent must support the progress events specification progressevents typed array a conforming user agent must support the arraybuffer and arraybufferview objects typedarray url a conforming user agent must support the url parsing algorithm of the url specification url web idl a conforming user agent must also be a conforming implementation of the idl fragments in this specification as described in the web idl specification webidl xml a conforming user agent must be a conforming xml processor that reports violations of namespace wellformedness xml xmlns it uses the typographic conventions from html html  extensibility user agents working groups and other interested parties are strongly encouraged to discuss new features on a relevant public forum preferably publicwebapps@worg if this is for some reason not possible prefix the extension in some way eg if company foo wants to add a proprietary method bar it could be named foobar to prevent clashes with a potential nonproprietary method bar  terminology the term user credentials for the purposes of this specification means cookies http authentication and clientside ssl certificates specifically it does not refer to proxy authentication or the origin header cookies  interface xmlhttprequest nointerfaceobjectinterface xmlhttprequesteventtarget  eventtarget    event handlers  attribute eventhandler onloadstart  attribute eventhandler onprogress  attribute eventhandler onabort  attribute eventhandler onerror  attribute eventhandler onload  attribute eventhandler ontimeout  attribute eventhandler onloadendinterface xmlhttprequestupload  xmlhttprequesteventtarget enum xmlhttprequestresponsetype     arraybuffer  blob  document  json  textconstructorinterface xmlhttprequest  xmlhttprequesteventtarget    event handler  attribute eventhandler onreadystatechange   states  const unsigned short unsent    const unsigned short opened    const unsigned short headers_received    const unsigned short loading    const unsigned short done    readonly attribute unsigned short readystate   request  void openbytestring method ensureutf domstring url  void openbytestring method ensureutf domstring url boolean async optional ensureutf domstring username  null optional ensureutf domstring password  null  void setrequestheaderbytestring header bytestring value           attribute unsigned long timeout           attribute boolean withcredentials  readonly attribute xmlhttprequestupload upload  void sendoptional arraybufferview or blob or document or ensureutf domstring or formdata data  null  void abort   response  readonly attribute unsigned short status  readonly attribute bytestring statustext  bytestring getresponseheaderbytestring header  bytestring getallresponseheaders  void overridemimetypedomstring mime           attribute xmlhttprequestresponsetype responsetype  readonly attribute any response  readonly attribute domstring responsetext  readonly attribute document responsexml each xmlhttprequest object has a unique associated xmlhttprequestupload object if the javascript global environment is a worker environment implementations must act as if document and document in the above idl were not exposed ie send is not overloaded with it and responsexml always returns null as required by its definition too  task sources each xmlhttprequest object has its own task source namely the xmlhttprequest task source  constructor the xmlhttprequest object has an associated settings object client  new xmlhttprequest returns a new xmlhttprequest object the xmlhttprequest constructor must run these steps let xhr be a new xmlhttprequest object set xhrs settings object to the relevant settings object for the global object of xhrs interface object return xhr  garbage collection an xmlhttprequest object must not be garbage collected if its state is opened and the send flag is set its state is headers_received or its state is loading and one of the following is true it has one or more event listeners registered whose type is readystatechange progress abort error load timeout or loadend the upload complete flag is unset and the associated xmlhttprequestupload object has one or more event listeners registered whose type is progress abort error load timeout or loadend if an xmlhttprequest object is garbage collected while its connection is still open the user agent must terminate the request  event handlers the following are the event handlers and their corresponding event handler event types that must be supported on objects implementing an interface that inherits from xmlhttprequesteventtarget as attributes event handler event handler event type onloadstart loadstart onprogress progress onabort abort onerror error onload load ontimeout timeout onloadend loadend the following is the event handler and its corresponding event handler event type that must be supported as attribute solely by the xmlhttprequest object event handler event handler event type onreadystatechange readystatechange  states client  readystate returns the current state the xmlhttprequest object can be in several states the readystate attribute must return the current state which must be one of the following values unsent numeric value  the object has been constructed opened numeric value  the open method has been successfully invoked during this state request headers can be set using setrequestheader and the request can be made using the send method headers_received numeric value  all redirects if any have been followed and all http headers of the final response have been received several response members of the object are now available loading numeric value  the response entity body is being received done numeric value  the data transfer has been completed or something went wrong during the transfer eg infinite redirects the send flag indicates that the send method has been invoked it is initially unset and is used during the opened state the error flag indicates some type of network error or fetch termination it is initially unset  request each xmlhttprequest object has the following requestassociated concepts request method request url author request headers request entity body source origin referrer source synchronous flag upload complete flag and upload events flag the author request headers is a list of http header names and corresponding header values comparisons against the http header names must be done in a caseinsensitive manner initially it must be empty the request entity body must initially be null the synchronous flag upload complete flag and upload events flag must be initially unset to terminate the request run these steps set the error flag cancel any instance of the fetch algorithm opened by this object if there are any tasks from the objects xmlhttprequest task source in one of the task queues then remove them  the open method client  openmethod url  async  true  username  null  password  null sets the request method request url and synchronous flag throws a javascript typeerror if either method is not a valid http method or url cannot be parsed throws a securityerror exception if method is a caseinsensitive match for connect trace or track throws an invalidaccesserror exception if async is false the javascript global environment is a document environment and either the timeout attribute is not zero the withcredentials attribute is true or the responsetype attribute is not the empty string the openmethod url async username password method must run these steps if settings objects responsible document is not fully active throw an invalidstateerror exception set base to settings objects api base url set source origin to settings objects origin set referrer source to the settings objects api referrer sources url if settings objects api referrer source is a document and settings objects api referrer source otherwise if method does not match the method token production throw a javascript typeerror if method is a caseinsensitive match for connect delete get head options post put trace or track subtract x from each byte in the range x ascii a to xa ascii z if it does not match any of the above it is passed through literally including in the final request if method is a casesensitive match for connect trace or track throw a securityerror exception allowing these methods would pose a security risk httpverbsec let parsed url be the result of parsing url with base if parsed url is failure throw a javascript typeerror if the async argument is omitted set async to true and set username and password to null due to unfortunate legacy constraints passing undefined for the async argument is treated differently from async being omitted if parsed urls relative flag is set run these substeps if the username argument is not null set parsed urls username to username if the password argument is not null set parsed urls password to password if async is false the javascript global environment is a document environment and either the timeout attribute value is not zero the withcredentials attribute value is true or the responsetype attribute value is not the empty string throw an invalidaccesserror exception terminate the request after all a request can be ongoing at this point set variables associated with the object as follows set request method to method set request url to parsed url if async is false set the synchronous flag set author request headers to the empty list unset the send flag set response entity body to null set arraybuffer response entity body to null set blob response entity body to null set document response entity body to null set json response entity body to null set text response entity body to null if the state is not opened run these substeps change the state to opened fire an event named readystatechange  the setrequestheader method client  setrequestheaderheader value appends an header to the list of author request headers or if header is already in the list of author request headers combines its value with value throws an invalidstateerror exception if the state is not opened or if the send flag is set throws a javascript typeerror if header is not a valid http header field name or if value is not a valid http header field value as indicated in the algorithm below certain headers cannot be set and are left up to the user agent in addition there are certain other headers the user agent will take control of if they are not set by the author as indicated at the end of the send method section for non same origin requests using the http get method a preflight request is made when headers other than accept and acceptlanguage are set the setrequestheaderheader value method must run these steps if the state is not opened throw an invalidstateerror exception if the send flag is set throw an invalidstateerror exception if header does not match the fieldname production throw a javascript typeerror if value does not match the fieldvalue production throw a javascript typeerror an empty string represents an empty header field value terminate these steps if header is a caseinsensitive match for one of the following headers acceptcharset acceptencoding accesscontrolrequestheaders accesscontrolrequestmethod connection contentlength cookie cookie date dnt expect host keepalive origin referer te trailer transferencoding upgrade useragent via  or if the start of header is a caseinsensitive match for proxy or sec including when header is just proxy or sec the above headers are controlled by the user agent to let it control those aspects of transport this guarantees data integrity to some extent header names starting with sec are not allowed to be set to allow new headers to be minted that are guaranteed not to come from xmlhttprequest if header is not in the author request headers list append header with its associated value to the list and terminate these steps if header is in the author request headers list append  followed by u followed by value to the value of the header matching header the xmlhttprequest standard intentionally constraints the use of http here in line with contemporary implementations some simple code demonstrating what happens when setting the same header twice  the following scriptvar client  new xmlhttprequestclientopenget democgiclientsetrequestheaderxtest oneclientsetrequestheaderxtest twoclientsend results in the following header being sentxtest one two  the timeout attribute client  timeout can be set to a time in milliseconds when set to a nonzero value will cause fetching to terminate after the given time has passed when the time has passed the request has not yet completed and the synchronous flag is unset a timeout event will then be dispatched or a timeouterror exception will be thrown otherwise for the send method when set throws an invalidaccesserror exception if the synchronous flag is set and the javascript global environment is a document environment the timeout attribute must return its value initially its value must be zero setting the timeout attribute must run these steps if the javascript global environment is a document environment and the synchronous flag is set throw an invalidaccesserror exception set its value to the new value this implies that the timeout attribute can be set while fetching is in progress if that occurs it will still be measured relative to the start of fetching  the withcredentials attribute client  withcredentials true when user credentials are to be included in a crossorigin request false when they are to be excluded in a crossorigin request and when cookies are to be ignored in its response initially false when set throws an invalidstateerror exception if the state is not unsent or opened or if the send flag is set when set throws an invalidaccesserror exception if the synchronous flag is set and the javascript global environment is a document environment the withcredentials attribute must return its value initially its value must be false setting the withcredentials attribute must run these steps if the state is not unsent or opened throw an invalidstateerror exception if the send flag is set throw an invalidstateerror exception if the javascript global environment is a document environment and the synchronous flag is set throw an invalidaccesserror exception set the withcredentials attributes value to the given value the withcredentials attribute has no effect when fetching sameorigin resources  the upload attribute client  upload returns the associated xmlhttprequestupload object it can be used to gather transmission information when data is transferred to a server the upload attribute must return the associated xmlhttprequestupload object as indicated earlier each xmlhttprequest object has an associated xmlhttprequestupload object  the send method client  senddata  null initiates the request the optional argument provides the request entity body the argument is ignored if request method is get or head throws an invalidstateerror exception if the state is not opened or if the send flag is set the senddata method must run these steps if the state is not opened throw an invalidstateerror exception if the send flag is set throw an invalidstateerror exception if the request method is get or head set data to null if data is null do not include a request entity body and go to the next step otherwise let encoding be null mime type be null and then follow these rules depending on data arraybufferview let the request entity body be the raw data represented by data blob if the objects type attribute is not the empty string let mime type be its value let the request entity body be the raw data represented by data document let encoding be utf if data is an html document let mime type be texthtml or let mime type be applicationxml otherwise then append charsetutf to mime type let the request entity body be data serialized converted to unicode and utf encoded rethrow any exception serializing throws if data cannot be serialized an invalidstateerror exception is thrown a string let encoding be utf let mime type be textplaincharsetutf let the request entity body be data utf encoded formdata let the request entity body be the result of running the multipartformdata encoding algorithm with data as form data set and with utf as the explicit character encoding let mime type be the concatenation of multipartformdata a u space character boundary and the multipartformdata boundary string generated by the multipartformdata encoding algorithm if a contenttype header is in author request headers and its value is a valid mime type that has a charset parameter whose value is not a caseinsensitive match for encoding and encoding is not null set all the charset parameters of that contenttype header to encoding if no contenttype header is in author request headers and mime type is not null append a contenttype header with value mime type to author request headers if the synchronous flag is set release the storage mutex unset the error flag upload complete flag and upload events flag if there is no request entity body or if it is empty set the upload complete flag if the synchronous flag is unset and one or more event listeners are registered on the xmlhttprequestupload object set the upload events flag if the synchronous flag is unset run these substeps set the send flag fire a progress event named loadstart if the upload complete flag is unset fire a progress event named loadstart on the xmlhttprequestupload object return the send method call but continue running the steps in this algorithm if the source origin and the request url are same origin these are the sameorigin request steps fetch the request url from origin source origin using referrer source as override referrer source with the synchronous flag set if the synchronous flag is set using http method request method taking into account the request entity body list of author request headers and the rules listed at the end of this section if the synchronous flag is set while making the request also follow the sameorigin request event rules the send method call will now be returned by virtue of this algorithm ending if the synchronous flag is unset make upload progress notifications make progress notifications while processing the request as data becomes available and when the user interferes with the request queue tasks to update the response entity body and follow the sameorigin request event rules otherwise these are the crossorigin request steps make a crossorigin request passing these as parameters request url the request url request method the request method author request headers the list of author request headers request entity body the request entity body source origin the source origin referrer source the referrer source omit credentials flag set if withcredentials attributes value is false force preflight flag set if the upload events flag is set if the synchronous flag is set while making the request also follow the crossorigin request event rules the send method call will now be returned by virtue of this algorithm ending if the synchronous flag is unset while processing the request as data becomes available and when the end user interferes with the request queue tasks to update the response entity body and follow the crossorigin request event rules if the user agent allows the end user to configure a proxy it should modify the request appropriately ie connect to the proxy host instead of the origin server modify the requestline and send proxyauthorization headers as specified if the user agent supports http authentication and authorization is not in the list of author request headers it should consider requests originating from the xmlhttprequest object to be part of the protection space that includes the accessed uris and send authorization headers and handle  unauthorized requests appropriately if authentication fails source origin and the request url are same origin authorization is not in the list of author request headers request urls username is the empty string and request urls password is null user agents should prompt the end user for their username and password otherwise if authentication fails user agents must not prompt the end user for their username and password httpauth unfortunately end users are prompted because of legacy content constraints however when possible this behavior is prohibited as it is bad ui eg that is why the same origin restriction is made above if the user agent supports http state management it should persist discard and send cookies as received in the setcookie response header and sent in the cookie header as applicable cookies if the user agent implements a http cache it should respect cachecontrol headers in author request headers eg cachecontrol nocache bypasses the cache it must not send cachecontrol or pragma request headers automatically unless the end user explicitly requests such behavior eg by reloading the page for  not modified responses that are a result of a user agent generated conditional request the user agent must act as if the server gave a  ok response with the appropriate content the user agent must allow author request headers to override automatic cache validation eg ifnonematch or ifmodifiedsince in which case  not modified responses must be passed through http if the user agent implements serverdriven contentnegotiation it must follow these constraints for the accept and acceptlanguage request headers both headers must not be modified if they are in author request headers if not in author request headers acceptlanguage with an appropriate value should be appended to it if not in author request headers accept with value  must be appended to it responses must have the contentencodings automatically decoded http besides the author request headers user agents should not include additional request headers other than those mentioned above or other than those authors are not allowed to set using setrequestheader this ensures that authors have a predictable api  infrastructure for the send method the sameorigin request event rules are as follows if the error flag is set terminate these steps if the response has an http status code of     or  if the redirect violates infinite loop precautions this is a network error otherwise run these steps set the request url to the url conveyed by the location header if the source origin and the origin of request url are same origin transparently follow the redirect while observing the sameorigin request event rules otherwise follow the crossorigin request steps and terminate the steps for this algorithm http places requirements on the user agent regarding the preservation of the request method and request entity body during redirects and also requires end users to be notified of certain kinds of automatic redirections if the end user cancels the request this is an abort error if there is a network error in case of dns errors tls negotiation failure or other type of network errors this is a network error do not request any kind of end user interaction this does not include http responses that indicate some type of error such as http status code  if timeout is not  and since the request started the amount of milliseconds specified by timeout has passed this is a timeout error once all http headers have been received the synchronous flag is unset and the http status code of the response is not one of     and  switch to the headers_received state once the first byte or more of the response entity body has been received and the synchronous flag is unset if there is no response entity body and the synchronous flag is unset switch to the loading state once the whole response entity body has been received if there is no response entity body and the state is loading if there is no response entity body and the synchronous flag is set switch to the done state the crossorigin request event rules are as follows if the error flag is set terminate these steps if the crossorigin request status is preflight complete and the synchronous flag is unset make upload progress notifications if the crossorigin request status is network error this is a network error if the crossorigin request status is abort error this is an abort error if timeout is not  and since the request started the amount of milliseconds specified by timeout has passed this is a timeout error once all http headers have been received the crossorigin request status is success and the synchronous flag is unset switch to the headers_received state make progress notifications once the first byte or more of the response entity body has been received the crossorigin request status is success and the synchronous flag is unset if there is no response entity body the crossorigin request status is success and the synchronous flag is unset switch to the loading state once the whole response entity body has been received and the crossorigin request status is success if there is no response entity body the crossorigin request status is success and the state is loading if there is no response entity body the crossorigin request status is success and the synchronous flag is set switch to the done state when something is said to be a network error run the request error steps for exception networkerror and event error when something is said to be an abort error run the request error steps for exception aborterror and event abort when something is said to be a timeout error run the request error steps for exception timeouterror and event timeout when something is said to be a request error for exception exception and event event run these steps terminate the request change the state to done if the synchronous flag is set throw an exception exception fire an event named readystatechange at this point it is clear that the synchronous flag is unset if the upload complete flag is unset follow these substeps set the upload complete flag fire a progress event named progress on the xmlhttprequestupload object fire a progress event named event on the xmlhttprequestupload object fire a progress event named loadend on the xmlhttprequestupload object fire a progress event named progress fire a progress event named event fire a progress event named loadend when it is said to switch to the headers_received state run these steps change the state to headers_received fire an event named readystatechange when it is said to switch to the loading state run these steps change the state to loading fire an event named readystatechange when it is said to switch to the done state run these steps if the synchronous flag is set update the response entity body unset the synchronous flag change the state to done fire an event named readystatechange fire a progress event named progress fire a progress event named load fire a progress event named loadend when it is said to make progress notifications while the download is progressing queue a task to fire a progress event named progress about every ms or for every byte received whichever is least frequent when it is said to make upload progress notifications run these steps while the request entity body is being transmitted and the upload complete flag is unset queue a task to fire a progress event named progress on the xmlhttprequestupload object about every ms or for every byte transmitted whichever is least frequent if the request entity body has been fully transmitted irrespective of whether the server has started transmitting a response or the status code of such a response and the upload complete flag is still unset queue a task to run these substeps set the upload complete flag fire a progress event named progress on the xmlhttprequestupload object fire a progress event named load on the xmlhttprequestupload object fire a progress event named loadend on the xmlhttprequestupload object  the abort method client  abort cancels any network activity the abort method must run these steps terminate the request if the state is unsent opened with the send flag being unset or done go to the next step otherwise run these substeps change the state to done unset the send flag fire an event named readystatechange if the upload complete flag is false run these substeps set the upload complete flag to true fire a progress event named progress on the xmlhttprequestupload object fire a progress event named abort on the xmlhttprequestupload object fire a progress event named loadend on the xmlhttprequestupload object fire a progress event named progress fire a progress event named abort fire a progress event named loadend change the state to unsent no readystatechange event is dispatched  response a response header is a http response header transmitted before the response entity body http this excludes trailer fields trailers  the status attribute client  status returns the http status code the status attribute must return the result of running these steps if the state is unsent or opened return  if the error flag is set return  return the http status code  the statustext attribute client  statustext returns the http status text the statustext attribute must return the result of running these steps if the state is unsent or opened return the empty string if the error flag is set return the empty string return the http status text  the getresponseheader method client  getresponseheaderheader returns the header field value from the response of which the field name matches header unless the field name is setcookie or setcookie the getresponseheaderheader method must run these steps if the state is unsent or opened return null if the error flag is set return null if header is a caseinsensitive match for setcookie or setcookie return null if header is a caseinsensitive match for multiple response headers return the values of these headers as a single concatenated string separated from each other by a uc comma u space character pair if header is a caseinsensitive match for a single response header return the value of that header return null the crossorigin resource sharing specification filters response headers exposed by getresponseheader for crossorigin requests cors for the following script var client  new xmlhttprequestclientopenget unicornsaretehawesometxt trueclientsendclientonreadystatechange  function   ifthisreadystate       printclientgetresponseheadercontenttype   the print function will get to process something like textplain charsetutf  the getallresponseheaders method client  getallresponseheaders returns all headers from the response with the exception of those whose field name is setcookie or setcookie the getallresponseheaders method must run these steps if the state is unsent or opened return the empty string if the error flag is set return the empty string return all response headers excluding headers that are a caseinsensitive match for setcookie or setcookie as a single string with each header line separated by a ud cr ua lf pair excluding the status line and with each header name and header value separated by a ua colon u space pair the crossorigin resource sharing specification filters response headers exposed by getallresponseheaders for crossorigin requests cors for the following script var client  new xmlhttprequestclientopenget narwhalstootxt trueclientsendclientonreadystatechange  function   ifthisreadystate       printthisgetallresponseheaders   the print function will get to process something like date sun  oct   gmtserver apache unixkeepalive timeout maxconnection keepalivetransferencoding chunkedcontenttype textplain charsetutf  response entity body the response mime type is the mime type the contenttype header contains excluding any parameters and converted to ascii lowercase or null if the response header can not be parsed or was omitted the override mime type is initially null and can get a value if overridemimetype is invoked final mime type is the override mime type unless that is null in which case it is the response mime type the response charset is the value of the charset parameter of the contenttype header or null if there was no charset parameter or the header could not be parsed or was omitted the override charset is initially null and can get a value if overridemimetype is invoked final charset is the override charset unless that is null in which case it is the response charset the response entity body is the fragment of the entity body of the response received so far loading or the complete entity body of the response done if the response does not have an entity body the response entity body is null the response entity body is updated as part of the send method and reset by the open method the arraybuffer response entity body is either an arraybuffer representing the response entity body or null if the arraybuffer response entity body is null let it be the return value of the following algorithm if the response entity body is null return an empty arraybuffer object return an arraybuffer object representing the response entity body the blob response entity body is either a blob representing the response entity body or null if the blob response entity body is null set it to the return value of the following algorithm if the response entity body is null return an empty blob object return a blob object representing the response entity body the document response entity body is either a document representing the response entity body or null if the document response entity body is null set it to the return value of the following algorithm if the response entity body is null return null if the javascript global environment is a worker environment return null if final mime type is not null texthtml textxml applicationxml or does not end in xml return null if responsetype is the empty string and final mime type is texthtml return null this is restricted to responsetype being document in order to prevent breaking legacy content if final mime type is texthtml run these substeps let charset be the final charset if charset is null prescan the first  bytes of the response entity body and if that does not terminate unsuccessfully then let charset be the return value if charset is null set charset to utf let document be a document that represents the result parsing response entity body following the rules set forth in the html standard for an html parser with scripting disabled and a known definite encoding charset html flag document as an html document otherwise let document be a document that represents the result of parsing the response entity body following the rules set forth in the xml specifications if that fails unsupported character encoding namespace wellformedness error etc return null xml xmlns scripts in the resulting document tree will not be executed resources referenced will not be loaded and no associated xslt will be applied if charset is null set charset to utf set documents encoding to charset set documents content type to final mime type set documents url to request url set documents origin to source origin return document the json response entity body is either a javascript value representing the response entity body if the json response entity body is null set it to the return value of the following algorithm let json text be the result of running utf decode on byte stream response entity body return the result of invoking the initial value of the parse property of the json object defined in javascript with json text as its only argument or null if that function throws an exception ecmascript the text response entity body is either a string representing the response entity body or null if the text response entity body is null set it to the return value of the following algorithm if the response entity body is null return the empty string let charset be the final charset if responsetype is the empty string charset is null and final mime type is either null textxml applicationxml or ends in xml use the rules set forth in the xml specifications to determine the encoding let charset be the determined encoding xml xmlns this is restricted to responsetype being the empty string to keep the nonlegacy responsetype value text simple if charset is null set charset to utf return the result of running decode on byte stream response entity body using fallback encoding charset authors are strongly encouraged to always encode their resources using utf  the overridemimetype method client  overridemimetypemime sets the contenttype header for the response to mime throws an invalidstateerror exception if the state is loading or done throws a javascript typeerror if mime is not a valid media type the overridemimetypemime method must run these steps if the state is loading or done throw an invalidstateerror exception if parsing mime analogously to the value of the contenttype header fails throw a javascript typeerror if mime is successfully parsed set override mime type to its mime type excluding any parameters and converted to ascii lowercase if a charset parameter is successfully parsed set override charset to its value  the responsetype attribute client  responsetype   value  returns the response type can be set to change the response type values are the empty string default arraybuffer blob document json and text when set setting to document is ignored if the javascript global environment is a worker environment when set throws an invalidstateerror exception if the state is loading or done when set throws an invalidaccesserror exception if the synchronous flag is set and the javascript global environment is a document environment the responsetype attribute must return its value initially its value must be the empty string setting the responsetype attribute must run these steps if the state is loading or done throw an invalidstateerror exception if the javascript global environment is a document environment and the synchronous flag is set throw an invalidaccesserror exception if the javascript global environment is a worker environment and the given value is document terminate these steps set the responsetype attributes value to the given value  the response attribute client  response returns the response entity body the response attribute must return the result of running these steps if responsetype is the empty string or text if the state is not loading or done return the empty string if the error flag is set return the empty string return the text response entity body otherwise if the state is not done return null if the error flag is set return null if responsetype is arraybuffer return the arraybuffer response entity body if responsetype is blob return the blob response entity body if responsetype is document return the document response entity body if responsetype is json return the json response entity body  the responsetext attribute client  responsetext returns the text response entity body throws an invalidstateerror exception if responsetype is not the empty string or text the responsetext attribute must return the result of running these steps if responsetype is not the empty string or text throw an invalidstateerror exception if the state is not loading or done return the empty string if the error flag is set return the empty string return the text response entity body  the responsexml attribute client  responsexml returns the document response entity body throws an invalidstateerror exception if responsetype is not the empty string or document the responsexml attribute must return the result of running these steps if responsetype is not the empty string or document throw an invalidstateerror exception if the state is not done return null if the error flag is set return null return the document response entity body the responsexml attribute has xml in its name for historical reasons it also returns html resources as documents  events summary this section is nonnormative the following events are dispatched on xmlhttprequest andor xmlhttprequestupload objects event name interface dispatched when readystatechange event the readystate attribute changes value except when it changes to unsent loadstart progressevent the request starts progress progressevent transmitting data abort progressevent the request has been aborted for instance by invoking the abort method error progressevent the request has failed load progressevent the request has successfully completed timeout progressevent the author specified timeout has passed before the request completed loadend progressevent the request has completed either in success or failure  interface formdata constructoroptional htmlformelement forminterface formdata   void appendensureutf domstring name blob value optional ensureutf domstring filename  void appendensureutf domstring name ensureutf domstring value if the javascript global environment is a worker environment formdata must be exposed to javascript as if the constructor part of the idl reads constructor ie has no arguments the formdata object represents an ordered list of entries each entry consists of a name and a value for the purposes of interaction with other algorithms an entrys type is string if value is a string and file otherwise if an entrys type is file its filename is the value of entrys values name attribute fd  new formdataform returns a new formdata object optionally initialized with the entries from form if given fd  appendname value  filename appends a new entry to the formdata object the formdataform constructor must run these steps let fd be a new formdata object if form is given set fds entries to the result of constructing the form data set for form return fd the appendname value filename method must run these steps let entry be a new entry set entrys name to name if value is a blob set value to a new file object whose name attribute value is blob if value is a file and filename is given set values name attribute value to filename set entrys value to value append entry to formdata objects list of entries references cookies http state management mechanism adam barth ietf cors crossorigin resource sharing anne van kesteren wc dom dom anne van kesteren aryeh gregor msger et al wc domps dom parsing and serialization travis leithead and msger wc ecmascript ecmascript language specification ecma encoding encoding standard anne van kesteren whatwg fileapi file api arun ranganathan and jonas sicking wc html html robin berjon travis leithead erika doyle navara et al wc http hypertext transfer protocol  http roy fielding james gettys jeffrey mogul et al ietf httpauth http authentication basic and digest access authentication j franks phillip hallambaker j hostetler et al ietf httpverbsec multiple vendors web servers enable http trace method by default uscert microsoft internet information server iis vulnerable to crosssite scripting via http track method uscert http proxy default configurations allow arbitrary tcp connections uscert progressevents progress events anne van kesteren charles mccathienevile and jungkee song wc rfc key words for use in rfcs to indicate requirement levels scott bradner ietf typedarray typed array david herman and kenneth russell khronos url url standard anne van kesteren whatwg webidl web idl cameron mccormack wc xml extensible markup language tim bray jean paoli c m sperbergmcqueen et al wc xmlns namespaces in xml tim bray dave hollander andrew layman et al wc acknowledgments the editor would like to thank addison phillips adrian bateman ahmed kamel alex hopmann alex vincent alexey proskuryakov andrea marchesini asbjrn ulsberg boris zbarsky bjrn hhrmann cameron mccormack chris marrin christophe jolif charles mccathienevile dan winship david andersson david flanagan david hsther david levin dean jackson denis sureau dominik rttsches doug schepers douglas livingstone elliott sprehn elliotte harold eric lawrence eric uhrhane erik arvidsson erik dahlstrm feras moussa geoffrey sneddon gideon cohn glenn adams gorm haug eriksen hkon wium lie hallvord r m steen henri sivonen huub schaeks ian davis ian hickson ivan herman jarred nicholls jeff walden jens lindstrm jim deegan jim ley joe farro jonas sicking julian reschke  jungkee song  kanghao lu karl dubost lachlan hunt maciej stachowiak magnus kristiansen marc hadley marcos caceres mark baker mark birbeck mark nottingham mark s miller martin hassman mohamed zergaoui msger odin hrthe omdal olli pettay pawel glowacki peter michaux philip taylor robin berjon rune f halvorsen ruud steltenpool sergiu dumitriu sigbjrn finne simon pieters stewart brodie sunava dutta takeshi yoshino thomas roessler tom magliery travis leithead yehuda katz and zhenbin xu for their contributions to this specification special thanks to the microsoft employees who first implemented the xmlhttprequest interface which was first widely deployed by the windows internet explorer browser special thanks also to the whatwg for drafting an initial version of this specification in their web applications  document now renamed to html html special thanks to anne van kesteren who has provided nearly all the contents until he stepped down as a wc editor and is now in succession providing discussions and contents as the editor of the xmlhttprequest living standard in whatwg which this version of the specification pursues convergence thanks also to all those who have helped to improve this specification by sending suggestions and corrections please keep bugging us with your issues