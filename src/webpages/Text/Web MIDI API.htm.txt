web midi api web midi api wc working draft  november  this version httpwwwworgtrwdwebmidi latest published version httpwwwworgtrwebmidi previous version httpwwwworgtrwdwebmidi latest editors draft httpwebaudiogithubiowebaudioapi editors jussi kalliokoski chris wilson google versioning repository httpsgithubcomwebaudiowebmidiapi issues tracker httpsgithubcomwebaudiowebmidiapiissuesstateopen test suite httpsgithubcomjussikalliokoskiwebmiditestsuite unofficial working group audio working group comments publicaudio@worg archives copyright   wc mit ercim keio beihang all rights reserved wc liability trademark and document use rules apply abstract some user agents have music devices such as synthesizers keyboard and other controllers and drum machines connected to their host computer or device the widely adopted musical instrument digital interface midi protocol enables electronic musical instruments controllers and computers to communicate and synchronize with each other midi does not transmit audio signals instead it sends event messages about musical notes controller signals for parameters such as volume vibrato and panning cues and clock signals to set the tempo and systemspecific midi communications eg to remotely store synthesizerspecific patch data this same protocol has become a standard for nonmusical uses such as show control lighting and special effects control this specification defines an api supporting the midi protocol enabling web applications to enumerate and select midi input and output devices on the client system and send and receive midi messages it is intended to enable nonmusic midi applications as well as music ones by providing lowlevel access to the midi devices available on the users systems the web midi api is not intended to describe music or controller inputs semantically it is designed to expose the mechanics of midi input and output interfaces and the practical aspects of sending and receiving midi messages without identifying what those actions might mean semantically eg in terms of modulate the vibrato by hz or play a g chord other than in terms of changing a controller value or sending a set of noteon messages that happen to represent a g chord to some users midi has become synonymous with standard midi files and general midi that is not the intent of this api the use case of simply playing back a smf file is not within the purview of this specification it could be considered a different format to be supported by the html audio element for example the web midi api is intended to enable direct access to devices that respond to midi  external synthesizers or lighting systems for example or even the software synthesizers that are built in to many common operating systems the web midi api is also explicitly designed to enable a new class of applications on the web that can respond to midi controller inputs  using external hardware controllers with physical buttons knobs and sliders as well as musical controllers like keyboard guitar or wind instrument controllers to control web applications the web midi api is also expected to be used in conjunction with other apis and elements of the web platform notably the web audio api this api is also intended to be familiar to users of midi apis on other systems such as apples coremidi and microsofts windows midi api status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document was published by the audio working group as an working draft if you wish to make comments regarding this document please send them to publicaudio@worg subscribe archives all comments are welcome publication as a working draft does not imply endorsement by the wc membership this is a draft document and may be updated replaced or obsoleted by other documents at any time it is inappropriate to cite this document as other than work in progress this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy table of contents  introduction  conformance  terminology  obtaining access to midi devices  requestmidiaccess  methods  midioptions dictionary  dictionary midioptions members  midiinputmap interface  attributes  methods  midioutputmap interface  attributes  methods  midisuccesscallback  callback midisuccesscallback parameters  midierrorcallback  callback midierrorcallback parameters  midiaccess interface  attributes  midiport interface  attributes  midiinput interface  attributes  midioutput interface  methods  midimessageevent interface  attributes  midimessageeventinit interface  dictionary midimessageeventinit members  midiconnectionevent interface  attributes  midiconnectioneventinit interface  dictionary midiconnectioneventinit members  examples of web midi api usage in javascript  getting access to the midi system  requesting access to the midi system with system exclusive support  listing inputs and outputs  handling midi input  sending midi messages to an output device  a simple loopback  a simple monophonic sine wave midi synthesizer  security and privacy considerations of midi a references a normative references  introduction this section is nonnormative the web midi api specification defines a means for web developers to enumerate manipulate and access midi devices  for example interfaces that may provide hardware midi ports with other devices plugged in to them and usb devices that support the usbmidi specification having a web api for midi enables web applications that use existing software and hardware synthesizers hardware music controllers and light systems and other mechanical apparatus controlled by midi this api has been defined with this wide variety of use cases in mind the approaches taken by this api are similar to those taken in apples coremidi api and microsofts windows midi api that is the api is designed to represent the lowlevel software protocol of midi in order to enable developers to build powerful midi software on top the api enables the developer to enumerate input and output interfaces and send and receive midi messages but similar to the aforementioned apis it does not attempt to semantically define or interpret midi messages beyond what is necessary to robustly support current devices the web midi api is not intended to directly implement highlevel concepts such as sequencing it does not directly support standard midi files for example although a standard midi file player can be built on top of the web midi api it is also not intended to semantically capture patches or controller assignments as general midi does such interpretation is outside the scope of the web midi api though again general midi can easily be utilized through the web midi api  conformance as well as sections marked as nonnormative all authoring guidelines diagrams examples and notes in this specification are nonnormative everything else in this specification is normative the key words must must not required should should not recommended may and optional in this specification are to be interpreted as described in rfc this specification defines conformance criteria that apply to a single product the user agent that implements the interfaces that it contains implementations that use ecmascript to implement the apis defined in this specification must implement them in a manner consistent with the ecmascript bindings defined in the web idl specification webidl as this specification uses that specification and terminology  terminology the concepts queue a task and fires a simple event are defined in html the terms event handlers and event handler event types and corresponding eventhandler interface are defined in html the uintarray interface is defined in typedarrays the term octet is defined in webidl the web audio api and its associated interfaces and concepts are defined in webaudio the event interface is defined in dom the domerror interface is defined in domlevelcore the domhighrestimestamp interface is defined in highrestime the terms midi midi device midi input port midi output port midi interface midi message midi system realtime message and system exclusive are defined in midi the promise interface is currently defined in the whatwg dom specification  obtaining access to midi devices  requestmidiaccess partial interface navigator     promise requestmidiaccess optional midioptions options  methods requestmidiaccess when invoked returns a promise object representing a request for access to midi devices on the users system requesting midi access should prompt the user for access to midi devices particularly if system exclusive access is requested in some scenarios this permission may have already been implicitly or explicitly granted in which case this prompt may not appear if the user gives express permission or the call is otherwise approved the vended promises resolvecallback is invoked as a midisuccesscallback ie with a midiaccess object and a midioptions object as its arguments the underlying system may choose to allow the user to select specific midi interfaces to expose to this api ie pick and choose interfaces on an individual basis although this is not required the system may also choose to prompt or not based on whether system exclusive support is requested as system exclusive has greater privacy and security implications if the user declines or the call is denied for any other reason the promises rejectcallback if any is invoked as a midierrorcallback when the requestmidiaccess method is called the user agent must run the algorithm to request midi access let promise be a new promise object and resolver be its associated resolver return promise and run the following steps asynchronously optionally eg based on a previouslyestablished user preference for security reasons or due to platform limitations jump to the step labeled failure below optionally eg based on a previouslyestablished user preference jump to the step labeled success below prompt the user in a useragentspecific manner for permission to provide the entry scripts origin with a midiaccess object representing control over users midi devices this prompt may be contingent upon whether system exclusive support was requested and may allow the user to enable or disable that access if permission is denied jump to the step labeled failure below if the user never responds this algorithm will never progress beyond this step if permission is granted continue the following steps success let access be a new midiaccess object it is possible to call requestmidiaccess multiple times this may prompt the user multiple times so it may not be best practice and the same instance of midiaccess will not be returned each time call resolvers acceptvalue method with access as value argument terminate these steps failure let error be a new domerror this should be of type securityerror if the user or their security settings denied the application from creating a midiaccess instance with the requested options invalidstateerror if the underlying systems raise any errors or otherwise it should be of type notsupportederror call resolvers rejectvalue method with error as value argument parameter type nullable optional description options midioptions   return type promise  midioptions dictionary this dictionary contains optional settings that may be provided to the requestmidiaccess request dictionary midioptions     boolean sysex  dictionary midioptions members sysex of type boolean this member informs the system whether the ability to send and receive system exclusive messages is requested or allowed on a given midiaccess object on the option passed to requestmidiaccess if this member is set to true but system exclusive support is denied either by policy or by user action the access request will fail with a securityerror error if this support is not requested and allowed the system will throw exceptions if the user tries to send system exclusive messages and will silently mask out any system exclusive messages received on the port in the options parameter passed to the resolvecallback this member indicates whether system exclusive is allowed on the midiaccess  midiinputmap interface interface                  attribute readonly int size    function  keys void function  domstring    function  entries void function  array    function  values void function  midiinput    midiinput get domstring key    boolean   has domstring key  attributes size of type readonly int the number of available midi input ports at the current time  methods entries iterator for map entries the passed arrays would contain  midikeytype midiinput  parameter type nullable optional description array void function    return type function get getter for a particular input parameter type nullable optional description key domstring   return type midiinput has returns true if the keyed port currently exists and is available parameter type nullable optional description key domstring   return type boolean keys iterator for keys parameter type nullable optional description domstring void function    return type function values iterator for values parameter type nullable optional description midiinput void function    return type function this type is used to represent all the currently available midi input ports as a mapclasslike interface this enables      to tell how many entries there are    var numberofmidiinputs  inputssize     add each of the ports to a select box    inputsvalues function port        var opt  documentcreateelementoption      opttext  portname      documentgetelementbyidinputportselectoraddopt         or you could express as    for input in inputs       var opt  documentcreateelementoption      opttext  inputname      documentgetelementbyidinputportselectoraddopt      midioutputmap interface interface                  attribute readonly int size    function   keys void function  domstring    function   entries void function  array    function   values void function  midioutput    midioutput get domstring key    boolean    has domstring key  attributes size of type readonly int the number of available midi output ports at the current time  methods entries iterator for map entries the passed arrays would contain  midikeytype midioutput  parameter type nullable optional description array void function    return type function get getter for a particular input parameter type nullable optional description key domstring   return type midioutput has returns true if the keyed port currently exists and is available parameter type nullable optional description key domstring   return type boolean keys iterator for keys parameter type nullable optional description domstring void function    return type function values iterator for values parameter type nullable optional description midioutput void function    return type function this type is used to represent all the currently available midi output ports as a mapclasslike interface this enables      to tell how many entries there are    var numberofmidioutputs  inputssize     add each of the ports to a select box    outputsvalues function port        var opt  documentcreateelementoption      opttext  portname      documentgetelementbyidoutputportselectoraddopt         or you could express as    for output in outputs       var opt  documentcreateelementoption      opttext  inputname      documentgetelementbyidinputportselectoraddopt      midisuccesscallback callback midisuccesscallback  void midiaccess access midioptions options  callback midisuccesscallback parameters access of type midiaccess a midiaccess object created to provide script access to the users midi devices this object is used to enumerate and obtain access to individual midi devices note the term midi device in this specification refers to a midi interface available to the host system for example if a hardware midi adapter is connected to the host system it will be enumerated as a single device even if several midisupporting devices such as synthesizers or drum machines are plugged into hardware midi ports on the adapter options of type midioptions this parameter describes the options enabled on this midiaccess object  midierrorcallback callback midierrorcallback  void domerror error  callback midierrorcallback parameters error of type domerror a domerror object representing the reason why creating getting a midiaccess failed  midiaccess interface this interface provides the methods to list midi input and output devices and obtain access to an individual device interface midiaccess  eventtarget     readonly    attribute midiinputmap  inputs    readonly    attribute midioutputmap outputs                attribute eventhandler  onconnect                attribute eventhandler  ondisconnect    readonly    attribute boolean       sysexenabled  attributes inputs of type midiinputmap readonly the midi input ports available to the system onconnect of type eventhandler the handler called when a new port is connected this event handler of type midiconnectionevent must be supported by all objects implementing the midiaccess interface whenever a previously unavailable midi port becomes available for use the user agent should run the following steps let port be the midiport corresponding to the newlyavailable port let event be a newly constructed midiconnectionevent with the port attribute set to the port fire an event named connectat the midiaccess using the event as the event object ondisconnect of type eventhandler the handler called when a previouslyavailable port is disconnected this event handler of type midiconnectionevent must be supported by all objects implementing the midiaccess interface whenever a previously available midi port becomes unavailable for use the user agent should run the following steps let port be the midiport corresponding to the newlyavailable port let event be a newly constructed midiconnectionevent with the port attribute set to the port fire an event named disconnectat the midiaccess using the event as the event object outputs of type midioutputmap readonly the midi output ports available to the system sysexenabled of type boolean readonly this attribute informs the user whether system exclusive support is enabled on this midiaccess  midiport interface this interface represents a midi input or output port enum midiporttype     input    output enumeration description input if a midiport is an input port the type member must be this value output if a midiport is an output port the type member must be this value interface midiport  eventtarget     readonly    attribute domstring    id    readonly    attribute domstring   manufacturer    readonly    attribute domstring   name    readonly    attribute midiporttype type    readonly    attribute domstring   version                attribute eventhandler ondisconnect  attributes id of type domstring readonly a unique id of the port this can be used by developers to remember ports the user has chosen for their application the user agent must ensure that the id is unique to only that port the user agent should ensure that the id is maintained across instances of the application  eg when the system is rebooted  and when a device is removed from the system applications may want to cache these ids locally to recreate a midi setup some systems may not support completely unique persistent identifiers in such cases it will be more challenging to maintain identifiers when another interface is added or removed from the system this might throw off the index of the requested port it is expected that the system will do the best it can to match a port across instances of the midi api for example storing the port interface manufacturer name and index in the id and attempting to find any ports with that name to consider as a match applications may use the comparison of id of midiports to test for equality manufacturer of type domstring readonly  nullable the manufacturer of the port name of type domstring readonly  nullable the system name of the port ondisconnect of type eventhandler the handler called when a previouslyavailable port is disconnected this event handler of type disconnect must be supported by all objects implementing midiport interface type of type midiporttype readonly a descriptor property to distinguish whether the port is an input or an output port for midioutput this must be output for midiinput this must be input version of type domstring readonly  nullable the version of the port whenever the midi port corresponding to the midiport becomes unavailable for use the user agent should run the following steps let port be the midiport let event be a newly constructed midiconnectionevent with the port attribute set to the port fire an event named disconnect at the port using the event as the event object  midiinput interface interface midiinput  midiport                 attribute eventhandler onmidimessage  attributes onmidimessage of type eventhandler this event handler of type midimessage must be supported by all objects implementing midiinput interface whenever the midi port corresponding to the midiinput finishes receiving one or more midi messages the user agent must run the following steps let port be the midiinput if the midiaccess did not enable system exclusive access and the message is a system exclusive message abort this process let event be a newly constructed midimessageevent with the timestamp attribute set to the time the message was received by the system and with the data attribute set to a uintarray of midi data bytes representing a single midi message fire an event named midimessage at the port using the event as the event object it is specifically noted that midi system realtime messages may actually occur in the middle of system exclusive messages in the input stream in this case the system realtime messages will be dispatched as they occur while the system exclusive message will be buffered until it is complete and then dispatched  midioutput interface interface midioutput  midiport     void send sequenceoctet data optional double timestamp  methods send enqueues the message to be sent to the corresponding midi port the underlying implementation will if necessary coerce each member of the sequence to an unsigned bit integer the use of sequence rather than a uintarray enables developers to use the convenience of outputsend  x x xf   rather than having to create a uintarray eg outputsend new uintarray  x x xf     while still enabling use of uintarrays for efficiency in large midi data scenarios eg reading standard midi files and sending sysex messages the data contains one or more valid complete midi messages running status is not allowed in the data as underlying systems may not support it if the port is disconnected throw an invalidstateerror exception if data is not a valid sequence or does not contain a valid midi message throw a typeerror exception if data is a system exclusive message and the midiaccess did not enable system exclusive access throw an invalidaccesserror exception parameter type nullable optional description data sequenceoctet   the data to be enqueued with each sequence entry representing a single byte of data timestamp double   the time at which to begin sending the data to the port as a domhighrestimestamp  a number of milliseconds measured relative to the navigation start of the document if timestamp is not present or is set to zero or another time in the past the data is to be sent as soon as possible return type void  midimessageevent interface an event object implementing this interface is passed to a midiinputs onmidimessage handler when midi messages are received constructordomstring type optional midimessageeventinit eventinitdictinterface midimessageevent  event     readonly    attribute double     receivedtime    readonly    attribute uintarray data  attributes data of type uintarray readonly a uintarray containing the midi data bytes of a single midi message receivedtime of type double readonly a domhighrestimestamp specifying when the event occurred note the dom event object has a timestamp member in the event object that will be filled out with the current time but that it is lower precision domtimestamp is defined as an integer number of milliseconds has a different zero reference domtimestamp is the number of milliseconds that has passed since  utc on  january  and therefore is less suitable for midi applications  midimessageeventinit interface dictionary midimessageeventinit     double     receivedtime    uintarray data  dictionary midimessageeventinit members data of type uintarray a uintarray containing the midi data bytes of a single midi message receivedtime of type double a domhighrestimestamp specifying when the event occurred  midiconnectionevent interface an event object implementing this interface is passed to a midiaccess ondisconnect handler and if present to any midiports referencing the port when a previouslyavailable port becomes unavailable for example when a midi interface is disconnected and is also passed to a midiaccess onconnect handler when a new port becomes available for example when a midi interface that has been disconnected is plugged in to the computer connection events are not required to be dispatched as some underlying systems do not support them as notification events or such systems may have long time delays as they poll for new devices infrequently constructordomstring type optional midiconnectioneventinit eventinitdictinterface midiconnectionevent  event     readonly    attribute midiport port  attributes port of type midiport readonly the port that has been connected or disconnected  midiconnectioneventinit interface dictionary midiconnectioneventinit     midiport port  dictionary midiconnectioneventinit members port of type midiport the port that has been connected or disconnected  examples of web midi api usage in javascript this section is nonnormative the following are some examples of common midi usage in javascript  getting access to the midi system this example shows how to request access to the midi system var midi  null   global midiaccess objectfunction onmidisuccess midiaccess    consolelog midi ready   midi  midiaccess   store in the global in real usage would probably keep in an object instancefunction onmidifailuremsg   consolelog failed to get midi access    msg navigatorrequestmidiaccessthen onmidisuccess onmidifailure   requesting access to the midi system with system exclusive support this example shows how to request access to the midi system including the ability to send and receive system exclusive messages var midi  null   global midiaccess objectfunction onmidisuccess midiaccess    consolelog midi ready   midi  midiaccess   store in the global in real usage would probably keep in an object instancefunction onmidifailuremsg   consolelog failed to get midi access    msg navigatorrequestmidiaccess  sysex true  then onmidisuccess onmidifailure   listing inputs and outputs this example gets the list of the input and output ports and prints their information to the console log function listinputsandoutputs midiaccess    for var input in midiaccessinputs     consolelog input port type  inputtype   id  inputid        manufacturer  inputmanufacturer   name  inputname        version  inputversion       for var output in midiaccessoutputs     consolelog output port type  outputtype   id  outputid        manufacturer  outputmanufacturer   name  outputname        version  outputversion       handling midi input this example prints incoming midi messages on a single arbitrary input port to the console log function onmidimessage event    var str  midi message received at timestamp   eventtimestamp    eventdatalength   bytes   for var i ieventdatalength i     str  x  eventdataitostring       consolelog str function startloggingmidiinput midiaccess indexofport    midiaccessinputsentriesindexofportonmidimessage  onmidimessage  sending midi messages to an output device this example sends a middle c note on message immediately on midi channel  midi channels are indexed but generally referred to as channels  and queues a corresponding note off message for  second later function sendmiddlec midiaccess indexofport    var noteonmessage  x  xf     note on middle c full velocity  var output  midiaccessoutputsentriesindexofport  outputsend noteonmessage   omitting the timestamp means send immediately  outputsend x  x windowperformancenow     inlined array creation note off middle c                                                                         release velocity   timestamp  now  ms  a simple loopback this example loops all input messages on the first input port to the first output port  including system exclusive messages var midi  null   global midiaccess objectvar output  nullfunction echomidimessage event    if output     outputsend eventdata eventtimestamp   function onmidisuccess midiaccess    consolelog midi ready   try      var input  midiaccessinputsentriesindexofport    inputonmidimessage  echomidimessage    output  midiaccessoutputsentriesindexofport    catch e     consoleerrorexception couldnt get io ports  e   function onmidifailuremsg   consolelog failed to get midi access    msg navigatorrequestmidiaccessthen onmidisuccess onmidifailure   a simple monophonic sine wave midi synthesizer this example listens to all input messages from all available input ports and uses note messages to drive the envelope and frequency on a monophonic sine wave oscillator creating a very simple synthesizer using the web audio api note on and note off messages are supported but sustain pedal velocity and pitch bend are not this sample is also hosted on webaudiodemosappspotcom var contextnull    the web audio context object    var midiaccessnull   the midiaccess object    var oscillatornull   the single oscillator    var envelopenull     the envelope for the single oscillator    var attack       attack speed    var release    release speed    var portamento   portamentoglide speed    var activenotes    the stack of activelypressed keys    windowaddeventlistenerload function        patch up prefixes      windowaudiocontextwindowaudiocontextwindowwebkitaudiocontext      context  new audiocontext      if navigatorrequestmidiaccess        navigatorrequestmidiaccessthen onmidiinit onmidireject       else        alertno midi support present in your browser  youre gonna have a bad time       set up the basic oscillator chain muted to begin with      oscillator  contextcreateoscillator      oscillatorfrequencysetvalueattime       envelope  contextcreategain      oscillatorconnectenvelope      envelopeconnectcontextdestination      envelopegainvalue     mute the sound      oscillatorstart   go ahead and start up the oscillator         function onmidiinitmidi       midiaccess  midi      if midiaccessinputslength          alertno midi input devices present  youre gonna have a bad time      else   hook the message handler for all midi inputs        for var input in inputs          inputonmidimessage  midimessageeventhandler              function onmidirejecterr       alertthe midi system failed to start  youre gonna have a bad time        function midimessageeventhandlerevent        mask off the lower nibble midi channel which we dont care about      switch eventdata  xf         case x          if eventdata    if velocity   this is a noteon message            noteoneventdata            return                     if velocity   fall thru its a noteoff  midis weird yall        case x          noteoffeventdata          return              function frequencyfromnotenumber note        return   mathpownote        function noteonnotenumber       activenotespush notenumber       oscillatorfrequencycancelscheduledvalues      oscillatorfrequencysettargetattime frequencyfromnotenumbernotenumber  portamento       envelopegaincancelscheduledvalues      envelopegainsettargetattime  attack        function noteoffnotenumber       var position  activenotesindexofnotenumber      if position         activenotesspliceposition            if activenoteslength    shut off the envelope        envelopegaincancelscheduledvalues        envelopegainsettargetattime  release        else         oscillatorfrequencycancelscheduledvalues        oscillatorfrequencysettargetattime frequencyfromnotenumberactivenotesactivenoteslength  portamento             security and privacy considerations of midi there are two primary security and privacy concerns with adding the web midi api to the web platform allowing the enumeration of the users midi interfaces is a potential target for fingerprinting that is uniquely identifying a user by the specific midi interfaces they have connected note that in this context what can be enumerated is the midi interfaces  not for example an individual sampler or synthesizer plugged into a midi interface as these would not be enumerated unless those devices are connected to the host computer with usb usbmidi devices typically have their own midi interface and would be enumerated the interfaces that could be fingerprinted are equivalent to midi ports and for each device the api will expose the name of the device manufacturer and opaque identifier of the midi interface but not any attached devices few systems will have significant numbers of midi devices attached those systems that do will typically use hardware midi interfaces not fanning out a dozen usbmidi connections through usb hubs in this case of course enumerating the midi devices will only see the hardware midi interfaces not the synthesizers samplers etc plugged into it on the other side given the few number of devices plugged in the amount of information exposed here is fairly symmetric with the fingerprinting concern exposed by other apis such as the gamepad api the vast majority of systems have relatively few midi interfaces attached separate from the fingerprinting concerns of identifying the available ports are concerns around sending and receiving midi messages those issues are explored in more depth below in brief the general categories of things you can do with midi ports are sending short messages all messages except sysex receiving short messages all messages except sysex sending sysex messages sysex messages include both commonly recognized midi time code and midi sample dump standard as well as devicespecific messages like patch control data for a roland jupiter synthesizer that do not apply to other devices receiving sysex messages the impact of each of these is sending short messages sending noteonnoteoffcontroller messages would let you cause sounds to be played by attached devices including on mac and windows any default virtual synthesizers this by itself does not cause any concerning exposure  you can already make sounds without interaction through audio flash or web audio some attached devices might be professional lighting control systems so its possible you could control stage lighting however this is extremely rare and no known system has the ability to cause lasting damage or information leakage based solely on short messages at worst a malicious page could flash lights and the user could close the page and reset their lighting controller receiving short messages receiving noteonnoteoffcontroller messages would not cause any information exposure or security issues as there is no identifying data being received just a stream of controller messages  all of which must be initiated by the user on that midi device except clocktype messages this is very analogous to receiving keyboard or mouse events sending and receiving sysex this is the biggest concern because it would be possible to write code that looked for systemspecific responses to sysex messages which could identify the hardware available and then use it to download data  eg samples stored in a sampler  or replace that data erasing sample data or patches in the device although both these scenarios would have to be coded for a particular device it is also possible that some samplers might enable a system exclusive message to start recording a sample  so if the sampler happened to have a dedicated microphone attached uncommon in practice but possible it would be possible to write code specific to a particular device that could record a short sample of sound and then upload it to the network without further user intervention you could not stream audio from the device and most samplers have fairly limited memory and midi sample dump sysex is a slow way to transfer data  it has to transcode into bit  so its unlikely you could listen in for long periods more explicit fingerprinting is a concern as the patch informationstored samplesuser configuration could uniquely identify the system although again this requires much devicespecific code there is not standardized grab all patches and hash it capability this does suggest that system exclusive messages are in a security category of their own its also useful to examine what scenarios are enabled by midi mapped against these features receiving short messages this is the most attractive scenario for web midi as it enables getting input from keyboards drum pads guitars wind controllers djcontrollerist controllers and more and use those messages as input to control instruments and features in the web audio api as well as other control scenarios midi is the protocol of choice for the multibilliondollar music production industry for getting physical controllers like knobs and buttons attached to your computer both in proprosumer audio and media applications as well as consumer applications like garageband sending short messages  its tempting to say sending is significantly less interesting as the scenario of attached output devices like hardware synthesizers is less common in todays market the major exception to this is that many of the midi controllers have external host control of their indicator lights and this makes them dramatically more useful for example the very popular novation launchpad controller uses midi note onoff messages sent to it to turn onoff and change colors of the buttons the same is true of nearly all dj controllers sending and receiving sysex  obviously for more advanced communication with highend hardware devices sysex is required unfortunately some common midi commands are also sent as system exclusive messages midi machine control for example  generic startstoprewffw commands  and many devices use system exclusive to program patches send advanced controller messages download firmware etc which are muchdemanded scenarios for web midi some devices use sysex as a direct control protocol as they can pack more data into a single message and most devices use sysex as way to save and restore patches and configuration information on lessexpensive computer storage several of the major music hardware producers have expressed strong interest in using web midi to provide webbased configuration and programming interfaces to their hardware in short disabling sysex altogether does not only disable highend scenarios in short the additional fingerprinting exposure of enumerating midi devices is directly analogous to the gamepad apis additional fingerprinting exposure through gamepad enumeration typical users will only have at most a few devices connected their configuration may change and the information exposed is about the interface itself ie no userconfigured data the additional security concern for receiving short messages is also small  its analogous to listening to keyboard mouse mobilelaptop accelerometer touch input or gamepad events there is no additional information exposed and all messages other than clock signals must be initiated by the user the additional concerns about sending short messages are analogous to any audio output  you cannot overwrite user information or expose use information but you can make sounds happen change patches or in rare configurations toggle lights  but nondestructively and not persistently system exclusive on the other hand has a much less bounded potential and it seems that distinguishing requests for sysex separately in the api is a good idea in order to more carefully provide user security hooks the suggested security model explicitly allows user agents to require the users approval before giving access to midi devices although it is not currently required to prompt the user for this approval  but it also detailed that system exclusive support must be requested as part of that request a references a normative references domlevelcore arnaud le hors philippe le hgaret lauren wood gavin nicol jonathan robie mike champion steven b byrne et al document object model dom level  core specification  april  wc recommendation url httpwwwworgtrdomlevelcore dom anne van kesteren aryeh gregor lachlan hunt msger dom  december  wc working draft url httpwwwworgtrdom highrestime jatinder mann high resolution time specification  october  wc editors draft url httpdvcsworghgwebperfrawfiletipspecshighresolutiontimeoverviewhtml html robin berjon steve faulkner travis leithead erika doyle navara edward oconnor silvia pfeiffer html  august  wc candidate recommendation url httpwwwworgtrhtml midi musical instrument digital interface midi november  midi manufacturers association complete midi  detailed specification isbn x url httpwwwmidiorgtechspecsindexphp rfc s bradner key words for use in rfcs to indicate requirement levels march  internet rfc  url httpwwwietforgrfcrfctxt typedarrays david herman kenneth russell typed array specification  june  khronos working draft url httpswwwkhronosorgregistrytypedarrayspecslatest webidl cameron mccormack web idl  april  wc candidate recommendation url httpwwwworgtrwebidl webaudio paul adenot chris wilson chris rogers web audio api  october  wc working draft url httpwwwworgtrwebaudio