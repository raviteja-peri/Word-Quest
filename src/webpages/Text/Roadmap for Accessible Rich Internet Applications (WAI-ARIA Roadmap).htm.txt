roadmap for accessible rich internet applications waiaria roadmap roadmap for accessible rich internet applications waiaria roadmap wc working draft  february  this version httpwwwworgtrwdwaiariaroadmap latest version httpwwwworgtrwaiariaroadmap previous version httpwwwworgtrwdariaroadmap editors richard schwerdtfeger ibm schwer@usibmcom copyright   wc mit ercim keio all rights reserved wc liability trademark and document use rules apply abstract the roadmap for accessible rich internet applications addresses the accessibility of dynamic web content for people with disabilities the roadmap introduces the technologies to map controls ajax live regions and events to accessibility apis including custom controls used for rich internet applications the roadmap also describes new navigation techniques to mark common web structures as menus primary content secondary content banner information and other types of web structures these new technologies can be used to improve the accessibility and usability of web resources by people with disabilities without extensive modification to existing libraries of web resources this document is part of the waiaria suite described in the waiaria overview status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document is a working draft by the protocols  formats working group of the web accessibility initiative much of the content of this document has been moved into the waiaria primer ariaprimer which introduces the technical approach of the waiaria suite this document retains information about the path to make rich web content accessible including steps already taken and remaining future steps it revises the timeline expected to accomplish the objectives set out in the roadmap following what is set out in the revised pfwg charter the pfwg seeks feedback on the requirements gap analysis and plan set out in this document in particular the working group would like input about whether the direction outlined in this plan captures what works to access gui applications outside the web the plan paves a path to higher and better integration of interactive web content or distracts from technical progress please provide comments to assist the group in improving this document comments on this document may be sent to publicpfwgcomments@worg archive comments should be made by  march  if possible the working group requests that comments be made by  february  to facilitate handling of comments at a scheduled meeting however comments arriving after that date will still be considered to assist you in your review refer to the history of changes to waiaria roadmap publication as a working draft does not imply endorsement by the wc membership this is a draft document and may be updated replaced or obsoleted by other documents at any time it is inappropriate to cite this document as other than work in progress this document was produced by a group operating under the  february  wc patent policy the group does not expect this document to become a wc recommendation wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy the disclosure obligations of the participants of this group are described in the charter table of contents  introduction  the problem  executive summary  the roadmap for filling the gaps in desktop browsers  roadmap deliverable timeline  implementations  the roadmap for middleware  a look ahead at filling the gaps in emerging declarative application middleware  external deliverable timeline  references  acknowledgments  participants active in the pfwg at the time of publication  other previously active pfwg participants and other contributors to the accessible rich internet applications specification  enabling funders  introduction according to the securityspace technology penetration report more than  of all web sites today contain javascript dramatically affecting the ability for persons with disabilities to access web content new rich internet applications rias render custom widgets modeling rich desktop components to perform ui updates without having to reload the entire page  much like a graphical user interface gui legacy gui accessibility frameworks address these issues through a comprehensive accessibility application programming interface api and infrastructure to foster interoperability with assistive technologies these apis constitute a contract between applications and assistive technologies such as screen readers to enable them to access rich dynamic content with the appropriate semantics needed to produce a usable alternative no such contract exists between modern rias and assistive technologies creating an accessibility gap for persons with disabilities unfortunately html and other markup does not provide adequate markup to support accessible dynamic content until now the wc wai has discouraged the use of javascript per web content accessibility guidelines wcag  wcag checkpoint  a number of wc initiatives are underway to address this problem using a declarative markup approach this roadmap is designed to create a bridge to fix the interoperability problem with assistive technologies now by incorporating the appropriate meta data in current xhtml markup to support todays accessibility api it will incorporate some of the advanced accessibility features originally designed in technologies like xhtml the intent of xhtml  is to make the enablement of web applications and documents easier for authors this roadmap will create crosscutting technologies that xhtml authors may incorporate in their markup to describe gui widgets and document structures to aide assistive technology vendors in providing accessible usable solutions the wc wai pf working group will work with user agent manufacturers and assistive technology vendors to ensure a working solution  the problem aspects of traditional html make accessible support of dynamic content difficult accessibility relies on abstracting semantics from both content and presentation information extracting semantic cues from current html content is typically unreliable today semantics are limited to tag elements names html allows content to be repurposed for presentation formatting without providing a way to convey semantic information a common example of this is tables used to format content rather than style sheets when combined with script and css html can be repurposed to create dynamic custom components without providing a means to convey semantic information to native accessibility architectures designed to support dynamic gui content html lacks the ability to attach meaningful metadata about document structure html elements commonly used for repurposing produce custom components that are not keyboard accessible authors of javascript generated content do not want to limit themselves to using standard tag elements that define the actual user interface element such as tables ordered lists etc rather they make extensive use of tag elements such as divs in which they dynamically apply a ui through the use of style sheets and dynamic content changes html div tags provide no semantic information for example authors may define a div as the start of a popup menu or even an ordered list however no html mechanism exists to identify the role of the div as a popup menu alert assistive technology when these elements have focus convey accessibility property information such as whether the popup menu is collapsed or expanded define what actions can be formed on the element other than through a devicedependent means through the event handler type onmouseover onclick etc in short javascript needs an accessibility architecture it can write to such that a solution could be mapped to the accessibility frameworks on the native platform by the user agent figure  accessibility interoperability at a dom node without javascript figure  illustrates a typical dom node in a modelviewcontroller architecture on the node data or the model which should include semantic information is separated from the user interface presentation the view here the document element is managed by the user agent based on the default behavior of the element the user agents default behavior at the document element forms the controller placed between the dom node and the assistive technology is a box containing the contract provided by the user agent to the assistive technology this data includes typical accessibility information found in the accessibility api for many of our accessible platforms for guis role state caret selection text hypertext name description parentchild information parentchild information and relations for html and other wc markup the accessibility information provided solely depends upon what the elements tag nameand any accessibility attributes that map to that tagprovides for example the accessible role of a table is table the author provides an accessible description by assigning a title attribute figure  accessibility interoperability at a dom node with javascript figure  shows the same dom node provided in figure  but with javascript acting as the new controller javascript overrides the default user agent behavior at the dom node it manipulates the data content and style in response to events caused by user interaction to produce custom widgets in this situation the default accessibility information is no longer valid and therefore the contract is now invalid figure  shows the contract with asterisks in front of role state actions value event changes and relations these asterisks represent potential accessibility errors and gaps in the base markup these gaps result from the authors inability to provide the new semantic data needed to support the contract  executive summary what is clear from the problem statement is that the author does not have the ability to provide the appropriate accessibility information in the markup to support the accessibility apis on the target platform this problem is not limited to html it extends to other markup including svg the wai protocols and formats working group will address the problem at the middleware application layer and web content delivered to desktop browsers for desktop browsers we shall be creating common extensions to both html and xhtml called the roles states and properties module for accessible rich internet applications  the goal will to make these standard features in html  the wc is also working on xhtml middleware solutions with a strong focus on declarative markup middleware developers prefer to operate on wellformed markup due to a common dependency to merge document fragments a growing focus on wc standards work is to use declarative markup which reduces the need for javascript new work being done on xforms and xhtml  targets incorporation accessibility features through the declarative markup of the language this has the added benefit of reducing the enablement burden on middleware authors by leveraging existing accessibility information stored in the markup ultimately middleware will need to convert the content to traditional markup supported by todays browsers  the roadmap for filling the gaps in desktop browsers at this time the primary effort in the wc wai protocols and formats working group is to focus on an extension to xhtml and html with a migration path to html  key deliverables will be the wai aria roles states and properties specification which includes a adapted version of the new role attribute from the xhtml role attribute module xhtmlroles for which a set of accessible role values may be applied from the aria roles specification in addition to its own standard role document landmarks to assist document navigation and restructuring for a detailed understanding of how the wai aria roles states and properties specification and how it is is used to fill the interoperability gaps in html and xhtml please refer to the wc wai aria primer  roadmap deliverable timeline editors note this timeline is under revision the following table is the anticipated delivery timeline for portions of the waiaria suite and possible related documents this is not a prescriptive timeline but is provided to track the relevant technologies timeline for the dynamic accessible web content roadmap specification wd  wd  wd  lc cr test suites implementation report pr rec accessible rich internet applications waiaria version  aria q  q  q  q  q  q  q  q  q  xhtml role attribute module xhtmlroles q  q  q  q  q  extensible waiaria tbd xhtml  support for waiaria tbd  implementations the following table provides implementations of the new accessibility specifications for supporting dynamic accessible web content implementations of accessibility specifications for aria content implementation category of implementation firefox  including msaa support user agent gw micro windoweyes   with firefox support assistive technology screen reader jaws  with firefox supportpartial assistive technology screen reader windows magnifier with ie or firefox  assistive technology magnifier firevox assistive technology screen reader internet explorer from dom api user agent opera mozilla firefox test samples content dojo javascript toolkit content  in development icita firefox accessibility extension testing tool accessibility test tool icita aria example widgets content mozilla firefox aria to accessibility api mapping user agent accessibility api mapping bindows object oriented platform for ajax development content  in development accprobe part of eclipse accessibility tools framework project test tool tool  in development wai role taxonomy extension tool tool  in development  the roadmap for middleware  a look ahead at filling the gaps in emerging declarative application middleware up to now  the roadmap has addressed current xhtml markup as supported by todays desktop browsers using aria the markup in todays browsers like accessibility requires developers to do things manually through the use of javascript while this is extremely flexible it suffers from a number of problems although improvements have occurred javascript does not behave the same on all browsers and platforms data models are inconsistent accessibility is bolted on rather than being built in accessibility solutions remain more devicedependent than they should be heavy accessibility lifting is done by the author in line with the way javascript is used through the use of declarative markup and tight integration of accessibility into the application framework we can produce more consistent crossplatform solutions which support accessibility and reduce the enablement efforts of the author at this time there are four new standards forming new application middleware which incorporate key accessibility features needed for accessibility xml events xml events allows the author to provide a purpose to event handlers allowing people with disabilities the ability to know what will happen if the action is performed such as making a purchase xforms xforms is a new forms specification that allows for semantic meta data to be stored directly in the form for example the aria required attribute was derived from the xforms data model property by using the standard xforms data model many accessibility properties found in aria can easily be extracted simply by following the xforms data model xforms also provides for device independent events declarative event handlers covering many of the use cases found in javascript from which accessibility information about actions that can be performed may be automatically derived xforms also provides support for labeling elements hints and help information for form elements which may be provided to platform accessibility api xhtml access module xhtmlaccess defines an element that when used in conjunction with other xhtml modules enables a more robust accessibility replacement to the html access key the xhtml access module allows the author to have the user agent assign keyboard mappings define whether an element is to receive focus or be activated passing a description for the access key and access key navigation sequencing using roles xhtml xhtml is being designing to build accessibility in from the ground floor xhtml  incorporates the role attribute document landmarks xforms xml events and a number of other accessibility features it introduces an access element designed to address device independence semantic navigation and activation it also benefits from the aria roles which is a crosscutting technology the xhtml  specification is still in working draft form a future list of the extensive accessibility features of xhtml  will be necessary xhtml  is evolving over time as an application middleware layer which can be used to generate xhtml content for a variety of mobile devices and user agents the wc wai pf working group will provide greater details in the future by creating a wc wai aria primer for middleware applications based on xhtml   external deliverable timeline editors note this timeline is under revision the following table is the anticipated delivery timeline for documents related to the waiaria work timeline for technologies related to waiaria specification timeline xhtml specification xhtml see xhtml working group roadmap xhtml access module xhtmlaccess see xhtml working group roadmap xml events xmlevents with handler descriptions not critical for xhtml see xhtml working group roadmap xforms  xforms see xforms schedule of deliverables  references aria accessible rich internet applications waiaria version  l seeman m cooper r schwerdtfeger l pappas editors wc working draft work in progress  february  this version of waiaria is available at httpwwwworgtrwdwaiaria latest version of waiaria available at httpwwwworgtrwaiaria ariaprimer waiaria primer l pappas r schwerdtfeger m cooper editors wc working draft work in progress  february  this version of waiaria primer is available at httpwwwworgtrwdwaiariaprimer latest version of waiaria primer available at httpwwwworgtrwaiariaprimer wcag web content accessibility guidelines  w chisholm g vanderheiden i jacobs editors wc recommendation  may  httpwwwworgtrwaiwebcontent latest version of wcag  available at httpwwwworgtrwaiwebcontent xforms xforms  third edition j boyer editor wc recommendation  october  httpwwwworgtrrecxforms latest version of xforms available at httpwwwworgtrxforms xhtml xhtml  m birbeck j axelsson s pemberton b epperson s mccarron m ishikawa a navarro m dubinko editors wc working draft work in progress  july  httpwwwworgtrwdxhtml latest version of xhtml  available at httpwwwworgtrxhtml xhtmlaccess xhtml access module s mccarron s pemberton t v raman m birbeck r schwerdtfeger editors wc working draft work in progress  january  httpwwwworgtrwdxhtmlaccess latest version of xhtml access module available at httpwwwworgtrxhtmlaccess xhtmlroles xhtml role attribute module t v raman m birbeck r schwerdtfeger s mccarron s pemberton editors wc working draft work in progress  october  httpwwwworgtrwdxhtmlrole latest version of xml role attribute module available at httpwwwworgtrxhtmlrole xmlevents xml events  m birbeck s mccarron editors wc working draft work in progress  february  httpwwwworgtrwdxmlevents latest version of xml events available at httpwwwworgtrxmlevents  acknowledgments this section is informative the following contributed to the development of this document  participants active in the pfwg at the time of publication chris blouch aol charles chen google michael cooper wcmit dimitar denev fit donald evans aol kentarou fukuda ibm alfred s gilman wc invited expert jon gunderson uiuc kenny johar vision australia diego la monica iwahwg aaron leventhal ibm thomas logan invited expert bayfirst solutions matt may adobe charles mccathienevile opera lisa pappas invited expert sas dave pawson rnib david poehlman invited expert state of md gregory rosmaita invited expert the linux foundation janina sajka invited expert the linux foundation stefan schnabel sap richard schwerdtfeger ibm lisa seeman ub access marc silbey microsoft mike squillace ibm gottfried zimmermann access technologies group  other previously active pfwg participants and other contributors to the accessible rich internet applications specification special thanks to aaron leventhal for effort and insight as he implemented a working prototype of accessibility api bindings jim allan tsbvi simon bates judy brewer wcmit christian cohrs becky gibson ibm andres gonzalez adobe georgios grigoriadis sap ag jeff grimes oracle barbara hartel sean hayes microsoft john hrvatin microsoft earl johnson sun masahiko kaneko microsoft jael kurz alex li sap ag william loughborough linda mao microsoft anders markussen opera dave pawson rnib tv raman google vitaly sourikov ryan williams oracle tom wlodkowski  enabling funders this publication has been funded in part with federal funds from the us department of education under contract number edco the content of this publication does not necessarily reflect the views or policies of the us department of education nor does mention of trade names commercial products or organizations imply endorsement by the us government