mbui  task models mbui  task models wc working group note  april  this version httpwwwworgtrnotetaskmodels latest published version httpwwwworgtrtaskmodels previous version httpwwwworgtrwdtaskmodels editors fabio patern isticnr carmen santoro isticnr lucio davide spano isticnr dave raggett wc copyright   wc mit ercim keio beihang all rights reserved wc liability trademark and document use rules apply abstract task models are useful when designing and developing interactive systems they describe the logical activities that have to be carried out in order to reach the users goals this document covers the specification of task models with a metamodel expressed in uml and an xml schema that can be used as the basis for interchange of task models between different user interface development tools status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document defines a metamodel and xml serialization for task models for describing user interfaces this is an update to the first public working draft to conform to the policy for wc namespace uris and to make minor changes to terminology this document has been published as a working group note to reflect the fact that the model based ui working group is no longer progressing it along the wc recommendation track a record of discussion relating to this specification can be found in the model based ui working groups email archive the email list is publicmbui@worg publication as a working group note does not imply endorsement by the wc membership this is a draft document and may be updated replaced or obsoleted by other documents at any time it is inappropriate to cite this document as other than work in progress this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy table of contents introduction specific requirements for task metamodel metamodel operators task categories task types additional task properties task meta model in uml examples xml schema definition description complete schema operators by languages references acknowledgements introduction interactive systems cover a wide range of possibilities eg the means for controlling a microwave oven or web applications where the user interface runs in a web browser and is coupled via http to backend services in the network task models provide a goaloriented description of interactive systems suitable for reviewing temporal relationships between tasks and their decomposition into subtasks but avoiding the need for the level of detail required for a full description of the user interface this makes it easier to talk through a user interface design without getting distracted by the details each task describes an activity that has to be carried out to fulfil the users goals tasks can be represented at various abstraction levels when designers only want to specify requirements on how activities should be carried out they just need to consider the main highlevel tasks on the other hand when designers aim to provide more precise design indications then the activities are represented at a finer granularity for example covering the temporal sequence of tasks to be carried out by the user or system as well as any preconditions for each task the purpose of this document is to define a standard for interchange of task models based on the widely adopted concurtasktrees ctt notation ctt is a visual notation for describing task models here is an example for the task of reserving a hotel room figure  example of a task model in the ctt notation this specification defines a metamodel and xml schema for interchange of task models based on the ctt notation but does not normatively define how such models should be visualized specific requirements for task metamodel in this section there are some requirements that have been specifically identified for task models req separation of static aspects from dynamic aspects req separation of the hierarchical structure from other aspects req possibility of relating task performance to the context of use even if modelling the context of use is not in the scope of this document req provide an initial taxonomy of task types optional usage the requirements are not normative and rather intended to give the reader a sense of the assumptions that underlay the notation metamodel this section defines a normative metamodel for the task model notation tasks have a hierarchical structure and use the set of temporal operators to describe the relations between them which are based on those used in ctt operators the operators include both nary operators and ary operators they are described in the following list interleaving t  t   tn the connected tasks can be performed concurrently without any specific constraint order independence tt   tn the tasks can be performed in any order synchronisation tt   tn the tasks are concurrent and can exchange information among them parallelism tt   tn the tasks are performed in true paralllelism choice tt  tn in this case it is possible to choose one task from a set of tasks and once the choice has been made the chosen task can be performed disabling tt  tn the lefthand task is deactivated once the righthand task has started suspendresume t  t  tn the righthand task interrupts the lefthand task one when it is finished the lefthand task can be reactivated from the state it was before the interruption enabling tt  tn there are two cases without information passing  when t completes it enables t when t completes it enables t and so forth through tn with information passing as before except information is passed from each completed task to the next task iteration t the task is performed iteratively when it terminates its execution is started again from the beginning optional t the task is optionally performed a comparison of which operators are supported in different task modelling languages is given in table  the temporal operators are all nary except iteration and optionality which are both unary the nary operator relationship is associated to n subtasks to model that nary operators are associated to the decomposition of a task into its subtasks the nary operators are associative and commutative except for disabling suspendresume and enabling which are associative but not commutative it is also worth pointing out that the operators have different priorities for nary operators the priority associated to each operator is expressed by the order in which it appears in the uml class diagram in figure  eg the choice is the operator which has the highest priority another key concept inherited from the ctt notation is task allocation how each task is to be carried out is indicated by the related category and is explicitly represented using different subclasses for each category there are four possibilities task categories user task  an internal cognitive activity such as selecting a strategy to solve a problem system task  performed by the application itself such as generating the results of a query interaction task  user actions that may result in immediate system feedback such as editing a diagram abstract task  a task that has subtasks belonging to different categories and thus cannot be allocated uniquely using the previous three categories task types designers can also classify tasks according to their semantics ie by giving each task a type it is important to note that each of the above categories has its own predefined set of task types thus such sets of predefined task types are indicated separately in the class diagram as defined below system tasks comparison  the system provides information that is useful for comparing pieces of information generatealerts  the system generates an alert feedback  the system provides feedback about some intensive computational activity grouping  the system provides pieces of information that are somehow grouped locate  the system provides information useful to locate something overview  the system provides an overview of some data interaction tasks single selection  the user interacts with the system to select one piece of information multiple selection  the user interacts with the system to select multiple pieces of information edit  the user interacts with the system to change some piece of information control  the user interacts with the system to trigger some functionality zooming  the user interacts with the system to change the level of detail presented eg zooming on a map or photograph filtering  the user interacts with the system to filter how some data is visualised eg to show some aspects and to hide others detailondemand  the user interacts with the system to ask for some detail on some item user tasks problemsolving  the user performs a cognitive activity to solve a problem comparing  the user performs a cognitive activity to compare pieces of information planning  the user performs some activity to plan what to do abstract tasks search information  the user performs an iterative search for a piece of information additional task types may be used for added flexibility in order to model this each task category has two attributes predef_type which contains the task type when it is included in the predefined set of tasks already identified ext_type which contains the task type in case a new task type has to be defined additional task properties it is possible to specify additional information associated with each task through a number of attributes for instance it is possible to specify the context of use that supports the task concerned if there are tasks that are meaningful only for some contexts of use modelling the context of use is out of the scope of this document in addition for each task it is possible to specify the domain objects that are manipulated by the task and whether they are readonly or can be updated task meta model in uml figure  shows the class diagram representing the task metamodel a task model is composed of a set of tasks a subtask relation is defined among them and nary operators are associated with the n subtasks of a task figure  main aspects of the task metamodel each task can be associated with one or multiple domain objects that it can manipulate in addition each task has a number of propertiesattributes an identifier the context of use indicating what contexts are suitable for its performance informal description and so forth moreover since the execution of a task is often subject to the availability of a given resource or depends on the value of a certain variable in order to express such dependencies the language contains the precondition and postcondition classes preconditions indicate what must be true before the task is carried out while postconditions indicate what will be true after task execution a precondition which can occur or not as associated to a certain task see related multiplicity  in figure  is an instance of the conditiongroup class it returns a boolean value which is obtained by applying the logical operators to the operands an operand is a conditionliteral which can be used to represent values it can be either a constant or a variable manipulated during the task execution in the former case the value is expressed by the value attribute of the valueliteral subclass in the latter it is expressed by the domainobjectliteral class which represents a reference to a domain object manipulated by the task itself an operand can also be represented in turn by a conditiongroup in order to create complex boolean expressions the operators express the boolean relation between the operands an operator can be one of the following and or xor contains stars ends greater than greater than or equals to less than less than or equals to equals to not equals this hierarchical structure of preconditions allows the representation of complex conditions the same structure is also possible for specifying postconditions associated to the tasks the following is the list of classes contained in figure  class task composition from task to task associated with naryoperator association domain object cardinality minimum zero maximum unbounded association conditiongroup name precondition cardinality minimum zero maximum one association conditiongroup name postcondition cardinality minimum zero maximum one association aryoperator cardinality minimum zero maximum two attribute identifier string attribute name string attribute frequency string attribute contextofuse string attribute descriptionstring class user superclass task attribute predef_type enum attribute ext_type string class abstract superclass task attribute predef_type enum attribute ext_type string class system superclass task attribute predef_type enum attribute ext_type string class interaction superclass task attribute predef_type enum attribute ext_type string class domainobject enumeration class naryoperator association composition subtask cardinality role task minimum zero maximum one  cardinality role subtask minimum zero or two maximum n constant choice constant order_independence constant interleaving constant parallelism constant synchronisation constant disabling constant suspend_resume constant enabling enumeration class aryoperator association task cardinality  constant optional constant iterative class conditiongroup aggregation from conditiongroup to conditiongroup name operand aggregation from conditionliteral to conditiongroup name operand association logicoperator name operator cardinality  association taskname precondition cardinality one association taskname postcondition cardinality one class conditionliteral aggregation from conditionliteral to conditiongroup name operand class valueliteral superclass conditionliteral attribute value string class domainobjectliteral superclass conditionliteral attribute domain_object string class logicoperator association conditiongroup name operator cardinality  examples the example below see figure  has been taken from the serenoa project it is about a case study on a car rental service which the user can access in order to reserve a car to this goal users have to specify a number of characteristics they are searching for about the car also providing some other information about themselves name surname address city then the user can submit the request and the service responds with the list of results in the following we will specify the task model as a nested list of tasks where nesting is used to model the hierarchy between parent and children in addition for each task we will specify in brackets beside its name the relationships in which the concerned task is involved please also note that in this example all the tasks are interactive apart two tasks access service and show results which are application tasks the first access service models the system task access the service for doing the search with the parameters provided by the user the second one is the system task that is in charge of showing the results to the user figure  a task model example modelled through ctt notation  make car reservation this is the root task  enter info enter info disabling submit request any time during the execution of the task for entering information the user can decide to submit the search request  enter car info enter car info interleaving enter user info the two tasks can be carried out in a concurrent way  enter category enter category interleaving enter colour  enter colour enter category interleaving enter colour interleaving enter model  enter model enter colour interleaving enter model interleaving enter engine  enter engine enter model interleaving enter engine interleaving enter colour  enter user info enter car info interleaving enter user info interleaving enter other info  enter name enter name interleaving enter surname  enter surname enter name interleaving enter surname interleaving enter address  enter address enter surname interleaving enter address interleaving enter city  enter city enter address interleaving enter city interleaving enter zip code  enter zip code enter city interleaving enter zip code interleaving enter country  enter country enter zip code interleaving enter country interleaving enter gender  enter gender enter country interleaving enter gender interleaving enter birthdate  enter birthdate enter gender interleaving enter birthdate interleaving enter email  enter email enter birthdate interleaving enter email  enter other info enter user info interleaving enter other info interleaving set preference  enter comments enter comments interleaving enter max budget  enter max budget enter comments interleaving enter max budget  set preferences enter other info interleaving set preferences  submit request enter info disabling submit request sequential enabling with info access service the task called submit request can disable at any moment the execution of the task for entering information the execution of the submission of the request also implies that the parameters are passed to the system task that has to carry out the search  access service submit request sequential enabling withinfo access service sequential enabling with info show results  show results access service sequential enabling with info show results xml schema definition description the root element of the schema is the taskmodel having a complex type whose definition includes a group named categorygroup indicating the allocation of a task usersysteminteractionabstract and containing an attribute for specifying its identifier taskmodelid the task element contains all the sub elements and attributes for the specification of a task such element contains the following elements description a humanreadable task description precondition a structured precondition on the task execution postcondition a structured postcondition on the task execution unaryoperatorgroup the unary operators associated with the task iterative if the task is iterativeoptional if the task is optional naryoperatorgroup the list of subtasks if any enclosed by a tag representing the nary operator that connects them contextofuse the suitable context for carrying out the task domainobject the list of objects manipulated by the current task in addition it contains the following attributes identifier a unique task identifier name a human readable task name frequency the task execution frequency the naryoperatorgroup definition contains a choice among elements representing a different nary temporal operator each one of these elements contains the definition of a subtask list subtask type such list is represented by a group that defines the task category user system interaction abstract and its type according to the class hierarchy defined by the meta model the possible task types have been indicated beforehand the conditiongroup complex type contains one of the following elements conditionliteral which represents a literal value or object represented as different elements conditiongroup which represents an expression of conditionliterals or conditiongroups also mixed as a list of elements it contains also the operator attribute that contains the boolean operator for the expression the possible values for the nary temporal operators are the following choice interleaving orderindependence synchronisation disabling suspendresume enabling parallelism the nary operators are repesented as tags that include the connected subtasks for instance a sequence of three interaction subtasks is represented with a enabling tag that contains tree interaction tags complete schema xml version encodingisoxsschema xmlnshttpwwwworgmbuitaskmodels        elementformdefaultqualified        targetnamespacehttpwwwworgmbuitaskmodels        xmlnsxshttpwwwworgxmlschema        xselement nametaskmodel                xscomplextype                        xssequence                                xsgroup refcategorygroup minoccurs maxoccurs                        xssequence                        xsattribute nametaskmodelid typexsstring                                userequired                 xscomplextype        xselement        xscomplextype nametask                xssequence                        xselement namedescription typexsstring minoccurs                        xselement nameprecondition typeconditiongroup minoccurs                        xselement namepostcondition typeconditiongroup minoccurs                        xsgroup refunaryoperatorgroup minoccurs maxoccurs                        xsgroup refnaryoperatorgroup minoccurs maxoccursunbounded                        xselement minoccurs maxoccursunbounded namecontextofuse typexsqname                         xselement minoccurs maxoccursunbounded namedomainobject typexsqname                 xssequence                xsattribute nameidentifier typexsstring userequired                 xsattribute namename typexsstring                 xsattribute namefrequency typexsstring        xscomplextype        xscomplextype namesubtask                xssequence minoccurs maxoccurs                        xsgroup refcategorygroup minoccurs maxoccursunbounded                xssequence        xscomplextype        xsgroup nameunaryoperatorgroup                xssequence                        xselement nameoptional typeunaryoperator                         xselement nameiterative typeunaryoperator                xssequence        xsgroup        xsgroup namenaryoperatorgroup                xschoice                        xselement namechoice typesubtask                        xselement nameinterleaving typesubtask                        xselement nameorderindependence typesubtask                        xselement namesynchronization typesubtask                        xselement namedisabling typesubtask                        xselement namesuspendresume typesubtask                        xselement nameenabling typesubtask                        xselement nameparallelism typesubtask                xschoice        xsgroup        xsgroup namecategorygroup                xschoice                        xselement typeuser nameuser                        xselement typesystem namesystem                         xselement typeinteraction nameinteraction                        xselement typeabstract nameabstract                xschoice        xsgroup        xscomplextype nameunaryoperator                xsattribute namevalue typexsboolean defaulttrue        xscomplextype        xscomplextype nameuser                xscomplexcontent                        xsextension basetask                                xsattribute namepredef_type typeusertypeenum                                xsattribute nameext_type typexsstring                        xsextension                xscomplexcontent        xscomplextype        xscomplextype namesystem                xscomplexcontent                        xsextension basetask                                xsattribute namepredef_type typesystemtypeenum                                xsattribute nameext_type typexsstring                        xsextension                xscomplexcontent        xscomplextype        xscomplextype nameinteraction                xscomplexcontent                        xsextension basetask                                xsattribute namepredef_type typeinteractiontypeenum                                xsattribute nameext_type typexsstring                        xsextension                xscomplexcontent        xscomplextype        xscomplextype nameabstract                xscomplexcontent                        xsextension basetask                                xsattribute namepredef_type typeabstracttypeenum                                xsattribute nameext_type typexsstring                        xsextension                xscomplexcontent        xscomplextype         structured precondition modeling         xscomplextype nameconditiongroup                xschoice minoccurs maxoccursunbounded                        xselement nameconditiongroup typeconditiongroup                         xsgroup refconditionliteral                xschoice                xsattribute nameoperator typelogicoperator         xscomplextype        xsgroup nameconditionliteral                xschoice                        xselement namevalueliteral typevalueliteral                        xselement namedomainobjectliteral typedomainobjectliteral                xschoice        xsgroup        xscomplextype namevalueliteral                xsattribute userequired namevalue typexsstring        xscomplextype        xscomplextype namedomainobjectliteral                xsattribute userequired namedomain_object typexsstring        xscomplextype         simple types         xssimpletype nameusertypeenum                xsrestriction basexsnmtoken                        xsenumeration valueproblemsolving                        xsenumeration valuecomparing                        xsenumeration valueplanning                 xsrestriction        xssimpletype        xssimpletype namesystemtypeenum                xsrestriction basexsnmtoken                        xsenumeration valuecomparison                        xsenumeration valuegeneratealerts                        xsenumeration valuefeedback                         xsenumeration valuegrouping                         xsenumeration valuelocate                         xsenumeration valueoverview                 xsrestriction        xssimpletype        xssimpletype nameinteractiontypeenum                xsrestriction basexsnmtoken                        xsenumeration valuesingleselection                        xsenumeration valuemultipleselection                        xsenumeration valueedit                         xsenumeration valuecontrol                         xsenumeration valuezooming                         xsenumeration valuefiltering                         xsenumeration valuedetailondemand                 xsrestriction        xssimpletype        xssimpletype nameabstracttypeenum                xsrestriction basexsnmtoken                        xsenumeration valuesearchinformation                xsrestriction        xssimpletype        xssimpletype namelogicoperator                xsrestriction basexsstring                        xsenumeration valueand idand                         xsenumeration valueor idor                         xsenumeration valuexor idxor                         xsenumeration valuecontains idcontains                         xsenumeration valuestarts idstarts                         xsenumeration valueends idends                         xsenumeration valuegt idgt                         xsenumeration valuegteq idgteq                         xsenumeration valuelteq idlteq                         xsenumeration valuelt idlt                         xsenumeration valueeq ideq                         xsenumeration valueneq idneq                 xsrestriction        xssimpletypexsschema operators by languages the following table shows which operators are supported by a range of task modelling languages table  operators used in different modelling languages order independence choice concurrency suspend and resume deactivation enabling amboss mistrzyk yes yes yes no no yes cpmgoms john no no yes no no yes ctt paterno yes yes yes yes yes yes diane tarby no no yes no no yes goms card no no no no no yes gta vanderveer no no no no no yes kmad baron yes yes yes no no yes lotos eijk no yes yes no yes yes mad scapin yes no yes no no yes tadeus schlungbaum no no no no no yes taospec dittmar  no yes yes no no yes tks johnson yes yes yes no no yes taskmodl traettberg yes yes no no no yes tombola uhr yes yes yes no no yes uan hix yes no yes no yes yes useml meixner yes yes yes no yes yes vtmb biere yes yes yes no no yes xuan gray yes yes yes no no yes references baron baron m lucquiaud v autard d et al kmade un environement pour le noyau du modle de description de lactivit proc of the th frenchspeaking conference on humancomputerinteraction montreal kanada  biere biere m bomsdorf b szwillus g specification and simulation of task models with vtmb in proc of the th annual chi conference on human factors in computing systems new york  card card s k moran t p newell a the psychology of humancomputer interaction lawrence erlbaum associates  dittmar  dittmar a forbrig p higherorder task models in proc of the th international workshop on interactive systems design specification and verification   eijk eijk phj van vissers ca e daz m the formal description technique lotos results of the espritsedos project northholland  gray gray p england d mcgowan s xuan enhancing uan to capture temporal relationships among actions in proc of the conference on people and computers ix  hix hix d hartson r developing user interfaces ensuring usability through product  process new york john wiley  sons  john john b kieras d the goms familiy of analysis techniques tools for design and evaluation carnegie mellon university school of computer science technical report no cmucs  johnson johnson p johnson h waddington r et al taskrelated knowledge structures analysis modeling and application in proc of the th conference of the british computer society on people and computers   meixner meixner g seiler m breiner k modeldriven useware engineering in modeldriven development of advanced user interfaces springer   mistrzyk mistrzyk t szwillus g modellierung sicherheitskritischer kommunikation mit aufgabenmodellen in icom    paterno patern f modelbased design and evaluation of interactive applications london springer  paterno patern f santoro c spano l d improving support for visual task modelling  scapin scapin d pierretgolbreich c towards a method for task description mad in proc of the conference work with displayunits   schlungbaum schlungbaum e knowledgebased support of taskbased user interface design in tadeus proc of the th annual chi conference on human factors in computing systems  shneiderman  shneiderman bthe eyes have it a task by data type taxonomy for information visualizations ieee symposium on visual languages boulder  p tarby tarby j c barthet m f the diane method in proc of the nd international conference on computeraided design of user interfaces   traettberg traettberg h modelbased user interface design phd thesis norwegian university of science and technology  uhr uhr h die definition und ausfhrung von benutzerspezifischen webprozessen mit tombola konferenz der gesellschaft fr informatik   vanderveer van der veer g lenting b bergevoet b gta groupware task analysis  modeling complexity acta psychologica    acknowledgements we acknowledge the following people who contributed to the preparation of this document franois beuvens paolo bottoni galle calvary joelle coutaz gerrit meixner vivian motti