owl  web ontology language mapping to rdf graphs second edition owl  web ontology language mapping to rdf graphs second edition wc recommendation  december  this version httpwwwworgtrrecowlmappingtordf latest version series  httpwwwworgtrowlmappingtordf latest recommendation httpwwwworgtrowlmappingtordf previous version httpwwwworgtrperowlmappingtordf editors peter f patelschneider nuance communications boris motik university of oxford contributors in alphabetical order bernardo cuenca grau university of oxford ian horrocks university of oxford bijan parsia university of manchester alan ruttenberg science commons creative commons michael schneider fzi research center for information technology please refer to the errata for this document which may include some normative corrections a colorcoded version of this document showing changes made since the previous version is also available this document is also available in these nonnormative formats pdf version see also translations copyright   wc mit ercim keio all rights reserved wc liability trademark and document use rules apply abstract the owl  web ontology language informally owl  is an ontology language for the semantic web with formally defined meaning owl  ontologies provide classes properties individuals and data values and are stored as semantic web documents owl  ontologies can be used along with information written in rdf and owl  ontologies themselves are primarily exchanged as rdf documents the owl  document overview describes the overall state of owl  and should be read before other owl  documents this document defines the mapping of owl  ontologies into rdf graphs and vice versa status of this document may be superseded this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr summary of changes there have been no substantive changes since the previous version for details on the minor changes see the change log and colorcoded diff please send comments please send any comments to publicowlcomments@worg public archive although work on this document by the owl working group is complete comments may be addressed in the errata or in future revisions open discussion among developers is welcome at publicowldev@worg public archive endorsed by wc this document has been reviewed by wc members by software developers and by other wc groups and interested parties and is endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web patents this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent table of contents  introduction and preliminaries  mapping from the structural specification to rdf graphs  translation of axioms without annotations  translation of annotations  translation of axioms with annotations  axioms that generate a main triple  axioms that are translated to multiple triples  axioms represented by blank nodes  mapping from rdf graphs to the structural specification  extracting declarations and the iris of the directly imported ontology documents  resolving included rdf graphs  parsing of the ontology header and declarations  populating an ontology  analyzing declarations  parsing of annotations  parsing of ontology annotations  parsing of expressions  parsing of axioms  appendix change log informative  changes since recommendation  changes since proposed recommendation  changes since candidate recommendation  changes since last call  acknowledgments  references  introduction and preliminaries this document defines two mappings between the structural specification of owl  owl  specification and rdf graphs rdf concepts the mapping presented in section  can be used to transform any owl  ontology o into an rdf graph to the mapping presented in section  can be used to transform an rdf graph g satisfying certain restrictions into an owl  dl ontology og these transformations do not incur any change in the formal meaning of the ontology more precisely for any owl  dl ontology o let g  to be the rdf graph obtained by transforming o as specified in section  and let og be the owl  dl ontology obtained by applying the reverse transformation from section  to g then o and og are logically equivalent  that is they have exactly the same set of models the mappings presented in this document are backwardscompatible with that of owl  dl every owl  dl ontology encoded as an rdf graph can be mapped into a valid owl  dl ontology using the mapping from section  such that the resulting owl  dl ontology has exactly the same set of models as the original owl  dl ontology the syntax for triples used in this document is the one used in the rdf semantics rdf semantics full iris are abbreviated using the prefixes from the owl  specification owl  specification owl  ontologies mentioned in this document should be understood as instances of the structural specification of owl  owl  specification when required these are written in this document using the functionalstyle syntax the following notation is used throughout this document for referring to parts of rdf graphs x denotes an iri _x denotes a blank node x denotes a blank node or an iri lt denotes a literal and xlt denotes a blank node an iri or a literal the italicized keywords must must not should should not and may are used to specify normative features of owl  documents and tools and are interpreted as specified in rfc  rfc   mapping from the structural specification to rdf graphs this section defines a mapping of an owl  ontology o into an rdf graph to the mapping is presented in three parts section  shows how to translate axioms that do not contain annotations section  shows how to translate annotations and section  shows how to translate axioms containing annotations  translation of axioms without annotations table  presents the operator t that maps an owl  ontology o into an rdf graph to provided that no axiom in o is annotated the mapping is defined recursively that is the mapping of a construct often depends on the mappings of its subconstructs but in a slightly unusual way if the mapping of a construct refers to the mapping of a subconstruct then the triples generated by the recursive invocation of the mapping on the subconstruct are added to the graph under construction and the main node of the mapping of the subconstruct is used in place of the recursive invocation itself the definition of the operator t uses the operator tann in order to translate annotations the operator tann is defined in section  it takes an annotation and an iri or a blank node and produces the triples that attach the annotation to the supplied object in the mapping each generated blank node ie each blank node that does not correspond to an anonymous individual is fresh in each application of a mapping rule furthermore possible conditions on the mapping rules are enclosed in curly braces   finally the following conventions are used in this section to denote different parts of owl  ontologies op denotes an object property ope denotes an object property expression dp denotes a data property dpe denotes a data property expression ap denotes an annotation property c denotes a class ce denotes a class expression dt denotes a datatype dr denotes a data range u denotes an iri f denotes a constraining facet a denotes an individual named or anonymous a denotes a named individual lt denotes a literal as denotes an annotation source and av denotes an annotation value in this section tseq y  yn denotes the translation of a sequence of objects from the structural specification into an rdf list as shown in table  table  transformation to triples element e of the structural specification triples generated in an invocation of te main node of te seq rdfnil seq y  yn _x rdffirst ty  _x rdfrest tseq y  yn  _x ontology ontologyiri  versioniri  import importedontologyiri   import importedontologyirik  annotation  annotationm axiom  axiomn  ontologyiri rdftype owlontology   ontologyiri owlversioniri versioniri   ontologyiri owlimports importedontologyiri   ontologyiri owlimports importedontologyirik  tannannotation ontologyiri   tannannotationm ontologyiri  taxiom   taxiomn  ontologyiri ontology import importedontologyiri   import importedontologyirik  annotation  annotationm axiom  axiomn  _x rdftype owlontology  _x owlimports importedontologyiri   _x owlimports importedontologyirik  tannannotation _x   tannannotationm _x  taxiom   taxiomn  _x c c dt dt op op dp dp ap ap u u a a abc@rdfplainliteral abc abc@langtagrdfplainliteral abc@langtag lt  where lt is a literal of datatype other than rdfplainliteral  lt declaration datatype dt   tdt rdftype rdfsdatatype  declaration class c   tc rdftype owlclass  declaration objectproperty op   top rdftype owlobjectproperty  declaration dataproperty dp   tdp rdftype owldatatypeproperty  declaration annotationproperty ap   tap rdftype owlannotationproperty  declaration namedindividual a   ta rdftype owlnamedindividual  objectinverseof op  _x owlinverseof top  _x dataintersectionof dr  drn  _x rdftype rdfsdatatype  _x owlintersectionof tseq dr  drn  _x dataunionof dr  drn  _x rdftype rdfsdatatype  _x owlunionof tseq dr  drn  _x datacomplementof dr  _x rdftype rdfsdatatype  _x owldatatypecomplementof tdr  _x dataoneof lt  ltn  _x rdftype rdfsdatatype  _x owloneof tseq lt  ltn  _x datatyperestriction dt f lt  fn ltn  _x rdftype rdfsdatatype  _x owlondatatype tdt  _x owlwithrestrictions tseq _y  _yn  _y f lt   _yn fn ltn  _x objectintersectionof ce  cen  _x rdftype owlclass  _x owlintersectionof tseq ce  cen  _x objectunionof ce  cen  _x rdftype owlclass  _x owlunionof tseq ce  cen  _x objectcomplementof ce  _x rdftype owlclass  _x owlcomplementof tce  _x objectoneof a  an  _x rdftype owlclass  _x owloneof tseq a  an  _x objectsomevaluesfrom ope ce  _x rdftype owlrestriction  _x owlonproperty tope  _x owlsomevaluesfrom tce  _x objectallvaluesfrom ope ce  _x rdftype owlrestriction  _x owlonproperty tope  _x owlallvaluesfrom tce  _x objecthasvalue ope a  _x rdftype owlrestriction  _x owlonproperty tope  _x owlhasvalue ta  _x objecthasself ope  _x rdftype owlrestriction  _x owlonproperty tope  _x owlhasself truexsdboolean  _x objectmincardinality n ope  _x rdftype owlrestriction  _x owlonproperty tope  _x owlmincardinality nxsdnonnegativeinteger  _x objectmincardinality n ope ce  _x rdftype owlrestriction  _x owlonproperty tope  _x owlminqualifiedcardinality nxsdnonnegativeinteger  _x owlonclass tce  _x objectmaxcardinality n ope  _x rdftype owlrestriction  _x owlonproperty tope  _x owlmaxcardinality nxsdnonnegativeinteger  _x objectmaxcardinality n ope ce  _x rdftype owlrestriction  _x owlonproperty tope  _x owlmaxqualifiedcardinality nxsdnonnegativeinteger  _x owlonclass tce  _x objectexactcardinality n ope  _x rdftype owlrestriction  _x owlonproperty tope  _x owlcardinality nxsdnonnegativeinteger  _x objectexactcardinality n ope ce  _x rdftype owlrestriction  _x owlonproperty tope  _x owlqualifiedcardinality nxsdnonnegativeinteger  _x owlonclass tce  _x datasomevaluesfrom dpe dr  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlsomevaluesfrom tdr  _x datasomevaluesfrom dpe  dpen dr  n   _x rdftype owlrestriction  _x owlonproperties tseq dpe  dpen  _x owlsomevaluesfrom tdr  _x dataallvaluesfrom dpe dr  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlallvaluesfrom tdr  _x dataallvaluesfrom dpe  dpen dr  n   _x rdftype owlrestriction  _x owlonproperties tseq dpe  dpen  _x owlallvaluesfrom tdr  _x datahasvalue dpe lt  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlhasvalue tlt  _x datamincardinality n dpe  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlmincardinality nxsdnonnegativeinteger  _x datamincardinality n dpe dr  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlminqualifiedcardinality nxsdnonnegativeinteger  _x owlondatarange tdr  _x datamaxcardinality n dpe  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlmaxcardinality nxsdnonnegativeinteger  _x datamaxcardinality n dpe dr  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlmaxqualifiedcardinality nxsdnonnegativeinteger  _x owlondatarange tdr  _x dataexactcardinality n dpe  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlcardinality nxsdnonnegativeinteger  _x dataexactcardinality n dpe dr  _x rdftype owlrestriction  _x owlonproperty tdpe  _x owlqualifiedcardinality nxsdnonnegativeinteger  _x owlondatarange tdr  _x subclassof ce ce  tce rdfssubclassof tce  equivalentclasses ce  cen  tce owlequivalentclass tce   tcen owlequivalentclass tcen  disjointclasses ce ce  tce owldisjointwith tce  disjointclasses ce  cen  n   _x rdftype owlalldisjointclasses  _x owlmembers tseq ce  cen  disjointunion c ce  cen  tc owldisjointunionof tseq ce  cen  subobjectpropertyof ope ope  tope rdfssubpropertyof tope  subobjectpropertyof objectpropertychain ope  open  ope  tope owlpropertychainaxiom tseq ope  open  equivalentobjectproperties ope  open  tope owlequivalentproperty tope   topen owlequivalentproperty topen  disjointobjectproperties ope ope  tope owlpropertydisjointwith tope  disjointobjectproperties ope  open  n   _x rdftype owlalldisjointproperties  _x owlmembers tseq ope  open  objectpropertydomain ope ce  tope rdfsdomain tce  objectpropertyrange ope ce  tope rdfsrange tce  inverseobjectproperties ope ope  tope owlinverseof tope  functionalobjectproperty ope  tope rdftype owlfunctionalproperty  inversefunctionalobjectproperty ope  tope rdftype owlinversefunctionalproperty  reflexiveobjectproperty ope  tope rdftype owlreflexiveproperty  irreflexiveobjectproperty ope  tope rdftype owlirreflexiveproperty  symmetricobjectproperty ope  tope rdftype owlsymmetricproperty  asymmetricobjectproperty ope  tope rdftype owlasymmetricproperty  transitiveobjectproperty ope  tope rdftype owltransitiveproperty  subdatapropertyof dpe dpe  tdpe rdfssubpropertyof tdpe  equivalentdataproperties dpe  dpen  tdpe owlequivalentproperty tdpe   tdpen owlequivalentproperty tdpen  disjointdataproperties dpe dpe  tdpe owlpropertydisjointwith tdpe  disjointdataproperties dpe  dpen  n   _x rdftype owlalldisjointproperties  _x owlmembers tseq dpe  dpen  datapropertydomain dpe ce  tdpe rdfsdomain tce  datapropertyrange dpe dr  tdpe rdfsrange tdr  functionaldataproperty dpe  tdpe rdftype owlfunctionalproperty  datatypedefinition dt dr  tdt owlequivalentclass tdr  haskey ce  ope  opem   dpe  dpen   tce owlhaskey tseq ope  opem dpe  dpen   sameindividual a  an  ta owlsameas ta   tan owlsameas tan  differentindividuals a a  ta owldifferentfrom ta  differentindividuals a  an  n   _x rdftype owlalldifferent  _x owlmembers tseq a  an  classassertion ce a  ta rdftype tce  objectpropertyassertion op a a  ta top ta  objectpropertyassertion objectinverseof op  a a  ta top ta  negativeobjectpropertyassertion ope a a  _x rdftype owlnegativepropertyassertion  _x owlsourceindividual ta  _x owlassertionproperty tope  _x owltargetindividual ta  datapropertyassertion dpe a lt  ta tdpe tlt  negativedatapropertyassertion dpe a lt  _x rdftype owlnegativepropertyassertion  _x owlsourceindividual ta  _x owlassertionproperty tdpe  _x owltargetvalue tlt  annotationassertion ap as av  tas tap tav  subannotationpropertyof ap ap  tap rdfssubpropertyof tap  annotationpropertydomain ap u  tap rdfsdomain tu  annotationpropertyrange ap u  tap rdfsrange tu   translation of annotations the operator tann which translates annotations and attaches them to an iri or a blank node is defined in table  table  translation of annotations annotation ann triples generated in an invocation of tannann y annotation ap av  ty tap tav  annotation annotation  annotationn ap av  ty tap tav  _x rdftype owlannotation  _x owlannotatedsource ty  _x owlannotatedproperty tap  _x owlannotatedtarget tav  tannannotation _x  tannannotationn _x let ann be the following annotation annotation rdfslabel peter griffin  an invocation of tannann apeter then produces the following triples apeter rdfslabel peter griffin  let ann be the following annotation which is itself annotated annotation annotation aauthor aseth_macfarlane  rdfslabel peter griffin  an invocation of tannann apeter then produces the following triples apeter rdfslabel peter griffin  _x rdftype owlannotation  _x owlannotatedsource apeter  _x owlannotatedproperty rdfslabel  _x owlannotatedtarget peter griffin  _x aauthor aseth_macfarlane   translation of axioms with annotations if an axiom ax contains embedded annotations annotation  annotationm its serialization into rdf depends on the type of the axiom let ax be the axiom that is obtained from ax by removing all axiom annotations  axioms that generate a main triple if the row of table  corresponding to the type of ax contains a single main triple s p xlt  then the axiom ax is translated into the following triples s p xlt  _x rdftype owlaxiom  _x owlannotatedsource s  _x owlannotatedproperty p  _x owlannotatedtarget xlt  tannannotation _x  tannannotationm _x this is the case if ax is of type subclassof disjointclasses with two classes subobjectpropertyof without a property chain as the subproperty expression subdatapropertyof objectpropertydomain datapropertydomain objectpropertyrange datapropertyrange inverseobjectproperties functionalobjectproperty functionaldataproperty inversefunctionalobjectproperty reflexiveobjectproperty irreflexiveobjectproperty symmetricobjectproperty asymmetricobjectproperty transitiveobjectproperty disjointobjectproperties with two properties disjointdataproperties with two properties classassertion objectpropertyassertion datapropertyassertion declaration differentindividuals with two individuals or annotationassertion consider the following subclass axiom subclassof annotation rdfscomment children are people  achild aperson  without the annotation the axiom would be translated into the following triple achild rdfssubclassof aperson  thus the annotated axiom is transformed into the following triples achild rdfssubclassof aperson  _x rdftype owlaxiom  _x owlannotatedsource achild  _x owlannotatedproperty rdfssubclassof  _x owlannotatedtarget aperson  _x rdfscomment children are people  for ax of type disjointunion subobjectpropertyof with a subproperty chain or haskey the first triple from the corresponding row of table  is the main triple and it is subjected to the transformation described above the other triples from the corresponding row of table   called side triples  are output without any change consider the following subproperty axiom subobjectpropertyof annotation rdfscomment an aunt is a mothers sister  objectpropertychain ahasmother ahassister  ahasaunt   without the annotation the axiom would be translated into the following triples ahasaunt owlpropertychainaxiom _y _y rdffirst ahasmother  _y rdfrest _y  _y rdffirst ahassister  _y rdfrest rdfnil  in order to capture the annotation on the axiom the first triple plays the role of the main triple for the axiom so it is represented using a fresh blank node _x in order to be able to attach the annotation to it the original triple is output alongside all other triples as well _x rdftype owlaxiom  _x owlannotatedsource ahasaunt  _x owlannotatedproperty owlpropertychainaxiom  _x owlannotatedtarget _y  _x rdfscomment an aunt is a mothers sister  ahasaunt owlpropertychainaxiom _y _y rdffirst ahasmother  _y rdfrest _y  _y rdffirst ahassister  _y rdfrest rdfnil  consider the following key axiom haskey annotation rdfscomment ssn uniquely determines a person  aperson   ahasssn   without the annotation the axiom would be translated into the following triples aperson owlhaskey _y  _y rdffirst ahasssn  _y rdfrest rdfnil  in order to capture the annotation on the axiom the first triple plays the role of the main triple for the axiom so it is represented using a fresh blank node _x in order to be able to attach the annotation to it _x rdftype owlaxiom  _x owlannotatedsource aperson  _x owlannotatedproperty owlhaskey  _x owlannotatedtarget _y  _x rdfscomment ssn uniquely determines a person  aperson owlhaskey _y  _y rdffirst ahasssn  _y rdfrest rdfnil   axioms that are translated to multiple triples if the axiom ax is of type equivalentclasses equivalentobjectproperties equivalentdataproperties or sameindividual its translation into rdf can be broken up into several rdf triples because rdf can only represent binary relations in this case each of the rdf triples obtained by the translation of ax is transformed as described in previous section and the annotations are repeated for each of the triples obtained in the translation consider the following individual equality axiom sameindividual annotation asource afox  ameg amegan amegan_griffin  this axiom is first split into the following equalities between pairs of individuals and the annotation is repeated on each axiom obtained in this process sameindividual annotation asource afox  ameg amegan  sameindividual annotation asource afox  amegan amegan_griffin  each of these axioms is now transformed into triples as explained in the previous section ameg owlsameas amegan  _x rdftype owlaxiom  _x owlannotatedsource ameg  _x owlannotatedproperty owlsameas  _x owlannotatedtarget amegan  _x asource afox  amegan owlsameas amegan_griffin  _x rdftype owlaxiom  _x owlannotatedsource amegan  _x owlannotatedproperty owlsameas  _x owlannotatedtarget amegan_griffin  _x asource afox   axioms represented by blank nodes if the axiom ax is of type negativeobjectpropertyassertion negativedatapropertyassertion disjointclasses with more than two classes disjointobjectproperties with more than two properties disjointdataproperties with more than two properties or differentindividuals with more than two individuals then its translation already requires introducing a blank node _x in such cases ax is translated by first translating ax into _x as shown in table  and then attaching the annotations of ax to _x consider the following negative object property assertion negativeobjectpropertyassertion annotation aauthor aseth_macfarlane  abrotherof achris astewie  even without the annotation this axiom would be represented using a blank node the annotation can readily be attached to this node so the axiom is transformed into the following triples _x rdftype owlnegativepropertyassertion  _x owlsourceindividual achris  _x owlassertionproperty abrotherof  _x owltargetindividual astewie  _x aauthor aseth_macfarlane   mapping from rdf graphs to the structural specification this section specifies the results of steps cp  and cp  of the canonical parsing process from section  of the owl  specification owl  specification on an ontology document d that can be parsed into an rdf graph g an owl  tool may implement these steps in any way it chooses however the results must be structurally equivalent to the ones defined in the following sections these steps do not depend on the rdf syntax used to encode the rdf graph in d therefore the ontology document d is identified in this section with the corresponding rdf graph g an rdf syntax ontology document is any document accessible from some given iri that can be parsed into an rdf graph and that then be transformed into an owl  ontology by the canonical parsing process instantiated as specified in this section the following sections contain rules in which triple patterns are matched to g note that if a triple pattern contains a variable number of triples the maximal possible subset of g must be matched the following notation is used in the patterns the notation nn_intn can be matched to any literal whose value n is a nonnegative integer possible conditions on the pattern are enclosed in curly braces   some patterns use optional parts which are enclosed in square brackets   the abbreviation tseq y  yn denotes the pattern corresponding to rdf lists as shown in table  when a list pattern is matched to g all list variables _xi and _xj with i  j must be matched to different nodes furthermore it must not be possible to match the list pattern to two maximal subsets of g such that some list variable in the first pattern instance is matched to the same node as some possibly different variable in the second pattern instance this is necessary in order to detect malformed lists such as lists with internal cycles lists that share tails and lists that cross table  patterns corresponding to rdf lists sequence s triples corresponding to ts main node of ts seq rdfnil seq y _x rdffirst y  _x rdfrest rdfnil  _x seq y  yn  n  _x rdffirst y  _x rdfrest _x   _xn rdffirst yn  _xn rdfrest rdfnil  _x  extracting declarations and the iris of the directly imported ontology documents this section specifies the result of step cp  of the canonical parsing process on an rdf graph g  resolving included rdf graphs for backwards compatibility with owl  dl if g contains an owlimports triple pointing to an rdf document encoding an rdf graph g where g does not have an ontology header this owlimports triple is interpreted as an include rather than an import  that is the triples of g are included into g and are not parsed into a separate ontology to achieve this the following transformation is applied to g as long as the following rule is applicable to g if g contains a pair of triples of the form x rdftype owlontology  x owlimports y  and the values for x and y have not already been considered the following actions are performed the document accessible from the iri y is retrieved using the augmented retrieval process from section  of the owl  specification owl  specification the document is parsed into an rdf graph g if the parsing succeeds and the graph g does not contain a triple of the form z rdftype owlontology then g is merged as in the rdf semantics rdf semantics into g and the triple x owlimports y  is removed from g  parsing of the ontology header and declarations next the ontology header is extracted from g by matching patterns from table  to g it must be possible to match exactly one such pattern to g in exactly one way the matched triples are removed from g the set impg of the iris of ontology documents that are directly imported into g contains exactly all z  zk that are matched in the pattern table  parsing of the ontology header if g contains this pattern then the ontology header has this form x rdftype owlontology   x owlversioniri y  x owlimports z   x owlimports zk   k   and the following triple pattern cannot be matched in g u w x  u rdftype owlontology  w rdftype owlontologyproperty   ontology x  y  import z   import zk    _x rdftype owlontology  _x owlimports z   _x owlimports zk   k   and the following triple pattern cannot be matched in g u w _x  u rdftype owlontology  w rdftype owlontologyproperty   ontology import z   import zk    next for backwards compatibility with owl  dl certain redundant triples are removed from g in particular if the triple pattern from the lefthand side of table  is matched in g then the triples on the righthand side of table  are removed from g table  triples to be removed for backwards compatibility with owl  dl if g contains this pattern then these triples are removed from g x rdftype owlontology  x rdftype owlontology  x rdftype owlclass  x rdftype rdfsclass  x rdftype rdfsclass  x rdftype rdfsdatatype  x rdftype rdfsclass  x rdftype rdfsclass  x rdftype owldatarange  x rdftype rdfsclass  x rdftype rdfsclass  x rdftype owlrestriction  x rdftype rdfsclass  x rdftype rdfsclass  x rdftype owlrestriction  x rdftype owlclass  x rdftype owlclass  x rdftype owlobjectproperty  x rdftype rdfproperty  x rdftype rdfproperty  x rdftype owlfunctionalproperty  x rdftype rdfproperty  x rdftype rdfproperty  x rdftype owlinversefunctionalproperty  x rdftype rdfproperty  x rdftype rdfproperty  x rdftype owltransitiveproperty  x rdftype rdfproperty  x rdftype rdfproperty  x rdftype owldatatypeproperty  x rdftype rdfproperty  x rdftype rdfproperty  x rdftype owlannotationproperty  x rdftype rdfproperty  x rdftype rdfproperty  x rdftype owlontologyproperty  x rdftype rdfproperty  x rdftype rdfproperty  x rdftype rdflist  x rdffirst y  x rdfrest z  x rdftype rdflist  next for backwards compatibility with owl  dl g is modified such that declarations can be properly extracted in the next step when a triple pattern from the first column of table  is matched in g the matching triples are replaced in g with the triples from the second column this matching phase stops when matching a pattern and replacing it as specified does not change g note that g is a set and thus cannot contain duplicate triples so this last condition prevents infinite matches table  additional declaration triples if g contains this pattern then the matched triples are replaced in g with these triples x rdftype owlontologyproperty  x rdftype owlannotationproperty  x rdftype owlinversefunctionalproperty  x rdftype owlobjectproperty  x rdftype owlinversefunctionalproperty  x rdftype owltransitiveproperty  x rdftype owlobjectproperty  x rdftype owltransitiveproperty  x rdftype owlsymmetricproperty  x rdftype owlobjectproperty  x rdftype owlsymmetricproperty  next the set of declarations declg is extracted from g according to table  the matched triples are not removed from g  the triples from table  can contain annotations so in order to correctly parse the annotations they will be matched again in the step described in section  table  parsing declarations in g if g contains this pattern then this declaration is added to declg x rdftype owlclass  declaration class x   x rdftype rdfsdatatype  declaration datatype x   x rdftype owlobjectproperty  declaration objectproperty x   x rdftype owldatatypeproperty  declaration dataproperty x   x rdftype owlannotationproperty  declaration annotationproperty x   x rdftype owlnamedindividual  declaration namedindividual x   _x rdftype owlaxiom  _x owlannotatedsource y  _x owlannotatedproperty rdftype  _x owlannotatedtarget owlclass  declaration class y   _x rdftype owlaxiom  _x owlannotatedsource y  _x owlannotatedproperty rdftype  _x owlannotatedtarget rdfsdatatype  declaration datatype y   _x rdftype owlaxiom  _x owlannotatedsource y  _x owlannotatedproperty rdftype  _x owlannotatedtarget owlobjectproperty  declaration objectproperty y   _x rdftype owlaxiom  _x owlannotatedsource y  _x owlannotatedproperty rdftype  _x owlannotatedtarget owldatatypeproperty  declaration dataproperty y   _x rdftype owlaxiom  _x owlannotatedsource y  _x owlannotatedproperty rdftype  _x owlannotatedtarget owlannotationproperty  declaration annotationproperty y   _x rdftype owlaxiom  _x owlannotatedsource y  _x owlannotatedproperty rdftype  _x owlannotatedtarget owlnamedindividual  declaration namedindividual y   finally the set rind of blank nodes used in reification is identified this is done by initially setting rind   and then applying the patterns shown in table  the matched triples are not deleted from g table  identifying reification blank nodes if g contains this pattern then _x is added to rind _x rdftype owlaxiom  _x rdftype owlannotation  _x rdftype owlalldisjointclasses  _x rdftype owlalldisjointproperties  _x rdftype owlalldifferent  _x rdftype owlnegativepropertyassertion   populating an ontology this section specifies the result of step cp  of the canonical parsing process on an rdf graph g the corresponding instance og of the ontology class and the set alldeclg of all declarations for g computed as specified in step cp  of the canonical parsing process  analyzing declarations the following functions map an iri or a blank node x occurring in g into an object of the structural specification in particular cex maps x into a class expression drx maps x into a data range opex maps x into an object property expression dpex maps x into a data property expression and apx maps x into an annotation property initially these functions are undefined for all iris and blank nodes occurring in g this is written as cex   drx   opex   dpex   and apx   the functions are updated as parsing progresses all of the following conditions must be satisfied at any given point in time during parsing for each x at most one of opex dpex and apx is defined for each x at most one of cex and drx is defined furthermore the value of any of these functions for any x must not be redefined during parsing ie if a function is not undefined for x no attempt should be made to change the functions value for x functions ce dr ope dpe and ap are initialized as shown in table  table  initialization of ce dr ope dpe and ap if alldeclg contains this declaration then perform this assignment declaration class x   cex  a class with the iri x declaration datatype x   drx  a datatype with the iri x declaration objectproperty x   opex  an object property with the iri x declaration dataproperty x   dpex  a data property with the iri x declaration annotationproperty x   apx  an annotation property with the iri x  parsing of annotations the annotations in g are parsed next the function ann assigns a set of annotations annx to each iri or blank node x this function is initialized by setting annx   for each each iri or blank node x next the triple patterns from table  are matched in g and for each matched pattern annx is extended with an annotation from the right column each time one of these triple patterns is matched the matched triples are removed from g this process is repeated until no further matches are possible table  parsing of annotations if g contains this pattern then this annotation is added to annx x y xlt   apy   and there is no blank node _w such that g contains the following triples _w rdftype owlannotation  _w owlannotatedsource x  _w owlannotatedproperty y  _w owlannotatedtarget xlt   annotation y xlt  x y xlt  _w rdftype owlannotation  _w owlannotatedsource x  _w owlannotatedproperty y  _w owlannotatedtarget xlt   apy   and no other triple in g contains _w in subject or object position  annotation ann_w y xlt   parsing of ontology annotations let x be the node that was matched in g to x or _x according to the patterns from table  then annx determines the set of ontology annotations of og  parsing of expressions next functions ope dr and ce are extended as shown in tables   and  as well as in tables  and  the patterns in the latter two tables are not generated by the mapping from section  but they can be present in rdf graphs that encode owl  dl ontologies each time a pattern is matched the matched triples are removed from g pattern matching is repeated until no triple pattern can be matched to g table  parsing object property expressions if g contains this pattern then ope_x is set to this object property expression _x owlinverseof y   ope_x   and opey    objectinverseof opey  table  parsing of data ranges if g contains this pattern then dr_x is set to this data range _x rdftype rdfsdatatype  _x owlintersectionof tseq y  yn   n   and dryi   for each   i  n  dataintersectionof dry  dryn  _x rdftype rdfsdatatype  _x owlunionof tseq y  yn   n   and dryi   for each   i  n  dataunionof dry  dryn  _x rdftype rdfsdatatype  _x owldatatypecomplementof y   dry    datacomplementof dry  _x rdftype rdfsdatatype  _x owloneof tseq lt  ltn   n    dataoneof lt  ltn  _x rdftype rdfsdatatype  _x owlondatatype y  _x owlwithrestrictions tseq _z  _zn  _z w lt   _zn wn ltn   dry is a datatype  datatyperestriction dry w lt  wn ltn  table  parsing of class expressions if g contains this pattern then ce_x is set to this class expression _x rdftype owlclass  _x owlintersectionof tseq y  yn   n   and ceyi   for each   i  n  objectintersectionof cey  ceyn  _x rdftype owlclass  _x owlunionof tseq y  yn   n   and ceyi   for each   i  n  objectunionof cey  ceyn  _x rdftype owlclass  _x owlcomplementof y   cey    objectcomplementof cey  _x rdftype owlclass  _x owloneof tseq y  yn   n    objectoneof y  yn  _x rdftype owlrestriction  _x owlonproperty y  _x owlsomevaluesfrom z   opey   and cez    objectsomevaluesfrom opey cez  _x rdftype owlrestriction  _x owlonproperty y  _x owlallvaluesfrom z   opey   and cez    objectallvaluesfrom opey cez  _x rdftype owlrestriction  _x owlonproperty y  _x owlhasvalue z   opey    objecthasvalue opey z  _x rdftype owlrestriction  _x owlonproperty y  _x owlhasself truexsdboolean   opey    objecthasself opey  _x rdftype owlrestriction  _x owlminqualifiedcardinality nn_intn  _x owlonproperty y  _x owlonclass z   opey   and cez    objectmincardinality n opey cez  _x rdftype owlrestriction  _x owlmaxqualifiedcardinality nn_intn  _x owlonproperty y  _x owlonclass z   opey   and cez    objectmaxcardinality n opey cez  _x rdftype owlrestriction  _x owlqualifiedcardinality nn_intn  _x owlonproperty y  _x owlonclass z   opey   and cez    objectexactcardinality n opey cez  _x rdftype owlrestriction  _x owlmincardinality nn_intn  _x owlonproperty y   opey    objectmincardinality n opey  _x rdftype owlrestriction  _x owlmaxcardinality nn_intn  _x owlonproperty y   opey    objectmaxcardinality n opey  _x rdftype owlrestriction  _x owlcardinality nn_intn  _x owlonproperty y   opey    objectexactcardinality n opey  _x rdftype owlrestriction  _x owlonproperty y  _x owlhasvalue lt   dpey    datahasvalue dpey lt  _x rdftype owlrestriction  _x owlonproperty y  _x owlsomevaluesfrom z   dpey   and drz    datasomevaluesfrom dpey drz  _x rdftype owlrestriction  _x owlonproperties tseq y  yn  _x owlsomevaluesfrom z   n   dpeyi   for each   i  n and drz    datasomevaluesfrom dpey  dpeyn drz  _x rdftype owlrestriction  _x owlonproperty y  _x owlallvaluesfrom z   dpey   and drz    dataallvaluesfrom dpey drz  _x rdftype owlrestriction  _x owlonproperties tseq y  yn  _x owlallvaluesfrom z   n   dpeyi   for each   i  n and drz    dataallvaluesfrom dpey  dpeyn drz  _x rdftype owlrestriction  _x owlminqualifiedcardinality nn_intn  _x owlonproperty y  _x owlondatarange z   dpey   and drz    datamincardinality n dpey drz  _x rdftype owlrestriction  _x owlmaxqualifiedcardinality nn_intn  _x owlonproperty y  _x owlondatarange z   dpey   and drz    datamaxcardinality n dpey drz  _x rdftype owlrestriction  _x owlqualifiedcardinality nn_intn  _x owlonproperty y  _x owlondatarange z   dpey   and drz    dataexactcardinality n dpey drz  _x rdftype owlrestriction  _x owlmincardinality nn_intn  _x owlonproperty y   dpey    datamincardinality n dpey  _x rdftype owlrestriction  _x owlmaxcardinality nn_intn  _x owlonproperty y   dpey    datamaxcardinality n dpey  _x rdftype owlrestriction  _x owlcardinality nn_intn  _x owlonproperty y   dpey    dataexactcardinality n dpey  table  parsing of data ranges for compatibility with owl  dl if g contains this pattern then dr_x is set to this object property expression _x rdftype owldatarange  _x owloneof tseq lt  ltn   n    dataoneof lt  ltn  _x rdftype owldatarange  _x owloneof tseq  datacomplementof rdfsliteral  table  parsing of class expressions for compatibility with owl  dl if g contains this pattern then ce_x is set to this class expression _x rdftype owlclass  _x owlunionof tseq  owlnothing _x rdftype owlclass  _x owlunionof tseq y   cey    cey _x rdftype owlclass  _x owlintersectionof tseq  owlthing _x rdftype owlclass  _x owlintersectionof tseq y   cey    cey _x rdftype owlclass  _x owloneof tseq  owlnothing  parsing of axioms next og is populated with axioms for clarity the axiom patterns are split into two tables table  presents the patterns for axioms without annotations annotated axioms are parsed as follows in case of the patterns for owlalldisjointclasses owlalldisjointproperties owlalldifferent and owlnegativepropertyassertion axiom annotations are defined by ann_x for all other axioms axiom annotations are obtained by additionally matching patterns from table  in g during axiom matching the axioms in g are parsed as follows all annotated axioms are parsed first only when no pattern for annotated axioms can be matched in g then the patterns for axioms without annotations are matched in either case each time a triple pattern is matched the matched triples are removed from g table  parsing of axioms without annotations if g contains this pattern then the following axiom is added to og x rdftype owlclass  declaration class x   x rdftype rdfsdatatype  declaration datatype x   x rdftype owlobjectproperty  declaration objectproperty x   x rdftype owldatatypeproperty  declaration dataproperty x   x rdftype owlannotationproperty  declaration annotationproperty x   x rdftype owlnamedindividual  declaration namedindividual x   x rdfssubclassof y   cex   and cey    subclassof cex cey  x owlequivalentclass y   cex   and cey    equivalentclasses cex cey  x owldisjointwith y   cex   and cey    disjointclasses cex cey  _x rdftype owlalldisjointclasses  _x owlmembers tseq y  yn   n   and ceyi   for each   i  n  disjointclasses cey  ceyn  x owldisjointunionof tseq y  yn   n   cex   and ceyi   for each   i  n  disjointunion cex cey  ceyn  x rdfssubpropertyof y   opex   and opey    subobjectpropertyof opex opey  x owlpropertychainaxiom tseq y  yn   n   opeyi   for each   i  n and opex    subobjectpropertyof objectpropertychain opey  opeyn  opex  x owlequivalentproperty y   opex   and opey    equivalentobjectproperties opex opey  x owlpropertydisjointwith y   opex   and opey    disjointobjectproperties opex opey  _x rdftype owlalldisjointproperties  _x owlmembers tseq y  yn   n   and opeyi   for each   i  n  disjointobjectproperties opey  opeyn  x rdfsdomain y   opex   and cey    objectpropertydomain opex cey  x rdfsrange y   opex   and cey    objectpropertyrange opex cey  x owlinverseof y   opex   and opey    inverseobjectproperties opex opey  x rdftype owlfunctionalproperty   opex    functionalobjectproperty opex  x rdftype owlinversefunctionalproperty   opex    inversefunctionalobjectproperty opex  x rdftype owlreflexiveproperty   opex    reflexiveobjectproperty opex  x rdftype owlirreflexiveproperty   opex    irreflexiveobjectproperty opex  x rdftype owlsymmetricproperty   opex    symmetricobjectproperty opex  x rdftype owlasymmetricproperty   opex    asymmetricobjectproperty opex  x rdftype owltransitiveproperty   opex    transitiveobjectproperty opex  x rdfssubpropertyof y   dpex   and dpey    subdatapropertyof dpex dpey  x owlequivalentproperty y   dpex   and dpey    equivalentdataproperties dpex dpey  x owlpropertydisjointwith y   dpex   and dpey    disjointdataproperties dpex dpey  _x rdftype owlalldisjointproperties  _x owlmembers tseq y  yn   n   and dpeyi   for each   i  n  disjointdataproperties dpey  dpeyn  x rdfsdomain y   dpex   and cey    datapropertydomain dpex cey  x rdfsrange y   dpex   and dry    datapropertyrange dpex dry  x rdftype owlfunctionalproperty   dpex    functionaldataproperty dpex  x owlequivalentclass y   drx   amd dry    datatypedefinition drx dry  x owlhaskey tseq y  yk   cex   and the sequence y  yk can be partitioned into disjoint sequences z  zm and w  wn such that m   or n   or both and opezi   for each   i  m and dpewj   for each   j  n  haskey cex  opez  opezm   dpew  dpewn   x owlsameas y  sameindividual x y  x owldifferentfrom y  differentindividuals x y  _x rdftype owlalldifferent  _x owlmembers tseq x  xn   n    differentindividuals x  xn  _x rdftype owlalldifferent  _x owldistinctmembers tseq x  xn   n    differentindividuals x  xn  x rdftype y   cey    classassertion cey x  x y z   opey    objectpropertyassertion opey x z  _x rdftype owlnegativepropertyassertion  _x owlsourceindividual w  _x owlassertionproperty y  _x owltargetindividual z   opey    negativeobjectpropertyassertion opey w z  x y lt   dpey    datapropertyassertion dpey x lt  _x rdftype owlnegativepropertyassertion  _x owlsourceindividual w  _x owlassertionproperty y  _x owltargetvalue lt   dpey    negativedatapropertyassertion dpey w lt  x rdftype owldeprecatedclass  annotationassertion owldeprecated x truexsdboolean  x rdftype owldeprecatedproperty  annotationassertion owldeprecated x truexsdboolean  x rdfssubpropertyof y   apx   and apy    subannotationpropertyof apx apy  x rdfsdomain y   apx    annotationpropertydomain apx y  x rdfsrange y   apx    annotationpropertyrange apx y  table  parsing of annotated axioms if g contains this pattern then the following axiom is added to og s p xlt  _x rdftype owlaxiom  _x owlannotatedsource s  _x owlannotatedproperty p  _x owlannotatedtarget xlt   s p xlt  is the main triple of an axiom according to table  and g contains possible necessary side triples for the axiom  the result is the axiom corresponding to s p xlt  and possible side triples that additionally contains the annotations ann_x next for each blank node or iri x such that x  rind and for each annotation annotation annotation  annotationn ap y   annx with n possibly being equal to zero the following annotation assertion is added to og annotationassertion annotation  annotationn ap x y  finally the patterns from table  are matched in g and the resulting axioms are added to og these patterns are not generated by the mapping from section  but they can be present in rdf graphs that encode owl  dl ontologies note that the patterns from the table do not contain triples of the form x rdftype owlclass because such triples are removed while parsing the entity declarations as specified in section  each time a triple pattern is matched the matched triples are removed from g table  parsing of axioms for compatibility with owl  dl if g contains this pattern then the following axiom is added to og x owlcomplementof y   cex   and cey    equivalentclasses cex objectcomplementof cey   x owlunionof tseq   cex    equivalentclasses cex owlnothing  x owlunionof tseq y   cex   and cey    equivalentclasses cex cey  x owlunionof tseq y  yn   n   cex   and ceyi   for each   i  n  equivalentclasses cex objectunionof cey  ceyn   x owlintersectionof tseq   cex    equivalentclasses cex owlthing  x owlintersectionof tseq y   cex   and cey    equivalentclasses cex cey  x owlintersectionof tseq y  yn   n   cex   and ceyi   for each   i  n  equivalentclasses cex objectintersectionof cey  ceyn   x owloneof tseq   cex    equivalentclasses cex owlnothing  x owloneof tseq y  yn   n   and cex    equivalentclasses cex objectoneof y  yn   at the end of this process the graph g must be empty  appendix change log informative  changes since recommendation this section summarizes the changes to this document since the recommendation of  october  with the publication of the xml schema definition language xsd  part  datatypes recommendation of  april  the elements of owl  which are based on xsd  are now considered required and the note detailing the optional dependency on the xsd  candidate recommendation of  april  has been removed from the status of this document section minor typographical errors were corrected as detailed on the owl  errata page  changes since proposed recommendation this section summarizes the changes to this document since the proposed recommendation of  september  the two arguments in the classassertion axiom in table  were swapped to bring the axiom in line with the functionalstyle syntax  changes since candidate recommendation this section summarizes the changes to this document since the candidate recommendation of  june  two minor bugs were fixed in the reverse mappings of inverseof and haskey  changes since last call this section summarizes the changes to this document since the last call working draft of  april  the rdf vocabulary for annotations was changed owlsubject owlpredicate and owlobject became respectively owlannotatedsource owlannotatedproperty and owlannotatedtarget several lists of syntax were updated to track a previous change in structural specification and functionalstyle syntax two of the examples were fixed some minor editorial changes were made  acknowledgments the starting point for the development of owl  was the owl member submission itself a result of user and developer feedback and in particular of information gathered during the owl experiences and directions owled workshop series the working group also considered postponed issues from the webont working group this document has been produced by the owl working group see below and its contents reflect extensive discussions within the working group as a whole the editors extend special thanks to markus krtzsch fzi alan ruttenberg science commons uli sattler university of manchester michael schneider fzi and evren sirin clark  parsia for their thorough reviews the regular attendees at meetings of the owl working group at the time of publication of this document were jie bao rpi diego calvanese free university of bozenbolzano bernardo cuenca grau oxford university computing laboratory martin dzbor open university achille fokoue ibm corporation christine golbreich universit de versailles stquentin and lirmm sandro hawke wcmit ivan herman wcercim rinke hoekstra university of amsterdam ian horrocks oxford university computing laboratory elisa kendall sandpiper software markus krtzsch fzi carsten lutz universitt bremen deborah l mcguinness rpi boris motik oxford university computing laboratory jeff pan university of aberdeen bijan parsia university of manchester peter f patelschneider bell labs research alcatellucent sebastian rudolph fzi alan ruttenberg science commons uli sattler university of manchester michael schneider fzi mike smith clark  parsia evan wallace nist zhe wu oracle corporation and antoine zimmermann deri galway we would also like to thank past members of the working group jeremy carroll jim hendler and vipul kashyap  references owl  specification owl  web ontology language structural specification and functionalstyle syntax second edition boris motik peter f patelschneider bijan parsia eds wc recommendation  december  httpwwwworgtrrecowlsyntax latest version available at httpwwwworgtrowlsyntax rdf concepts resource description framework rdf concepts and abstract syntax graham klyne and jeremy j carroll eds wc recommendation  february  httpwwwworgtrrecrdfconcepts latest version available as httpwwwworgtrrdfconcepts rdf semantics rdf semantics patrick hayes ed wc recommendation  february  httpwwwworgtrrecrdfmt latest version available as httpwwwworgtrrdfmt rfc  rfc  key words for use in rfcs to indicate requirement levels network working group s bradner ietf march  httpwwwietforgrfcrfctxt