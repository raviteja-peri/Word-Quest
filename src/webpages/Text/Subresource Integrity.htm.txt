subresource integrity subresource integrity wc first public working draft  march  this version httpwwwworgtrwdsri latest published version httpwwwworgtrsri latest editors draft httpwcgithubiowebappsecspecssubresourceintegrity editors frederik braun mozilla corporation devdatta akhawe uc berkeley joel weinberger google inc mike west google inc copyright   wc mit ercim keio beihang all rights reserved wc liability trademark and document use rules apply abstract this specification defines a mechanism by which user agents may verify that a fetched resource has been delivered without unexpected manipulation status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr a list of changes to this document may be found at httpsgithubcomwcwebappsec this document was published by the web application security working group as a first public working draft this document is intended to become a wc recommendation if you wish to make comments regarding this document please send them to publicwebappsec@worg subscribe archives with integrity at the start of your emails subject all comments are welcome publication as a first public working draft does not imply endorsement by the wc membership this is a draft document and may be updated replaced or obsoleted by other documents at any time it is inappropriate to cite this document as other than work in progress this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy table of contents  introduction  goals  use casesexamples  resource integrity  downloads  fallback  conformance  key concepts and terminology  framework  integrity metadata  cryptographic hash functions  resource verification algorithms  apply algorithm to resource  is resource eligible for integrity validation  does resource match metadata  modifications to fetch  verification of html document subresources  the integrity attribute  the noncanonicalsrc attribute todo  element interface extensions  htmlanchorelement  attributes  htmlembedelement  attributes  htmliframeelement  attributes  htmlimageelement  attributes  htmllinkelement  attributes  htmlmediaelement  attributes  htmlobjectelement  attributes  htmlscriptelement  attributes  htmltrackelement  attributes  handling integrity violations  elements  the a element  the embed element  the iframe element  the img element  the link element  the object element  the script element  the track element  the audio element todo  the source element todo  the video element todo  verification of cssloaded subresources  verification of jsloaded subresources  workers  worker extension  attributes  sharedworker extension  attributes  validation  xmlhttprequest  the integrity attribute  progress events  validation  caching optional  risks  origin confusion  mime type confusion  recommendations  proxies  security considerations  insecure channels remain insecure  hash collision attacks  crossorigin data leakage  acknowledgements a references a normative references  introduction this section is nonnormative sites and applications on the web are rarely composed of resources from only a single origin authors pull scripts images fonts etc from a wide variety of services and content delivery networks and must trust that the delivered representation is in fact what they expected to load if an attacker can trick a user into downloading content from a hostile server via dns poisoning or other such means the author has no recourse likewise an attacker who can replace the file on the cdn server has the ability to inject arbitrary content delivering resources over a secure channel mitigates some of this risk with tls hsts and pinned public keys a user agent can be fairly certain that it is indeed speaking with the server it believes its talking to these mechanisms however authenticate only the server not the content an attacker or admin with access to the server can manipulate content with impunity ideally authors would not only be able to pin the keys of a server but also pin the content ensuring that an exact representation of a resource and only that representation loads and executes this document specifies such a validation scheme extending several html elements with a integrity attribute that contains a cryptographic hash of the representation of the resource the author expects to load for instance an author may wish to load jquery from a shared server rather than hosting it on their own origin specifying that the expected sha hash of httpscodejquerycomjqueryminjs is ccbuyisujeqinphwthvqh_euhgtwhyqfqmyg means that the user agent can verify that the data it loads from that url matches that expected hash before executing the javascript it contains this integrity verification significantly reduces the risk that an attacker can substitute malicious content this example can be communicated to a user agent by adding the hash to a script element like so example  script srchttpscodejquerycomjqueryminjs        integritynishaccbuyisujeqinphwthvqh_euhgtwhyqfqmygctapplicationjavascript scripts of course are not the only resource type which would benefit from integrity validation the scheme specified here applies to all html elements which trigger fetches as well as to fetches triggered from css and javascript moreover integrity metadata may also be useful for purposes other than validation user agents may decide to use the integrity metadata as an identifier in a local cache for instance meaning that common resources for example javascript libraries could be cached and retrieved once regardless of the url from which they are loaded  goals compromise of the thirdparty service should not automatically mean compromise of every site which includes its scripts content authors will have a mechanism by which they can specify expectations for content they load meaning for example that they could load a specific script and not any script that happens to have a particular url the verification mechanism should extend to all resource types that a page may fetch in the course of its execution and rendering active content scripts style iframe contents etc are of course critical but inactive content such as images and fonts will also be covered the verification mechanism should have reporting functionality which would inform the author that an invalid resource was downloaded further it should be possible for an author to choose to run only the reporting functionality allowing potentially corrupt resources to run on her site but flagging violations for manual review the metadata provided for verification may enable improvements to user agents caching schemes common resources such as javascript libraries can be downloaded once and only once even if multiple instances with distinct urls are requested potentially relax mixedcontent warnings for resources whose integrity is verified if the integrity metadata for a resource is delivered over a secure channel the user agent might choose to allow loading the resource over an insecure channel potentially allow resources to be downloaded from noncanonical sources for instance over an insecure channel for performance but fall back to a canonical source if the noncanonical source fails an integrity check issue  im not sure about  and  get more detail from the wg about the benefits that such a fallback system would enable mkwst  use casesexamples  resource integrity an author wants to include javascript provided by a thirdparty analytics service on her site she wants however to ensure that only the code shes carefully reviewed is executed she can do so by generating integrity metadata for the script shes planning on including and adding it to the script element she includes on her page example  script srchttpsanalyticsruscomvincludejs        integritynishasdfwewfaewefjijfectapplicationjavascriptscript an advertising network wishes to ensure that advertisements delivered via thirdparty servers matches the code which they reviewed in order to reduce the risk of accidental or malicious substitution of unreviewed content by adding integrity metadata to the iframe element wrapping the advertisement they can ensure that the thirdparty server delivers only the agreedupon content example  iframe srchttpsawesomeadscomadvertisementhtml        integritynishakasfdsaffseoirwecttexthtmliframe a user agent wishes to ensure that pieces of its ui which are rendered via html for example chromes new tab page arent manipulated before display integrity metadata mitigates the risk that altered javascript will run in these pages highprivilege context the author of a mashup wants to make sure her creation remains in a working state adding integrity metadata to external subresources defines an expected revision of the included files the author can then use the reporting functionality to be notified of changes to the included resources  downloads a software distribution service wants to ensure that files are correctly downloaded it can do so by adding integrity metadata to the a elements which users click on to trigger a download example  a hrefhttpssoftwareisnicecomawesomeexe   integritynishafkfrewfrfefhjrwfjfrerwctapplicationoctetstream   downloada  fallback an author wishes to load a resource over an insecure channel for performance reasons but fall back to a secure channel if the insecurelyloaded resource is manipulated she can do this by adding integrity metadata and a noncanonical source to the script element example  script srchttpsrockinresourcescomscriptjs        noncanonicalsrchttpinsecurityisinherentnetscriptjs        integritynishaasijfiqutwoejiwctapplicationjavascriptscript  conformance as well as sections marked as nonnormative all authoring guidelines diagrams examples and notes in this specification are nonnormative everything else in this specification is normative the key words must must not required should should not recommended may and optional in this specification are to be interpreted as described in rfc conformance requirements phrased as algorithms or specific steps can be implemented in any manner so long as the end result is equivalent in particular the algorithms defined in this specification are intended to be easy to understand and are not intended to be performant implementers are encouraged to optimize  key concepts and terminology this section defines several terms used throughout the document the term digest refers to the baseurlencoded result of executing a cryptographic hash function on an arbitrary block of data a secure channel is any communication mechanism that the user agent has defined as secure typically limited to http over transport layer security tls rfc an insecure channel is any communication mechanism other than those the user agent has defined as secure the term origin is defined in the origin specification rfc the mime type of a resource is a technical hint about the use and format of that resource mimetype the entity body transfer encoding content encoding and message body of a resource is defined by the http  specification section  http a baseurl encoding is defined in rfc  section  in a nutshell it replaces the characters ub plus sign  and uf solidus  characters in normal base encoding with the ud hyphenminus  and uf low line _ characters respectively rfc the augmented backusnaur form abnf notation used in this document is specified in rfc  abnf the sha sha and sha are part of the sha set of cryptographic hash functions defined by the nist in descriptions of sha sha and sha  framework the integrity verification mechanism specified here boils down to the process of generating a sufficiently strong cryptographic digest for a resource and transmitting that digest to a user agent so that it may be used when fetching the resource  integrity metadata to verify the integrity of a resource a user agent requires integrity metadata which consists of the following pieces of information cryptographic hash function digest the resources mime type the hash function and digest must be provided in order to validate a resources integrity the mime type should be provided as it mitigates the risk of certain attack vectors see mime type confusion in this documents security considerations section this metadata is generally encoded as a named information ni uri as defined in rfc rfc for example given a resource containing only the string hello world an author might choose sha as a hash function mo_yqmqpm_byzwldkirgtcptbvmlrxcrrmau is the baseurlencoded digest that results this can be encoded as an ni uri as follows example  nishamo_yqmqpm_byzwldkirgtcptbvmlrxcrrmau or if the author further wishes to specify the content type textplain example  nishamo_yqmqpm_byzwldkirgtcptbvmlrxcrrmaucttextplain note digests may be generated using any number of utilities openssl for example is quite commonly available the example in this section is the result of the following command line echo n hello world  openssl dgst sha binary  openssl enc base  sed e sg e s_g  cryptographic hash functions conformant user agents must support the sha and sha cryptographic hash functions for use as part of a resources integrity metadata  resource verification algorithms  apply algorithm to resource if algorithm is not a hash function recognized and supported by the user agent return null let result be the result of applying algorithm to the content of the entity body of resource including any content coding that has been applied but not including any transfer encoding applied to the message body let encodedresult be result of baseurlencoding result strip any trailing ud equals sign  characters from encodedresult return encodedresult issue  step  is pulled from the contentmd definition in http its unclear that its what we want see bzbarskys wg post on this topic  is resource eligible for integrity validation in order to mitigate an attackers ability to read data crossorigin by bruteforcing values via integrity checks resources are only eligible for such checks if they are sameorigin publicly cachable or are the result of explicit access granted to the loading origin via cors cors certain http headers can also change the way the resource behaves in ways which integrity checking cannot account for if the resource contains these headers it is ineligible for integrity validation wwwauthenticate hides resources behind a login such nonpublic resources are excluded from integrity checks refresh can cause iframe contents to transparently redirect to an unintended target bypassing the integrity check issue  consider the impact of other headers contentlength contentrange etc is there danger there the following algorithm details these restrictions let request be the request that fetched resource if resource contains any of the following http headers return false wwwauthenticate refresh if the mode of request is cors return true if the origin of request is resources origin return true if resource is cachable by a shared cache as defined in http return true return false note step  returns true if the resource was a corsenabled request if the resource failed the cors checks it wont be available to us for integrity checking because it wont have loaded successfully  does resource match metadata if metadata is the empty string return true if resources urls scheme is about return true if metadata is not a valid named information ni uri return false if resource is not eligible for integrity valiation return false let algorithm be the alg component of metadata let expectedvalue be the val component of metadata let expectedtype be the value of metadatas ct query string parameter if expectedtype is not the empty string and is not a caseinsensitive match for resources mime type return false let actualvalue be the result of applying algorithm to resource if actualvalue is null return false if actualvalue is a casesensitive match for expectedvalue return true otherwise return false note if expectedtype is the empty string in  it would be reasonable for the user agent to warn the pages author about the dangers of mime type confusion attacks via its developer console  modifications to fetch the fetch specification should contain the following modifications in order to enable the rest of this specifications work the following text should be added to section  a request has an associated integrity metadata unless stated otherwise a requests integrity metadata is the empty string the following text should be added to section  a response has an associated integrity state which is one of indeterminate pending corrupt and intact unless stated otherwise it is indeterminate perform the following steps before executing both the basic fetch and cors fetch with preflight algorithms if requests integrity metadata is the empty string set responses integrity state to indeterminate otherwise set responses integrity state to pending include a cachecontrol header whose value is notransform if requests integrity metadata contains a content type set requests accept header value to the value of requests integrity metadatas content type add the following step before step  of the handling of  status codes for both basic fetch and cors fetch with preflight algorithms if requests integrity state is pending set responses integrity state to corrupt and return response before firing the process request endoffile event for any request if the requests integrity metadata is the empty string set the responses integrity state to indeterminate and skip directly to firing the event if response matches the requests integrity metadata set the responses integrity state to intact and skip directly to firing the event set the responses integrity state to corrupt and skip directly to firing the event  verification of html document subresources a variety of html elements result in requests for resources that are to be embedded into the document or executed in its context to support integrity metadata for each of these and new elements that are added in the future a new integrity attribute is added to the list of content attributes for the a audio embed iframe link object script source track and video elements a corresponding integrity idl attribute which reflects the value each elements integrity content attribute is added to the htmlanchorelement htmlmediaelement htmlembedelement htmliframeelement htmllinkelement htmlobjectelement htmlscriptelement htmlsourceelement and htmltrackelement interfaces  the integrity attribute the integrity attribute represents integrity metadata for an element the value of the attribute must be either the empty string or one valid named information ni uri rfc as described by the following abnf grammar integritymetatata     wsp niurl  wsp  the niurl rule is defined in rfc section  figure  the integrity idl attribute must reflect the integrity content attribute issue  we should consider supporting multiple ni urls which could allow migration between algorithms  the noncanonicalsrc attribute todo authors may optin to a fallback mechanism whereby user agents would initially attempt to load resources from a noncanonical source perhaps over http for performance and caching reasons if that fetch failed an integrity check the user agent would report a violation and retry the fetch using a canonical url perhaps over https the noncanonical url is specified via a noncanonicalsrc attribute for example example  script srchttpexamplecomscriptjs        noncanonicalsrchttpcdnexamplecomscriptjs        integritynishajsdfhiuwergnvaaetgoifqctapplicationjavascriptscript the noncanonicalsrc idl attribute must reflect the noncanonicalsrc content attribute the noncanonical resource must be fetched with its omit credentials mode set to always to prevent leakage of cookies across insecure channels issue  this attribute and fallback in general only makes sense if we care about allowing cachefriendly read http urls to load in an https context without warnings im not sure we do so im not going to put too much thought into the details here before we discuss things a bit more mkwst  element interface extensions  htmlanchorelement partial interface htmlanchorelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  htmlembedelement partial interface htmlobjectelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  htmliframeelement partial interface htmliframeelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  htmlimageelement partial interface htmlimageelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  htmllinkelement partial interface htmllinkelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  htmlmediaelement partial interface htmlmediaelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  htmlobjectelement partial interface htmlobjectelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  htmlscriptelement partial interface htmlscriptelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  htmltrackelement partial interface htmltrackelement                 attribute domstring integrity  attributes integrity of type domstring the value of this elements integrity attribute  handling integrity violations documents may specify the behavior of a failed integrity check by delivering a content security policy which contains an integritypolicy directive defined by the following abnf grammar directivename   integritypolicydirectivevalue  failuremode  requireforall failuremode      block  report  fallback  a documents integrity policy is the value of the integritypolicy directive if explicitly provided as part of the documents content security policy or block otherwise if the documents integrity policy contains block the user agent must refuse to render or execute resources that fail an integrity check and must report a violation if the documents integrity policy contains report the user agent may render or execute resources that fail an integrity check but must report a violation issue  if the documents integrity policy contains fallback the user agent must refuse to render or execute resources that fail an integrity check and must report a violation the user agent may additionally choose to load a fallback resource as specified for each relevant element if the fallback resource fails an integrity check the user agent must refuse to render or execute the resource and must report another violation see the noncanonicalsrc attribute for a strawman of how that might look issue  if the documents integrity policy contains requireforall the user agent must treat the lack of integrity metadata for an resource as automatic failure refuse to fetch the resource and report a violation  elements  the a element if an a element has both integrity and download attributes the user agent has all the data it needs in order to verify the integrity of the downloaded resource this is the only type of download we can safely make promises about so it is the only type of download that we support if integrity metadata is added to any a element that does not explicitly request that the resource it points to be downloaded user agents must treat the link as broken before following a hyperlink the user agent must run the following steps if subject has an integrity attribute whose value is not the empty string then the user agent may report an error to the user in a useragentspecific manner abort the following a hyperlink algorithm replace step  of the downloads a hyperlink algorithm with the following if the integrity attribute of that element is not the empty string and the element does not have a download attribute abort these steps fetch url with integrity metadata set to the value of the integrity attribute of that element and handle the resulting resource as a download when handling a resource as a download perform the following step before providing a user with a way to save the resource for later use if responses integrity state is corrupt and the documents integrity policy is block the user agent must report a violation and must abort the download note note that this will cover only downloads triggered explicitly by adding a download attribute to an a element such a link might look like the following example  a hrefhttpsexamplecomfilezip   integritynishaskjdsfkafinqfbihja_gqgctapplicationoctetstream   downloaddownloada  the embed element when fetching an url via step  of the embed element setup steps algorithm set the integrity metadata of the request to the value of the elements integrity attribute before running the task queued by the networking task source once the url has been fetched first perform the following steps if the responses integrity state is corrupt if the documents integrity policy is block set the elements type attribute to the empty string skip to step  of the algorithm report a violation  the iframe element when content is to be loaded into the child browsing context created by an iframe perform fetches with the integrity metadata set to the value of the iframe elements integrity attribute moreover if the documents integrity policy is block then the user agent must delay rendering the content until the fetching algorithms task to process request endoffile completes when the process request endoffile task completes if the requests integrity state is corrupt if resource is same origin with the documents browsing context owner iframe elements documents origin then queue a task to fire a simple event named error at the iframe element this will not fire for crossorigin requests to avoid leaking data about those resources content report a violation navigate the child browsing context to aboutblank note note that this will only check the integrity of the iframes document source no subsequent verification for the documents subresources is perfomed if integrity checks for the documents subresources are desirable the document loaded into the iframe needs to include integrity metadata for its subresources issue  how does this effect things like the preload scanner how much work is it going to be for vendors to change the display whatever weve got asap behavior that makes things fast for users how much impact will there be on user experience especially for things like ads where this kind of validation has the most value issue  how do we deal with navigations in the child browsing context are they simply disallowed if so does that make sense it might for ads but what about other usecases  the img element when fetching an image via step  of the update the image data algorithm set the integrity metadata of the request to the value of the elements integrity attribute before jumping one of the entries from the list in step  of the update the image data algorithm first perform the following steps if the responses integrity state is corrupt if the documents integrity policy is block abort the jump in progress perform the steps in the entry labeled otherwise under step  report a violation  the link element whenever a user agent attempts to obtain a resource pointed to by a link element set the integrity metadata of the request to the value of the elements integrity attribute additionally perform the following steps before firing a load event at the element if the responses integrity state is corrupt if the documents integrity policy is block abort the load event and treat the resource as having failed to load if resource is same origin with the origin of the link elements document then queue a task to fire a simple event named error at the link element report a violation  the object element when fetching an image via step  of step  of the determine what the object element represents algorithm set the integrity metadata of the request to the value of the elements integrity attribute before step  of the determine what the object element represents algorithm first perform the following steps if the responses integrity state is corrupt if the documents integrity policy is block fire a simple event named error at the element jump to the step labeled fallback report a violation  the script element when executing step  of step  of htmls prepare a script algorithm set the integrity metadata of the request to the value of the elements integrity attribute insert the following steps after step  of step  of htmls prepare a script algorithm once the fetching algorithm has completed if the responses integrity state is corrupt if the documents integrity policy is block if resource is same origin with the link elements documents origin then queue a task to fire a simple event named error at the element and abort these steps report a violation  the track element when fetching the track url in step  of the start the track processing model algorithm set the integrity metadata of the request to the value of the elements integrity attribute additionally perform the following steps before performing the steps specified for a successful track fetch if the responses integrity state is corrupt if the documents integrity policy is block perform the steps specified for a failed track fetch abort the steps specified for a successful track fetch report a violation  the audio element todo issue  todo write this section might want to delay media elements until we have a solution to streaming  the source element todo issue  todo write this section might want to delay media elements until we have a solution to streaming  the video element todo issue  todo write this section might want to delay media elements until we have a solution to streaming  verification of cssloaded subresources issue  tab and anne are poking at adding fetch to some spec somewhere which would allow css files to specify various arguments to the fetch algorithm while requesting resources detail on the proposal is at httplistsworgarchivespublicpublicwebappsecjanhtml once that is specified we can proceed defining an integrity argument that would allow integrity checks in css  verification of jsloaded subresources issue  these sections are less fleshed out and debated than the html sections where the wg has concentrated most of its time thus far  workers to validate the integrity of scripts which are to be run as workers a new constructor is added for worker and sharedworker which accepts a second argument containing integrity metadata this information is used when running a worker to perform validation as outlined in the following sections webworkers  worker extension constructor domstring scripturl domstring integritymetadatapartial interface worker  eventtarget                 attribute domstring integrity  attributes integrity of type domstring the value of the workers integrity attribute defaults to the empty string when the workerscripturl integritymetadata constructor is invoked if integritymetadata is not a valid named information ni url throw a syntaxerror exception and abort these steps execute the workerscripturl constructor and set the newly created worker objects integrity attribute to integritymetadata  sharedworker extension constructor domstring scripturl domstring name domstring integritymetadatapartial interface worker  eventtarget                 attribute domstring integrity  attributes integrity of type domstring the value of the sharedworkers integrity attribute defaults to the empty string when the sharedworkerscripturl name integritymetadata constructor is invoked if integritymetadata is not a valid named information ni url throw a syntaxerror exception and abort these steps execute the sharedworkerscripturl name constructor and set the newly created sharedworker objects integrity attribute to integritymetadata  validation add the following step directly after step  of the run a worker algorithm if the script resource fetched in step  has an integrity status of corrupt then for each worker or sharedworker object associated with worker global scope queue a task to fire a simple event named error at that object abort these steps  xmlhttprequest to validate the integrity of resources loaded via xmlhttprequest a new integrity attribute is added to the xmlhttprequest object if set the integrity metadata in this attribute is used to validate the resource before triggering the load event xmlhttprequest  the integrity attribute the integrity attribute must return its value initially its value must be the empty string setting the integrity attribute must run these steps if the state is not unsent or opened throw an invalidstateerror exception and abort these steps if the value provided is not a valid named information ni url throw a syntaxerror exception and abort these steps set the integrity attributes value to the value provided  progress events validation only takes place when the entire resource body has been downloaded data processed before the resource has completely loaded or failed to load is unvalidated and potentially corrupt for that reason if the documents integrity policy is block progress events will not fire until the fetch has completed one way or another if the documents integrity policy is not block developers who care about integrity validation should still ignore progress events fired while the resource is downloading and instead listen only for the load abort and error events if the documents integrity policy is block then before executing step  of the process response algorithm in step  of xmlhttprequests senddata method if the objects integrity attribute is not the empty string the user agent must abort the process response algorithm and must not fire the readystatechange event before executing step  of the process response body algorithm in step  of xmlhttprequests senddata method if the objects integrity attribute is not the empty string the user agent must abort the process response body algorithm and must not fire the readystatechange event before executing step  of the process response body algorithm in step  of xmlhttprequests senddata method if the objects integrity attribute is not the empty string the user agent must abort the process response body algorithm and must not fire the progress event  validation whenever the user agent would switch an xmlhttprequest object to the done state then perform the following steps before switching state if the responses integrity state is intact or indeterminate then abort these steps and continue to switch to the done state otherwise report a violation and run the following steps if the documents integrity policy is block set the response entity body to null run the request error steps for exception networkerror and event error do not continue to switch to the done state  caching optional the caching mechanism described in this section is optional javascript libraries are a good example of resources that are often loaded and reloaded from different locations as users browse the web httpcdnjscloudflarecomajaxlibsjqueryjqueryminjs is exactly the same file as httpsajaxgoogleapiscomajaxlibsjqueryjqueryminjs both files are identifiable via the ni url nishaiafenecaxsanynumepcotwfbkvcefxnds_kictapplicationjavascript to reduce the performance impact of reloading the same data user agents may use integrity metadata as a new index to a local cache meaning that a user who had already loaded a version of the file from ajaxgoogleapiscom wouldnt have to touch the network to load the cdnjscloudflarecom version the user agent knows that the content is the same and would be free to treat the latter as a cache hit regardless of the location mismatch  risks this approach is good for performance but can have security implications see the origin confusion and mime type confusion sections below for some details  origin confusion user agents which set up a caching mechanism that uses only the integrity metadata to identify a resource are vulnerable to attacks which bypass sameorigin restrictions unless they are very careful when choosing whether or not to read data straight from the cache for instance runtime script errors are sanitized for resources that are corscrossorigin to the page into which they are loaded html xmlhttprequest may only load data from sameorigin resources or from resources delivered with proper cors headers xmlhttprequest content security policy performs originbased security checks csp issue  more note the simple cachepoisoning version of this attack can be mitigated by requiring strong hash functions for cachable resources more complex variants are more difficult to mitigate consider the following an attacker lures alice to a page containing the following code example  script srchttpevilcomeviljs digestnisha alices user agent loads eviljs and stores it in her cache though bankcom is protected by a csp which allows only script from bankcom the attacker may still be able to exploit an xss vulnerability in bankcom which allows the injection of example  script srchttpbankcomawesomejs digestnisha since the script appears to come from bankcom csp allows it even though it doesnt actually exist on that server  mime type confusion user agents which set up a caching mechanism that uses only the integrity metadata to identify a resource are vulnerable to attacks which create resources that behave differently based on the context in which they are loaded gifar is the canonical example of such an attack authors should mitigate this risk by specifying the expected content type along with the digest as specified in rfc  section  this means that the content type will be verified along with the digest when determining whether a resource matches certain integrity metadata  recommendations to mitigate the risk of crossorigin data leakage or typesniffing exploitation user agents that take this approach to caching must not use integrity metadata as a cache identifier unless the following are all true the integrity metadata contains a content type the resource was delivered in response to an http get request and not post options trace etc the resource was delivered with an accesscontrolalloworigin http header with a value of  cors the integrity metadata uses a hash function with very strong uniqueness characteristics sha or better if a content security policy is active in a context the script or link element which triggered the resources fetch has a valid nonce issue  more ideas limiting to resources with wideopen cors headers and strong hash functions seems like a reasonable start  proxies optimizing proxies and other intermediate servers which modify the content of fetched resources must ensure that the digest associated with those resources stays in sync with the new content one option is to ensure that the integrity metadata associated with resources is updated along with the resource itself another would be simply to deliver only the canonical version of resources for which a page author has requested integrity verification to support this latter option user agents may send a cachecontrol header with a value of notransform issue  think about how integrity checks would effect vary headers in general  security considerations  insecure channels remain insecure integrity metadata delivered over an insecure channel provides no security benefit attackers can alter the digest inflight or remove it entirely or do absolutely anything else to the document just as they could alter the resource the hash is meant to validate authors who desire any sort of security whatsoever should deliver resources containing digests over secure channels  hash collision attacks digests are only as strong as the hash function used to generate them user agents should refuse to support knownweak hashing functions like md and should restrict supported hashing functions to those known to be collisionresistant at the time of writing sha is a good baseline moreover user agents should reevaluate their supported hashing functions on a regular basis and deprecate support for those functions shown to be insecure  crossorigin data leakage attackers can determine whether some crossorigin resource has certain content by attempting to load it with a known digest and watching for load failure if the load fails the attacker can surmise that the resource didnt match the hash and thereby gain some insight into its contents this might reveal for example whether or not a user is logged into a particular service moreover attackers can bruteforce specific values in an otherwise static resource consider a document that looks like this example  htmlstatic contenthhello usernamehstatic contenthtml an attacker can precompute hashes for the page with a variety of common usernames and specify those hashes while repeatedly attempting to load the document by examining the reported violations the attacker can obtain a users username user agents should mitigate the risk by refusing to fire error events on elements which loaded crossorigin resources but some sidechannels will likely be difficult to avoid images naturalheight and naturalwidth for instance  acknowledgements none of this is new much of the content here is inspired heavily by gervase markhams link fingerprints concept as well as whatwgs link hashes a references a normative references abnf d crocker p overell augmented bnf for syntax specifications abnf january  std url httpwwwietforgrfcrfctxt cors anne van kesteren crossorigin resource sharing  january  wc recommendation url httpwwwworgtrcors csp adam barth dan veditz mike west content security policy  working draft url httpworgtrcsp html robin berjon steve faulkner travis leithead erika doyle navara edward oconnor silvia pfeiffer html  february  wc candidate recommendation url httpwwwworgtrhtml http r fielding et al hypertext transfer protocol  http june  rfc url httpwwwietforgrfcrfctxt mimetype ned freed nathaniel s borenstein multipurpose internet mail extensions mime part two media types draft standard url httptoolsietforghtmlrfc rfc s bradner key words for use in rfcs to indicate requirement levels march  internet rfc  url httpwwwietforgrfcrfctxt rfc e rescorla http over tls may  rfc url httpwwwietforgrfcrfctxt rfc simon josefsson the base base and base data encodings proposed standard url httptoolsietforghtmlrfc rfc a barth the web origin concept december  rfc url httpwwwietforgrfcrfctxt rfc stephen farrell dirk kutscher christian dannewitz borje ohlman ari keranen phillip hallambaker naming things with hashes proposed standard url httptoolsietforghtmlrfc webworkers ian hickson web workers  may  wc candidate recommendation url httpwwwworgtrworkers xmlhttprequest anne van kesteren julian aubourg jungkee song hallvord steen et al xmlhttprequest level   january  wc working draft url httpwwwworgtrxmlhttprequest