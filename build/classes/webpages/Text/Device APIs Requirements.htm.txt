device apis requirements device apis requirements wc working group note  october  this version httpwwwworgtrnotedapapireqs latest published version httpwwwworgtrdapapireqs latest editors draft httpdevworgdapapireqs previous version none editors robin berjon vodafone daniel coloma telefnica de espaa max froumentin opera marcin hanclik access jere kpyaho nokia  kangchan lee etri bryan sullivan att dzung tran intel copyright   wc mit ercim keio all rights reserved wc liability trademark and document use rules apply abstract these are the requirements intended to be met in the development of clientside apis that enable the creation of web applications and web widgets that interact with devices services such as calendar contacts camera etc status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document was published by the device apis and policy working group as a working group note if you wish to make comments regarding this document please send them to publicdeviceapis@worg subscribe archives all feedback is welcome this is the first publication of this document and it reflects the current vision of the working group on the apis it plans to develop there are open issues listed in the body of the document on which feedback would be particularly appreciated the group plans to update that document as these issues get resolved publication as a working group note does not imply endorsement by the wc membership this is a draft document and may be updated replaced or obsoleted by other documents at any time it is inappropriate to cite this document as other than work in progress this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy table of contents  introduction  global requirements  application configuration  application launcher  calendar  may be considered in future versions  camera  communications log  contacts  file system  gallery  messaging  system information  events  tasks  user interface a acknowledgements b references b normative references b informative references  introduction this section is nonnormative the requirements in this document are produced in a highlevel functionally oriented fashion in order to provide sufficient ground on which to build without going through the full landscape analysis process given that the apis being produced concern domains in which industry experience is already solid this document is not currently considered to be complete but rather represents a snapshot of the dap wgs thinking at the time of its publication  global requirements these requirements apply to all apis produced by the dap wg apis must be made available in a consistent fashion hanging off a single access point methods that may take a long time to complete must support asynchronous cancellable operation should the apis be made available on navigator navigatordevice or straight off a windowdevice  application configuration due to overlapping with widgets the widget interface widgetsapis and with web storage webstorage this deliverable has been dropped  application launcher the following requirements have been expressed a user agent may provide means for nonweb applications to register themselves as handlers for media types and uri schemes note that this may be outside the scope of this api it should be possible to launch an application for which no media type or protocol handler exists it should be possible to pass arguments to a launched application it should be possible to launch an application asynchronously it should be possible to launch an application synchronously for applications that run synchronously it should be possible to catch the output streams stdouterr etc the following requirements while they could be considered to be functionally part of this api are already addressed as part of the html html custom scheme and content handlers this interface must enable web applications to register themselves as handlers for a specific protocol a user agent may provide default handlers for a specific protocol this interface must enable web applications to register themselves as handlers for a specific media type a user agent may provide default handlers for a specific media type  calendar this interface must enable listing multiple available calendars must expose some basic properties of calendars such as default time zone name etc must enable creating deleting and updating calendars must enable creating deleting updating and finding calendar events must expose calendar event properties with a  mapping to icalendar rfc properties and values the above suggests support for only vevent however andrew mcmillan makes the following point given that the differences between vevent  vtodo are trivial in comparison to the complexity of their common elements and that vjournal is entirely a subset of those it seems to me there is very little to gain by removing vtodo and vjournal from this specification removal might restrict clients from implementing some potentially useful functionality the other supporting components of the specification like valarm and vtimezone seem to me so essential in any reasonable implementation of vevent that they dont even merit discussion  may be considered in future versions icalendar parsing and serialision hcalendar parsing and serialision calendar diffs direct caldav access  camera this interface must enable capture of static images must enable capture of videos must enable listing the available cameras must enable listing the available formats and codecs per camera must enable retrieval of the captured content must provide some metadata about the captured content eg width height format duration must enable choosing preferred aspects of the captured content eg width height format frame rate must enable displaying a viewfinder must support asynchronous cancellable capture should enable displaying a viewfinder as part of the document eg as a video element html should enable control of the cameras capabilities eg zoom luminosity night mode focus mode given support for capturing video we need to take sound capture into account once thats supported is there any reason not to support capturing sound on its own if we go there isnt this a capture api with the ability to list mikes if the user requests a given capture size which isnt available do we refuse or do we fall back if the latter which is likely what is the algorithm that is used to find the fallback it could be given a request for x the cameras preferred default x closest number of pixels x closest longest side x closest ratio we could very easily get bogged down in specifying camera capabilities and format feature variants  how do we decide which ones are reasonably in  communications log this interface must be able to provide a list of incoming and outgoing communication events must be able to search for events by type email phone sms as well as by content must be able to expose relevant metadata about events start and end time to and from etc  contacts this interface must enable listing all available address books on the device must enable listing all contacts in the address books must enable reading the details for a contact should enable creating a new contact should enable updating a contact should enable deleting a contact should enable filtering the list of contacts to search for a subset are there convincing use cases for supporting multiple address books in v as opposed to just a default one and maybe exposing more later do we need support for groups in v  file system this interface must integrate with the wc file api fileupload must enable listing items in a directory must enable creating a file or directory must enable deleting a file or directory must enable writing to a file must enable appending to a file must enable getting some metadata about a file eg size creation and update time media type may enable setting some metadata on a file should enable copying files and directories should enable moving files and directories must handle text encoding conversion when reading and writing to file at least utf and utf lebe should support binary access to file content must enable navigating a directory tree must reflect file system paths using a normalised separator  and in a consistent encoding may provide conversion between paths and file urls may support reading and writing in base or using data urls should support reading lines from a text document should support events for detecting the mountingunmounting of a file system eg to detect a memory card being plugged in must support listing the available file systems should provide access to a temporary storage location a form of tmp directory must provide some file system metadata eg size available space quota  gallery this interface must enable listing all available gallery sources their names and types must enable finding content inside a gallery must enable adding updating and removing content from a gallery must expose metadata about the gallerys content items copyright author mediadependent information etc exposing metadata is tricky often giving a choice between creating an endless ontology or building an openended system that guarantees no interoperability a lot of this functionality can be provided if the gallery api is basically a way of accessing wellknown parts of the file system and if the file system api has a way of exposing sufficient metadata this could make for a very simple api  messaging this interface must support messages in one or several formats and transports supported by the platform email sms mms must allow creating and sending messages must support multiple accounts for each transportformat type must support setting various envelope fields corresponding to the message type email sms must support attaching files when the format allows it  system information  events this interface must enable listing available power sources batteries wall must expose whether the device is running on battery or not must expose charge level per battery and globally must enable listing available network interfaces their types wifi g lan and signal strengths must list which of the available network interface are active and provide events to be informed of their status must provide cpu information may provide cpu load information must enable listing storage areas their types writability and available space must provide ram information may provide ram load information must enable listing displays as well as their colour depth resolution etc must enable listing input devices mouse keyboard touch keypad voice stylus must enable listing audio output devices and their properties must enable listing audio input devices and their properties must enable listing video capture devices and their properties must enable listing picture capture devices and their properties must enable listing thermal sensors alongside their names and measurements must enable listing ambient light sensors alongside their names and measurements must enable listing proximity detectors alongside their names and measurements must expose gyroscope and accelerometer capability and measurements must enable listing vibration capability must expose the availability of compass and geolocation capability this mixes system information and sensors  should they be separate should we have some system information and a universal sensor api how do we get interoperability out of that  tasks this interface must enable listing multiple available task lists projects must expose some basic properties of projects such as default name priority etc must enable creating deleting and updating projects must enable creating deleting updating and finding tasks must expose task properties with a  mapping to icalendar rfc properties and values vtodo see the issues that are part of the calendar api  user interface this interface must support beeping must support vibrating must support manipulating the backlights must enable the creation deletion and update of native application menus with arbitrary depth levels and callbacks a acknowledgements the editors would like to extend special thanks to nokia omtp bondi and phonegap for providing the foundation of the working groups requirements discussion b references b normative references fileupload robin berjon file upload  october  wc working draft work in progress url httpwwwworgtrwdfileupload rfc b desruisseaux internet calendaring and scheduling core object specification icalendar september  internet rfc  url httpwwwrfceditororgrfcrfctxt b informative references html ian hickson david hyatt html   april  wc working draft work in progress url httpwwwworgtrwdhtml webstorage ian hickson web storage  september  wc working draft work in progress url httpwwwworgtrwdwebstorage widgetsapis marcos caceres robin berjon arve bersvendsen widgets  apis and events  august  wc working draft work in progress url httpwwwworgtrwdwidgetsapis