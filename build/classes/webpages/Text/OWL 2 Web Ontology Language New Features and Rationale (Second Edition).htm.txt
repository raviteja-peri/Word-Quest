owl  web ontology language new features and rationale second edition owl  web ontology language new features and rationale second edition wc recommendation  december  this version httpwwwworgtrrecowlnewfeatures latest version series  httpwwwworgtrowlnewfeatures latest recommendation httpwwwworgtrowlnewfeatures previous version httpwwwworgtrperowlnewfeatures editors christine golbreich university of versailles saintquentin and lirmm evan k wallace national institute of standards and technology nist contributors peter f patelschneider nuance communications please refer to the errata for this document which may include some normative corrections a colorcoded version of this document showing changes made since the previous version is also available this document is also available in these nonnormative formats pdf version see also translations copyright   wc mit ercim keio all rights reserved wc liability trademark and document use rules apply abstract the owl  web ontology language informally owl  is an ontology language for the semantic web with formally defined meaning owl  ontologies provide classes properties individuals and data values and are stored as semantic web documents owl  ontologies can be used along with information written in rdf and owl  ontologies themselves are primarily exchanged as rdf documents the owl  document overview describes the overall state of owl  and should be read before other owl  documents this document is a simple introduction to the new features of the owl  web ontology language including an explanation of the differences between the initial version of owl and owl  the document also presents the requirements that have motivated the design of the main new features and their rationale from a theoretical and implementation perspective status of this document may be superseded this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr summary of changes there have been no substantive changes since the previous version for details on the minor changes see the change log and colorcoded diff please send comments please send any comments to publicowlcomments@worg public archive although work on this document by the owl working group is complete comments may be addressed in the errata or in future revisions open discussion among developers is welcome at publicowldev@worg public archive endorsed by wc this document has been reviewed by wc members by software developers and by other wc groups and interested parties and is endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web patents this document was produced by a group operating under the  february  wc patent policy this document is informative only wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent table of contents  introduction  features  rationale  syntactic sugar  f disjointunion  f disjointclasses  f negativeobjectpropertyassertion and negativedatapropertyassertion  new constructs for properties  f self restriction  f property qualified cardinality restrictions  f reflexive irreflexive and asymmetric object properties  f disjoint properties  f property chain inclusion  f keys  extended datatype capabilities  f extra datatypes and datatype restrictions  f nary datatypes  datatype definitions  data range combinations  simple metamodeling capabilities  f punning  extended annotations  f annotations  axioms about annotation properties  other innovations  f declarations  top and bottom properties  iris  imports and versioning  minor features  anonymous individuals  inverse properties  profiles  f owl  el owl  ql owl  rl  owl  el  owl  ql  owl  rl  which profile to choose   other design choices and rationale  syntax  backward compatibility  recapitulatory table  references  appendix use cases  use cases  features  use case   brain image annotation for neurosurgery hcls  use case   the foundational model of anatomy hcls  use case   classification of chemical compounds hcls  use case   querying multiple sources in an automotive company automotive  use case   obo ontologies for biomedical data integration hcls  use case   spatial and topological relationships at the ordnance survey earth and space  use case   the systematized nomenclature of medicine hcls  use case   simple partwhole relations in owl ontologies hcls  use case   kidney allocation policy in france hcls  use case   eligibility criteria for patient recruitment  use case   multiple ucs on datatype hcls  use case   protg report on the experiences of owl users tool  use case   web service modeling telecom  use case   managing vocabulary in collaborative environments wiki  use case   uml association class designer  use case   database federation designer  use case   tools developers tools  use case   virtual solar terrestrial observatory earth and space  use case   semantic provenance capture earth and space  use case   biochemical selfinteraction chemical domain  use cases bibliography  appendix change log informative  changes since recommendation  changes since proposed recommendation  changes since last call  acknowledgments  introduction this document provides an overview of the main new features of owl  and their rationale these features were determined based on real applications and user and tooldeveloper experience some of which has been documented in the owled workshop series the inclusion of the features is supported by use cases provided to the wc owl working group some of which are listed in the section  this document also describes and motivates some of the other design decisions that were made during the development of owl  or purposefully retained from owl web ontology language owl  particularly the various concrete syntaxes for owl  and the relationship of owl  with rdf section  owl  extends owl  and inherits the language features design decisions and use cases for owl  this document thus forms an extension of the use cases and requirements that underlie owl  owl use cases and requirements owl  adds several new features to owl  including increased expressive power for properties extended support for datatypes simple metamodeling capabilities extended annotation capabilities and keys section  owl  also defines several profiles  owl  language subsets that may better meet certain performance requirements or may be easier to implement section   features  rationale the new features of owl  are presented here organized in the following categories syntactic sugar to make some common statements easier to say new constructs that increase expressivity extended support for datatypes simple metamodeling capabilities extended annotation capabilities other innovations and minor features each feature is described in a common pattern as follows a brief sentence explaining why the new feature was added a feature description including an informal meaning informal syntax and a simple example issued from use cases the theoretical and implementation implications of the new feature and links to related use cases readers may selectively show or hide the examples and the functional syntax fss or the rdf syntax in the examples by toggling the buttons below   syntactic sugar owl  adds syntactic sugar to make some common patterns easier to write since all these constructs are simply shorthands they do not change the expressiveness semantics or complexity of the language implementations however may prefer to take special notice of these constructs for more efficient processing  f disjointunion while owl  provides means to define a set of subclasses as a disjoint and complete covering of a superclass by using several axioms this cannot be done concisely disjointunion defines a class as the union of other classes all of which are pairwise disjoint it is a shorthand for separate axioms making the classes pairwise disjoint and one setting up the union class normative syntax direct semantics rdfbased semantics disjointunion  a  c ce  cen  where c is a class cei   i  n are class expressions and  a  zero or more annotations hcls functionalstyle syntax disjointunionbrainhemisphere lefthemisphere righthemisphere uc a brainhemisphere is exclusively either a lefthemisphere or righthemisphere and cannot be both of them disjointunionlobe frontallobe parietallobe temporallobe occipitallobe limbiclobe uc a lobe is exclusively either a frontallobe parietallobe temporallobe occipitallobe or a limbiclobe and cannot be more than one of them rdf brainhemisphere owldisjointunionof  lefthemisphere righthemisphere  uc a brainhemisphere is exclusively either a lefthemisphere or righthemisphere and cannot be both of them lobe owldisjointunionof  frontallobe parietallobe temporallobe occipitallobe limbiclobe uc a lobe is exclusively either a frontallobe parietallobe temporallobe occipitallobe or a limbiclobe and cannot be more than one of them chemistry functionalstyle syntax disjointunionaminegroup primaryaminegroup secondaryaminegroup tertiaryaminegroup uc an aminegroup is exclusively either a primaryaminegroup secondaryaminegroup or a tertiaryaminegroup and cannot be both of them rdf aminegroup owldisjointunionof  primaryaminegroup secondaryaminegroup tertiaryaminegroup  uc an aminegroup is exclusively either a primaryaminegroup a secondaryaminegroup or a tertiaryaminegroup and cannot be both of them automotive functionalstyle syntax disjointunioncardoor frontdoor reardoor trunkdoor uc a cardoor is exclusively either a frontdoor a reardoor or atrunkdoor and not more than one of them rdf cardoor owldisjointunionof  frontdoor reardoor trunkdoor uc a cardoor is exclusively either a frontdoor a reardoor or atrunkdoor and not more than one of them use case  use case  use case  use case   f disjointclasses while owl  provides means to state that two subclasses are disjoint stating that several subclasses are pairwise disjoint cannot be done concisely disjointclasses states that all classes from the set are pairwise disjoint it is a shorthand for binary disjointness axioms between the classes normative syntax direct semantics rdfbased semantics disjointclasses  a  ce  cen  where cei   i  n are class expressions and  a  zero or more annotations hcls functionalstyle syntax disjointclasses upperlobeoflung middlelobeoflung lowerlobeoflung  uc upperlobeoflung middlelobeoflung lowerlobeoflung are pairwise exclusive disjointclasses leftlung rightlung  uc nothing can be both a leftlung and a rightlung rdf _x rdftype owlalldisjointclasses  _x owlmembers  upperlobeoflung middlelobeoflung lowerlobeoflung   uc upperlobeoflung middlelobeoflung lowerlobeoflung are pairwise exclusive leftlung owldisjointwith rightlung  uc nothing can be both a leftlung and a rightlung note the fma uses a huge number of disjoint classes fma c  of template left x vs right x eg left lung vs right lung  classes x of left y vs x of right y eg skin of right breast vs skin of left breast  classes x of male y vs x of female y eg right side of male chest vs right side of female chest use case  use case   f negativeobjectpropertyassertion and negativedatapropertyassertion while owl  provides means to assert values of a property for an individual it does not provide a construct for directly asserting values that an individual does not have negative facts negativeobjectpropertyassertion resp negativedatapropertyassertion states that a given property does not hold for the given individuals resp literal normative syntax direct semantics rdfbased semantics negativeobjectpropertyassertion  a  ope a a  where ope is an object property expression a a are individuals and  a  zero or more annotations negativedatapropertyassertion  a  dpe a lt  where dpe is a data property expression a an individual lt a literal and  a   or more annotations hcls functionalstyle syntax negativeobjectpropertyassertion livesin thispatient iledefrance  uc thispatient does not live in the iledefrance region negativedatapropertyassertion hasage thispatient xsdinteger  uc thispatient is not five years old rdf _x rdftype owlnegativepropertyassertion  _x owlsourceindividual thispatient  _x owlassertionproperty livesin  _x owltargetindividual iledefrance  thispatient does not live in the iledefrance region _x rdftype owlnegativedatapropertyassertion  _x owlsourceindividual thispatient  _x owlassertionproperty hasage  _x owltargetvalue xsdinteger  thispatient is not five years old use case   new constructs for properties owl  was mainly focused on constructs for expressing information about classes and individuals and exhibited some weakness regarding expressiveness for properties owl  offers new constructs for expressing additional restrictions on properties new characteristics of properties incompatibility of properties property chains and keys  f self restriction owl  does not allow for the definition of classes of objects that are related to themselves by a given property for example the class of processes that regulate themselves this local reflexivity is useful in many applications particularly when global reflexivity does not hold for a property in general but local reflexivity holds for some classes of object the owl  construct objecthasself allows local reflexivity to be used in class descriptions self restrictions are part of sroiq sroiq an extension of the description logic underlying owldl shoin designed to provide additions requested by users while not affecting its decidability and practicability sroiq is supported by several reasoners including fact hermit and pellet tools a class expression defined using an objecthasself restriction denotes the class of all objects that are related to themselves via the given object property normative syntax direct semantics rdfbased semantics objecthasself ope where ope is an object property expression hcls functionalstyle syntax subclassof autoregulatingprocess objecthasself regulate   autoregulating processes regulate themselves subclassof autophosphorylatingkinase objecthasself phosphorylate  uc autophosphorylatingkinases phosphorylate themselves rdf autoregulatingprocess owlsubclassof _x  _x rdftype owlrestriction  _x owlonproperty regulate  _x owlhasself truexsdboolean  autoregulating processes regulate themselves autophosphorylatingkinase owlsubclassof _x  uc _x rdftype owlrestriction  _x owlonproperty phosphorylate  _x owlhasself truexsdboolean  autophosphorylatingkinases phosphorylate themselves use case  use case   f property qualified cardinality restrictions while owl  allows for restrictions on the number of instances of a property eg for defining persons that have at least three children it does not provide a means to restrain the class or data range of the instances to be counted qualified cardinality restrictions eg for specifying the class of persons that have at least three children who are girls in owl  both qualified and unqualified cardinality restrictions are possible qualified object and data cardinality restrictions are present in sroiq and have been successfully implemented they are already supported by various tools and reasoners eg protg  fact hermit kaon pellet and racer tools owl api objectmincardinality objectmaxcardinality and objectexactcardinality respectively datamincardinality datamaxcardinality and dataexactcardinality allow for the assertion of minimum maximum or exact qualified cardinality restrictions object respectively data properties normative syntax direct semantics rdfbased semantics object property cardinality restrictions objectmincardinality  n ope  ce   where n is a nonnegative integer ope an object property expression and  ce  is zero or one class expression objectmaxcardinality  n ope  ce   where n is a nonnegative integer ope an object property expression and  ce  is zero or one class expression objectexactcardinality  n ope  ce   where n is a nonnegative integer ope an object property expression and  ce  is zero or one class expression hcls functionalstyle syntax objectmincardinality  hasdirectpart owlthing  class of objects having at least  direct part objectexactcardinality  hasdirectpart frontallobe  uc class of objects having exactly one direct part of type frontal lobe rdf _x rdftype owlrestriction  _x minqualifiedcardinality xsdnonnegativeinteger  _x owlonproperty hasdirectpart  class of objects having at least  direct part _x rdftype owlrestriction  _w owlcardinality xsdnonnegativeinteger  _x owlonproperty hasdirectpart  _x owlonclass frontallobe  uc class of objects having exactly one direct part of type frontal lobe in owl  it is possible to express that a brain hemisphere has at least  direct parts but not that it has exactly one direct part of each specific type frontal parietal temporal occipital limbic lobe as needed in uc in owl  both statements are possible as shown in the examples above chemistry functionalstyle syntax objectmaxcardinality  boundto hydrogen uc class of objects bound to at most three different hydrogen rdf _x rdftype owlrestriction  _x maxqualifiedcardinality xsdnonnegativeinteger  _x owlonproperty boundto  _x owlonclass hydrogen  uc class of objects bound to at most three different hydrogen automotive functionalstyle syntax objectmaxcardinality  haspart door  uc class of objects having at most  door objectexactcardinality  haspart reardoor  uc class of objects having exactly  reardoor rdf _x rdftype owlrestriction  _x maxqualifiedcardinality xsdnonnegativeinteger  _x owlonproperty haspart  _x owlonclass door  uc class of objects having at most  door _x rdftype owlrestriction  _w owlcardinality xsdnonnegativeinteger  _x owlonproperty haspart  _x owlonclass reardoor  uc class of objects having exactly  reardoor data property cardinality restrictions datamincardinality  n dpe  dr   where n is a nonnegative integer dpe a data property expression and  dr  is zero or one data range datamaxcardinality  n dpe  dr   where n is a nonnegative integer dpe a data property expression and  dr  is zero or one data range dataexactcardinality  n dpe  dr   where n is a nonnegative integer dpe a data property expression and  dr  is zero or one data range hcls functionalstyle syntax datamaxcardinality  hasssn  each individual has at most one social security number rdf _x rdftype owlrestriction  _x maxqualifiedcardinality xsdnonnegativeinteger  _x owlonproperty hasssn  each individual has at most one social security number use case  use case  use case  use case  use case   f reflexive irreflexive and asymmetric object properties while owl  allows assertions that an object property is symmetric or transitive it is impossible to assert that the property is reflexive irreflexive or asymmetric the owl  construct reflexiveobjectproperty allows it to be asserted that an object property expression is globally reflexive  that is the property holds for all individuals normative syntax direct semantics rdfbased_semantics reflexiveobjectproperty   a  ope  where ope is an object property expression and  a  zero or more annotations hcls functionalstyle syntax reflexiveobjectproperty samebloodgroup  uc everything has the same blood group as itself reflexiveobjectproperty part_of  uc everything is part_of itself rdf samebloodgroup rdftype owlreflexiveproperty  uc everything has the same blood group as himself part_of rdftype owlreflexiveproperty  uc everything is part_of itself note there are different interpretations of the mereological relations for example obo use case  states that part_of is reflexive while the mereological relation anatomicalpartof between anatomical entities is asserted to be irreflexive in use case  the owl  construct irreflexiveobjectproperty allows it to be asserted that an object property expression is irreflexive  that is the property does not hold for any individual normative syntax direct semantics rdfbased_semantics irreflexiveobjectproperty   a  ope  where ope is an object property expression and  a  zero or more annotations hcls functionalstyle syntax irreflexiveobjectproperty proper_part_of  uc nothing can be a proper part of itself irreflexiveobjectproperty boundby  uc nothing can be bound by itself rdf proper_part_of rdftype owlirreflexiveproperty  uc nothing can be a proper part of itself boundby rdftype owlirreflexiveproperty  uc nothing can be bound by itself earth and space functionalstyle syntax irreflexiveobjectproperty flowsinto uc nothing can flow into itself rdf flowsinto rdftype owlirreflexiveproperty  uc nothing can flow into itself note the given examples correspond to the statements about mereological and topological properties anatomicalpartof boundby in the given use cases eg use case  other applications may however use these terms for properties with different characteristics the owl  construct asymmetricobjectproperty allows it to be asserted that an object property expression is asymmetric  that is if the property expression ope holds between the individuals x and y then it cannot hold between y and x note that asymmetric is stronger than simply not symmetric normative syntax direct semantics rdfbased_semantics asymmetricobjectproperty   a  ope  where ope is an object property expression and  a  zero or more annotations hcls functionalstyle syntax asymmetricobjectproperty proper_part_of uc the property proper_part_of is asymmetric rdf proper_part_of rdftype owlasymmetricproperty  uc the property proper_part_of is asymmetric these constructs are part of sroiq and have been implemented in sroiq reasoners such as fact hermit and pellet use case  use case  use case  note many use cases illustrate the desirability for reflexivity irreflexivity asymmetry or local reflexivity the usefulness of these features was explicitly mentioned by the health care and life sciences interest group in their last call comment the semantic web deployment working group swd also explicitly mentioned the potential usefulness of reflexivity and asymmetry eg for specifying applicationspecific specializations of skos semantic relations see comment from the swd for example in mereology the partof relation is defined to be transitive reflexive and antisymmetric many applications that describe complex structures eg in life sciences or systems engineering require extensive use of partwhole relations axiomatized in this way other relations encountered in ontology modeling also require such axiomatizations possibly with different characteristics eg obo ro examples include proper part of and locative relations typically transitive and irreflexive causal relations typically transitive and irreflexive and membership relations typically irreflexive another example is the skosbroader relationship the skos specification skos makes no statements regarding the reflexivity or irreflexivity of skosbroader to allow both interpretations for example it should be considered reflexive for a direct translation of an inferred owl subclass hierarchy but irreflexive for most thesauri or classification schemes owl  reflexivityirreflexivity allows one of these two features to be added on demand self restrictions are even more fine grained allowing skosbroader to be made only locally reflexive or irreflexive wrt a given skosconcept via a subclassof axiom    f disjoint properties while owl  provides means to state the disjointness of classes it is impossible to state that properties are disjoint the owl  construct disjointobjectproperties allows it to be asserted that several object properties are pairwise incompatible exclusive that is two individuals cannot be connected by two different properties of the set this construct is part of sroiq and has been implemented in sroiq reasoners normative syntax direct semantics rdfbased semantics disjointobjectproperties  a  ope  open  where opei   i  n are object property expressions and  a  zero or more annotations hcls functionalstyle syntax disjointobjectproperties connectedto contiguouswith  uc connectedto and contiguouswith are exclusive properties rdf connectedto owlpropertydisjointwith contiguouswith  uc connectedto and contiguouswith are exclusive properties note use case  defines two anatomical entities related by a third anatomical entity as connected while when they are adjacent they are said to be contiguous disjointdataproperties allows it to be asserted that several data properties are pairwise incompatible exclusive normative syntax direct semantics rdfbased semantics disjointdataproperties  a  dpe  dpen  where dpei   i  n are data property expressions and  a  zero or more annotations functionalstyle syntax disjointdataproperties starttime endtime  start time of something eg surgery must be different from its end time rdf starttime owlpropertydisjointwith endtime  start time of something eg surgery must be different from its end time use case  use case  use case   f property chain inclusion owl  does not provide a means to define properties as a composition of other properties as uncle could be defined hence it is not possible to propagate a property eg locatedin along another property eg partof the owl  construct objectpropertychain in a subobjectpropertyof axiom allows a property to be defined as the composition of several properties such axioms are known as complex role inclusions in sroiq which also defines regularity conditions necessary for decidability and have been implemented in sroiq reasoners normative syntax direct semantics rdfbased semantics an axiom subobjectpropertyof  objectpropertychain ope  open  ope states that any individual x connected with an individual y by a chain of object properties expressions ope  open is necessary connected with y by the object property ope subobjectpropertyof   a  objectpropertychain ope  open  ope  where opei   i  n are object property and  a  zero or more annotations hcls functionalstyle syntax subpropertyof objectpropertychain locatedin partof  locatedin  uc if x is located in y and y is part of z then x is located in z for example a disease located in a part is located in the whole rdf locatedin owlpropertychainaxiom  partof locatedin   uc if x is located in y and y is part of z then x is located in z for example a disease located in a part is located in the whole use case  use case  use case  use case   f keys owl  does not provide a means to define keys however keys are clearly of vital importance to many applications in order to uniquely identify individuals of a given class by values of a set of key properties the owl  construct haskey allows keys to be defined for a given class while in owl  key properties are not required to be functional or total properties it is always possible to separately state that a key property is functional if desired keys in owl  are a form of dl safe rule dlsafe they have been implemented in hermit kaon and pellet and can be added to other reasoners an haskey axiom states that each named instance of a class is uniquely identified by a data or object property or a set of properties  that is if two named instances of the class coincide on values for each of key properties then these two individuals are the same normative syntax direct semantics rdfbased semantics haskey  a  ce  ope  opem   dpe  dpen   where ce is a class expression opei    i  m are object property expressions dpej   j  n are data property expression and  a  zero or more annotations hcls functionalstyle syntax haskey registeredpatient haswaitinglistn  each registered patient  on the abm national organ waiting list  is uniquely identified by his waiting list number uc classassertion registeredpatient thispatient  thispatient is a registeredpatient datapropertyassertion haswaitinglistn thispatient   thispatient has the the waiting list number  rdf registeredpatient owlhaskey  haswaitinglistn   each registered patient  on the abm national organ waiting list  is uniquely identified by his waiting list number uc thispatient rdftype registeredpatient  thispatient is a registeredpatient thispatient haswaitinglistn   thispatient has the the waiting list number  in this example since haswaitinglistn is a key for the class registeredpatient the number  uniquely identifies thispatient the axiom haskey registeredpatient haswaitinglistn  only states that two different patients who have got a number assigned cannot have the same number on the waiting list if the values of haswaitinglistn were the same for two named instances of the class registeredpatient these two individuals would be equal an haskey axiom is similar to an inversefunctionalproperty axiom the main difference being that it is applicable only to individuals that are explicitly named it does not state that each registered patient has at least or at most one value of haswaitinglistn the inference that each patient who has a haswaitinglistn belongs to the class registeredpatient cannot be drawn functionalstyle syntax haskey transplantation donorid recipientid oforgan  each transplantation is uniquely identified by a donor a recipient and an organ uc rdf transplantation owlhaskey  donorid recipientid oforgan   each transplantation is uniquely identified by a donor a recipient and an organ uc a set of several properties is needed to identify a transplantation indeed a donor may provide several organs to a single person eg a kidney and a liver or the same kind of organ to two recipients eg a kidney or different organs to different recipients use case  use case  use case   extended datatype capabilities  f extra datatypes and datatype restrictions owl  provides support for only integers and strings as datatypes and does not support any subsets of these datatypes for example one could state that every person has an age which is an integer but could not restrict the range of that datatype to say that adults have an age greater than  owl  provides new capabilities for datatypes supporting a richer set of datatypes and restrictions of datatypes by facets as in xml schema owl  datatypes include a various kinds of numbers adding support for a wider range of xml schema datatypes double float decimal positiveinteger etc and providing its own datatypes eg owlreal b strings with or without a language tag using the rdfplainliteral datatype and c boolean values binary data iris time instants etc datatyperestriction also makes it possible to specify restrictions on datatypes by means of constraining facets that constrain the range of values allowed for a given datataype by length for strings eg minlength maxlength and minimummaximum value eg mininclusive maxinclusive extended datatypes are allowed in many description logics and are supported by several reasoners normative syntax direct semantics rdfbased semantics datatyperestriction dt f lt  fn ltn  where dt is a unary datatype and  fi lti    i  n are pairs of constraining facet and literal hcls functionalstyle syntax datatyperestrictionxsdinteger mininclusive  uc new datatype with a lower bound of  on the xml schema datatype xsdinteger rdf _x rdftype rdfsdatatype  _x owlondatatype xsdinteger  _x owlwithrestrictions  _y   _y xsdmininclusive xsdinteger  uc new datatype with a lower bound of  on the xml schema datatype xsdinteger this datatype is needed for example to define patients under  children who depend on a hospitals pediatric services while those over  adults depend on adult services use case  use case  use case  use case  use case   f nary datatypes in owl  it is not possible to represent relationships between values for one object eg to represent that a square is a rectangle whose length equals its width nary datatype support was not added to owl  because there were issues regarding just what support should be added however owl  includes syntactic constructs needed for nary datatypes to provide a common basis for extensions the data range extension linear equations note proposes an extension to owl  for defining data ranges in terms of linear inequations with rational coefficients hcls functionalstyle syntax dataallvaluesfrom  admissiontemperature currenttemperature datacomparisonargumentsx y leq x y  uc individuals whose admissiontemperature is less than or equal to their currenttemperature use case  use case   datatype definitions owl  allows a new class to be defined by a class description but it does not offer means to explicitly define a new datatype for ease of writing reading and maintaining ontologies owl  provides a new construct to define datatypes this is particularly useful if the same datatype is used multiple times in an ontology datatypedefinition allows to explicitly name a new datatype normative syntax direct semantics rdfbased semantics datatypedefinition   a  dt dr  where dt is a datatype dr a data range and  a  zero or more annotations hcls functionalstyle syntax datatypedefinition adultage datatyperestrictionxsdinteger mininclusive uc an adult age is defined by using a lower bound of  with the xml schema datatype xsdinteger rdf adultage owlequivalentclass _x  _x rdftype rdfsdatatype  _x owlondatatype xsdinteger  _x owlwithrestrictions  _y   _y xsdmininclusive xsdinteger  an adult age is defined by using a lower bound of  with the xml schema datatype xsdinteger use case   data range combinations while owl  allows a new class to be constructed by combining classes it does not provide means to construct a new datatype by combining other ones in owl  it is possible to define new datatypes in this way in owl  combinations of data ranges can be constructed using intersection dataintersectionof union  dataunionof and complement datacomplementof of data ranges dataintersectionof   a  dr  drn  where dri   i  n are data ranges and  a  zero or more annotations dataunionof   a  dr  drn  where dri   i  n are data ranges and  a  zero or more annotations datacomplementof   a  dr where dri   i  n are data ranges and  a  zero or more annotations functionalstyle syntax datacomplementof adultage  this data range contains all literals that are not a positive integer greater or equal to  rdf _x rdftype rdfsdatatype  _x owlcomplementof adultage  this data range contains all literals that are not a positive integer greater or equal to  use case   simple metamodeling capabilities  f punning owl  dl required a strict separation between the names of eg classes and individuals owl  dl relaxes this separation somewhat to allow different uses of the same term eg eagle to be used for both a class the class of all eagles and an individual the individual representing the species eagle belonging to the metaclass of all plant and animal species however owl  dl still imposes certain restrictions it requires that a name cannot be used for both a class and a datatype and that a name can only be used for one kind of property the owl  direct semantics treats the different uses of the same name as completely separate as is required in dl reasoners telecom declaration class person   uc  person is declared to be a class classassertion service s   s is an individual of service objectpropertyassertion hasinput s person  the individual s is connected by hasinput to the individual person the same term person denotes both a class in  and an individual in  this is possible in owl  thanks to punning class  individual collaborative environment wiki declaration class deprecated_properties   uc deprecated_properties is declared to be a class declaration objectproperty is_located_in    is_located_in is declared to be an objectproperty classassertion deprecated_properties is_located_in   is_located_in is an individual of deprecated_properties the same term is_located_in denotes both a property  and an individual  this is possible in owl  thanks to punning property  individual use case  could also be represented using an annotation deprecated property on the property is_located_in which might be more intuitive or better modeling uml design declaration class person   declaration class company   uc  person and company are declared to be classes subclassof  personcompany association  personcompany denotes a subclass of an association used to model an association between classes person and company as a class objectpropertydomain personcompany person  the domain of the property personcompany is person objectpropertyrange personcompany company  the range of the property personcompany is company the same term personcompany denotes both a class  and an objectproperty  this is possible in owl  thanks to punning class  objectproperty use case  use case  use case  use case   extended annotations owl  allowed extralogical annotations such as a label or a comment to be given for each ontology entity but did not allow annotations of axioms eg giving information about who asserted an axiom or when owl  allows for annotatins on ontologies entities anonymous individuals axioms and annotations themselves  f annotations annotations on ontology entities and anonymous individuals owl  provides the construct annotationassertion for annotation of ontology entities such as classes or properties and anonymous individuals these annotations carry no semantics in the owl  direct semantics allowing the direct use of dl reasoners annotationassertion  a  ap s v  where ap is an annotation property s is an iri or an anonymous individual v is a literal an iri or an anonymous individual and a are  or more annotations of the annotation assertion hcls functionalstyle syntax annotationassertion rdfslabel caro anatomical structure  uc the iri caro of caro ontology is annotated by the humanreadable label anatomical structure as a value of the rdfslabel annotation property annotationassertion fmauwdaid fmaheart   uc the iri fmaheart of the fma is annotated by the integer  its fma id as a value of the annotation property fmauwdaid rdf caro rdfslabel anatomical structure  uc the iri caro of caro ontology is annotated with the rdfslabel annotation property by the humanreadable label anatomical structure fmaheart fmauwdaid xsdpositiveinteger  uc the iri fmaheart of the fma is annotated with the annotation property fmauwdaid by the positive integer  its fma id annotations on axioms annotations ontologies owl  provides the construct annotation for annotations of axioms and ontologies it can also be used for annotations of annotations themselves these annotations carry no semantics in the owl  direct semantics allowing the direct use of dl reasoners annotation a ap v  where ap is an annotation property v is a literal an iri or an anonymous individual and a are  or more annotations hcls functionalstyle syntax subclassof annotation rdfscomment middle lobes of lungs are necessarily right lobes since left lungs do not have middle lobe middlelobe rightlobe  uc the comment middle lobes of lungs are necessarily right lobes is an annotation of the subclass axiom which explains why middlelobe is a subclass of rightlobe rdf middlelobe rdfssubclassof rightlobe  _x rdftype owlannotation  _x owlannotatedsource middlelobe  _x owlannotatedproperty rdfssubclassof  _x owlannotatedtarget rightlobe  _x rdfscomment middle lobe of lungs are necessary right lobe since left lung do not have middle lobe  uc the comment middle lobe of lungs are necessary right lobe is an annotation of the subclass axiom which explains why middlelobe is a subclass of rightlobe use case  use case  use case  use case   axioms about annotation properties annotation properties can be given domains annotationpropertydomain and ranges annotationpropertyrange and participate in an annotation property hierarchy subannotationpropertyof these special axioms have no semantic meaning in the owl  direct semantics but carry the standard rdf semantics in the rdfbased semantics via the mapping to rdf vocabulary subproperty of annotation property subannotationpropertyof  a  ap ap  where ap  and ap are annotation properties and a are  or more annotations hcls functionalstyle syntax subannotationpropertyof narrow_synonym synonym  uc the property narrow_synonym is a subproperty of synonym obo ontologies in particular the gene ontology distinguish different kinds of synonyms exact_synonym narrow_synonym broad_synonym rdf narrow_synonym rdfssubpropertyof synonym  uc the property narrow_synonym is a subproperty of synonym obo ontologies in particular gene ontology distinguish different kinds of synonyms exact_synonym narrow_synonym broad_synonym domain of annotation property annotationpropertydomain   a  ap u  where ap is an annotation property u is an iri and a are  or more annotations hcls functionalstyle syntax annotationpropertydomain  fmauwdaid fmaanatomicalentity uc only fma anatomicalentity can have an fmauwdaid that is an fma id rdf fmauwdaid rdfsdomain fmaanatomicalentity  uc only fma anatomicalentity can have an fmauwdaid that is an fma id range of annotation property annotationpropertyrange   a  ap u  where ap is an annotation property u is an iri and a are  or more annotations hcls functionalstyle syntax annotationpropertyrange  fmauwdaid xsdpositiveinteger  uc the id of an fma anatomicalentity is a positive integer rdf fmauwdaid rdfsrange xsdpositiveinteger  uc the id of an fma anatomicalentity is a positive integer use case  use case   other innovations  f declarations in owl  an entity such as a class or an object property could be used in an ontology without any prior announcement so there was no way of ensuring that entity names matched in different axioms in practice if an entity name was mistyped in an axiom there was no way of catching the error in owl  a declaration signals that an entity is part of the vocabulary of an ontology a declaration also associates an entity category class datatype object property data property annotation property or individual with the declared entity declarations are not always necessary see syntax declarations do not affect the meaning of owl  ontologies and thus do not have an effect on reasoning implementations may choose to check that every name is declared if desired declaration a e  where a is an annotation and e an entity tools the following declarations state that the iri person is used as a class and the iri peter as an individual functionalstyle syntax declaration class person   uc person is declared to be a class declaration namedindividual peter   peter is declared to be an individual rdf person rdftype owlclass uc person is declared to be a class peter rdftype owlnamedindividual  peter is declared to be an individual hcls functionalstyle syntax declaration class caro   uc caro is declared to be a class rdf caro rdftype owlclass uc caro is declared to be a class use case  use case   top and bottom properties while owl  had only top and bottom predefined entities for classes the two classes owlthing and owlnothing owl  also provides top and bottom object and data properties namely owltopobjectproperty owlbottomobjectproperty owltopdataproperty and owlbottomdataproperty all pairs of individuals are connected by owltopobjectproperty no individuals are connected by owlbottomobjectproperty all possible individuals are connected with all literals by owltopdataproperty no individual is connected by owlbottomdataproperty to a literal  iris uniform resource locators uris were used in owl  to identify classes ontologies and other ontology elements uris are strings formed using a subset of ascii this was quite limiting particularly with respect to nonenglish language names as ascii only includes letters from the english alphabet to support broad international needs owl  uses internationalized resource identifiers iris rfc for identifying ontologies and their elements  imports and versioning in owl  ontologies can be stored as semantic web documents and ontologies can import other ontologies owl  makes it clear that this importing is by the location of the ontology document owl  also clears up the relationship between an ontology name iri and its location and in response to several requests provides a simple versioning mechanism by means of version names iris each owl  ontology may have an ontology iri which is used to identify the ontology an owl  ontology may also have a version iri which is used to identify a particular version of the ontology an owl  ontology is stored at its version iri and one of the ontologies that have the ontology iri is stored at the ontology iri as well if it does not matter which of the versions is desired then importing can use the ontology iri but if a particular version is desired then the version iri is used ontology  o  v   import  o    a   ax   where o and v are zero or one ontology and version iris importo are  or more imports o is an ontology iri a are  or more annotations and ax are  or more axioms the ontology is stored at its version iri v one of the versions using the ontology iri o should also be stored at o this is considered to be the current version of the ontology  minor features some other changes have been introduced in the owl  syntax but these are not changes in the expressive power with respect to owl   anonymous individuals in owl  anonymous individuals were introduced as individuals without identifiers functionalstyle syntax individualvalue city paris  value region iledefrance  this axiom does not contain an individual name for the subject of the city and region triples so the introduced individual is an anonymous individual in contrast in owl  anonymous individuals are identified using node ids functionalstyle syntax objectpropertyassertion city _a paris  uc this axiom introduces an explicit anonymous individual _a for this unknown address which is in the city of paris  objectpropertyassertion region _a iledefrance  and in the region of iledefrance rdf _a city paris  this axiom introduces an explicit anonymous individual _a for this unknown address which is in the city of paris  _a region iledefrance  in the state of rhode island this change was mainly motivated by a requirement related to the new functional syntax while patterns using blank nodes could be specified without node ids because of the nested frame structure of abstract syntax constructions this cannot be done in the functional syntax there is no change in expressive capability nothing changed on the rdf side and the treatment of anonymous individuals in owl  is fully backwards compatible with that in owl  in the example above the _a simply represents a blank node in the rdf graph use case   inverse properties in owl  all properties are atomic but it is possible to assert that some object property is the inverse of another property in owl  property expressions such as objectinverseof p  can be directly used in class expressions this makes writing ontologies easier by avoiding the need to name an inverse an inverse object property expression objectinverseof p  connects an individual a with a if and only if the object property p connects a with a objectinverseof p  where p is an object property functionalstyle syntax objectinverseof partof  this expression represents the inverse property of partof rdf _x owlinverseof partof  this expression represents the inverse property of partof an inverse object properties axiom inverseobjectproperties ope ope  states that two properties are inverse inverseobjectproperties ope ope  where ope and ope are object property expressions the following is an example of an owl  inverse property axiom functionalstyle syntax objectproperty haspart inverse partof  haspart has an inverse property named partof this can be represented in owl  by the following axiom stating that haspart is an inverse of partof functionalstyle syntax equivalentproperties haspart objectinverseof partof   partof is the same as the inverse property of haspart as such axioms are quite common owl  provides the following syntactic shortcut as well functionalstyle syntax inverseobjectproperties haspart partof  haspart and partof are inverse properties rdf haspart owlinverseof partof  haspart and partof are inverse properties  profiles  f owl  el owl  ql owl  rl owl  defined two major dialects owl dl and owl full and one syntactic subset owl lite however it turned out that this was not sufficient to address requirements later identified by deployments of owl ontologies many applications particularly in the life sciences use very large ontologies eg the fma nci thesaurus snomed ct gene ontology and some obo ontologies such ontologies often need to represent rather complex entities eg anatomical entities composed of parts connected in complex ways or to allow the propagation of properties eg location of diseases from parts to whole they also have a huge number of classes and heavy use is made of classification in order to facilitate development and maintenance applications are therefore mainly concerned with language scalability and reasoning performance problems see eg issues surrounding the fma fma and are willing to trade off some expressiveness in return for computational guarantees particularly wrt classification many applications involving classical databases are concerned with interoperability of owl with database technologies and tools while the ontologies used in such applications are typically relatively lightweight they are often used to query very large sets of individuals stored in standard relational databases there is therefore a requirement to access such data directly via relational queries eg sql other applications are concerned with interoperability of the ontology language with rules and existing rule engines while the ontologies used in such applications are again typically relatively lightweight they may be used to query large datasets and it may be useful or necessary to operate directly on data in the form of rdf triples typical cases include both owl applications that are willing to trade the full expressivity of the language for efficiency and rdfs applications that need some added expressivity from owl  in order to address the above requirements owl  defines three different profiles  owl  el owl  ql and owl  rl  sublanguages syntactic subsets of owl  with useful computational properties eg reasoning complexity in range of logspace to ptime or implementation possibilities eg fragments implementable using rdbs they are briefly described below for a complete description see profiles owl  profiles  owl  el owl  el captures the expressive power used by many largescale ontologies eg snomed ct and the nci thesaurus owl  el places several syntactic restrictions on the language restrictions on constructs owl  el supports existential quantification to a class expression or a data range existential quantification to an individual objecthasvalue or a literal datahasvalue selfrestriction enumerations involving a single individual or a single literal intersection of classes and data ranges missing features include universal quantification to a class expression or a data range cardinality restrictions min max and exact disjunction objectunionof disjointunion and dataunionof class negation and many other features a complete list of missing features is given in owl  profiles owl  profiles restrictions on axioms owl  el supports most axioms eg subclass equivalentclass class disjointness range and domain object property inclusion subobjectpropertyof possibly involving property chains and data property inclusion subdatapropertyoftransitive properties keys haskey  it should be noted that in addition to syntactic restrictions owl  el extends the global restrictions on axioms defined in the owl  structural specification owl  specification with an additional condition see  global restrictions in owl  profiles owl  profiles as a result of these restrictions owl  el reasoners eg cel cel can exploit reasoning algorithms including query answering algorithms whose complexity is known to be worstcase polynomial see computational properties in owl  profiles owl  profiles the el acronym reflects the profiles basis in the el family of description logics el el update logics that provide only existential quantification  owl  ql owl  ql captures the expressive power typically used in simple ontologies like thesauri and most of the expressive power of eruml schemas owl  ql places several syntactic restrictions on the language restrictions on constructs features include a limited form of existential restrictions subclass equivalentclass disjointness range and domain symmetric properties etc missing features are existential quantification to a class expression or a data range selfrestriction existential quantification to an individual or a literal enumeration of individuals and literals universal quantification to a class expression or a data range cardinality restrictions min max and exact disjunction objectunionof disjointunion and dataunionof property inclusions subobjectpropertyof involving property chains functional and inversefunctional properties transitive properties reflexive properties irreflexive properties asymmetric properties keys a complete list of missing features is given in owl  profiles owl  profiles restrictions on axioms owl  ql supports the same class axioms as in the structural specification owl  specification except disjointunion which is disallowed these restrictions enable a tight integration with rdbmss and reasoners can be implemented on top of standard relational databases this profile is therefore particularly well suited to applications requiring only relatively lightweight ontologies but with very large number of individuals and where it is useful or necessary to access the data directly via relational queries eg sql reasoning including query answering can be efficiently implemented using query rewriting techniques and its complexity is known to be worst case nlogspace see computational properties in owl  profiles owl  profiles the ql acronym reflects the fact that query answering can be implemented by rewriting queries into a standard relational query language  owl  rl owl  rl is designed to accommodate both owl  applications that can trade the full expressivity of the language for efficiency and rdfs applications that need some added expressivity from owl  this is achieved by defining a syntactic subset of owl  which is amenable to implementation using rulebased technologies owl  rl places several syntactic restrictions on the language restrictions on constructs most owl  class expressions constructs are supported but with their use restricted to certain syntactic positions see table  in owl  profiles owl  profiles for example neither existential quantification to a class nor unions of class expressions objectunionof are allowed on the right hand side of axioms restrictions on axioms owl  rl supports all axioms of owl  except disjoint unions of classes reflexive object property axioms and negative object and data property assertions these restrictions allow owl  rl to be implemented using rulebased technologies such as rule extended dbmss and results in the complexity of reasoning including query answering being worstcase polynomial see computational properties in owl  profiles owl  profiles rulebased implementations can operate directly on rdf triples eg oracles owl prime owl prime and so can be applied to an arbitrary rdf graph ie to any owl  ontology in this case only correct answers to queries will be computed reasoning will be sound but it is not guaranteed to obtain all correct answers it may not be complete the profile was inspired by dlp dlp and pd pd and the rl acronym reflects the fact that reasoning can be implemented using a standard rule language use case  use case  use case  use case  use case   which profile to choose  application developers may ask themselves which profile best suits their needs the choice between the different profiles mainly depends on the expressiveness required by the application the priority given to reasoning on classes or data the size of datasets and importance of scalability etc the following suggestions may be useful users requiring a scalable profile for large but rather simple ontologies and good time performance for ontology tboxschema reasoning may want to consider owl  el users requiring a profile that can easily interoperate with relational database systems and where scalable reasoning on large datasets is the most important task may want to consider owl  ql users requiring a profile that can easily interoperate with rules engines and rule extended dbmss and where scalable reasoning on large datasets is the most important task may want to consider owl  rl note that owl  ql and owl  rl are both well suited to applications where relatively lightweight ontologies are used with very large datasets the choice of which to use may depend on the type of data to be processed if it is useful or necessary to access the data directly via relational queries eg sql then owl  ql may be preferred if it is useful or necessary to operate directly on data in the form of rdf triples then owl  rl may be preferred  other design choices and rationale while owl  is fully backwards compatible with owl  its conceptual design is slightly different in particular regarding owl  syntax  syntax there are various syntaxes available to serialize and exchange owl  ontologies the primary exchange syntax for owl  is the rdfxml syntax rdfxml which is the only syntax that must be supported by implementations as explained below the main purpose of the functional syntax owl  specification is to specify the structure of the language owlxml owl  xml is an xml serialization motivated by the desire for better interoperability with xml based tools and languages normative syntax the only required exchange syntax for owl  ontologies is rdfxml as clearly stated in section  of the conformance document owl  conformance several syntaxes have been defined for owl  ontology documents some or all of which could be used by owl  tools for exchanging documents however conformant owl  tools that take ontology documents as inputs must accept ontology documents using the rdfxml serialization owl  rdf mapping and conformant owl  tools that publish ontology documents must if possible be able to publish them in the rdfxml serialization if asked to do so eg via http content negotiation functional syntax the grammar of owl  was defined by the abstract syntax as the functional syntax fs plays a similar role for owl  it defines the grammar of the language but owl  is specified not only in terms of a grammar but also of structure indeed in addition to the functional syntax owl  has introduced the structural specification to precisely specify the conceptual structure of owl  ontologies the structural specification is defined using the unified modeling language uml it uses a very simple form of uml diagrams that are expected to be easily understandable by readers familiar with objectoriented systems the structural specification provides a normative abstract model for all the syntaxes of owl  normative and nonnormative it is independent of any concrete exchange syntaxes for owl  ontologies the functional syntax closely follows the structural specification clarity and readability of the syntax were important factors in the design of the functional syntax the functionalstyle syntax has been introduced to allow for easy writing of owl  axioms another benefit of the owl  functional syntax is that it is closer to the syntax used in first order logic which makes various specification issues as well as relating owl  constructs to the general literature easier it is one among several syntaxes for owl  eg rdfxml manchester syntax owl  provides a framelike syntax that allows several features of a class property or individual to be defined in a single axiom at once this may cause problems in practice first it bundles many different aspects of the given entity into a single axiom while this may be convenient when ontologies are being designed it is not convenient for manipulating them programmatically in fact most implementations of owl  break such axioms apart into several atomic axioms each dealing with only a single feature of the entity however this may cause problems with roundtripping as the structure of the ontology may be destroyed in the process second this type of axiom is often misinterpreted as a declaration and unique definition of the given entity in owl  however entities may be used without being the subject of any such axiom and there may be many such axioms relating to the same entity owl  has addressed these problems in several ways first the framelike notation has been dropped in favor of a more finegrained structure of axioms each axiom describes just one feature of the given entity second owl  provides explicit declarations and an explicit definition of the notion of structural consistency although owl  is more verbose this is not expected to lead to problems given that most owl ontologies are created using ontology engineering tools the following is an example of an owl  framelike axiom objectproperty partof objectinverseof containedin  inversefunctional transitive annotation rdfscomment an object is a part of another object the property partof has an inverse property named containedin is an inverse functional and transitive property and has the humanfriendly comment specifies that an object is a part of another object this can be represented in owl  using the following axioms declaration objectproperty partof   declaration of the object property partof annotationassertion rdfscomment partof partof means that an object is a part of another object  this assertion provides a comment on the property partof which is partof means that an object is a part of another object inverseobjectproperties partof containedin  partof and containedin are inverse properties inversefunctionalobjectproperty partof  partof is an inverse functional property transitiveobjectproperty partof  partof is a transitive property concerning the abstract syntax as in owl  if as is used as an exchange syntax then owl  ontologies written in as may be input to owl  tools and remain valid ontologies but it should be emphasized that this is an issue of the tool providers the only required exchange syntax for owl  ontologies being rdfxml it is up to the tools to decide whether they would accept ontologies serialized in as or in fs for that matter owlxml syntax the owl working group has defined an xml syntax for owl  based on xml schema xml schema called the xml_serialization or owlxml owl  xml this syntax mirrors the structural specification of owl  owl  specification the xml syntax is motivated by the desire to support owl users who want better interoperability with xml based tools and languages for example wsdl xsltxqueryxpath or schemaaware editors this is a standard format that owl tool vendors may optionally support to provide access to the extensive tool chain available for xml schemas thus owl tool developers and users using tools from these vendors will be be able to write xpath xslt xquery and css to work with owl this was very difficult to do using the rdfxml format which was the only xml format available for owl  an additional benefit is that xml data can be exposed to rdfowl applications using grddl the introduction of owlxml also provides a more comfortable avenue for the xmlsavvy user to understand owl and makes owl more appealing to those organizations and individuals who have made considerable investment in xml tooling and training an open source toolkit is already available for conversion between this format and the required exchange form rdfxml thus owlxml integrates with existing owl  tooling and data while not breaking interoperability among tools  backward compatibility the overall structure of owl  has not changed compared to owl   almost all the building blocks of owl  were already present in owl  albeit possibly under different names in owl  the abstract syntax see section  of the owl  semantics owl  semantics played the role of both the structure and the functional syntax in owl  owl  specification the owl  functional syntax differs in form from the owl  abstract syntax but its role within the overall structure of owl is identical it specifies the structure of the language the owl  functional syntax is much closer to the rdf graph representation and can capture more rdf graphs it also has a direct correspondence to the structural specification in uml uml like owl  owl  specifies a precise mapping from ontology structures represented using the abstractfunctional syntax to rdf graphs owl  however also benefits from an explicitly specified mapping from rdf graphs back to ontology structures owl  rdf mapping the two semantics direct owl  direct semantics and rdfbased owl  rdfbased semantics of owl  have their direct counterparts in owl  under the names direct modeltheoretic semantics and rdfcompatible modeltheoretic semantics respectively owl  semantics an xml presentation syntax was also available for owl  owl  xml syntax although not as a recommendation on the other hand the manchester syntax owl  manchester syntax did not exist for owl  owl  defined one sublanguage owl lite where owl  defines three el ql and rl owl  profiles owl lite has not been respecified for owl  but because of backward compatibility owl lite ends up as a sublanguage of owl  the central role of rdfxml as the only required exchange syntax for owl  tools and the relationships between the direct and rdfbased semantics ie the correspondence theorem have not changed more importantly backwards compatibility with owl  is complete both syntactically and semantically just as in owl  owl  can handle all rdf graphs the vocabulary that is given special meaning in owl  includes the special vocabulary of owl  however the use of owldatarange while still possible is now deprecated  rdfsdatatype should be used instead the direct semantics for owl  owl  direct semantics is almost completely compatible with the direct semantics for owl  owl  semantics the only difference is that annotations are semanticsfree in the direct semantics for owl  it is highly unlikely however that users will notice this difference firstly the semantics given to annotations in the owl  direct semantics was extremely weak and unlikely to lead to any significant entailments and secondly owl  tools using the direct semantics typically treat annotations as though they are semanticsfree the rdfbased semantics for owl  owl  rdfbased semantics is completely compatible with the rdfbased semantics for owl  owl  semantics some of the details of this semantics have changed but the set of inferences is the same the treatment of importing in rdf documents has changed slightly in owl  if the rdf graphs are to be conformant owl  dl ontology documents owl  conformance in owl  importing happened first so the entire merged graph was considered as one unit owl  semantics in owl  the individual documents are considered separately in most cases owl  specification this means that owl  dl rdf documents that do not have a wellspecified ontology header may need to be slightly modified to be conforming owl  dl ontology documents  recapitulatory table this table provides a summary of the main new features with an example for each it summarizes the relations between use cases column  features column  and examples column  for each use case one specific feature noted by name in bold is selected the corresponding example is given column  and the reference from which it is issued appears in bold column  the other features that the use case is concerned with are noted by numbers f to f the choice of examples aims at reconciling an easy understandable illustration for each feature a variety of domains and real examples from papers available online use case features example references uc disjointunion f f f f f disjointunionlobe frontallobe parietallobe temporallobe occipitallobe limbiclobe lobe is a disjoint union of frontallobe frontallobe parietallob temporallobe occipitallobe limbiclobe medical req ontology with rules brain imaging  uc disjointclasses f f f f f disjointclasses leftlung rightlung  a lung cannot be leftlung and rightlung fma uc local reflexivity objecthasself phosphorylates class of all individuals that phosphorylates themselves bio uc qualified cardinality f f exactcardinality  haspart reardoor  class of objects having exactly  reardoor auto uc asymmetric property f f f asymmetricproperty proper_part_of if p is a proper part of q then q cannot be a proper part of p obo ro oboowl uc irreflexive property irreflexiveproperty flowsinto  nothing flowsinto itself ordnance uc property chain f subpropertyof objectpropertychain locatedin partof  locatedin  anything locatedin a part is locatedin the whole eg a disease snomed req uc reflexive property f f reflexiveproperty partof  part whole argues about partof as a reflexive property eg that a car is a part of a car part whole uc negative property f f negativepropertyassertion hasage thispatient xsdinteger  this patient is not five years old transplant ontology agence biomedecine uc nary allvaluesfrom testdate enrollmentdate x  y   individuals whose testdate is superior to their enrollmentdate   nary uc nary f allvaluesfrom admissiontemperature currenttemperature x  y individuals whose admissiontemperature is inferior to currenttemperature nary uc datatype restriction f f f datatyperestrictionxsdinteger mininclusive  new datatype with a lower bound of  on the xml schema datatype xsdinteger eg to describe the class adult protege uc metamodeling declaration class person   person is declared to be a class classassertion service s  s is an instance of service propertyassertion hasinput s person  s has input person this is an example of punning for class  individual web service punning uc metamodeling declaration objectproperty is_located_in   is_located_in is declared to be an objectproperty classassertion deprecated_properties is_located_in  is_located_in is an individual of the class deprecated_properties this is an example of punning for property individual wiki punning uc metamodeling declaration class person   declaration class company   person and company are declared to be classes subclassof  personcompany association  association between classes person and company propertydomain personcompany person  the domain of the property personcompany is person propertyrange personcompany company  the range of the property personcompany is company this is an example of punning for class  objectproperty uml association class punning uc profiles this use case motivates a profile eg owl ql where conjunctive query answering is implemented using conventional relational database systems who reads uc declaration declaration class person   person is declared to be a class syntax problem tools oboowl uc datatype f datatyperestriction xsdinteger mininclusive xsdinteger maxexclusive xsdinteger  the data range for atmosphere above  feet and below  feet vsto uc annotation f subclassof rdfscomment data generated by the logparser using the observerlog loginformation information this is an example of an annotation of axioms ncar legend f f f f f f f f f f f f f f f disjoint union disjoint classes negative property assertion local reflexivity qualified cardinality reflexive irreflexive asymmetric disjoint properties property chain inclusion keys datatype restriction nary datatype simple metamodeling capabilities extended annotations declarations profiles  references owl  specification owl  web ontology language structural specification and functionalstyle syntax second edition boris motik peter f patelschneider bijan parsia eds wc recommendation  december  httpwwwworgtrrecowlsyntax latest version available at httpwwwworgtrowlsyntax owl  direct semantics owl  web ontology language direct semantics second edition boris motik peter f patelschneider bernardo cuenca grau eds wc recommendation  december  httpwwwworgtrrecowldirectsemantics latest version available at httpwwwworgtrowldirectsemantics owl  rdfbased semantics owl  web ontology language rdfbased semantics second edition michael schneider editor wc recommendation  december  httpwwwworgtrrecowlrdfbasedsemantics latest version available at httpwwwworgtrowlrdfbasedsemantics owl  rdf mapping owl  web ontology language mapping to rdf graphs second edition peter f patelschneider boris motik eds wc recommendation  december  httpwwwworgtrrecowlmappingtordf latest version available at httpwwwworgtrowlmappingtordf owl  profiles owl  web ontology language profiles second edition boris motik bernardo cuenca grau ian horrocks zhe wu achille fokoue carsten lutz eds wc recommendation  december  httpwwwworgtrrecowlprofiles latest version available at httpwwwworgtrowlprofiles owl  conformance owl  web ontology language conformance second edition michael smith ian horrocks markus krtzsch birte glimm eds wc recommendation  december  httpwwwworgtrrecowlconformance latest version available at httpwwwworgtrowlconformance owl  xml serialization owl  web ontology language xml serialization second edition boris motik bijan parsia peter f patelschneider eds wc recommendation  december  httpwwwworgtrrecowlxmlserialization latest version available at httpwwwworgtrowlxmlserialization owl  manchester syntax owl  web ontology language manchester syntax second edition matthew horridge peter f patelschneider wc working group note  december  httpwwwworgtrnoteowlmanchestersyntax latest version available at httpwwwworgtrowlmanchestersyntax owl  semantics owl web ontology language semantics and abstract syntax peter f patelschneider patrick hayes and ian horrocks eds wc recommendation  february  owl  xml syntax owl web ontology language xml presentation syntax masahiro hori jrme euzenat and peter f patelschneider eds wc note  june  rfc  rfc  internationalized resource identifiers iris m duerst and m suignard ietf january  httpwwwietforgrfcrfctxt rdfxml rdfxml syntax specification revised dave beckett and brian mcbride eds wc recommendation  february  owl use cases and requirements owl web ontology language use cases and requirements jeff heflin ed wc recommendation  february  httpwwwworgtrrecwebontreq latest version available at httpwwwworgtrwebontreq sroiq the even more irresistible sroiq ian horrocks oliver kutz and uli sattler in proc of the th int conf on principles of knowledge representation and reasoning kr  aaai press  shoiq a tableaux decision procedure for shoiq horrocks i and sattler u in proc of th international joint conference on artificial intelligence ijcai   morgan kaufmann los altos next steps next steps to owl b cuenca grau i horrocks b parsia p patelschneider and u sattler in proc of owl experiences and directions ceur  syntax problem problem with owl syntax boris motik and i horrocks owled   cel cela polynomialtime reasoner for life science ontologies f baader c lutz and b suntisrivaraporn in u furbach and n shankar editors proceedings of the rd international joint conference on automated reasoning ijcar volume  of lecture notes in artificial intelligence pages  springerverlag  snomed el replacing septriplets in snomed ct using tractable description logic operators b suntisrivaraporn f baader s schulz k spackman aime  el pushing the el envelope franz baader sebastian brandt and carsten lutz in proc of the th joint int conf on artificial intelligence ijcai   el update pushing the el envelope further franz baader sebastian brandt and carsten lutz in proc of the washington dc workshop on owl experiences and directions owleddc  dllite tractable reasoning and efficient query answering in description logics the dllite family diego calvanese giuseppe de giacomo domenico lembo maurizio lenzerini riccardo rosati j of automated reasoning   dlp description logic programs combining logic programs with description logic benjamin n grosof ian horrocks raphael volz and stefan decker in proc of the th int world wide web conference www  budapest hungary  pp  pd completeness decidability and complexity of entailment for rdf schema and a semantic extension involving the owl vocabulary herman j ter horst j of web semantics   owlprime implementing an inference engine for rdfsowl constructs and userdefined rules in oracle zhe wu eadon g das s chong ei kolovski v annamalai m srinivasan j oracle nashua nh data engineering  icde  ieee th international conference on pages  cancun  metamodeling on the properties of metamodeling in owl boris motik on the properties of metamodeling in owl journal of logic and computation   datatype owl datatypes design and implementation boris motik ian horrocks iswc  karlsruhe deutshland  xml schema wc xml schema definition language xsd  part  structures shudi gao c m sperbergmcqueen and henry s thompson eds wc candidate recommendation  april  httpwwwworgtrcrxmlschema latest version available as httpwwwworgtrxmlschema dlsafe query answering for owldl with rules boris motik ulrike sattler and rudi studer journal of web semantics science services and agents on the world wide web   uml omg unified modeling language omg uml infrastructure v object management group omg available specification november  httpwwwomgorgspecumlinfrastructurepdf  appendix use cases  use cases  features use case disjoint union disjoint classes negative property local reflexivity qualified cardinality reflex irrefl asymm disjoint properties property chain keys datatype restriction nary datatype meta modeling extend annot declarations profiles anonym individual uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 uc                 the following list of use cases is not exhaustive use cases included in that list are only some among many that motivated the owl  new features  whatever userimplementortheoretical reasons  that appear at this time accepted by the working group for owl  some other extensions pointed out in the papers such as rules default etc possibly needed in the future are indicated within brackets all use cases are presented using the following pattern overview features example for references the overview only gives a general description of the use cases features lists several features required by the use case after the paper example points to a feature and short example which has been selected to illustrate a specific new feature of owl  this same information can be seen in an abbreviated form in table  for an easy access references points to the related papers available online which url is provided in the bibliography of the appendix  use case   brain image annotation for neurosurgery hcls overview the system being developed concerns the preparation of surgical procedures in neurosurgery specifically the aim is to assist a user in labelling the cortical gyri and sulci in the region surrounding a lesion whose resection is the primary objective providing anatomical landmarks especially in eloquent cortex is highly important for surgery brain image annotation is also useful for documentation of clinical cases which then enables retrieval of similar cases for decision support in future procedures a shared ontology of brain anatomy is also needed to integrate multiple distributed image sources indexed by anatomical features this is useful for largescale federated systems for statistical analysis of brain images of major brain pathologies features disjoint union disjoint classes qualified cardinality restrictions disjoint properties property chain inclusion axioms nary rules example for disjoint union eg lobe is a disjoint union of frontallobe parietallob temporallobe occipitallobe and limbiclobe references medical req ontology with rules brain imaging   use case   the foundational model of anatomy hcls overview the foundational model of anatomy fma is the most comprehensive ontology of human canonical anatomy anatomy plays a prominent role in biomedicine and many biomedical ontologies and applications refer to anatomical entities fma is a tremendous resource in bioinformatics that facilitates sharing of information among applications that use anatomy knowledge as its authors claim the fma is   a reference ontology in biomedical informatics for correlating different views of anatomy aligning existing and emerging ontologies in bioinformatics  the anatomy ontology together with the gene and disease reference ontologies constitute the backbone of the future semantic web for life sciences but the fma would benefit from new features of owl to state that some properties are exclusive eg properpart and boundby since many biomedical ontologies and applications refer to the fma anatomical entities through crossreferences keys would also be useful features disjoint union disjoint classes qualified cardinality restrictions disjoint properties keys extended annotations profiles example for disjoint classes eg nothing can be both a leftlung and a rightlung references fma  use case   classification of chemical compounds hcls overview functional groups describe the semantics of chemical reactivity in terms of atoms and their connectivity which exhibit characteristic chemical behavior when present in a compound in this use case the authors take a first step towards designing an owldl ontology of functional groups for the classification of chemical compounds and highlight the capabilities and limitations of owl  and the proposed owl  in terms of domain requirements they also describe the application of expressive features in the design of an ontology of basic relations and how an upperlevel ontology can be used to guide the formulation of life science knowledge they report on experiences to enhance existing ontologies so as to facilitate knowledge representation and question answering monocyclic and polycyclic ring structures are important parts of molecules that participate in several kinds of chemical reactions a new owl language feature such as qualified cardinality restriction would be helpful to describe the number and types of functional groups features disjoint union disjoint classes qualified cardinality restrictions profiles example for qualified cardinality restrictions eg for specifying the number and types of functional groups references chemistry  use case   querying multiple sources in an automotive company automotive overview large companies often store information and knowledge in multiple information systems using various models and formats the key objective in this use case is the retrieval of relevant information from multiple data and knowledge sources for a large automotive company for this application a language with a profile facilitating querying multiple databases and easy representation of parts library iso  standard plib ontologies of products which is particularly used for ebusiness catalogues would be helpful features disjoint union qualified cardinality restrictions profiles owl  ql example for qualified cardinality restrictions eg the class of automobile having exactly  rear doors references auto  use case   obo ontologies for biomedical data integration hcls overview the open biomedical ontologies obo consortium is pursuing a strategy to facilitate the integration of biomedical data through their annotation using common controlled ontologies existing obo ontologies including the gene ontology are undergoing coordinated reform and new ontologies are being created on the basis of an evolving set of shared principles governing ontology development the result is an expanding family of obo ontologies designed to be interoperable and to incorporate accurate representations of biological reality within that effort the obo ontology of relations is designed to define a set of basic relations with their semantics obo qualifies each relation using characteristics of being transitive symmetric reflexive antisymmetric more generally obo format offers constructs such as is_reflexive is_symmetric is_cyclic is_anti_symmetric etc that are used in the obo obtologies converting obo ontologies requires the new owl  property axioms reflexive irreflexive asymmetric to map corresponding obo constructs otherwise they should be transformed into annotations features local reflexivity reflexive irreflexive asymmetric property chain inclusion axioms declaration antisymmetric example for asymmetric eg if p is a proper part of q then q cannot be a proper part of p references obo ro oboowl  use case   spatial and topological relationships at the ordnance survey earth and space overview ordnance survey is britains national mapping agency it currently maintains a continuously updated database of the topography of great britain the database includes around  million manmade and natural landscape features these features include everything from forests roads and rivers down to individual houses garden plots and even pillar boxes in addition to this topographic mapping entire new layers of information are progressively being added to the database such as aerial photographic images which precisely match the mapping data providing the addresses of all properties and integrated transport information for topological and spatial relationships and in many other places we need to be able to say whether a property is reflexive irreflexive asymmetric or antisymmetric in order to capture the true intentions of our axioms features reflexive irreflexive asymmetric antisymmetric example for irreflexive eg nothing flows into itself references ordnance  use case   the systematized nomenclature of medicine hcls overview the systematized nomenclature of medicine clinical terms snomed ct is a work of clinical terminology with broad coverage of the domain of health care and it has been selected as a national standard for use in electronic health applications in many countries including the us uk canada australia denmark and others snomed was originally published in  while snomed ct became available in  as a major expansion resulting from the merger of snomed rt with the uks clinical terms version  a major distinguishing feature differentiating it from prior editions is the use of description logic dl to define and organize codes and terms another major distinguishing feature of snomed is its size and complexity with over  concept codes each representing a different class it is an order of magnitude larger than the next largest dlbased ontology of which we are aware without property chain inclusion axioms adoption of owl by the snomed community would have required awkward workarounds with their attendant complications and complexities  effectively killing movement in that direction with them we have a clear path to using owl  for further development and integration with other biomedical ontologies the required property chain inclusion axioms allow to encode inheritance of properties along another property eg partof which is of utmost importance in anatomy for example with axioms such as haslocation  properpartof  haslocation injury to finger can be inferred as injury to hand as reported in snomed el by reengineering snomedct in this way the number of anatomical classes dropped from  to  and the time needed by the cel reasoner cel version  from  seconds to  seconds like the fma given the common use of crossreferences between snomed and other biomedical ontologies via concepts id keys would be highly useful as well features property chain inclusion axioms keys profiles owl  el example for property chain eg anything located in a part is located in the whole references snomed req  use case   simple partwhole relations in owl ontologies hcls overview representing partwhole relations is a very common issue for those developing ontologies for the semantic web owl does not provide any builtin primitives for partwhole relations as it does for the subclass relation but contains sufficient expressive power to capture most but not all of the common cases the study of partwhole relations is an entire field in itself  mereology  this note is intended only to deal with straightforward cases for defining classes involving partwhole relations several extensions of whole needed for partwhole are discussed in this study namely needs of qualified cardinality restriction reflexivity propagation from parts to whole features qualified cardinality restriction reflexivity property chain inclusion example for reflexive eg a frontal lobe is part of a brain hemisphere or a car is part of a car note according to the definition given in obo the whole is being considered as a part part whole but there are controversial opinions asserting that part of is not reflexive references part whole  use case   kidney allocation policy in france hcls overview allocation in france falls under the responsibility of the agence de la biomedicine it includes general rules such as donorrecipient abo blood group identity unique registration on the national waiting list a registration number is assigned at the registration of the waiting list which uniquely identifies a patient on the waiting list and definition of some organ specific nationwide allocation priorities for each kidney recipient minimal hla matching and forbidden antigens can be specified pediatric recipients get a priority for pediatric donors kidneys are proposed by order of priority to  urgent patients  patients with panel reactive antibodies level   included in a specific acceptable antigen protocol or  hla mismatch with the donor then  zero mismatch patients and  patients with low transplantation accessibility geographic criteria are involved each region of the transplant map eg ile de france is supposed to take in charge only patients living in the region this reallife application and allocation system show how distinguishing between adults and children has strong implications in health care at hospital patients under  child depend on pediatric services while over  adult depend on adult services only children less than  years waiting for a transplant have a priority on the waiting list features negative property assertion datatypes restriction keys example for negativepropertyassertion eg this patient is not  years old references agence biomedecine transplant ontology  use case   eligibility criteria for patient recruitment overview this use case is based on an ongoing wc task force on clinical observations interoperability where the goal is to enable reuse and sharing of clinical data created in healthcare delivery in the clinical trials context in particular the first application chosen to demonstrate feasibility of the interoperability approach is that of patient recruitment in this case a sample set of clinical trial protocols available from httpwwwclinicaltrialsgov each of which contains a list of eligibility inclusion and exclusion criteria these eligibility criteria are used for identify eligible patients and potentially form conditions in a sparql query or could be represented as owl classes they also need to be mapped as per the discussion in the use case above a list of requirements based on an analysis of these clinical trial protocols is available from httpeswworgtopichclsclinicalobservationsinteroperabilityactionattachfiledogettargetfunctionalrequirements_vxls in particular one of the clinical trials requires that the enrolment date of a clinical trial participant be within  days after the patient has been started on a particular therapy this motivated the need for nary datatypes with inequality expressions features nary example for nary datatypes eg the enrolment date of a clinical trial participant should be within  days after the patient has been started on a particular therapy  use case   multiple ucs on datatype hcls overview nary presents many use cases that would benefit from various datatype extensions features datatypes restriction nary example for nary datatypes eg datatypes restrictions like intervals or nary datatype with inequality such as needed in use case  references nary  use case   protg report on the experiences of owl users tool overview protege reported in  on protg experiences with the development of owl support and on the experiences of the user community with owl at that time while the overall feedback from the community was positive their experience suggested that there were considerable gaps between the user requirements the expressivity of owl and users understanding of owl to summarize based on their experiences protg developers suggested a number of extensions to a future version of owl namely integration of userdefined datatypes esp for numeric ranges qualified cardinality restrictions management of disjointness owlalldisjoint more flexible annotation properties at least as best practices this report underlined that one of the omissions in the owl language that users complain about most often is poor representation of numeric expressions almost all groups except for those developing traditional medical terminologies sorely need to be able to express quantitative information typical examples include the length between mm and mm age greater than  years pressure in the range of mb to mb such range declarations are needed to classify individuals and to build class definitions such as adult and should therefore be supported by reasoners user base points out that the current owl datatype formalism is much too weak to support most real world applications and that many potential users therefore cannot adopt owl the user communities anxiously await an extension to the owl specification to represent userdefined datatypes with xml schema facets such as xsdmininclusive it also points out some limitations related to annotations or metamodeling from an implementors perspective despite the value of annotation properties in owl dl properties that are declared as annotation properties are greatly limited in so far that they can neither have range or domain constraints nor can they be arranged in subproperty hierarchies this type of information about a property enables tools to control the values that annotation properties can acquire without range constraints it is difficult to provide the user with appropriate input widgets in a similar sense it is often helpful to declare metaclasses so that classes can be categorized into types and different interfaces be provided for each type currently using these features means that the ontology will be forced into owl full features qualified cardinality restriction datatypes restriction annotations metamodeling example for extra datatypes eg adults are individuals whose age is greater than  years references protege  use case   web service modeling telecom overview people often want to use a class to specify the value of some property an example originating at the university of karlsruhe web service is in service modeling services are modeled as instances of the service class for each concrete service ie for each instance of service the users wanted to state what the input to the service is here is an example of a service description  service rdftype owlclass  person rdftype owlclass  s rdftype service  s input person s is an individual of the class service due to  and  and person is a class due to  hence in  we have a relationship input between an individual and a class hence you need some kind of metamodeling to solve this problem one way would be that the name person may refer both to person as a class and as an individual denoting person as a whole class  individual features metamodeling example for simple metamodeling eg a class and an individual  person may be used both for a class and an individual references web service punning  use case   managing vocabulary in collaborative environments wiki overview it can be useful to relate schema elements classesproperties with each other in order to capture pragmatic relationships between them an example observed in applications of semantic mediawiki a simple but widely used owlbased semantic content management system with lightweight expressiveness owl wiki is that users wish to relate schema elements to indicate domainspecific relationships and generally to organize ontological vocabulary examples are statements such as the property is_located_in is in the class deprecated_properties and was replaced by property has_location objects of the class city should have a value for the property population expressed by relating class and property these are merely pragmatic descriptions and no logical relationship on schemalevel is intended however in collaborative vocabulary creation it is relevant that users can express such intended relationships an important aspect of semantic mediawiki is that users can also query for semantic information and this is currently realized as intended by punning semantic mediawiki has already been extended by using offtheshelf owl reasoners and it would be desirable if such systems would be able to deal with the use of punning in such simple cases classproperty  individual features metamodeling example for simple metamodeling eg a property and an individual to make a statement asserting that a property is an individual of the class deprecated_properties references wiki punning  use case   uml association class designer overview the unified modeling language uml includes a modeling element known as an association class which combines the features of a uml class and a uml association umls construct for defining class to class relationships association the association class eg the association between classes person and company allows a modeler to define a relation as an association and reify it simultaneously this is convenient when one wants to model attributes of relations themselves one way to support such case might be class and objectproperty punning class  objectproperty features metamodeling example for simple metamodeling eg an object property and a class personcompany may be used both for an object property and a class references uml association class punning  use case   database federation designer overview some life sciences application designer has been building a database federation scheme the scheme involves designing an xml schema that describes the fields and values in a variety of databases and associated query tools that from a query interface can write queries in several variants of sql to databases that have relevant information those results are presented as a single integrated view he hears that owl and semantic web technologies might be a suitable technology for implementing the same functionality and making it available using web standards but doesnt know where to start this application illustrates common needs of a wide community of users that would like to use their databases and can easily query them in a convivial way this motivates a profile where conjunctive query answering is implemented using conventional relational database systems features profiles owl  ql example for profiles eg owl  ql profile to easily query a federation of databases in a convivial way references who reads  use case   tools developers tools overview a user adds an assertion to an ontology however he accidentally mistypes the iri of an individual it should be possible to detect this error by comparing the iri of the individual in the axiom with the iris explicitly declared to be a part of the ontology if the individual iri has not been explicitly introduced as being in the ontology the user should be given the opportunity to correct his error tools developers such as those involved in the protgowl toolset architecture tools have often expressed problems raised for eg apis owl api due to lack of declarations the first problem is that owl does not allow for explicit declarationsassertions that a certain class property or an individual exists in an ontology this aspect of the owl standard was often misinterpreted which caused design errors in owl apis syntax problem features declaration example for declaration eg a person is declared to be a class of an ontology references syntax problem  use case   virtual solar terrestrial observatory earth and space overview numerous single discipline and multidiscipline virtual observatories eg httpvstoorg  httpvmonasagov  are beginning to use semantic technologies to provide data access and integration a virtual observatory is a suite of software applications on a set of computers that allows users to uniformly find access and use resources data software document and image products and services using these from a collection of distributed product repositories and service providers a vo is a service that unites services and  or multiple repositories from httplwsdegsfcnasagovvo_framework__jan_doc some virtual observatories are focusing quite heavily on provenance encoding at data ingest time eg httpspcdishaoucaredu  the virtual solar terrestrial observatory vsto is a national science foundation and national center for atmospheric research supported effort that allows researchers to find solar and solarterrestrial data it provides an ontologyenhanced interface to semanticallyenhanced web services that help access a number of online repositories of scientific data the background owl ontology contains term descriptions for science terms including instruments observatories parameters etc users essentially need to specify a description of the data they wish to retrieve which includes either a specific instrument class or a description of that class a date range for the data taken and the parameters in order to specify that in relevant science terms scientists need to be able to represent numerical ranges and comparisons going beyond the numeric support of owl  the application also needs to expand to include spatial descriptions it would use representational power if provided for spatialgeographic containment requirements qualified cardinality datatype restriction defaults example for datatype restriction eg the range for atmosphere is above  and below  feet references vsto  use case   semantic provenance capture earth and space overview in an effort to provide better search capabilities over meta information in addition to scientific data the spcdis effort is providing infrastructure to capture declarative descriptions of scientific provenance information at data ingest time the initial domain of the effort is solar coronal physics this effort requires among other things extended annotations as well as datatype restriction features datatype restriction extended annotations example for extended annotation to attach annotations eg comments on axioms such as a subclass axiom to express for instance that the the elements of the subclass are data generated by a log parser references ncar  use case   biochemical selfinteraction chemical domain overview in biochemistry some biomolecules will chemical modify themselves in such a way that it has biologically important consequences i protein kinases are enzymes capable of adding phosphate groups to certain amino acids found within target proteins some kinases known as autophosphorylating kinases will add phosphate groups to certain target amino acids that are part of itself ii ribozymes are catalytically active rna molecules in which  natural types are known to cleave their own rna sequences such cleavage may result in significant changes to viral replication gene expression and possibly the generation of different protein transcripts such catalytically active selfcleaving rna make up a subclass of ribozymes called selfcleaving ribozymes such biochemical selfinteraction can be captured by asserting local reflexivity of the properties features local reflexivity example for local reflexivity eg an autophosphorylating kinase is a kinase that phosphorylates itself references bio  use cases bibliography medical req web ontology language requirements wrt expressiveness of taxonomy and axioms in medicine in proc of iswc  micro theory creation and usage of a micro theory for long bone fractures an experience reporthoward goldberg vipul kashyap and kent spackman in proc of krmed  ontology with rules ontology enriched by rules for identifying brain anatomical structures in rif  washington   brain imaging towards an hybrid system using an ontology enriched by rules for the semantic annotation of brain mri images in proc of rr  the brain anatomy case study in proc of protege  fma the foundational model of anatomy a the foundational model of anatomy b the foundational model of anatomy c chemistry describing chemical functional groups in owldl for the classification of chemical compounds natalia villanuevarosales and michel dumontier in owl experiences and directions owled  innsbruck austria modelling life sciences knowledge with owl owled  dc auto an exploratory study in an automotive company obo the obo foundry coordinated evolution of ontologies to support biomedical data integration barry smith et al  ro relations in biomedical ontologies  oboowl obo to owl go to owl owled  obo and owl leveraging semantic web technologies for the life sciences in proc of iswc  ordnance experiences of using owl at the ordnance survey snomed req an examination of owl and the requirements of a large health care terminology agence biomedecine changing kidney allocation policy in france the value of simulation transplant ontology construction of the dialysis and transplantation ontology little web a little semantic web goes a long way in biology wolstencroft k brass a horrocks i lord p sattler u stevens r turi d in proceedings of the  international semantic web conference iswc  pp  springer berlin heidelberg new york  part whole simple partwhole relations in owl ontologies alan rector chris welty wc editors draft  aug   tools supporting early adoption of owl  with protegeowl and fact matthew horridge and dmitry tsarkov and timothy redmond in owl experiences and directions owled  athens georgia owl api igniting the owl  touch paper the owl api matthew horridge and sean bechhofer and olaf noppens  in owl experiences and directions owled  innsbruck austria protege owl the protg owl experience holger knublauch matthew horridge mark musen alan rector robert stevens nick drummond phil lord natalya f noy julian seidenberg hai wang in owl experiences and directions owled  galway ireland  nary nary data predicate use case web service preferencebased selection of highly configurable web services steffen lamparter anupriya ankolekar stephan grimm rudi studer www banff canada  wiki reusing ontological background knowledge in semantic wikis denny vrandecic markus krtzsch proceedings st workshop on semantic wikis budva montenegro june   uml association class association punning punning use cases who reads who reads our documents vsto the virtual solarterrestrial observatory a deployed semantic web application case study for scientific research mcguinness dl fox p cinquini l west p garcia j benedict jl middleton d vsto vmo ncar semantic provenance capture in data ingest systems  bio springer pnas skos wc working draft  august    appendix change log informative  changes since recommendation this section summarizes the changes to this document since the recommendation of  october  with the publication of the xml schema definition language xsd  part  datatypes recommendation of  april  the elements of owl  which are based on xsd  are now considered required and the note detailing the optional dependency on the xsd  candidate recommendation of  april  has been removed from the status of this document section minor typographical errors were corrected as detailed on the owl  errata page  changes since proposed recommendation this section summarizes the changes to this document since the proposed recommendation of  september  some minor editorial changes were made  changes since last call this section summarizes the changes to this document since the candidate recommendation of  june  a note was added pointing out that a property being asymmetric is a much stronger notion than its being nonsymmetric a note on the origin of the profile names was added several minor editorial changes were made  acknowledgments the starting point for the development of owl  was the owl member submission itself a result of user and developer feedback and in particular of information gathered during the owl experiences and directions owled workshop series the working group also considered postponed issues from the webont working group this document has been produced by the owl working group see below and its contents reflect extensive discussions within the working group as a whole the editors extend special thanks to elisa kendall sandpiper software peter f patelschneider bell labs research alcatellucent and alan ruttenberg science commons for their thorough reviews the regular attendees at meetings of the owl working group at the time of publication of this document were jie bao rpi diego calvanese free university of bozenbolzano bernardo cuenca grau oxford university computing laboratory martin dzbor open university achille fokoue ibm corporation christine golbreich universit de versailles stquentin and lirmm sandro hawke wcmit ivan herman wcercim rinke hoekstra university of amsterdam ian horrocks oxford university computing laboratory elisa kendall sandpiper software markus krtzsch fzi carsten lutz universitt bremen deborah l mcguinness rpi boris motik oxford university computing laboratory jeff pan university of aberdeen bijan parsia university of manchester peter f patelschneider bell labs research alcatellucent sebastian rudolph fzi alan ruttenberg science commons uli sattler university of manchester michael schneider fzi mike smith clark  parsia evan wallace nist zhe wu oracle corporation and antoine zimmermann deri galway we would also like to thank past members of the working group jeremy carroll jim hendler and vipul kashyap