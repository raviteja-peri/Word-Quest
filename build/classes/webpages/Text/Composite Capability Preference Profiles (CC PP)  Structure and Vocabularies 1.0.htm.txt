composite capabilitypreference profiles ccpp structure and  vocabularies  composite capabilitypreference profiles ccpp structure and vocabularies  wc recommendation  january  this version httpwwwworgtrrecccppstructvocab latest version httpwwwworgtrccppstructvocab previous version httpwwwworgtrprccppstructvocab editors graham klyne gk@acmorg nine by nine franklin reynolds franklinreynolds@nokiacom nokia research center chris woodrow woodroc@metaphorianet information architects hidetaka ohto ohto@worg wc through march   panasonic johan hjelm johanhjelm@ericssoncom ericsson mark h butler markh_butler@hpcom hewlettpackard luu tran luutran@suncom sun microsystems please refer to the errata for this document which may include some normative corrections the english version of this specification is the only normative version nonnormative translations may also be available copyright   wc mit ercim keio all rights reserved wc liability trademark document use and software licensing rules apply abstract this document describes ccpp composite capabilitiespreference profiles structure and vocabularies a ccpp profile is a description of device capabilities and user preferences this is often referred to as a devices delivery context and can be used to guide the adaptation of content presented to that device the resource description framework rdf is used to create profiles that describe user agent capabilities and preferences the structure of a profile is discussed topics include structure of client capability and preference descriptions and use of rdf classes to distinguish different elements of a profile so that a schemaaware rdf processor can handle ccpp profiles embedded in other xml document types ccpp vocabulary is identifiers uris used to refer to specific capabilities and preferences and covers the types of values to which ccpp attributes may refer an appendix describing how to introduce new vocabularies an appendix giving an example small client vocabulary covering print and display capabilities and an appendix providing a survey of existing work from which new vocabularies may be derived status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document is a recommendation of the wc it has been reviewed by wc members and other interested parties and has been endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited as a normative reference from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web a test suite for has been developed along with an implementation report this document has been produced by the wc device independence working group as part of the device independence activity within the wc interaction domain continued status of the work is reported on the device independence working group home page memberonly link the public is invited to send comments or reports errors to the editors at wwwmobile@worg the public forum for discussion of wcs work on mobile web access an archive is available at httplistsworgarchivespublicwwwmobile patent disclosures relevant to this specification may be found on the ccpp working groups patent disclosure page in conformance with wc policy table of contents  introduction  scope and normative elements  structure of this document  document conventions  terminology  rdf graph notation  ccpp architecture  ccpp profile structure  profile components  component attributes  defaults  extensibility and namespaces  ccpp structure  components  attributes  defaults  distinguishing profile structure from attributes  notes on rdf usage  rdf graph composition  attribute vocabularies  attribute data  simple ccpp attribute data  strings  integer numbers  rational numbers  complex ccpp attribute data  set of values  sequence of values  attribute identifiers  rdf vocabulary schema  conformance  ccpp document conformance  ccpp producer conformance  ccpp consumer conformance  conformance claims  validity  wellformed  acknowledgments  references  normative references  informative references appendix a terminology and abbreviations a terminology a abbreviations appendix b rdf schema for structure b summary of ccpp class hierarchy b summary of ccpp properties structural properties instances of ccppproperty b rdf schema ccpp core and class structure appendix c ccpp attribute vocabulary for print and display client attribute properties instances of ccppattribute schema for client vocabulary appendix d recommendations for creating a vocabulary d basic format for all vocabulary items d use of xml namespaces d principles for defining new attributes d if possible reuse existing vocabularies d attribute value type and interpretation d interpretation not dependent on other attribute values d attribute naming conventions d attributes should have specific applicability d protocol interactions appendix e review of applicable vocabularies e ietf media feature registration conneg e wap uaprof e tiff e wave e mpeg e mpeg e pwg e salutation appendix f ccpp applications f outline of request processing in http f protocol assumptions for proxy behavior appendix g rdf compatibility g implicit datatyping g explicit datatyping appendix w revision history  introduction this document describes ccpp composite capabilitiespreference profiles structure and vocabularies a ccpp profile is a description of device capabilities and user preferences that can be used to guide the adaptation of content presented to that device here profile does not refer to a subset of a particular specification for example the css mobile profile but refers to the documents exchanged between devices that describe the capabilities of a device as the number and variety of devices connected to the internet grows there is a corresponding increase in the need to deliver content that is tailored to the capabilities of different devices some limited techniques such as http accept headers and html alt attributes already exist as part of a framework for content adaptation and contextualization a general purpose profile format is required that can describe the capabilities of a user agent and preferences of its user ccpp is designed to be such a format ccpp is based on rdf the resource description framework which was designed by the wc as a general purpose metadata description language rdf provides the framework with the basic tools for both vocabulary extensibility via xml namespaces xmlnamespaces and interoperability there is a specification that describes how to encode rdf using xml rdf and another that defines an rdf schema description language using rdf rdfschema rdf was designed to describe the metadata or machine understandable properties of the web rdf is a natural choice for the ccpp framework since user agent profiles are metadata intended primarily for communication between user agents and resource data providers for an introduction to rdf see rdfprimer note that the rdfprimer document describes a more recent revision of the rdf specifications than the ones on which this specification is based a ccpp profile contains a number of ccpp attribute names and associated values that are used by a server to determine the most appropriate form of a resource to deliver to a client it is structured to allow a client to describe its capabilities by reference to a standard profile accessible to an origin server or other sender of resource data and a smaller set of features that are in addition to or different than the standard profile a set of ccpp attribute names permissible values and associated meanings constitute a ccpp vocabulary some information contained in a profile may be sensitive and adequate trust and security mechanisms must be deployed to protect users privacy as a part of a wider application ccpp cannot fully cover such issues but is intended to be used in conjunction with appropriate mechanisms this topic is covered in appendix f ccpp applications it is anticipated that different applications will use different vocabularies indeed this is needed if applicationspecific properties are to be represented within the ccpp framework but for different applications to work together some common vocabulary or a method to convert between different vocabularies is needed xml namespaces can ensure that different applications names do not clash but does not provide a common basis for exchanging information between different applications any vocabulary that relates to the structure of a ccpp profile must follow this specification the appendices introduce a simple ccpp attribute vocabulary that may be used to improve crossapplication exchange of capability information partly based on some earlier ietf work ccpp is designed to be broadly compatible with the earlier uaprof specification uaprof from the wap forum that is we have attempted to accomodate existing uaprof profiles ccpp is compatible with ietf media feature sets conneg rfc in the sense that all media feature tags and values can be expressed in ccpp however not all ccpp profiles can be expressed as media feature tags and values and ccpp does not attempt to express relationships between attributes although the examples and use to date have been focused on device capabilities ccpp can also convey information about user preferences that used sensibly should be allow web servers to improve the accessibility of web sites a fuller discussion of web site accessibility can be found in the web content accessibility guidelines wai  scope and normative elements ccpp structure and vocabularies abbreviated to ccpp in the rest of this document defines a client profile data format and a framework for incorporating application and operating environmentspecific features it does not define how the profile is transferred nor does it specify what ccpp attributes must be generated or recognized ccpp is designed for use as part of a wider application framework as such the specification of ccpp elements that must be supported and those which may be omitted is a matter for a specific application there are few protocol assumptions built into the design of ccpp although it is intended to be largely protocol independent particular consideration has been given to use of ccpp with http for retrieving web resources appendix f contains some further discussion of ccpp applications this document describes a number of features of ccpp some features form part of the essential structure of ccpp for which conformance is required see section  others are features whose use is recommended or optional there is also discussion of how new vocabularies should be introduced directed to ccpp application designers rather than implementers the architecture section does not describe specific features but indicates general principles that underlie the design of ccpp it is not normative but does contain information that should be understood for proper implementation of ccpp the section on ccpp structure covers two main areas ccpp profile components support for these is required ccpp profile defaults support for these is required the section on ccpp attribute vocabularies describes some general features of ccpp attributes and their values support for the described formats for simple attribute values is recommended  the actual syntax for any simple ccpp value is defined by the corresponding attribute specification such specifications may reference the information provided here support for the structured ccpp attribute formats described where relevant is required support is not required for any specific vocabulary but application designers are strongly encouraged to reuse existing vocabularies where possible ccpp applications are not required to support features described in the appendices but any new attribute vocabularies defined must be based on rdf classes and properties defined by the rdf schema in appendix b new ccpp attributes are instances of ccppattribute new component classes are subclasses of ccppcomponent etc note the reason for requiring new vocabularies to be based on the ccpp schema is so that schemaaware applications can include ccpp profile data along with other rdf data having new vocabulary terms based on the ccpp schema means that they are clearly identifiable as part of a ccpp profile when rdf data from multiple sources is combined this requirement does not affect standalone ccpp profile processors but the real value of using rdf here will be in the longer term allowing data from multiple sources eg document security and privacy related information to be combined and processed by more general purpose handlers  structure of this document the remainder of this section covers terminology conventions and notations used in this document section  ccpp architecture provides an overview of the ccpp profile structure and use of xml namespaces section  ccpp structure describes the structure of a ccpp profile and introduces the rdf elements that are used to create the essential ccpp elements section  attribute vocabularies describes how attributes are used in a ccpp profile and presents the recommended structure of ccpp elements used to describe specific features the appendices contain additional supporting material that is not essential to construct a valid ccpp profile but which provides additional background information useful for understanding ccpp its relationship with rdf or defining attribute vocabularies for specific applications  document conventions  terminology see ccpp terminology and abbreviations in appendix a of this document the term ccpp attribute is used here to refer to a specific capability or characteristic of a client or other system that appears in a ccpp profile the term feature refers to a client capability or characteristic that may or may not be the basis of a ccpp attribute the term attribute name is used to indicate an rdf property name used to identify a ccpp attribute the key words must must not should should not may may not required recommended and optional in this document are to be interpreted as described in rfc  rfc  rdf graph notation the underlying structure of rdf is a directed labeled graph for communication between computer systems rdf uses a serialization in xml to represent these graphs this xml notation is rather bulky and difficult for human discourse so a more visual notation is used here for describing rdf graph structures figure  rdf graph notation subjectresource propertyname objectresource indicates a graph edge labeled propertyname from an rdf resource named subjectresource to another rdf resource named objectresource subjectresource propertyname property value indicates a graph edge labeled propertyname from an rdf resource named subjectresource to a literal string containing the indicated value subjectresource propertyname  val val   this is a shorthand for a property whose value is an rdfbag resource containing the indicated values see section  subjecttype propertyname objecttype names in angle brackets are used to indicate an rdf resource of the indicated type ie having the indicated rdftype property value without indicating a specific name for the resource this is useful for showing the rdf classes that may be linked by a property subjectresource propertyname objectresource                                                         property val      property val           etc property arcs can be chained and multiple arcs drawn from a subject resource here are some xml examples of the rdf graph structures described above figure  rdf graph example in xml xml version any rdf graph is an rdf element  rdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns     xmlnshttpwwwexamplecomschema    subjectresource propertyname objectresource      rdfdescription      rdfabouthttpwwwexamplecomprofilesubjectresource    propertyname      rdfdescription          rdfabouthttpwwwexamplecomprofileobjectresource     propertyname  rdfdescription    subjectresource propertyname objectresource       alternative format      rdfdescription      rdfabouthttpwwwexamplecomprofilesubjectresource    propertyname        rdfresourcehttpwwwexamplecomschemaobjectresource   rdfdescription    subjectresource propertyname property value      rdfdescription      rdfabouthttpwwwexamplecomprofilesubjectresource    propertynameproperty valuepropertyname  rdfdescription    subjectresource propertyname  val val        rdfdescription      rdfabouthttpwwwexamplecomprofilesubjectresource    propertyname      rdfdescription        rdftype            rdfresourcehttpwwwworgrdfsyntaxnsbag         rdflivalrdfli        rdflivalrdfli         etc       rdfdescription    propertyname  rdfdescription    subjectresource propertyname  val val         alternative format      rdfdescription      rdfabouthttpwwwexamplecomprofilesubjectresource    propertyname      rdfbag        rdflivalrdfli        rdflivalrdfli         etc       rdfbag    propertyname  rdfdescription    subjecttype propertyname objecttype      rdfdescription    rdftype        rdfresourcehttpwwwexamplecomschemasubjecttype     propertyname      rdfdescription        rdftype            rdfresourcehttpwwwexamplecomschemaobjecttype       rdfdescription    propertyname  rdfdescription     subjectresource propertyname objectresource                                                                                      property val                                           property val                                                 rdfdescription      rdfabouthttpwwwexamplecomprofilesubjectresource    propertyname      rdfdescription          rdfabouthttpwwwexamplecomprofileobjectresource       propertyvalproperty      propertyvalproperty       etc       rdfdescription    propertyname  rdfdescriptionrdfrdf  ccpp architecture this section is not normative but provides an overview of the features of ccpp  ccpp profile structure a ccpp profile is broadly constructed as a level hierarchy a profile having at least one or more components and each component having at least one or more attributes  profile components the initial branches of the ccpp profile tree describe major components of the client examples of major components are the hardware platform upon which software is executing the software platform upon which all applications are hosted or an individual application such as a browser a simple graphical representation of the bottom of a ccpp tree based on three components terminalhardware terminalsoftware and terminalbrowser would be figure a ccpp profile components examplemyprofile  ccppcomponentexampleterminalhardware ccppcomponentexampleterminalsoftware ccppcomponentexampleterminalbrowser the corresponding xml might look like this figure b ccpp profile components in xml xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsccpphttpwwwworgccppschema         xmlnsexamplehttpwwwexamplecomschema  rdfdescription rdfabouthttpwwwexamplecomprofilemyprofile    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalhardware          terminalhardware properties here        rdfdescription    ccppcomponent    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalsoftware          terminalsoftware properties here        rdfdescription    ccppcomponent    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalbrowser          terminalbrowser properties here        rdfdescription    ccppcomponent  rdfdescriptionrdfrdf  component attributes a ccpp profile describes client capabilities and preferences in terms of a number of ccpp attributes for each component the description of each component is a subtree whose branches are the capabilities or preferences associated with that component though rdf makes modeling a wide range of data structures possible including arbitrary graphs complex data models are usually best avoided for profile attribute values a capability can often be described using a small number of ccpp attributes each having a simple atomic value where more complex values are needed these can be constructed as rdf subgraphs one useful case for complex attribute values is to represent alternative values eg a browser may support multiple versions of html a hypothetical profile might look like this figure a complete ccpp profile example exmyprofile  ccppcomponentexterminalhardware                                          rdftype exhardwareplatform                     exdisplaywidth                      exdisplayheight   ccppcomponentexterminalsoftware                                          rdftype exsoftwareplatform                     exname epoc                     exversion                      exvendor symbian  ccppcomponentexterminalbrowser                                            rdftype exbrowserua                      exname mozilla                      exversion                       exvendor symbian                      exhtmlversionssupported                                                                                                                                    rdftype rdfbag                         rdf_                          rdf_  the corresponding xml might look like this figure b complete ccpp profile example in xml xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsccpphttpwwwworgccppschema         xmlnsexhttpwwwexamplecomschema  rdfdescription      rdfabouthttpwwwexamplecomprofilemyprofile    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalhardware        rdftype            rdfresourcehttpwwwexamplecomschemahardwareplatform         exdisplaywidthexdisplaywidth        exdisplayheightexdisplayheight      rdfdescription    ccppcomponent    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalsoftware        rdftype            rdfresourcehttpwwwexamplecomschemasoftwareplatform         exnameepocexname        exversionexversion        exvendorsymbianexvendor      rdfdescription    ccppcomponent    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalbrowser        rdftype            rdfresourcehttpwwwexamplecomschemabrowserua         exnamemozillaexname        exversionexversion        exvendorsymbianexvendor        exhtmlversionssupported          rdfbag            rdflirdfli            rdflirdfli          rdfbag        exhtmlversionssupported      rdfdescription    ccppcomponent  rdfdescriptionrdfrdf  defaults the attributes of a component can be included directly as in the previous example or may be specified by reference to a default profile which may be stored separately and accessed using its specified uri this use of an externally defined default profile is somewhat similar to the idea of dynamic inheritance it makes possible some important optimizations as a separate document it can reside at a separate location and it can be separately cached this is particularly useful in wireless environments such as cellular networks where the profiles may be large and the client link slow and expensive using default values only a small part of the overall profile is sent over the wireless network default values for a component of a ccpp profile are indicated by a ccppdefaults arc from the component concerned to a component that describes the default values figure a ccpp profile using defaults exmyprofile  ccppcomponent exterminalhardware                                            rdftype exhardwareplatform                      ccppdefaults exhwdefault  ccppcomponent exterminalsoftware                                            rdftype exsoftwareplatform                      ccppdefaults exswdefault  ccppcomponent exterminalbrowser                                              rdftype exbrowserua                       ccppdefaults exuadefaultexhwdefault  rdftype exhardwareplatform exdisplaywidth  exdisplayheight exswdefault  rdftype exsoftwareplatform exname epoc exversion  exvendor symbianexuadefault  rdftype exbrowserua exname mozilla exversion  exvendor symbian exhtmlversionssupported                                                                    rdftype rdfbag                                 rdf_                                  rdf_  the corresponding xml might look like this figure b ccpp profile using defaults in xml device profile referencing defaults xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsccpphttpwwwworgccppschema         xmlnsexhttpwwwexamplecomschema  rdfdescription      rdfabouthttpwwwexamplecomprofilemyprofile    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalhardware        rdftype            rdfresourcehttpwwwexamplecomschemahardwareplatform         ccppdefaults            rdfresourcehttpwwwexamplecomhardwareprofilehwdefault       rdfdescription    ccppcomponent    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalsoftware        rdftype            rdfresourcehttpwwwexamplecomschemasoftwareplatform         ccppdefaults            rdfresourcehttpwwwexamplecomsoftwareprofileswdefault       rdfdescription    ccppcomponent    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalbrowser        rdftype            rdfresourcehttpwwwexamplecomschemabrowserua         ccppdefaults            rdfresourcehttpwwwexamplecomterminalprofileuadefault       rdfdescription    ccppcomponent  rdfdescriptionrdfrdf defaults for hardwareplatform xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsexhttpwwwexamplecomschema  rdfdescription      rdfabouthttpwwwexamplecomhardwareprofilehwdefault    rdftype        rdfresourcehttpwwwexamplecomschemahardwareplatform     exdisplaywidthexdisplaywidth    exdisplayheightexdisplayheight  rdfdescriptionrdfrdf defaults for softwareplatform xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsexhttpwwwexamplecomschema  rdfdescription      rdfabouthttpwwwexamplecomsoftwareprofileswdefault    rdftype        rdfresourcehttpwwwexamplecomschemasoftwareplatform     exnameepocexname    exversionexversion    exvendorsymbianexvendor  rdfdescriptionrdfrdf defaults for browserua xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsexhttpwwwexamplecomschema  rdfdescription      rdfabouthttpwwwexamplecomterminalprofileuadefault    rdftype        rdfresourcehttpwwwexamplecomschemabrowserua     exnamemozillaexname    exversionexversion    exvendorsymbianexvendor    exhtmlversionssupported      rdfbag        rdflirdfli        rdflirdfli      rdfbag    exhtmlversionssupported  rdfdescriptionrdfrdf if a given attribute value is applied directly to a component resource and also appears on a resource referenced by the ccppdefaults property the directly applied value takes precedence figure a overriding a default value exmyprofile  ccppcomponent exterminalhardware                                              rdftype exhardwareplatform                       ccppdefaults exhwdefault                       exmemorymb exhwdefault  rdftype exhardwareplatform exdisplaywidth  exdisplayheight  exmemorymb  in this example the default component indicates  mb of memory but this value is overridden by the memorymb property applied directly to the profile component thus in this profile the memorymb attribute has a value of  the corresponding xml might look like this figure b overriding a default value in xml device profile referencing defaults xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsccpphttpwwwworgccppschema         xmlnsexhttpwwwexamplecomschema  rdfdescription      rdfabouthttpwwwexamplecomprofilemyprofile    ccppcomponent      rdfdescription          rdfabouthttpwwwexamplecomprofileterminalhardware        rdftype            rdfresourcehttpwwwexamplecomschemahardwareplatform         ccppdefaults            rdfresourcehttpwwwexamplecomhardwareprofilehwdefault         exmemorymbexmemorymb      rdfdescription    ccppcomponent  rdfdescriptionrdfrdf defaults for hardwareplatform xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsexhttpwwwexamplecomschema  rdfdescription      rdfabouthttpwwwexamplecomhardwareprofilehwdefault    rdftype        rdfresourcehttpwwwexamplecomschemahardwareplatform     exdisplaywidthexdisplaywidth    exdisplayheightexdisplayheight    exmemorymbexmemorymb  rdfdescriptionrdfrdf a resource indicated by a default property may appear in a separate document in which case an absolute uri reference should be specified for the default resource in such cases the uri part of the default resource identifier ie not including the fragment identifier part is used to retrieve an rdf document containing the default resource description thus if the default resource is named httpexamplecomdeviceprofilehardwareplatform the uri httpexamplecomdeviceprofile is used to retrieve an rdf document and a resource within that document having the local identifier hardwareplatform is taken as the default resource such a resource might be defined within the target document using abouthttpexamplecomdeviceprofilehardwareplatform or idhardwareplatform see also section  note individual applications may allow relative uris to be used those that do should specify exactly how the corresponding rdf document is located  extensibility and namespaces ccpp is extended primarily through the introduction of new attribute vocabularies any application or operational environment that uses ccpp may define its own vocabulary but wider interoperability is enhanced if vocabularies are defined that can be used more generally eg a standard extension vocabulary for imaging devices or voice messaging devices or wireless access devices etc accordingly this specification defines a small core vocabulary of features that are applicable to range of print and display agents whose use where appropriate is strongly recommended this core vocabulary is based on ietf specification rfc rfc and serves as an example of how ccpp attribute vocabularies may be defined another such example is the wap forum uaprof specification uaprof any ccpp expression can use terms drawn from an arbitrary number of different vocabularies so there is no restriction caused by reusing terms from an existing vocabulary rather then defining new names to identify the same information each vocabulary is associated with an xml namespace as are the names that describe the underlying rdf and ccpp structures xml namespaces xmlnamespaces define a notation for associating convenient name forms with arbitrary uris the rdf graph syntax does not specifically employ namespaces but xml serializations of an rdf graph do we also use namespace prefixes when presenting rdf in the graph notation described above the ccpp framework uses the xml namespace mechanism to create identifying uris for rdf core elements ccpp structural elements and ccpp attribute vocabularies consider the following namespace declaration example figure  example namespace declarations xml versionrdf xmlnsrdfhttpwwwworgrdfsyntaxns     xmlnsccpphttpwwwworgccppschema     xmlnsprfhttpwwwwapforumorgprofilesuaprofccppschema the first namespace declaration is for rdf usage the second declaration names the ccpp core structural vocabulary which includes component defaults and other properties that are intrinsic to the ccpp framework the third namespace declaration names a component ccpp properties vocabulary note remember that the namespace prefixes are quite arbitrary applications must not assume that the prefix rdf refers to the rdf vocabulary or that ccpp refers to the intrinsic ccpp vocabulary etc it is the uri to which a namespace prefix is bound that matters note although namespace names are identified by uri references there is no requirement that a schema be available at that uri in the above example the uaprof namespace name is httpwwwwapforumorguaprofccppschema yet there is no schema at that uri it is generally preferred practice that a corresponding schema exists at the url used to identify a namespace but this is not a requirement and ccpp applications must not assume that such a schema will exist the use of multiple component property vocabularies is allowed and encouraged different user communities and application domains wap forum etsi mexe ietf conneg etc may define their own property vocabularies this is an important mechanism for providing support for the needs of those communities the following namespaces are introduced by the ccpp framework httpwwwworgccppschema normative rdf schema defining class declarations for ccpp and core structural properties listed in appendix b httpwwwworgccppclient example but nonnormative vocabulary for describing simple client capabilities with particular relevance to print and display clients listed in appendix c note to retrieve these schemas it is necessary for your browser to add the header accepttextxml in the request browsers that do not add this accept header or use the header accept or variants thereof will receive a html page that notes these are namespaces reserved for the ccpp schemas  ccpp structure the general structure of a ccpp client profile is a twolevel tree components and attributes with provision for each component to reference an externally defined set of default attribute values  components a ccpp profile contains one or more components and each component contains one or more attributes each component is represented by a resource of type ccppcomponent or some rdfs subclass thereof and related to the client profile resource by a ccppcomponent property here the ccpp namespace is httpwwwworgccppschema for compatibility with uaprof the namespace used to qualify component may be a uaprof namespace the object of a ccppcomponent resource may have an rdftype property or equivalent rdf structure indicating what kind of client component it describes the example in figure b is of a profile with an explicit indication of component subtype however ccpp processors must be able to handle profiles that do not contain component type indicators as long as the ccpp attributes used are all specific to a given component type a processor will have sufficient information to interpret them properly no more than one instance of a component type should be present for any given profile resource if a ccpp profile uses any attribute that can appear on different component types then the type of any component on which such an attribute appears must be indicated by an rdftype property or equivalent rdf a ccpp processor must be able to use this type information to disambiguate application of any attribute used  attributes ccpp profiles are constructed using rdf rdf the rdf data model represents ccpp attributes as named properties linking a subject resource to an associated object resource or rdf literal value to describe client capabilities and preferences the client being described is a resource whose features are described by labeled graph edges from that resource to corresponding object values the graph edge labels identify the client feature ccpp attribute being described and the corresponding object values are the feature values figure  rdf statement describing a client attribute client component resource attributename attributevalue ccpp attribute labels are represented by xml name values per xml specification xml section  which may include a namespace prefix ie a qualified name per xml namespaces xmlnamespaces section  when combined with the corresponding namespace or default namespace declaration each label must be mapped to a uri thus ccpp attribute names are uris with xml namespace syntax used to avoid some of the rdf expressions becoming too cumbersome attribute values may be of simple or structured data types simple data types are discussed in the section  each basic data type may support a range of tests that can be used in the process of determining the suitability of different resource variants for presentation by a client eg equality compatibility lessthan greaterthan etc structured data types are supported through the use of specific rdf properties that join simple rdf literal values into composites specific ccpp semantics for rdf properties used in this way are discussed in the section   defaults each component of a client profile may indicate a single separate resource that in turn indicates a subordinate collection of default attribute values this collection of default values can be a separate rdf document that is named via a uri or can appear in the same document as the client profile though in practice there is probably little value in defaults in the same document if an attribute in the collection of defaults is also present in the main part of the client profile the nondefault value takes precedence the intent is that a hardware vendor or system supplier may provide default values that are common to a number of systems in a place easily accessible to an origin server and then use the client profile to specify variations from the common profile the owner of the product or system operator may be able to add or change options such as additional memory that add new capabilities or change the values of some original capabilities default values are referenced by the property ccppdefaults this name conforms to the name format recommendations of the rdf model and syntax specification rdf appendix c however for compatibility with earlier versions of ccpp used with uaprof ccpp processors should recognize the property name ccppdefaults ie with capital d as equivalent here the ccpp namespace is httpwwwworgccppschema for compatibility with uaprof the namespace used to qualify defaults or defaults may be a uaprof namespace defaults can be encoded inline or as separate documents referred to via uri defaults can not be encoded both inline and as a separate document it is the responsibility of any server interpreting a ccpp to combine profiles with any externally referenced defaults in such a way as to be able to correctly interpret the profile a profile with defaults in the same document is logically equivalent to a profile with the same nondefault data and referenced external documents containing the default values here is a simple profile graph using default values figure a ccpp profile using defaults exmyprofile  ccppcomponent exterminalhardware                                            rdftype exhardwareplatform                      ccppdefaults exhwdefault                      exdisplaywidth                       exdisplayheight   ccppcomponent exterminalsoftware                                            rdftype exsoftwareplatform                      ccppdefaults exswdefault  ccppcomponent exterminalbrowser                                                      rdftype exbrowserua          ccppdefaults exuadefault          exhtmlversionssupported     exhwdefault  rdftype exhardwareplatform excpu ppc exdisplaywidth  exdisplayheight exswdefault  rdftype exsoftwareplatform exname epoc exversion  exvendor symbianexuadefault  rdftype exbrowserua exname mozilla exversion  exvendor symbian exhtmlversionssupported     if a component referenced by ccppdefaults contains an attribute that is not present on the referencing profile component then the effect is as if the attribute value in the default component is applied directly to the profile component for example the profile in figure a should be interpreted as describing the same capabilities as shown in figure b figure b resolving a ccpp profile using defaults exmyprofile  ccppcomponent exterminalhardware                                            rdftype exhardwareplatform                      exdisplaywidth                       exdisplayheight                       excpu ppc  ccppcomponent exterminalsoftware                                            rdftype exsoftwareplatform                      exname epoc                      exversion                       exvendor symbian  ccppcomponent exterminalbrowser                                                      rdftype exbrowserua          exhtmlversionssupported               exname mozilla          exversion           exvendor symbian and here is the corresponding xml serialization with the default resource descriptions coded inline in the client profile description note that this example uses a default namespace for rdf elements but still must use explicit namespace prefixes for rdf attributes figure c ccpp profile using inline defaults in xml xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsccpphttpwwwworgccppschema         xmlnsprfhttpexamplecomschema  rdfdescription rdfabouthttpexamplecommyprofile    ccppcomponent      rdfdescription rdfabouthttpexamplecomterminalhardware        rdftype rdfresourcehttpexamplecomschemahardwareplatform        ccppdefaults          rdfdescription rdfabouthttpexamplecomhwdefault            rdftype rdfresourcehttpexamplecomschemahardwareplatform            prfcpuppcprfcpu            prfdisplaywidthprfdisplaywidth            prfdisplayheightprfdisplayheight          rdfdescription        ccppdefaults        prfdisplayheightprfdisplayheight        prfdisplaywidthprfdisplaywidth      rdfdescription    ccppcomponent    ccppcomponent      rdfdescription rdfabouthttpexamplecomterminalsoftware        rdftype rdfresourcehttpexamplecomschemasoftwareplatform         ccppdefaults          rdfdescription rdfabouthttpexamplecomswdefault            rdftype rdfresourcehttpexamplecomschemasoftwareplatform            prfnameepocprfname            prfvendorsymbianprfvendor            prfversionprfversion          rdfdescription        ccppdefaults      rdfdescription    ccppcomponent    ccppcomponent      rdfdescription rdfabouthttpexamplecombrowser        rdftype rdfresourcehttpexamplecomschemabrowserua         ccppdefaults          rdfdescription rdfabouthttpexamplecomuadefault            rdftype rdfresourcehttpexamplecomschemabrowserua            prfnamemozillaprfname            prfvendorsymbianprfvendor            prfversionprfversion            prfhtmlversionssupported              rdfbag                rdflirdfli                rdflirdfli              rdfbag            prfhtmlversionssupported          rdfdescription        ccppdefaults        prfhtmlversionssupported          rdfbag            rdflirdfli            rdflirdfli            rdflirdfli          rdfbag        prfhtmlversionssupported      rdfdescription    ccppcomponent  rdfdescriptionrdfrdf inline defaults are logically equivalent to defaults contained in an external referenced document and such external documents would be a normal way of providing default values the following is the xml serialization of the same profile with references to externally defined defaults figure  ccpp profile referencing externally defined defaults in xml xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsccpphttpwwwworgccppschema         xmlnsprfhttpexamplecomschema  rdfdescription rdfabouthttpexamplecommyprofile    ccppcomponent      rdfdescription rdfabouthttpexamplecomterminalhardware        rdftype rdfresourcehttpexamplecomschemahardwareplatform        ccppdefaults rdfresourcehttpexamplecomhwdefault        prfdisplaywidthprfdisplaywidth        prfdisplayheightprfdisplayheight      rdfdescription    ccppcomponent    ccppcomponent      rdfdescription rdfabouthttpexamplecomterminalsoftware        rdftype rdfresourcehttpexamplecomschemasoftwareplatform         ccppdefaults rdfresourcehttpexamplecomswdefault      rdfdescription    ccppcomponent    ccppcomponent      rdfdescription rdfabouthttpexamplecombrowser        rdftype rdfresourcehttpexamplecomschemabrowserua         ccppdefaults rdfresourcehttpexamplecomuadefault        prfhtmlversionssupported          rdfbag            rdflirdfli            rdflirdfli            rdflirdfli          rdfbag        prfhtmlversionssupported      rdfdescription    ccppcomponent  rdfdescriptionrdfrdf each external defaults resource is a separate rdf document referenced by a uri note a default document uses a rdfdescription element as its root node the rdfdescription is named using an rdfabout whose value is a uri this uri must correspond to the value of the rdfresource xml attribute in the ccppdefaults element in the referencing document the default component does not need to be identified when it occurs inline as in the first example above in the examples of default documents below the urls of the external default values documents are used however the default resource uri does not have to be the document url as long as the uri is uniquely identified the same uri is used in both the source document and the external default values document and there is some way for the processing software to locate and retrieve the document containing the default resource examples of default documents referenced by the previous example are as follows figure  external hardwareplatform default values document httpexamplecomhwdefault xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsprfhttpexamplecomschema   rdfdescription rdfabouthttpexamplecomhwdefault     rdftype rdfresourcehttpexamplecomschemahardwareplatform     prfcpuppcprfcpu     prfdisplaywidthprfdisplaywidth     prfdisplayheightprfdisplayheight   rdfdescriptionrdfrdf figure  external softwareplatform default values document httpexamplecomswdefault xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsprfhttpexamplecomschema   rdfdescription rdfabouthttpexamplecomswdefault     rdftype rdfresourcehttpexamplecomschemasoftwareplatform     prfnameepocprfname     prfvendorsymbianprfvendor     prfversionprfversion   rdfdescriptionrdfrdf figure  external browseua default values document httpexamplecomuadefault xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsprfhttpexamplecomschema  rdfdescription rdfabouthttpexamplecomuadefault    rdftype rdfresourcehttpexamplecomschemabrowserua    prfnamemozillaprfname    prfvendorsymbianprfvendor    prfversionprfversion    prfhtmlversionssupported      rdfbag        rdflirdfli        rdflirdfli      rdfbag    prfhtmlversionssupported  rdfdescriptionrdfrdf  distinguishing profile structure from attributes ccpp uses namespaces to distinguish the vocabulary associated with the structure eg ccppcomponent from vocabularies associated with applications eg terminalhardware display in this example we use the namespace httpwwwwapforumorgprofilesuaprofccppschema associated with prefix prf to describe properties that are not defined in the ccpp or rdf namespaces figure  xml serialization of ccpp profile with namespaces xml versionrdfrdf xmlnsrdfhttpwwwworgrdfsyntaxns         xmlnsccpphttpwwwworgccppschema         xmlnsprfhttpwwwwapforumorgprofilesuaprofccppschema  rdfdescription rdfabouthttpexamplecommyprofile    ccppcomponent      rdfdescription rdfabouthttpexamplecomterminalhardware        rdftype rdfresourcehttpwwwwapforumorgprofilesuaprofccppschemahardwareplatform         prfcpuppcprfcpu        prfscreensizexprfscreensize      rdfdescription    ccppcomponent    ccppcomponent      rdfdescription rdfabouthttpexamplecomterminalsoftware        rdftype rdfresourcehttpwwwwapforumorgprofilesuaprofccppschemasoftwareplatform         prfosnameepocprfosname        prfosvendorsymbianprfosvendor        prfosversionprfosversion      rdfdescription    ccppcomponent    ccppcomponent      rdfdescription rdfabouthttpexamplecombrowser        rdftype rdfresourcehttpwwwwapforumorgprofilesuaprofccppschemabrowserua         prfbrowsernamemozillaprfbrowsername        prfbrowserversionprfbrowserversion        prfhtmlversion          rdfbag            rdflirdfli            rdflirdfli          rdfbag        prfhtmlversion      rdfdescription    ccppcomponent  rdfdescriptionrdfrdf all rdf resources that relate to the overall structure of ccpp are defined in the ccpp namespace and have associated schema properties that allow them to be distinguished from attribute vocabulary or other rdf statements by a schemaaware processor  notes on rdf usage this specification uses rdfabout to specify the uris of resources in examples this was a deliberate choice to ensure that such uris are absolutely and unambiguously specified this is also different to uaprof which uses both rdfabout and rdfid ccpp allows rdfid attributes or rdfabout attributes however the values of rdfid attributes represent uris which are relative to the base uri of the document rdffragment when a document is moved to another location on the web the meaning of the value of an rdfid attribute changes the meaning is undefined when the rdf is contained in a document with no base uri eg when encapsulated in a message the rdfcore wg have a working draft rdfxml that proposes that rdf should support xmlbase attributes if this addition to rdf achieves recommendation status then it would be appropriate to use rdfid attributes in conjunction with an xmlbase attribute instead of rdfabout attributes for now we recommend that ccpp profiles should use rdfabout and that the uris of resources are fully specified the component resources in a profile are instances of components identified in the corresponding schema which in turn must be subclasses of ccppcomponent they may usefully be identified as such by means of the rdftype property whose value matches the name of the component type in the schema sometimes this type indication must be present see section  components  rdf graph composition the rdf statements that make up an rdf graph do not necessarily occur in a single document for ccpp the profile delivered may contain references to rdf subgraphs that are transferred separately or are retrieved from designated web resources when an external subgraph is referenced in this way the effect is equivalent to taking the sets of rdf statement triples described by the referencing document and the referenced document and constructing a new document that describes the union of these sets note implementations are not required to actually construct such a document just to interpret the rdf statements as they would from a single document this composition of multiple rdf documents presumes that the content of the referenced document is trusted to accurately represent the capabilities that are presented to the sender of some resource data accordingly such composition is restricted to documents describing resources referenced by properties whose intended interpretation embodies such a notion of trust viz ccppdefaults  attribute vocabularies  attribute data this section describes the basic data types and data structuring options that are available for the values associated with a ccpp attribute all ccpp attributes should be defined with values that can be treated as one of the simple or complex data types discussed later support for the described formats for attribute values is recommended this specification does not prohibit the use of other valid rdf forms but provides no guidance for their interpretation see also section  and appendix f  simple ccpp attribute data all simple ccpp attribute values are represented as rdf plain literal values in rdfxml these may appear as character sequences either in xml elements or as xml attributes the acceptable plain literal values for an attribute may be constrained to the lexical space associated with a specific application data type this section introduces some specific data types that may be associated with simple ccpp attributes base ccpp usage defined here leaves any further interpretation of the values used to the processing application future versions of ccpp may introduce additional structures that provide for standardized matching of client profiles with other resource metadata to allow such developments and to ease interworking with ietf media feature descriptions it is recommended that any simple attribute values should be defined in terms of one of the data types described below all attribute values are ultimately sequences of ucs unicode characters it is assumed that character coding issues in specific serializations of the rdf data are defined by the enclosing xml representation note attribute comparison is beyond the scope of this document as are specific mechanisms for determining the simple type corresponding to a given attribute value applications are presumed to know how to deal with any ccpp attribute that they handle where given formal syntax expressions use the notation presented in section  of the xml specification xml  strings the data type of a ccpp attribute value may be defined to be a case sensitive text string the rdf literal value is constrained to the lexical space defined in the string xml schema datatype xmlschema any lang tag is ignored in general such values may be compared for equality or inequality when comparing text values every character must match exactly for equality to be declared some examples browser name mozilla browser version   integer numbers the data type of a ccpp attribute value may be defined to be an integer number the rdf literal value is constrained to the lexical space defined in the int xml schema datatype xmlschema any lang tag is ignored integer numbers may be positive zero or negative they are represented by a string containing a sequence of decimal digits optionally preceded by a  or  sign leading zeros are permitted and are ignored the number value is always interpreted as decimal radix  it is recommended that implementations generate and support integer values in the range  to  or  to  ie integers whose absolute value can be expressed as a bit unsigned binary number figure  syntax for integer numbers signedinteger       unsignedintegerunsignedinteger  digit digit some examples     note the choice of recommended number range support was based on support from java and other programming languages widely used for the web  rational numbers the data type of a ccpp attribute value may be defined to be a rational number in other words the rdf literal value is constrained to the lexical space defined below any lang tag is ignored a rational number is expressed as a ratio of two integer numbers two positive integers are separated by a  and optionally preceded by a  or  sign it is recommended that implementations generate and support numerators of a rational number the first number before the  in the range  to   and denominators after the  in the range  to  figure  syntax for rational numbers rationalnumber  signedinteger   unsignedinteger  if the denominator is omitted a value  is assumed ie treat value as an integer some examples     note the rational number schema described above may be defined in xmlschema xmlschema as follows figure  possible xmlschema for rational numbers xsschema xmlnsxshttpwwwworgxmlschema  targetnamespacehttpwwwworgtrwdccppstructvocab    xssimpletype namerational      xsannotation        xsdocumentation          the canonical lexical representation of any value           will be the form of the value reduced to its lowest           common denominator and with  in the denominator           if applicable        xsdocumentation      xsannotation    xsrestriction basexsstring      xspattern value    xsrestriction  xssimpletypexsschema note that while the pattern above provides a lexical definition it does so imperfectly it strictly disallows any whitespace at all further the simple type definition above does not define a numeric value space ordering equality and implied support for arithmetic operations are not defined as some users of the type might expect  processors need only recognize the definition as a string because of these deficiencies use of rational numbers as defined here may be harmful to interoperability the xmlschema working group may define a workable rational data type in the future  complex ccpp attribute data in addition to the simple values described above a ccpp attribute may have a complex value expressed in the form of a resource with its own collection of rdf properties and associated values specific data types represented in this way are set of values sequence of values a profile must not have multiple occurrences of a single attribute within a single component ccpp attributes that need to have multiple values should use sets or sequences other complex ccpp attribute values may be represented by arbitrary rdf resources a definition of the interpretation of such values is beyond the scope of this specification  set of values a set consists of zero one or more values all different and whose order is not significant set values are useful for representing certain types of device characteristics eg the range of typefaces that can be supported by a client or the html versions supported by a browser a set is represented as an rdfbag with each member of the set corresponding to a property of that resource named rdf_ rdf_ etc this construct is described in section  of the rdf model and syntax specification rdf figure  rdf representation of set values in ccpp clientresource  attributename rdfbag                          rdf_ setmembervalue                          rdf_ setmembervalue                                                    rdf_n setmembervaluen note the rdfbag construct does not require that every contained value be unique a set cannot contain duplicate values so every property of an rdfbag used to represent a set must have a distinct value there is a clear distinction drawn between an attribute that has a single value and an attribute whose value is a set with zero one or more elements figure  attribute with set value containing a single member clientresource  attributename rdfbag rdf_ setmembervalue compare the above attribute value which is a set containing one element with the following which is a simple value figure  attribute with a simple value clientresource  attributename attributevalue  sequence of values a sequence consists of zero one or more values whose order is significant in some way sequence values are useful for a range of client features that may be ordered or ranked in some way eg a list of preferences in some order of preference this specification does not define the significance of the ordering of values a vocabulary that defines a sequencevalued ccpp attribute should also define the significance of the ordering of within the sequence a sequence is represented as an rdfseq with each member of the set corresponding to a property of that resource named rdf_ rdf_ etc this construct is described in section  of the rdf model and syntax specification rdf figure  rdf representation of sequence values in ccpp clientresource  attributename rdfseq                          rdf_ sequencevalue                          rdf_ sequencevalue                                                    rdf_n sequencevaluen there is a clear distinction drawn between an attribute that has a single value and an attribute whose value is a sequence with zero one or more elements figure  attribute with sequence value containing a single member clientresource  attributename rdfseq rdf_ sequencevalue compare the above attribute value which is a sequence containing one element with the simple value as shown in figure  above  attribute identifiers ccpp attribute names are in the form of a uri any ccpp vocabulary is associated with an xml namespace which combines a base uri with a local xml element name or xml attribute name to yield a uri corresponding to an attribute name eg the namespace uri httpwwwworgccppclient and the core vocabulary name type are combined to yield the attribute name uri reference httpwwwworgccppclienttype anyone can define and publish a ccpp vocabulary extension assuming administrative control or allocation of a uri for an xml namespace for such a vocabulary to be useful it must be interpreted in the same way by communicating entities thus use of an existing extension vocabulary is encouraged wherever possible failing this publication of a new vocabulary definition containing detailed descriptions of the new ccpp attributes many extension vocabularies will be drawn from existing applications and protocols eg wap uaprof ietf media feature registrations etc appendix e surveys some possible sources of additional ccpp vocabularies  rdf vocabulary schema attribute names are defined and associated with an xml namespace using an rdf schema appendix b to this document contains an rdf schema describing terms for use in ccpp profiles appendix c contains an example schema describing a ccpp vocabulary appendix d contains recommendations for creating a new vocabulary a ccpp processor is not required to understand and process rdf schema definitions it merely needs to understand enough about the ccpp profile structure and vocabulary used to perform its job a schemaaware processor may be able to handle ccpp profiles in other ways or in combination with other rdf information but such behavior is beyond the scope of this specification  conformance this section explains how to make a valid claim that a product conforms to this specification anyone may make a claim eg vendors about their own products third parties about those products journalists about products etc claims may be published anywhere eg on the web or in product documentation claimants are solely responsible for their claims if the subject of the claim eg the software changes after the date of the claim the claimant is responsible for updating the claim claimants are expected to modify or retract a claim if it may be demonstrated that the claim is not valid claimants are encouraged to conform to the most recent specification available there are three classes of products of ccpp documents eg a web resource producers eg a web client consumers eg a web server  ccpp document conformance documents may exist as resources accessible via a url or may be transmitted as data in a message a document is ccpp conformant when it meets the following criteria the document must be valid rdf serialized in xml and be based on one or more vocabularies derived from the rdf schema in appendix b see section  the document must use valid syntax for namespace declarations see section  the profile element must contain one or more components see section  each component in the profile must contain one or more attributes see section  the component names may be in rdfabout or rdfid attributes see section  components must be indicated using a ccppcomponent property where the namespace used to qualify component is the ccpp namespace or a uaprof namespace see section  component names component types and attribute names must all refer to different uris within a profile see section  if a component type is given as an element name and as an rdftype element they must refer to the same uri see section  default references must be valid urls see section  defaults may be written as ccppdefaults or ccppdefaults see section  defaults must be indicated using a ccppdefaults or ccppdefaults property where the namespace used to qualify defaults or defaults is the ccpp namespace or a uaprof namespace see section  component attributes may contain both a default value and a directly applied value with the directly applied value taking precedence see section  components may contain inline defaults see section  components must not contain both inline and referenced defaults see section  components may reference a default document which does not have an rdftype see section  attributes may have sets of values bags see section  attributes may have sequences of values seq see section  attributes may have string values see section  attributes may have integer number values see section  attributes may have rational number values see section  a component must not contain more than one attribute with the same name see section  attributes of the same name may be in different components see section  profiles may use multiple namespaces for attributes see section   ccpp producer conformance a producer is ccpp conformant when any ccpp profile document generated by the producer is a ccpp conformant document  ccpp consumer conformance a consumer is ccpp conformant when the consumer accepts any ccpp conformant document and extracts ccpp information schemaaware processing is not required and therefore support for the rdf schema in appendix b by ccpp consumers is optional see section  there are two categories of conformance for ccpp consumers conformant a ccpp consumer can claim to be a ccpp  conformant consumer if it accepts any valid ccpp profile and extracts information from it validating a ccpp consumer can claim to be a ccpp  conformant validating consumer if it is conformant and if it rejects all invalid ccpp profiles note a consumer implementation may be configurable to act as either a conformant consumer or a conformant validating consumer at different times  conformance claims  validity a conformance claim is valid if it is well formed and meets the appropriate conformance criteria for the applicable product class as given above  wellformed a conformance claim is wellformed if it includes the following information the date of the claim the product class document producer or consumer the consumer category conformant or conformant validating if applicable the title and dated uri of this document the product name identity including a version date or other identifier that uniquely identifies the product  acknowledgments this document is a distillation of many discussions of the wc ccpp working group with final amendments introduced by the wc device independence working group the following were ccpp working group members for some or most of the period of preparation of this specification and its predecessors mikael nilsson ericsson infotech ulrich kauschke tmobil ann navarro html writers guild brad topol ibm franklin reynolds nokia graham klyne baltimore technologies noboru iwayama fujitsu laboratories ltd takashi nishigaya fujitsu laboratories ltd lalitha surayanrayana sbc technology resources hidetaka ohto wc through march   panasonic simon mcbride dstc pty ltd varuni witana dstc pty ltd chris woodrow information architects johan hjelm ericsson barry briggs interleaf gerd hoelzing sap ted hardie equinix serge rigori sun ted wugofski phonecom kynn bartlett html writers guild sandeep singhal ibm thorsten kassing tmobil larry masinter adobe during the period when the ccpp wg was developing the specification useful revisions and clarifications were suggested by yuichi koike stuart williams sean palmer and toni penttinen special thanks are due to aaron swartz for a very thorough and revealing review of the first last call draft following the handing over of the work to the di wg special thanks are also due to david ezell xml schema wg brian mcbride rdf core wg masayasu ishikawa html wg and lynne rosenthal qa wg for their help in completing the specification the following members of the di wg also provided assistance in completing the specification stephane boyera roger gimson kazuhiro kitagawa andreas schade  references  normative references xml extensible markup language xml  second edition tim bray jean paoli c m sperbergmcqueen eve maler world wide web consortium recommendation  october  httpwwwworgtrrecxml as amended by xml  second edition specification errata httpwwwworgxmlxmlveerrata specifically httpwwwworgxmlxmlveerratae xmlnamespaces namespaces in xml tim bray dave hollander andrew layman world wide web consortium recommendation  january  httpwwwworgtrrecxmlnames rdf resource description framework rdf model and syntax specification ora lassila ralph swick world wide web consortium recommendation  february  httpwwwworgtrrecrdfsyntax rdfschema resource description framework rdf schema specification dan brickley r v guha world wide web consortium candidate recommendation  march  httpwwwworgtrcrrdfschema rdfxml rdfxml syntax specification dave beckett world wide web consortium working draft httpwwwworgtrwdrdfsyntaxgrammar  informative references rfc rfc  media feature tag registration procedure k holtman a mutz t hardie ietf request for comments ftpftpisieduinnotesrfctxt rfc rfc  a syntax for describing media feature sets g klyne ietf request for comments ftpftpisieduinnotesrfctxt connegmatch a revised media feature set matching algorithm g klyne internetdraft work in progress draftklyneconnegfeaturematchtxt rfc rfc  media features for display print and fax l masinter d wing a mutz k holtman ietf request for comments ftpftpisieduinnotesrfctxt uaprof wap uaprof user agent profiling specification  as amended by wap_ user agent profiling specification information note  wireless application protocol forum available at httpwwwwapforumorgwhattechnical__htm also see wapuaprof version oct available at httpwwwwapforumorgwhattechnicalhtm datastructure notes on data structuring c a r hoare in structured programming academic press  isbn  xmlschema xml schema part  primer david c fallside world wide web consortium recommendation  may  httpwwwworgtrrecxmlschema xmlschema xml schema part  structures henry s thompson david beech murray maloney noah mendelsohn world wide web consortium recommendation  may  httpwwwworgtrrecxmlschema xmlschema xml schema part  datatypes paul v biron ashok malhotra world wide web consortium recommendation  may  httpwwwworgtrrecxmlschema semantictoolbox the semantic toolbox building semantics on top of xmlrdf tim bernerslee httpwwwworgdesignissuestoolboxhtml rfc rfc  content feature schema for internet fax g klyne l mcintyre ietf request for comments ftpftpisieduinnotesrfctxt tiff tiff tagged image file format  specification adobe systems inc httppartnersadobecomasndeveloperpdfstntiffpdf rfc rfc  file format for internet fax l mcintyre s zilles r buckley d venable g parsons j rafferty ietf request for comments ftpftpisieduinnotesrfctxt multimedia multimedia programming interface and data specifications  contains wave file format ibm corporation and microsoft corporation riffspectxt rfc rfc  wave and avi codec registries e fleischman ietf request for comments ftpftpisieduinnotesrfctxt mpeg mpeg overview  v  geneva version isoiec jtcscwg n rob koenen overview of the mpeg standard pwg printer working group httpwwwpwgorg rfc rfc  internet printing protocol model and semantics r debry t hastings r herriot s isaacson p powell ietf request for comments ftpftpisieduinnotesrfctxt salutation salutation consortium specification httpwwwsalutationorg rfc rfc  key words for use in rfcs to indicate requirement levels s bradner ietf request for comments ftpftpisieduinnotesrfctxt mpeg mpeg overview version  isoiec jtcscwg n jos martz upmgti es overview of the mpeg standard httpmpegtelecomitalialabcomstandardsmpegmpeghtm rfc rfc  ietf policy on character sets and languages h alvestrand ietf request for comments ftpftpisieduinnotesrfctxt rfc rfc  uniform resource identifiers uri generic syntax t bernerslee r fielding l masinter ietf request for comments ftpftpisieduinnotesrfctxt rfc rfc  iana charset registration procedures n freed j postel ietf request for comments ftpftpisieduinnotesrfctxt ccpparch composite capabilitiespreference profiles requirements and architecture mikael nilsson johan hjelm hidetaka ohto world wide web consortium working draft  july  httpwwwworgtrwdccppra rfc rfc  hypertext transfer protocol  http r fielding j gettys j mogul h frystyk l masinter p leach t bernerslee ietf request for comments ftpftpisieduinnotesrfctxt conceptual conceptual structures information processing in mind and machine john f sowa addison wesley reading ma  knowledge knowledge representation john f sowa brookscole  isbn  rdffragment re how to address rdf fragment ralph r swick message to world wide web consortium rdfcomments mailing list httplistsworgarchivespublicwwwrdfcommentsaprjunhtml ccppex ccpp exchange protocolhidetaka ohto johan hjelm world wide web consortium note  june  httpwwwworgnoteccppexchange wai web content accessibility guidelines  wendy chisholm jason white gregg vanderheiden world wide web consortium working draft  august  httpwwwworgtrwdwcag rdfprimer rdf primer frank manola eric miller world wide web consortium working draft  january  httpwwwworgtrwdrdfprimer appendix a terminology and abbreviations a terminology this appendix is informative attribute or ccpp attribute a ccpp attribute refers to the data elements describing the profile and is denoted as an rdf property each ccpp attribute is associated with a value or a list of values or am rdf resource note this is quite distinct from an xml attribute except where the meaning obvious in context the term ccpp attribute is generally used to emphasize this usage ccpp processor a ccpp processor transforms a ccpp document from its rdf format into some other format a ccpp processor understands ccpp syntax and structure including defaults but it does not understand application semantics associated with ccpp attributes of ccpp components ccpp repository a server that stores the user agent profile or profile segments persistently in a form that may be referenced by and incorporated into a profile a ccpp repository is typically a web server that provides ccpp profiles or profile segments in response to http requests cacheable a data resource is said to be cacheable if the data resource contains a property that allows a server to determine whether the cached resource matches a request for a similar resource cache a storage area used by a server or proxy to store data resources that have been retrieved or created in response to a request when a new request for a cached data resource is received the server or proxy can respond with the cached version instead of retrieving or creating a new copy capability an attribute of a sender or receiver often the receiver which indicates an ability to generate or process a particular type of message content see also ccpp attributes client an entity that is the original compositor of a ccpp profile confidentiality protecting the content of a message from unauthorized disclosure content generation for the purpose of this specification content generation refers to generating content appropriate to the user agent profile of the request by using the user agent profile as input to a dynamic content generation engine the xsl and style sheets of the document are used to tailor the document to the user agent profile of the request content negotiation the mechanism for selecting the appropriate representation when servicing a request the representation of entities in any response can be negotiated including error responses content selection for the purpose of this specification content selection refers to selecting an appropriate document from a list of possible choices or variants by matching the document profile with the user agent profile of the request content provider a server that originates content in response to a request data resource a data object that can be transferred across a network data resources may be available in multiple representations eg multiple languages data formats size resolutions or vary in other ways document for the purpose of this specification document refers to content supplied in response to a request using this definition a document may be a collection of smaller documents which in turn is a part of a greater document document profile document profiles offer a means to characterize the features appropriate to given categories of user agents for instance one profile might include support for style sheets vector graphics and scripting while another might be restricted to the tags in html  document profiles can be used by servers to select between document variants developed for different user agent categories they can be used to determine what transformations to apply when such variants are not available content developers can use document profiles to ensure that their web sites will be rendered as intended dynamic content content that is generated in response to a request this may be used for content that depends on changing environmental factors such as time eg stock quotes or place eg nearby gas stations feature functional property of a device or entity gateway software that is capable of bridging disparate network protocols for the purposes of this specification gateway refers to protocol bridging functionality which may exist in a standalone gateway or may be colocated with a proxy or origin server hint a suggestion or preference for a particular option while this option is strongly recommended its use is not required machine understandable data that is described with tags that associate a meaning to the data ie an author tag would describe the author of the document allowing data to be searched or combined and not just displayed namespace a qualifier added to an xml tag to ensure uniqueness among xml elements negotiate content message content that has been selected by content negotiation negotiation metadata information which is exchanged between the sender and the receiver of a message by content negotiation in order to determine the variant which should be transferred nonvariant content when the formformat of the content being sent does not depend on receivers capabilities andor preferences origin server software that can respond to requests by delivering appropriate content or error messages the origin server may receive requests via either wsp or http application programs executing on the origin server deliver content that is tailored in accordance with the ccpp that can be found within the provided profile for the purpose of this specification origin server refers to content generation capabilities which may physically exist in a standalone web server or may be colocated with a proxy or gateway preference an attribute of a sender or receiver often the receiver which indicates a preference to generate or process one particular type of message content over another even if both are possible privacy preventing the unintended or unauthorized disclosure of information about a person such information may be contained within a message but may also be inferred from patterns of communication eg when communications happen the types of resource accessed the parties with whom communication occurs etc profile an instance of the schema that describe capabilities for a specific device and network a profile need not have all the attributes identified in the vocabularyschema proxy software that receives http requests and forwards that request toward the origin server possibly by way of an upstream proxy using http the proxy receives the response from the origin server and forwards it to the requesting client in providing its forwarding functions the proxy may modify either the request or response or provide other valueadded functions for the purposes of this specification proxy refers to requestresponse forwarding functionality which may exist in a standalone http proxy or may be colocated with a gateway or origin server rdf resource an object or element being described by rdf expressions is a resource an rdf resource is typically identified by a uri receiver a system component device or program which receives a message schema rdf schema an rdf schema denotes resources which constitute the particular unchanging versions of an rdf vocabulary at any point in time it is used to provide information such as organization and relationship about the interpretation of the statements in an rdf data model it does not include the values associated with the attributes security describes a set of procedures applied to data communications to ensure that information is transferred exactly as the sender and receiver intend and in no other way security generally breaks down into integrity authentication confidentiality and privacy sender a system component device or program which transmits a message user an individual or group of individuals acting as a single entity the user is further qualified as an entity who uses a device to request content andor resource from a server user agent a program such as a browser running on the device that acts on a users behalf users may use different user agents at different times user agent profile capabilities and preference information pertaining to the capabilities of the device the operating and network environment and users personal preferences for receiving content andor resource variant one of several possible representations of a data resource variant content when the formformat of the content being sent depends on receivers capabilities andor preferences vocabulary a collection of attributes that adequately describe the ccpp a vocabulary is associated with a schema a abbreviations ccpp composite capabilitiespreferences profile ccppex ccpp exchange protocol conneg content negotiation working group in the ietf er entityrelationship html hypertext markup language http hypertext transfer protocol httpex http extension framework iana internet assigned numbers authority ietf internet engineering task force iotp internet open trading protocol ldap lightweight directory access protocol ota over the air ie in the radio network rdf resource description framework rfc request for comments tbd to be determined tcpip transmission control protocolinternet protocol uaprof wap user agent profile wc world wide web consortium wap wireless application protocol wbxml wap binary xml wml wireless markup language wsp wireless session protocol xhtml extensible hypertext markup language xsl extensible stylesheet language xml extensible markup language appendix b rdf schema for structure this appendix is normative but support by ccpp processors is optional b summary of ccpp class hierarchy figure b ccpp class hierarchy rdfsresource    ccppprofile            profile deliverable to origin server    ccppcomponentrdfsliteral  ccppstring               a text value of a ccpp attribute  ccppinteger              an integer value of a ccpp attribute  ccpprational             a rational number ccpp attribute valuerdfbag                     a set value for a ccpp attributerdfseq                     a sequence value for a ccpp attribute   rdfproperty  ccppproperty             a property applied to a ccppresource    ccppstructure          a structural property in a ccpp profile    ccppattribute          a property denoting a ccpp attribute b summary of ccpp properties structural properties instances of ccppstructure figure b ccpp structural properties ccppcomponent      domainccppprofile         rangeccppcomponentccppdefaults       domainccppcomponent       rangeccppcomponent b rdf schema ccpp core and class structure schema uri httpwwwworgccppschema figure b rdf schema for ccpp classes and core properties xml versiondoctype rdfrdf   entity nsrdf  httpwwwworgrdfsyntaxns  entity nsrdfs httpwwwworgrdfschema  entity nsccpp httpwwwworgccppschemardfrdf  xmlnsrdf   nsrdf  xmlnsrdfs  nsrdfs  xmlnsccpp  nsccpp  ccpp class definitions   rdfsclass rdfaboutnsccppprofile    rdfslabel xmllangenccpp profilerdfslabel    rdfssubclassof rdfresourcensrdfsresource    rdfscomment xmllangen      this class is any complete profile that can be delivered to an      origin server or other system that generates content for a client    rdfscomment  rdfsclass  rdfsclass rdfaboutnsccppcomponent    rdfslabel xmllangenccpp profile componentrdfslabel    rdfssubclassof rdfresourcensrdfsresource    rdfscomment xmllangen      a base class for any collection of ccpp attribute values      a ccpp client profile consists of one or more components      typically using a derived class that indicates the use of the      component eg prfhardwareplatform prfsoftwareplatform    rdfscomment  rdfsclass  rdfsclass rdfaboutnsccppstring    rdfslabel xmllangentext valuerdfslabel    rdfssubclassof rdfresourcensrdfsliteral    rdfscomment xmllangen      this is the class of rdf literals that represent ccpp      attribute string values    rdfscomment    rdfsseealso rdfresource      httpwwwworgtrxmlschemastring  rdfsclass  rdfsclass rdfaboutnsccppinteger    rdfslabel xmllangeninteger valuerdfslabel    rdfssubclassof rdfresourcensrdfsliteral    rdfscomment xmllangen      this is the class of rdf literals that represent ccpp      attribute integer number values    rdfscomment    rdfsseealso rdfresource      httpwwwworgtrxmlschemainteger  rdfsclass  rdfsclass rdfaboutnsccpprational    rdfslabel xmllangenrational valuerdfslabel    rdfssubclassof rdfresourcensrdfsliteral    rdfscomment xmllangen      this is the class of rdf literals that represent ccpp      attribute rational number values    rdfscomment  rdfsclass  rdfsclass rdfaboutnsccppproperty    rdfslabel xmllangenccpp propertyrdfslabel    rdfssubclassof rdfresourcensrdfproperty    rdfscomment xmllangen      ccppproperty is the superclass for ccppstructure and      ccppattribute therefore all property arcs that are not part      of the core rdf namespace and constitute parts of a ccpp      profile are defined as subclasses of ccppproperty this      allows schemavalidating environments with language mixing to      isolate the ccpp elements of an rdf graph rooted in some      given resource from other attributes of that resource    rdfscomment  rdfsclass  rdfsclass rdfaboutnsccppstructure    rdfslabel xmllangenccpp structural propertyrdfslabel    rdfssubclassof rdfresourcensccppproperty    rdfscomment xmllangen      all properties that are structural elements of a ccpp profile      are defined as instances of ccppstructure this allows      structural combining elements of a profile to be distinguished      from attributes in a schemaaware environment    rdfscomment  rdfsclass  rdfsclass rdfaboutnsccppattribute    rdfslabel xmllangenccpp attributerdfslabel    rdfssubclassof rdfresourcensccppproperty    rdfscomment xmllangen      all properties that describe client capabilities or preferences      in a ccpp profile should be defined as instances of      ccppattribute this allows structural combining elements      of a profile to be distinguished from client features in a      schemavalidating environment    rdfscomment  rdfsclass  ccpp structural property definitions   basic client profile description        ccppstructure rdfaboutnsccppcomponent    rdfslabel xmllangenccpp component propertyrdfslabel    rdfsdomain rdfresourcensccppclientprofile    rdfsrange  rdfresourcensccppcomponent    rdfscomment xmllangen      indicates a component of a toplevel client profile    rdfscomment  ccppstructure  ccppstructure rdfaboutnsccppdefaults    rdfslabel xmllangenccpp default propertiesrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppcomponent    rdfscomment xmllangen      this property indicates a component that contains default      properties for some other component  that is any attributes      that are not found in the subject resource but are present in      the object resource may be incorporated from the object into      the resulting ccpp profile    rdfscomment  ccppstructure  ccppstructure rdfaboutnsccppdefaults    rdfslabel xmllangenccpp default propertiesrdfslabel    rdfssubpropertyof rdfresourcensccppdefaults    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppcomponent    rdfscomment xmllangen      same as defaults      defined as subproperty for backwards compatibility with uaprof      use of this is deprecated  use defaults instead    rdfscomment  ccppstructurerdfrdf appendix c ccpp attribute vocabulary for print and display the appendix is optional and informative designers of ccpp applications who need to describe such features are encouraged to use this vocabulary rather than define new terms this vocabulary is based in part on work done in the ietf media feature registration conneg working group rfc the client attribute names defined below may be used to identify some common features associated with client devices that print or display visual information such as text or graphics they are described using xml namespace local parts which are further qualified by the xml namespace identifier httpwwwworgccppclient these attributes apply to presented capabilities of the client rather than to a specific internal component or aspect of a client system deviceidentifier value data type string a uri that serves as an identifier of the client device or user agent type type value data type set of strings a mime content type that can be accepted and presented by a client similar in principle to the http accept header but specifying a single mime contenttype without associated contenttype parameters multiple accepted contenttypes can be described by a value that is a set of contenttype string values where needed contenttype parameters can be expressed by additional ccpp attributes schema value data type set of strings a uri that identifies a schema that is recognized by the client the schema may be an xml dtd xml xml schema xmlschema rdf schema rdfschema or any other applicable document structure that can be identified by a uri a schema value refines any acceptable document type indicated by the type attribute but its meaning must not depend on the value of type typically this will be used to indicate specific xml dtds or schema that are recognized within textxml or applicationxml document types charwidth value data type integer for a text display device typetext the width of the character display for nonproportional font displays the number of display cells for nonproportional font displays as typically used in east asia the number of halfwidth display cells ideographic characters and other fullwidth characters typically occupy two display cells for proportional font displays the width of the display in ens where an en is the typographical unit that is the width of an endashletter n charheight value data type integer for a text display device typetext the number of lines of text that can be displayed ie the display height in characters charset value data type set of strings per rfc for a text handling device a character encoding that can be processed values per mime charset parameter on contenttype text note the term charset is a historical misnomer and does not necessarily indicate a repertoire of characters that can be displayed just an encoding in some cases though the encoding may imply a repertoire pixx value data type integer for an image display device typeimage the number of horizontal pixels that can be displayed pixy value data type integer for an image display device typeimage the number of vertical pixels that can be displayed color value data type string per rfc for text and image display devices an indication of the color capabilities per rfc  rfc possible values are binary grey limited mapped and full note the color attribute provides a very coarse indication of color capabilities sufficient for a range of simple applications and may be refined by additional attributes where capabilities need to be described in greater detail client attribute properties instances of ccppattribute figure c ccpp client vocabulary properties ccppclientdeviceidentifier domainccppcomponent   rangeccppstringccppclienttype             domainccppcomponent   rangerdfbagccppclientschema           domainccppcomponent   rangeccppstringccppclientcharwidth        domainccppcomponent   rangeccppintegerccppclientcharheight       domainccppcomponent   rangeccppintegerccppclientcharset          domainccppcomponent   rangerdfbagccppclientpixx            domainccppcomponent   rangeccppintegerccppclientpixy            domainccppcomponent   rangeccppintegerccppclientcolor            domainccppcomponent   rangeccppstring schema for client vocabulary schema uri httpwwwworgccppclient figure c rdf schema for client vocabulary xml versiondoctype rdfrdf   entity nsrdf  httpwwwworgrdfsyntaxns  entity nsrdfs httpwwwworgrdfschema  entity nsccpp httpwwwworgccppschema  entity nsccppclient httpwwwworgccppclientrdfrdf  xmlnsrdf          nsrdf  xmlnsrdfs         nsrdfs  xmlnsccpp         nsccpp  xmlnsccppclient  nsccppclient  ccpp attribute property definitions    these properties represent some common vocabulary that is        available for use by applications that need to indicate          the common features indicated by these attributes  they         serve as an example of how a new attribute vocabulary can        be defined for use in a ccpp profile                          ccppattribute rdfaboutnsccppclientdeviceidentifier    rdfslabel xmllangenclient device identifierrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppstring    rdfscomment xmllangen      a uri that identifies the type of client device or user agent    rdfscomment  ccppattribute  ccppattribute rdfaboutnsccppclienttype    rdfslabel xmllangenmime content typerdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensrdfbag    rdfscomment xmllangen      a string containing a mime contenttype or a set of such strings      indicating the mime contenttypes that can be handled    rdfscomment  ccppattribute  ccppattribute rdfaboutnsccppclientschema    rdfslabel xmllangenschema identifierrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppstring    rdfscomment xmllangen      a uri that identifies a language or dtd that is recognized by      the client or a set of such uris      specific values of this attribute may be applicable to certain      mime content types  for example a uri that is associated with      a resource containing an xml dtd will generally be applicable      only with textxml or applicationxml content types    rdfscomment  ccppattribute  ccppattribute rdfaboutnsccppclientcharwidth    rdfslabel xmllangencharacter display widthrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppinteger    rdfscomment xmllangen      for character displays the number of characters that can be      rendered across the display  for displays using a proportional      font this is the display width in typographical ems    rdfscomment  ccppattribute  ccppattribute rdfaboutnsccppclientcharheight    rdfslabel xmllangencharacter display heightrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppinteger    rdfscomment xmllangen      for character displays the number of rows of characters that      can be displayed    rdfscomment  ccppattribute  ccppattribute rdfaboutnsccppclientcharset    rdfslabel xmllangencharacter set encodingrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensrdfbag    rdfscomment xmllangen      for character displays the mime charset values that      can be handled    rdfscomment  ccppattribute  ccppattribute rdfaboutnsccppclientpixx    rdfslabel xmllangenpixel display widthrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppinteger    rdfscomment xmllangen      for raster displays the width of the display in pixels    rdfscomment  ccppattribute  ccppattribute rdfaboutnsccppclientpixy    rdfslabel xmllangenpixel display heightrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppinteger    rdfscomment xmllangen       for raster displays the height of the display in pixels    rdfscomment  ccppattribute  ccppattribute rdfaboutnsccppclientcolor    rdfslabel xmllangencolor display capabilitiesrdfslabel    rdfsdomain rdfresourcensccppcomponent    rdfsrange  rdfresourcensccppstring    rdfscomment xmllangen      for display or print devices an indication of the color      rendering capabilities      binary   indicates bilevel color blackandwhite or similar      grey     indicates gray scale capability capable of sufficient                distinct levels for a monochrome photograph      limited  indicates a limited number of distinct colors but                not with sufficient control for displaying a color                photograph eg a pen plotter highlight printer or                limited display      mapped   indicates a palettized color display with enough                levels and control for coarse display of color                photographs      full     indicates full color display capability    rdfscomment  ccppattributerdfrdf appendix d recommendations for creating a vocabulary this appendix in informative fundamental to the design of ccpp is the idea that new client attributes can be defined as needed through the introduction of new vocabularies similarly new relationships can be introduced through new vocabulary items though the introduction of these needs a great deal of care to ensure their semantics are adequately and consistently defined a general principle is that applicationneutral ccpp processors should be able to understand and manipulate ccpp relationships without necessarily understanding the ccpp attributes to which they refer it is recommended that rdf schema be used in conjunction with supporting documentation to define any new ccpp vocabulary the rest of this section assumes that rdf schema is being used for defining any new vocabulary the previous appendix is an example of this approach new vocabularies are introduced through xml namespaces their relationship to other ccpp vocabulary items can be defined by new rdf schema statements which must necessarily augment the core rdf schema for the ccpp vocabulary given in appendix c of this document d basic format for all vocabulary items all vocabulary items used by ccpp are uris and optional fragment identifiers used as rdf property arc identifiers relative uri forms should not be used vocabulary items used for different purposes are generally associated with different xml namespaces some common rdf base classes are defined so that a schemaaware rdf processor can perform improved analysis of a ccpp profile and separate ccpp profile elements from other statements made about any resource that appear in the same rdf graph as a ccpp profile all properties used as ccpp attributes must be instances of the class ccppattribute which itself is a subclass of rdfproperty that is the schema defining ccpp attribute properties should define them as instances of ccppattribute thus a schemaaware processor can distinguish between properties that are part of a ccpp profile and properties which may be part of an attribute value each ccpp attribute is associated with a component of a profile eg hardwareplatform softwareplatform etc and is used as a property of an instance of the appropriate component resource all such component resource types are subclasses of ccppcomponent new ccppcomponent based classes may be introduced for new types of attribute vocabulary but it is strongly recommended that an existing ccppcomponent type be used if one is applicable note a simple ccpp parser is not required to be schemaaware and its implementation does not need to have knowledge of the rdf class of any attribute or resource nor is the profile required to carry rdf type information the discussion of classes and schemaaware processing is in relation to possible future developments of generic rdf processors that may deal with ccpp and other rdf vocabularies and schemas possibly mixed in a single document for such developments to be possible it is important to take account of class and schema issues in the design of ccpp even though simple ccpp processors need no such awareness d use of xml namespaces all ccpp attributes must be associated with a fully resolvable namespace identifier uri relative uris or uris whose interpretation may depend on the context in which they are used should not be used note it is anticipated that a namespace uri used for ccpp attributes may also be used to identify an rdf or other schema relating to those attributes however such usage is beyond the scope of this specification typically new ccpp attributes will be associated with a new namespace which serves among other things to distinguish between possible different uses of the same attribute name local parts for example afoo and bfoo name quite distinct attributes as long as the prefixes a and b are associated with different namespace uris d principles for defining new attributes d if possible reuse existing vocabularies reusing existing vocabularies where applicable leverages work that has already been undertaken and reduces the opportunity for different attribute names that mean almost but not quite the same thing note that names using different namespaces may be freely mixed in a profile so requiring one additional feature is not a good reason to define a complete new vocabulary d attribute value type and interpretation attribute definitions should indicate the type and interpretation of the associated value ultimately it is a matter for agreement between generating and receiving applications how any particular attribute value is to be interpreted where possible for ease of processing and compatibility with other frameworks attribute values should be based on one of the data types described in section  of this document where attributes express a quantity associated with a client the units of that quantity should be clearly associated with the attribute definition there is no separate mechanism for indicating the units in which an attribute value is expressed d interpretation not dependent on other attribute values the meaning of every attribute must be defined in isolation from other attributes no attribute may have a meaning that changes dependent on the value of some other attribute eg an attribute called say pagewidth must always be expressed using the same units it is not acceptable for this attribute to be expressed in characters for some class of device millimeters for another and inches for another note that it is still allowable to define an attribute that cannot be interpreted unless some other attribute is also defined the important principle here is that adding a new attribute should not invalidate any knowledge of a client that can be deduced from attributes previously defined attributes may be defined in layers so that simple capabilities eg ability to handle color photographic images can be described by a simple attribute with additional attributes used to provide more detailed or arcane capabilities eg exact color matching capabilities d attribute naming conventions attributes are rdf properties the rdf model and syntax document rdf appendix c recommends the use of intercap name styles for rdf property names starting with a lowercase letter and having nd and subsequent words within a name started with a capital letter and no internal punctuation we recommend such style be used for ccpp attribute names except where some other form is preferred for compatibility with other systems such as some connegcompatible print and display attributes described below rdf class names used in ccpp profiles preferably begin with an uppercase letter d attributes should have specific applicability if an attribute is defined with a broad range of applicability problems could arise if a user tries to apply a single attribute to different parts of a profile an attribute defined very broadly might be subject to different privacy or security concerns when applied in different circumstances for example having a texttovoice capability on a mobile phone type of device might be a generally useful feature but a similar feature in a pc might be indicative of a personal disability thus a combination of texttovoice capability and using a pctype platform might suggest private information not necessarily associated with any of the features in isolation d protocol interactions in some cases there may be overlaps between ccpp vocabularies and a particular protocol with which ccpp is used eg the client vocabulary charset and the http acceptcharset header to some extent the protocolindependent nature of ccpp makes this inevitable to the extent that existing protocols may have limited content negotiation facilities when designing vocabularies avoid defining features which would be expected to be part of a particular protocol behavior anything that describes or relates to a transfer mechanism rather than what is transferred should be avoided eg support for a feature like http persistent connections should not be indicated in a ccpp profile as a it is a protocolspecific feature and b it doesnt really help the origin server to select appropriate content for the client similarly when defining protocol bindings for using ccpp interaction with existing negotiation mechanisms should be considered and specified a detailed treatment of this topic is beyond the scope of this specification appendix e review of applicable vocabularies this appendix is informative this section introduces some possible sources of properties to be described by ccpp attribute vocabularies it is not normative and is included to give an idea of some kinds of client feature that ccpp might be used to convey e ietf media feature registration conneg the ietf has defined an iana registry for media feature tags rfc and a syntax rfc for relationalstyle expressions using these to describe client and server media features a small common vocabulary has been defined rfc which has been used as a basis for the ccpp client common vocabulary the ietf internet fax working group has also created additional registrations to describe the capabilities of fax machines rfc rfc  rfc defines three kinds of media feature tags ietf tree registered feature tags that are simple names which are defined and assigned under the auspices of the ietf standards process global tree registered feature tags that are simple names preceded by g these are defined by groups other than the ietf but are registered with iana to ensure uniqueness of these names unregistered feature tags that consist of u followed by a slightly restricted form of uri there is currently a proposal to create a urn namespace for iana registries this would create a mechanism to allow ianaregistered feature tags to be used directly as uris in ccpp expressions unregistered feature tags may be used in ccpp expressions by stripping off the leading u and taking the resulting uri all media feature tags and values can be expressed in ccpp but not all ccpp profiles can be expressed as media feature tags and values in particular ccpp text values are case sensitive whereas some media feature values are case insensitive media feature values can be mapped to ccpp text values by applying a casenormalization convention eg convert to lowercase this version of ccpp does not have mechanisms matching those in the ietf media feature framework which can be used within ccpp to state capabilities in terms of comparisons with fixed values eg pixx and attribute values that appear in certain combinations eg pixx and pixy or pixx and pixy future work may define such mechanisms e wap uaprof uaprof uaprof is a wap forum specification that is designed to allow wireless mobile devices to declare their capabilities to data servers and other network components the design of uaprof is already based on rdf as such its vocabulary elements use the same basic format that is used for ccpp the ccpp model follows uaprof in that each user agent property is defined as belonging to one of a small number of components each of which corresponds to an aspect of a user agent device eg hardware platform software platform wap characteristics browser user agent network characteristics although its rdf schema is more prescriptive regarding class and property usage than uaprof the design of ccpp is backwards compatible the goal is that valid uaprof profiles are also valid ccpp profiles however not all ccpp profiles are necessarily valid uaprof profiles e tiff tiff is a raster image encapsulation file format developed and maintained by adobe systems tiff it is also the basis for the standard file format for internet fax rfc as well as pixelbased image data in a variety of coding and compression formats tiff supports a wide range of options for different kinds of imagerelated information these options might be candidate ccpp attributes many of the tiff properties relating to image handling capabilities have already been defined as tags in the conneg space as part of the internet fax work rfc these might best be referenced using uris based on their conneg tag names e wave wave is an encapsulation format for audio data developed and maintained by microsoft multimedia there is a registry of wavesupported audio codecs that might be used as ccpp attributes rfc ietf work in progress for voice messaging vpimivm could create ietf media feature registry tags that are usable by ccpp profiles through the same mechanisms described in section e above e mpeg mpeg is an encapsulation format for video data possibly combined with audio data developed and maintained by the iso mpeg working group mpeg e mpeg mpeg is a metadata format for information associated with image video audio and other data currently in development by the iso mpeg working group mpeg e pwg the printer working group defines attributes and capabilities applicable to printing devices pwg some of this work is incorporated into the ietf internet printing protocol ipp rfc e salutation salutation is a protocol and identification scheme for communicating devices mainly in a lan environment developed and maintained by the salutation consortium salutation the device capability identification mechanisms probably include many items that might be used as ccpp attributes appendix f ccpp applications this appendix is informative ccpp is a format framework designed to be used in the context of a wider application or operational environment this specification does not define how to use ccpp with any particular protocol or application this appendix highlights some other issues that application developers must consider in their designs many of these issues may be covered by an applicable protocol specification used to convey ccpp profiles to make effective use of the ccpp framework the operating rules for the wider environment must specify capability exchange protocol trust model vocabulary security mechanisms constraints on allowable attribute value types attribute value processing andor matching rules proxy vocabulary and processing rules for request profile identification additional information to be included with any transmitted resource data uri forms allowed for identifying referenced profile documents eg defaults mechanisms for locating and retrieving referenced profile documents interactions with any existing negotiation mechanisms in the host protocol there are a few protocol assumptions built into the design of ccpp although it is intended to be largely protocol independent some consideration has been given to use of ccpp with http for retrieving web resources f outline of request processing in http ccpp is envisaged to be used with http in the following fashion this is not a protocol specification just an indication of the kind of information flows envisaged defining a protocol to convey ccpp information is a separate effort ccppex figure f http request processing                             client response  proxy  response origin  resource    ua   request         request server       data                                                                                   v                       vclient    client profile  request profiledefaults        local values                                                   v                        proxy     proxy profile                        defaults        local values the client sends an http request with an accompanying ccpp client profile the client profile may contain references to default profiles describing a range of common capabilities for the client concerned eg a particular computeroperating systembrowser combination or a particular model of mobile device and values that are variations from the default profile the http request may pass through a firewallproxy that a imposes constraints on the kinds of content that can be accessed or b can adapt other forms of content to the capabilities of the requesting client this proxy extends the ccpp profile with a description of these constraints and adaptations and sends this with the http request on to the origin server the request may pass through several such proxies the origin server receives the request and interprets the ccpp profile it selects andor generates content that matches the combined proxy and client capabilities described in the profile this is sent to the last proxy in the request chain in an http response if required the proxy applies any content adaptations and any other functions it is designed to perform the resulting response and content is passed back toward the requesting client the client receives the http response and presents the content it contains note there is some overlap between ccpp and the various http accept headers a protocol specification for using ccpp with http must indicate how http accept headers may be used and how they interact with ccpp profiles f protocol assumptions for proxy behavior the framework for describing proxy behaviors makes some assumptions about the protocol used to convey a ccpp profile the ccpp profile is conveyed in one or more parts each containing a graph fragment which are combined to form a single rdf graph in addition to the rdf graph the protocol must separately name the rdf resource corresponding to the root of the current request profile the current operational model is that all ccpp profile interpretation is performed by the origin server and none by the proxies it may be necessary for the protocol to allow the origin server to provide information with its response that allows proxies to decide whether or not to apply any conversions that they offer eg is xhtmltowml conversion required or does the client have native xhtml capability note the current operational model noted above does not prohibit proxies from interpreting ccpp profiles rather it means that the framework for describing proxy behaviors does not require that proxies interpret them appendix g rdf compatibility this appendix is informative this ccpp specification is based on resource description framework rdf model and syntax specification rdf a wc recommendation that version of rdf does not have explicit datatyping of literals the rdf specifications have been undergoing revision as this specification is being written the revised rdf rdfxml syntax specification revised which at the time of writing has not reached recommendation status introduces support for specifying the xml schema datatype of a literal value this appendix outlines the implications for implementors in making their ccpp implementations compatible with this proposed addition to rdf it is hoped that a future version of the ccpp specification will propose how explicit datatyping should be used in defining ccpp profiles g implicit datatyping in this specification a ccpp attribute value contained in a ccpp profile is in rdf revised rdfprimer terminology an rdf plain literal a ccpp vocabulary schema such as the example in appendix c that is defined in terms of the simple types introduced in the ccpp schema in appendix b can provide additional type information for these attributes a ccpp profile consumer application may use the vocabulary schema either by directly interpreting the schema data or for known vocabularies by embedding the equivalent information in the application to check the validity of the data provided in a profile and to map the data into programming language data types g explicit datatyping the revised rdf working draft supports explicit xsd xml schema datatypes datatyping when explicit datatyping is adopted the ccpp specification could be revised to permit an attribute value in a ccpp profile to be represented as an rdf typed literal in the xml serialization of an rdf typed literal the type of the literal value is specified as an attribute of the element containing the literal value in this case a ccpp profile consumer application could use this type information to interpret the ccpp attribute value without requiring access to additional vocabulary schema information in the future it may be that for backward compatibility a ccpp profile consumer should be able to handle ccpp attributes that use either implicit or explicit datatyping appendix w revision history  document created from merge of architecture structure and vocabulary documents  move some vocabulary and proxy material from section to into sections  and  various small edits  various editorial fixes merge appendices dealing with print and display vocabulary remove some vocabulary source references add xml examples to many of the rdf graph examples reorganize material in sections  and  moving some technical detail to section  move discussion of ccpp applications to a new appendix assign figure numbers  more group review editorial comments fixed some schema errors moved client schema summary to appendix c updated uaprof reference and namespace uri added working group members to acknowledgments  more group review editorial comments added citation of rfc changed some instances of rdfbag to  notation in graph descriptions use ccppdefaults consistently in examples add note about allowing ccppdefaults for compatibility with uaprof section  added some additional text about references to external defaults added points for allowed uris and resolution mechanisms in appendix f figure  notation change section  attempt to further clarify what is required behavior section  add paragraph about support of rdf schema appendix d add text recommending use of rdf schema to define vocabularies section  add text about use of rdftype properties for ccppcomponent resources appendix b remove references to ccppset and ccppvalue  validate rdf examples with sirpac wc online facility and correct errors detected fix up some internal links  add hyperlinked toc courtesy of htmltoc by earl hood  published as first working draft  added lastcall section changed some spelling published as lastcall working working draft  fold in review comments for editorial matters explain use of names for uris in examples remove unused terms from glossary  remove pp from glossary pp integration will be discussed in a separate security document review all examples to use full uris rather than placeholder names and qualify all rdf attributes with namespace prefixes added crossreference from section  to  and  ccpp usage of rdf added note saying why proxy descriptions are not linked directly added sequence value to data types remove requirement for an attribute to be unique across all components of a profile added restriction that a single proxybehavior must reference a single type of component and that the component type should be specified section  clarify that charset feature really indicates a character encoding appendix f reworked to make it clearer that this document does not define an http binding for using ccpp added xmllang attributes to schemas in appendices b and c revise interpretation of charwidth to better cater for international characters  reference xml schema data types and fix up some minor schema errors introduce new class ccppstructure to clearly distinguish all ccpp structural properties from attribute properties editorial fix in relationship to uaprof e  revise text relating to ccpp attributes that are represented by uri strings preferred treatment is as rdf resources rather than literal uri strings section  and various examples discussion of graph composition new section  deleted some gratuitous repetition sections  and   revise all examples to use explicit namespace prefixes for rdf elements and attributes remove unused ccpp namespace declaration from some examples  fix small errors in examples b and c editorial fixes  reword text in  describing use of rdftype on ccppcomponent instance revise description of charwidth in appendix c to remove some errors with respect to international characters section  added some text indicating that xml conventions must be used for encoding nonascii characters in uri values per rdf spec section  added note that vocabularies that use sequence values should define the significance of the ordering add text pointing about possible protocol interactions to appendices d f and f checked example of empty description element with rdf validator  revise the wording in section  about encoding of nonascii characters in uri values to reference the xml specification errata httpwwwworgxmlxmlveerratae updated reference xml to cite the errata document revision to section  introduction text to clarify that arbitrary rdf resources may be used for attribute values though their meaning is not defined here fix typo  add hyperlinks to schema documents  added the term xml attributes where necessary to distinguish between ccpp attributes and xml attributes fixed the local about reference in figure b added section hyperlinks where necessary removed unnecessary angle brackets around namespace identifiers removed extraneous space from date of working group meeting removed the proxy hardware and software examples there is no need for a proxy to append its processor or operating system to a ccpp request and using this as an example will cause confusion removed some remaining instances of the term uri string changed dont reuse existing vocabularies heading to reuse existing vocabularies removed an unnecessarily capitalized defaults from section  fixed the references so they work there was a problem with the square brackets changed rdf schema to rdf schema where it is used to refer to the wc specification  fixed errors in rdf in figure  and figure  identified with wc rdf validation service  updated section  to resolve issue  updated section  to resolve issue  added a paragraph about wai to resolve issue   updated ccpp schema to create datatypes for anyuri string and integer in the ccpp namespace that reference the datatypes in the xml schema the previous version of the schema just referenced the xml schema datatypes changed ccpp namespace to httpwwwworgccpp  updated the reference section to distinguish between normative and informative references and use aaaa not nnnn reference label format as per wc style guide to address issue  removed examples using composite literals ie changed all instances of display to displaywidth and displayheight to address issue  changed example profiles so that rdfabouts point to a profile uri rather than a schema uri as this means the component applies to this particular profile instance rather than any device using this particular schema to address issue  added some text to section  to address issue  inserted figure b to explain default resolution to address issue   updated the uaprof url specifically in section  and added text proposed by art barstow to resolve issue  also updated uaprof examples so they use legal uaprof property names  removed a remaining instance of the sentence this is one of three properties to describe a proxy behavior to address issue   added a sentence to section  and three additional paragraphs to section  to address issue   changed a paragraph in section  to address issue   removed usage of ccppresource to resolve issue   altered text of abstract to indicate proxy vocabulary is optional altered text of introduction to indicate proxy vocabulary is optional added a preceding sentence in section  saying proxy support is optional ditto for section  moved clientprofile requestprofile proxyprofile and proxybehavior from ccpp schema to proxy schema updated figures b and b and added two new figures b and b to reflect this due to the data typing decision made by rdfcore concerning interpreting literals changed all instances of xml schema datatypes to ccpp data types removed the sentence note that where available xml schema datatypes xsdt are used for literal values xmlschema from section b updated uris to  november  changed definition of ccpp profile in section  to a ccpp profile is broadly constructed as a level hierarchy a profile having a number of components and each component having at least one or more attributes to resolve the concern expressed by the uaprof drafting committee that the ccpp definition of a component is incompatible with uaprof  fixed problem with figure b described in issue  clarified meaning of ccpp profile for issue  clarified the status of appendices to address issue  removed the term ccpp expression from section  to address issue  updated the rdf schema reference to point at the march  candidate recommendation version fixed uaprof reference to address issue  fixed schema in b to address issue  updated introductory paragraph to appendix c to address issue  added a definition of a ccpp processor to appendix b to address issue  and replaced instance of ccpp parser with ccpp processor  checked usage of optional and recommended so that instances are capitalized where necessary to address issue   fixed the use of both httpwwwworgccppschema and httpwwwworgccpp as ccpp namespaces uniformly adopted the use of rdfabout in the schemas  fixed problem with section  in toc fixed bold  in ccpp namespace in section  fixed grammatical error in section   added mention of rdf data typing and further diwg work to status section added mention of compatibility with conneg to section  removed use of compound simple types in examples in section  removed section  introduction to proxies section  rdf primer section  proxies ensured the document references the rdf specs rdf ms rdfxml syntax rdf primer rdf schema in appropriate places promoted section  subsections to section  subsections removed caseinsensitive text from section  changed minimum recommended value for integer numbers and corrected the xml schema datatype in section  described difficulty of rational numbers in section  clarified expressive relationship with conneg in section e  removed remnants mentioning proxy added note about rdf primer referencing more recent versions of rdf specs in status section changed schema url from httpwwwworgccpp to httpwwwworgccppschema in section  added uaprof namespace compatibility for component and defaults in section  and  changed html  to html  in various examples removed tokens from section  and appendix c fixed rational number schema in section  clarified that multiple occurences of a single attribute within a single component are not allowed in section  added section  conformance changed references to point to dated copies in section  removed anyuri from schema in appendices b and c changed rational datatype to rational in appendix b added note about case normalization for conneg compatibility in section e added appendix g rdf compatibility  various editorial changes and clarifications added delivery context term to section  removed redundant paragraph regarding namespace uris in section  removed section  values described by uris since it should have been removed when anyuri was removed