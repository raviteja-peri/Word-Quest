design of httpng testbed notehttpngtestbed design of httpng testbed wc note  july  this version httpwwwworgtrnotehttpngtestbed latest released version httpwwwworgtrnotehttpngtestbed author daniel veillard veillard@worg copyright   wc mit inria keio  all rights reserved wc liability trademark document use and software licensing rules apply status of this document this is a note published by the httpng protocol design working group describing the goals current state and future development of the httpng testbed this document has been produced as part of the wc httpng activity this is work in progress and does not imply endorsement by or the consensus of either wc or members of the httpng protocol design and httpng web characterization working groups this document is subject to change check the reference to the latest version the goal of the testbeds are to evaluate the feasibility of the httpng model its performances its extendibility and the ability to integrate the httpng model in he existing web architecture building higher level demonstration exhibiting the extra benefits of the httpng model is also planned the suggested experiments are of three kinds a base testbed infrastructure higher level functionalities demonstrations transition strategy evaluation available tools and codebases current status this document describes the expected architecture for each kind of testbed the main pieces of code used the expected experiments and way to evaluate the results this document is part of a suite of documents describing the httpng design and prototype implementation httpng short and longterm goals wd httpng architectural model wd httpng wire protocol wd the classic web interfaces in httpng wd the mux protocol wd description of the httpng testbed note please send comments on this specification to wwwhttpngcomments@worg the base testbed infrastructure the purpose is to evaluate the suitability one can expect from httpng when running basic http interfaces using httpng protocol on both the client side and the server the architecture is a client issuing httpng requests a server answering these requests using a realistic set of web pages the requests can either be generated by the surge uri generator tuned to reflect various kind of common http usage or hand coded to reflect more specific uses the client may either run in one shot mode fetching a page and the related inlined objects for the purpose of analyzing a complete trace of a session or in robot mode to produce a realistic load on the server one goal is to be able to run the exact same tests in a similar enviroment but using the http protocol in order to compare the characteristics of both stacks the first goal of this base testbed experiment is to verify that the httpng specification can actually handle the functionalities used by http x users the output of the web characterization working group will be a set of scenarios exhibiting common http x practices the surge program will then be used to generate a realistic set of uri and time stamps which in turn will be used by the httpng robot client as requests to the httpng server one will also need to verify that not so current practices  the top  kludge usage of http  can also be served and this will be handled in a more specific fashion either generating the uri by hand or modify the clientserver software for example when running another protocol on top of http the second goal of this series of experiments is to analyze the behavior and performances of httpng under different qualities of services one should at least try to reproduce the following commonly found network conditions lan high bandwidth low latencies wan medium bandwidth high latencies dialup low bandwidth high latencies satellite links asymetric wireless etc the following metrics are of interest latency time between client start of the request at the api level and the availability of the beginning of the user level data throughput this can be expressed using various different metrics especially the size of the user data transferred by unit of time for one shot tests and the number of requests processed per second in robot mode number of packets used average size of packets number of operating system calls needed load induced on the machines systemuserio this requires at least two machines and it may also be extremely useful to get a dedicated piece of hardware sitting between the client and the server which allows to simulate in a reproducible manner various network quality of services bandwidth and latency tweaking this may also be done using an extra dedicated machine and a tunneling software considering the software one can be worried with the actual performances of a java even if things may improve a lot in a not so distant future currently is sound more reasonable to do the performance evaluation using a c code base and use ilu for both the client and server side one should also try to estimate the induced cost of genericity  ilu being a very generic system supporting a lot of protocols and offering stubs for various languages considering the server side one need to implement some sample code sitting behind the stubs generated from the interfaces by the ilu stubber for this purpose ilu has been integrated into the apache server the result of the tests should be compared with the actual numbers obtained for the http   getting half an order of magnitude faster on latencies for lan should not be too difficult but we have to compare with the full range of network quality of service all the metrics and check that its at least as good on each points before considering the results a success the next goal of this testbed is to test the ability of httpng specification to support proxies and caching the base testbed will then be extended by adding a proxycache for httpng between the client and the server the analysis of the results on this configuration will probably a bit more difficult to establish here are a few points to look at performances in term of both throughput and cpu time usage support for expiration time content negotiation feasibility of differential updates and push schemes for update of a set of caches one should keep in mind that caching in the web is still in its infancy and the httpng specification must be able to handle the big changes in web caching technology which are likely to occur within the next few years extendibility is a key point of httpng design from the proxying and caching point of view higher level functionalities this testbed is really where we want to exhibit the extra capabilities of httpng over http x  at this time its somewhat difficult to predict how extended this testbed will be but a simple core experiment is definitely needed to demonstrate the concepts behind httpng here is an example based on existing wc testbeds a dom document object model demonstration where the web client exports via httpng its internal documents structure and the associated interfaces as defined by the dom wg document this testbed will demonstrate how the general interface of the web based on the fetch then display metaphor could shift onto a cooperative environment relying on distributed structured documents a dom implementation on top of amayathot is likely to occur and adding the support from httpng should be fairly trivial this would provide a good framework for demonstration of extra capabilities made possible by httpng here is a few suggestions push like demo where content is inserted using the dom api from a server to the client distributed authoring based on webdav semantics but achieved by the way of direct remote access shared html white board etc on such a framework ideas to build demos come easily the problem is mainly related to the manpower needed to achieve them not the capabilities of the underlying platform on the server side adding webdav apis on top of and existing httpng server would be a good example of extensibility mechanism provided by httpng even without full support for the webdav functionalities a simple extension of jigsaw providing access to transition strategy this testbed is needed to get a proof that the httpng can actually be deployed on a large scale basis within the existing web framework we must show that the httpng can actually be deployed even if a huge amount of software is not currently able to support httpng protocol natively the experience of the migration from http  to http  showed that its far easier to get the server pool to implement new features support for http  is actually available in most web servers than the client software namely the browsers the goal of this testbed is to prove that it is actually possible to deploy httpng on servers with an existing base of http clients by implementing translation proxies it consist on designing and implementing an http  to httpng proxy we dont seek performances here and the cheapest implementation will be the best one this is purely a proof of concept with an actual implementation the test should be conducted using several commercial grade http clients accessing an httpng server successful experiment will not exhibit any loss of usability from the client side one should take care of testing all the common http services at least get post put and head considering the software on the client side the choice is wide open one should just tried the most popular browsers and editing tools running a  robot may prove useful too to stress the proxy since performances is not the goal of this testbed one should go to the cheapest solution in term of development costs and it seems that extending jigsaw to get an httpng client side is the way to go once done one just need to tweak the existing proxy code in jigsaw to have client and server side using different stacks the http ng server could be the same as for the base testbed or jigsaw if the httpng server side is implemented available tools and codebases one should probably have two different implementations of the httpng stack possibly using different languages most of the existing software we will rely on is written in c or java and we will probably end up with a cilu and a javajigsaw implementations here are the basic main pieces of software that will be used to to build the httpng testbed ilu the interlanguage unification system ilu is a multilanguage object interface system the object interfaces provided by ilu hide implementation distinctions between different languages between different address spaces and between operating system types ilu latest implementation contains httpng experimental code a wire format mux channel multiplexing implementation and all the glue needed to link with stubs generated from an interface definition language idl since it is currently the most advanced httpng framework now it will serve to validate the first versions of the drafts jigsaw jigsaw is wcs sample implementation of http the project constitutes an ongoing wc activity  jigsaw is a full blown http server entirely written in java the httpng jigsaw code while not as advanced yet as ilu implementation will provide a second piece of code allowing to debug compatibility problems being written in java this also mean a different environment virtual machine and hence a good test of operating system portability moreover the java code gives access to two full featured testbed amaya and the jigsaw server amaya amaya is a web client that acts both as a browser and as an authoring tool it has been designed with the primary purpose of being a testbed for experimenting and demonstrating new specifications and extensions of web protocols and standards an experimental version of amaya embed jigsaw java http stack so it is possible to get a browser and html editor using the java httpng code this will prove useful for higher level functionalities demonstration especially since pics and dom support are being added to amaya apache apache is the most popular web server it is available freely with source code a modified version of apache embedding the ilu library has been produced for the testbed it allows testing of the httpng stack within a full featured web server and provides a solid framework for tests especially to compare http and httpng respective performances surge surge scalable uri reference generator is a www workload generator which is based on analytical models of www use the goal of surge is to provide a scalable framework which from the servers perspective makes document requests which mimics a set of real users the various common web access pattern which result from the web characterization working group will be described as surge analytical models allowing to produce realistic simulations of actual web traffic for the base testbed infrastructure current status the current status is that ilu library provides the core implementation of httpng protocols ie the mux protocol the wire encoding the basic http interfaces stubs other pieces of software namely apache jigsaw surge amaya have been modified to some extent to embed the ilu library currently the base testbed is mostly functional but more work is needed to test performances solve existing bottlenecks and cleanup the installation process before a public release of the testbed advanced functionalities like proxy testing and extensibility showcase are still waiting for more complete specifications before upgrading the corresponding tools here is a more detailed description of the current status of each piece of software ilu  support for mux wire protocol basic http and httpng interfaces test implementation for a robot and a server apache  ilu support integrated the server serves a similar set of pages with apache http implementation and a dynamically configurable ilu based protocol stack can be http or httpng experimental stacks using the standard http interfaces get head post amaya  versions embedding ilu and a java interpreter are available currently the dom api is not stable enough for testing but it already export the thot apis via ilu jigsaw  experiments with jigsaw using ilu and the basic http interface for serving pages has been conducted the latest releases of jigsaw provide specific extensions needed when exporting a resource using different protocol stacks this should ease the design of httpng specific extensions jigsaw also provide an http proxy implementation and seems the best candidate for test on an http  httpng proxy surge  version  of surge has been integrated with ilu various other small software pieces are also available most of the software base is available in a cvs repository except amaya and jigsaw available independently and we intend to make this publicly available during the continuous design phase