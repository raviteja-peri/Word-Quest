the rdf data cube vocabulary the rdf data cube vocabulary wc recommendation  january  this version httpwwwworgtrrecvocabdatacube latest published version httpwwwworgtrvocabdatacube implementation report httpwwwworggldwikidata_cube_implementations previous version httpwwwworgtrprvocabdatacube editors richard cyganiak deri nui galway dave reynolds epimorphics ltd contributors jeni tennison please refer to the errata a list of issues with this document discovered after publication this document is also available in this nonnormative format diff to previous version the english version of this specification is the only normative version nonnormative translations may also be available copyright   wc mit ercim keio beihang all rights reserved wc liability trademark and document use rules apply abstract there are many situations where it would be useful to be able to publish multidimensional data such as statistics on the web in such a way that it can be linked to related data sets and concepts the data cube vocabulary provides a means to do this using the wc rdf resource description framework standard the model underpinning the data cube vocabulary is compatible with the cube model that underlies sdmx statistical data and metadata exchange an iso standard for exchanging and sharing statistical data and metadata among organizations the data cube vocabulary is a core foundation which supports extension vocabularies to enable publication of other aspects of statistical data flows or other multidimensional data sets the namespace for all terms in this ontology is httppurlorglinkeddatacube the vocabulary defined in this document is also available in these nonnormative formats turtle status of this document this section describes the status of this document at the time of its publication other documents may supersede this document a list of current wc publications and the latest revision of this technical report can be found in the wc technical reports index at httpwwwworgtr this document has been reviewed by wc members by software developers and by other wc groups and interested parties and is endorsed by the director as a wc recommendation it is a stable document and may be used as reference material or cited from another document wcs role in making the recommendation is to draw attention to the specification and to promote its widespread deployment this enhances the functionality and interoperability of the web this vocabulary was originally developed and published outside of wc but has been extended and further developed within the government linked data working group this document was published by the government linked data working group as a recommendation if you wish to make comments regarding this document please send them to publicgldcomments@worg subscribe archives all comments are welcome please see the working groups implementation report this document was produced by a group operating under the  february  wc patent policy wc maintains a public list of any patent disclosures made in connection with the deliverables of the group that page also includes instructions for disclosing a patent an individual who has actual knowledge of a patent which the individual believes contains essential claims must disclose the information in accordance with section  of the wc patent policy table of contents  outline of the vocabulary  vocabulary index  introduction  rdf and linked data  sdmx and related standards  audience and scope  namespaces and document conventions  conformance  data cubes  data sets  the cube model  dimensions attributes measures  introducing slices  an example  creating data structure definitions  dimensions attributes and measures  content oriented guidelines  example dimensions and measure  componentspecifications and datastructuredefinitions  handling multiple measures  expressing data sets  data sets and observations  slices and groups of observations  concept schemes and code lists  coded values for components properties  hierarchical code lists  nonskos hierarchies  aggregation  dataset metadata  categorizing a data set  describing publishers  abbreviated and normalized data cubes  normalization algorithm  wellformed cubes  integrity constraints  vocabulary reference  datasets  observations  slices  dimensions attributes measures  reusable general purpose component properties  data structure definitions  component specifications  for qualifying component use in a dsd  slice definitions  concepts  nonskos hierarchies a acknowledgements b change history c complete example data cube d references d normative references d informative references  outline of the vocabulary fig  pictorial summary of key terms and their relationship  vocabulary index classes qbattachable qbattributeproperty qbcodedproperty qbcomponentproperty qbcomponentset qbcomponentspecification qbdataset qbdatastructuredefinition qbdimensionproperty qbhierarchicalcodelist qbmeasureproperty qbobservation qbslice qbobservationgroup qbslicekey properties qbattribute qbcodelist qbcomponent qbcomponentattachment qbcomponentproperty qbcomponentrequired qbconcept qbdataset qbdimension qbhierarchyroot qbmeasure qbmeasuredimension qbmeasuretype qbobservation qbobservationgroup qborder qbparentchildproperty qbslice qbslicekey qbslicestructure qbstructure  introduction this section is nonnormative statistical data is a foundation for policy prediction planning and adjustments and underpins many of the mashups and visualisations we see on the web there is strong interest in being able to publish statistical data in a webfriendly format to enable it to be linked and combined with related information at the heart of a statistical dataset is a set of observed values organized along a group of dimensions together with associated metadata the data cube vocabulary enables such information to be represented using the wc rdf resource description framework standard and published following the principles of linked data the vocabulary is based upon the approach used by the sdmx iso standard for statistical data exchange this cube model is very general and so the data cube vocabulary can be used for other data sets such as survey data spreadsheets and olap data cubes olap the data cube vocabulary is focused purely on the publication of multidimensional data on the web we envisage a series of modular vocabularies being developed which extend this core foundation in particular we see the need for an sdmx extension vocabulary to support the publication of additional context to statistical data such as the encompassing data flows and associated provision agreements other extensions are possible to support metadata for surveys so called microdata as encompassed by ddi or publication of statistical reference metadata the data cube in turn builds upon the following existing rdf vocabularies skos for concept schemes scovo for core statistical structures dublin core terms for metadata void for data access foaf for agents org for organizations  rdf and linked data linked data is an approach to publishing data on the web enabling datasets to be linked together through references to common concepts the approach lod recommends use of http uris to name the entities and concepts so that consumers of the data can lookup those uris to get more information including links to other related uris rdf rdfprimer provides a standard for the representation of the information that describes those entities and concepts and is returned by dereferencing the uris there are a number of benefits to being able to publish multidimensional data such as statistics using rdf and the linked data approach the individual observations and groups of observations become web addressable this allows publishers and third parties to annotate and link to this data for example a report can reference the specific figures it is based on allowing for fine grained provenance traceback data can be flexibly combined across datasets sets for example find all religious schools in census areas with high values for national indicators pertaining to religious tolerance the statistical data becomes an integral part of the broader web of linked data for publishers who currently only offer static files then publishing as linkeddata offers a flexible nonproprietary machine readable means of publication that supports an outofthebox web api for programmatic access it enables reuse of standardized tools and components  sdmx and related standards the statistical data and metadata exchange sdmx initiative was organised in  by seven international organizations bis ecb eurostat imf oecd world bank and the un to realise greater efficiencies in statistical practice these organisations all collect significant amounts of data mostly from the national level to support policy they also disseminate data at the supranational and international levels there have been a number of important results from this work two versions of a set of technical specifications  isots  sdmx  and the release of several recommendations for structuring and harmonising crossdomain statistics the sdmx contentoriented guidelines all of the products are available at wwwsdmxorg the standards are now being widely adopted around the world for the collection exchange processing and dissemination of aggregate statistics by official statistical organisations the un statistical commission recommended sdmx as the preferred standard for statistics in  the sdmx specification defines a core information model which is reflected in concrete form in two syntaxes  sdmxml an xml syntax and sdmxedi the rdf data cube vocabulary builds upon the core of the the sdmx  information model sdmx readers may find the sdmx user guide sdmxguide useful background a key component of the sdmx standards package are the contentoriented guidelines cogs a set of crossdomain concepts code lists and categories that support interoperability and comparability between datasets by providing a shared terminology between sdmx implementers cog rdf versions of these terms are available separately for use along with the data cube vocabulary see content oriented guidelines for further details these external resources do not form a normative part of the data cube vocabulary specification  audience and scope this document describes the data cube vocabulary it is aimed at people wishing to publish statistical or other multidimension data in rdf mechanics of crossformat translation from other formats such as sdmxml are not covered here  namespaces and document conventions the names of rdf entities  classes predicates individuals  are uris these are usually expressed using a compact notation where the name is written prefixlocalname and where the prefix identifies a namespace uri the namespace identified by the prefix is prepended to the localname to obtain the full uri the following namespaces are used in this document prefix namespace reference qb httppurlorglinkeddatacube this document skos httpwwwworgskoscore skosreference scovo httppurlorgnetscovo scovo haus void httprdfsorgnsvoid void foaf httpxmlnscomfoaf foaf org httpwwwworgnsorg org dct httppurlorgdcterms dc owl httpwwwworgowl owlprimer rdf httpwwwworgrdfsyntaxns rdfconcepts rdfs httpwwwworgrdfschema rdfschema admingeo httpdataordnancesurveycoukontologyadmingeo nonnormative used for examples only interval httpreferencedatagovukdefintervals nonnormative used for examples only eg httpexampleorgns nonnormative used for examples only all rdf examples are written in turtle syntax turtle  conformance as well as sections marked as nonnormative all authoring guidelines diagrams examples and notes in this specification are nonnormative everything else in this specification is normative the key words must must not required should should not recommended may and optional in this specification are to be interpreted as described in rfc a data interchange however that interchange occurs is conformant with data cube if it uses terms classes and properties from data cube in a way consistent with their semantics as declared in this specification in particular the exchanged rdf graphs constitute either wellformed or wellformed abbreviated data cubes it does not use terms from other vocabularies instead of ones defined in this vocabulary that could reasonably be used use of such terms in addition to data cube terms is permissible a conforming data interchange may include terms from other vocabularies may use only a subset of data cube terms  data cubes this section is nonnormative  data sets this section is nonnormative a dataset is a collection of statistical data that corresponds to a defined structure the data in a data set can be roughly described as belonging to one of the following kinds observations this is the actual data the measured values in a statistical table the observations would be the values in the table cells organizational structure to locate an observation within the hypercube one has at least to know the value of each dimension at which the observation is located so these values must be specified for each observation datasets can have additional organizational structure in the form of slices as described in section  structural metadata having located an observation we need certain metadata in order to be able to interpret it what is the unit of measurement is it a normal value or a series break is the value measured or estimated these metadata are provided as attributes and can be attached to individual observations or to higher levels reference metadata this is metadata that describes the dataset as a whole such as categorization of the dataset its publisher and a sparql endpoint where it can be accessed external metadata is described in section   the cube model  dimensions attributes measures this section is nonnormative a statistical data set comprises a collection of observations made at some points across some logical space the collection can be characterized by a set of dimensions that define what the observation applies to eg time area gender along with metadata describing what has been measured eg economic activity population how it was measured and how the observations are expressed eg units multipliers status we can think of the statistical data set as a multidimensional space or hypercube indexed by those dimensions this space is commonly referred to as a cube for short though the name shouldnt be taken literally it is not meant to imply that there are exactly three dimensions there can be more or fewer nor that all the dimensions are somehow similar in size a cube is organized according to a set of dimensions attributes and measures we collectively call these components the dimension components serve to identify the observations a set of values for all the dimension components is sufficient to identify a single observation examples of dimensions include the time to which the observation applies or a geographic region which the observation covers the measure components represent the phenomenon being observed the attribute components allow us to qualify and interpret the observed values they enable specification of the units of measure any scaling factors and metadata such as the status of the observation eg estimated provisional  introducing slices this section is nonnormative it is frequently useful to group subsets of observations within a dataset in particular to fix all but one or a small subset of the dimensions and be able to refer to all observations with those dimension values as a single entity we call such a selection a slice through the cube for example given a data set on regional performance indicators then we might group together all the observations about a given indicator and a given region each such group would be a slice representing a time series of observed values a data publisher may identify slices through the data for various purposes they can be a useful grouping to which metadata might be attached for example to note a change in measurement process which affects a particular time or region slices also enable the publisher to identify and label particular subsets of the data which should be presented to the user  they can enable the consuming application to more easily construct the appropriate graph or chart for presentation in statistical applications it is common to work with slices in which a single dimension is left unspecified in particular to refer to such slices in which the single free dimension is time as time series and to refer slices along nontime dimensions as sections within the data cube vocabulary we allow arbitrary dimensionality slices and do not give different names to particular types of slice such subclasses of slice could be added in extension vocabularies  an example this section is nonnormative in order to illustrate the use of the data cube vocabulary we will use a small demonstration data set extracted from statswales report number  which describes life expectancy broken down by region unitary authority age and time the extract we will use is    male female male female male female newport       cardiff       monmouthshire       merthyr tydfil       we can see that there are three dimensions  time period rolling averages over three year timespans region and sex each observation represents the life expectancy for that population the measure and we will need an attribute to define the units years of the measured values an example of slicing the data would be to define slices in which the time and sex are fixed for each slice such slices then show the variation in life expectancy across the different regions ie corresponding to the columns in the above tabular layout a complete encoding of this data as a data cube including such a slice structure is shown in appendix c  creating data structure definitions a qbdatastructuredefinition defines the structure of one or more datasets in particular it defines the dimensions attributes and measures used in the dataset along with qualifying information such as ordering of dimensions and whether attributes are required or optional for wellformed data sets much of this information is implicit within the rdf component properties found on the observations however the explicit declaration of the structure has several benefits it enables verification that the data set matches the expected structure in particular helps with detection of incoherent sets obtained by combining differently structured source data it allows a consumer to easily determine what dimensions are available for query and their presentational order which in turn simplifies data consumption for example for ui construction it supports transmission of the structure information in associated sdmx data flows see below it is common when publishing statistical data to have a regular series of publications which all follow the same structure the notion of a data structure definition dsd allows us to define that structure once and then reuse it for each publication in the series consumers can then be confident that the structure of the data has not changed  dimensions attributes and measures the data cube vocabulary represents the dimensions attributes and measures as rdf properties each is an instance of the abstract qbcomponentproperty class which in turn has subclasses qbdimensionproperty qbattributeproperty and qbmeasureproperty a component property encapsulates several pieces of information the concept being represented eg time or geographic area the nature of the component dimension attribute or measure as represented by the type of the component property the type or code list used to represent the value the same concept can be manifested in different components for example the concept of currency may be used as a dimension in a data set dealing with exchange rates or as an attribute when describing the currency in which an observed trade took place the concept of time is typically used only as a dimension but may be encoded as a data value eg an xsddatetime or as a symbolic value eg a uri drawn from the reference time uri set developed by datagovuk in statistical agencies it is common to have a standard thesaurus of statistical concepts which underpin the components used in multiple different data sets to support this reuse of general statistical concepts the data cube vocabulary provides the qbconcept property which links a qbcomponentproperty to the concept it represents we use the skos vocabulary skosprimer to represent such concepts this is very natural for those cases where the concepts are already maintained as a controlled term list or thesaurus when developing a data structure definition for an informal data set there may not be an appropriate concept already in those cases if the concept is likely to be reused in other guises it is recommended to publish a skosconcept along with the specific qbcomponentproperty however if such reuse is not expected then it is not required to do so  the qbconcept link is optional and a simple instance of the appropriate subclass of qbcomponentproperty is sufficient the representation of the possible values of the component is described using the rdfsrange property of the component in the usual rdf manner thus for example values of a time dimension might be represented using literals of type xsddatetime or as uris drawn from a time reference service in statistical data sets it is common for values to be encoded using some possibly hierarchical code list and it can be useful to be able to easily identify the overall code list in some more structured form to cater for this a component can also be optionally annotated with a qbcodelist to indicate a set of skosconcepts which may be used as codes the qbcodelist value may be a skosconceptscheme skoscollection or qbhierarchicalcodelist in such a case the rdfsrange of the component might be left as simply skosconcept but a useful design pattern is to also define an rdfsclass whose members are all the skosconcepts within a particular scheme in that way the rdfsrange can be made more specific which enables generic rdf tools to perform appropriate range checking note that in any sdmx extension vocabulary there would be one further item of information to encode about components  the role that they play within the structure definition in particular it is sometimes convenient for consumers to be able to easily identify which is the time dimension which component is the primary measure and so forth it turns out that such roles are intrinsic to the concepts and so this information can be encoded by providing subclasses of skosconcept for each role the particular choice of roles here is specific to the sdmx standard and so is not included within the core data cube vocabulary before illustrating the components needed for our running example there is one more piece of machinery to introduce a reusable set of concepts and components based on sdmx  content oriented guidelines this section is nonnormative the sdmx standard includes a set of content oriented guidelines cog cog which define a set of common statistical concepts and associated code lists that are intended to be reusable across data sets a community group has developed rdf encodings of these guidelines these comprise prefix namespace description sdmxconcept httppurlorglinkeddatasdmxconcept skos concepts for each cog defined concept sdmxcode httppurlorglinkeddatasdmxcode skos concepts and conceptschemes for each cog defined code list sdmxdimension httppurlorglinkeddatasdmxdimension component properties corresponding to each cog concept that can be used as a dimension sdmxattribute httppurlorglinkeddatasdmxattribute component properties corresponding to each cog concept that can be used as an attribute sdmxmeasure httppurlorglinkeddatasdmxmeasure component properties corresponding to each cog concept that can be used as a measure these community resources are provided as a convenience and do not form part of the data cube specification however they are used by a number of existing data cube publications and so we will reference them within our worked examples  example dimensions and measure this section is nonnormative turning to our example data set then we can see there are three dimensions to represent  time period region unitary authority and sex there is a single primary measure which corresponds to the topic of the data set life expectancy and encodes a value in years hence we need the following components time there is a suitable predefined concept in the smdxcog for this ref_period so we could reuse the corresponding component property sdmxdimensionrefperiod however to represent the time period itself it would be convenient to use the datagovuk reference time service and to declare this within the data structure definition example  egrefperiod  a rdfproperty qbdimensionproperty    rdfslabel reference period@en    rdfssubpropertyof sdmxdimensionrefperiod    rdfsrange intervalinterval    qbconcept sdmxconceptrefperiod  region again there is a suitable cog concept and associated component that we can use for this and again we can customize the range of the component in this case we can use the ordnance survey administrative geography ontology osgeo example  egrefarea  a rdfproperty qbdimensionproperty    rdfslabel reference area@en    rdfssubpropertyof sdmxdimensionrefarea    rdfsrange admingeounitaryauthority    qbconcept sdmxconceptrefarea  sex in this case we can use the corresponding cog component sdmxdimensionsex directly since the default code list for it includes the terms we need measure this property will give the value of each observation we could use the default smdxmeasureobsvalue for this defining the topic being observed using metadata however it can aid readability and processing of the rdf data sets to use a specific measure corresponding to the phenomenon being observed example  eglifeexpectancy  a rdfproperty qbmeasureproperty    rdfslabel life expectancy@en    rdfssubpropertyof sdmxmeasureobsvalue    rdfsrange xsddecimal  unit measure attribute the primary measure on its own is a plain decimal value to correctly interpret this value we need to define what units it is measured in years in this case this is defined using attributes which qualify the interpretation of the observed value specifically in this example we can use the predefined sdmxattributeunitmeasure which in turn corresponds to the cog concept of unit_measure to express the value of this attribute we would typically use a common thesaurus of units of measure for the sake of this simple example we will use the dbpedia resource httpdbpediaorgresourceyear which corresponds to the topic of the wikipedia page on years this covers the minimal components needed to define the structure of this data set  componentspecifications and datastructuredefinitions to combine the components into a specification for the structure of this dataset we need to declare a qbdatastructuredefinition resource which in turn will reference a set of qbcomponentspecification resources the qbdatastructuredefinition will be reusable across other data sets with the same structure in the simplest case the qbcomponentspecification simply references the corresponding qbcomponentproperty usually using one of the sub properties qbdimension qbmeasure or qbattribute however it is also possible to qualify the component specification in several ways attributes may be declared as optional or required if an attribute is required to be present for every observation then the specification should set qbcomponentrequired in the absence of such a declaration an attribute is assumed to be optional the qbcomponentrequired declaration may only be applied to component specifications of attributes  measures and dimensions are always required the components may be ordered by giving an integer value for qborder this order carries no semantics but can be useful to aid consuming agents in generating appropriate user interfaces it can also be useful in the publication chain to enable synthesis of appropriate uris for observations by default the values of all of the components will be attached to each individual observation this is called the normalized representation this allows such observations to stand alone so that a sparql query to retrieve the observation can immediately locate the attributes which enable the observation to be interpreted however it is also permissible to attach attributes to the overall data set to an intervening slice or to a specific measure in the case of multiple measures this reduces some of the redundancy in the encoding of the instance data to declare such an abbreviated structure the qbcomponentattachment property of the specification should reference the class corresponding to the attachment level eg qbdataset for attributes that will be attached to the overall data set the classes which can be used as such attachment levels are all subclasses of qbattachable in the case of our running example the dimensions can be usefully ordered there is only one attribute the unit measure and this is required in the interest of illustrating the vocabulary use we will declare that this attribute will be attached at the level of the data set however normalized representations are in general easier to query and combine so the structure of our example data set and other similar datasets can be declared by example  egdsdle a qbdatastructuredefinition     the dimensions    qbcomponent  qbdimension egrefarea         qborder      qbcomponent  qbdimension egrefperiod       qborder      qbcomponent  qbdimension sdmxdimensionsex qborder       the measures    qbcomponent  qbmeasure eglifeexpectancy     the attributes    qbcomponent  qbattribute sdmxattributeunitmeasure                    qbcomponentrequired truexsdboolean                   qbcomponentattachment qbdataset   note that we have given the data structure definition dsd a uri since it will be reused across different datasets with the same structure similarly the component properties themselves can be reused across different dsds however the component specifications are only useful within the scope of a particular dsd and so we have chosen to represent them using blank nodes  handling multiple measures our example data set is relatively simple in having a single observable in this case life expectancy that is being measured in other data sets there can be multiple measures these measures may be of similar nature eg a data set on local government performance might provide multiple different performance indicators for each region or quite different eg a data set on trades might provide quantity value weight for each trade there are two approaches to representing multiple measures supported by the data cube vocabulary in the first approach each observation records a single observed value for one measure we introduce an additional dimension whose value indicates the measure being conveyed by each observation this measure dimension approach is the one supported by the sdmx information model in the second approach a single observation can provide values for multiple different measures this is particularly appropriate in cases where each of those values relates to a single observational event such as a multispectral sensor measurement this multimeasure approach is commonly used in applications such as business intelligence and olap the data cube vocabulary permits either representation approach to be used though they cannot be mixed within the same data set both representation approaches require that for every point in the space of dimensions for which there is an observation a value must be given for every measure in the case of multimeasure observations each measure must be present on each observation in cubes which use a measure dimension there are sets of observations for each populated point in the cube and within each of those sets there must be an observation giving each measure multimeasure observations this approach allows multiple observed values to be attached to an individual observation it is suited to representation of things like sensor data and olap cubes to use this representation you simply declare multiple qbmeasureproperty components in the data structure definition and attach an instance of each property to the observations within the data set for example if we have a set of shipment data containing unit count and total weight for each shipment then we might have a data structure definition such as example  egdsd a qbdatastructuredefinition    rdfscomment shipments by time multiple measures approach@en    qbcomponent          qbdimension  sdmxdimensionreftime          qbmeasure    egmeasurequantity          qbmeasure    egmeasureweight   this would correspond to individual observations such as example  egdataset a qbdataset    qbstructure egdsd     egobsa  a qbobservation    qbdataset egdataset    sdmxdimensionreftime xsddate    egmeasureweight      egmeasurequantity       note that one limitation of the multimeasure approach is that it is not possible to attach an attribute to a single observed value an attribute attached to the observation instance will apply to the whole observation eg to indicate who made the observation attributes can also be attached directly to the qbmeasureproperty itself eg to indicate the unit of measure for that measure but that attachment applies to the whole data set indeed any data set using that measure property and cannot vary for different observations for applications where this limitation is a problem then use the measure dimension approach measure dimension this approach restricts observations to having a single measured value but allows a data set to carry multiple measures by adding an extra dimension a measure dimension the value of the measure dimension denotes which particular measure is being conveyed by the observation this is the representation approach used within sdmx and an extension vocabulary could introduce a subclass of qbdatastructuredefinition which enforces such a singlemeasure restriction to use this representation you declare an additional dimension within the data structure definition to play the role of the measure dimension for use within the data cube vocabulary we provide a single distinguished component for this purpose  qbmeasuretype an extension vocabulary could generalize this through the provision of roles to identify concepts which act as measure types enabling other measure dimensions to be declared in the special case of using qbmeasuretype as the measure dimension the set of allowed measures is assumed to be those measures declared within the dsd there is no need to define a separate code list or enumerated class to duplicate this information thus qbmeasuretype is a magic dimension property with an implicit code list this notion of an implicit code list for qbmeasuretype is a small divergence from sdmx usage the data structure definition for our above example using this representation approach would then be example  egdsd a qbdatastructuredefinition    rdfscomment shipments by time measure dimension approach@en    qbcomponent          qbdimension  sdmxdimensionreftime          qbmeasure    egmeasurequantity          qbmeasure    egmeasureweight          qbdimension  qbmeasuretype   this would correspond to individual observations such as example  egdataset a qbdataset    qbstructure egdsd     egobsa  a qbobservation    qbdataset egdataset    sdmxdimensionreftime xsddate    qbmeasuretype egmeasureweight     egmeasureweight      egobsb  a qbobservation    qbdataset egdataset    sdmxdimensionreftime xsddate    qbmeasuretype egmeasurequantity     egmeasurequantity   note the duplication of having the measure property show up both as the property that carries the measured value and as the value of the measure dimension we accept this duplication as necessary to ensure the uniform cubedimension mechanism and a uniform way of declaring and using measure properties on all kinds of datasets those familiar with sdmx should also note that in the rdf representation there is no need for a separate primary measure which subsumes each of the individual measures those individual measures are used directly extension vocabularies could address the roundtripping of the sdmx primary measure by use of a separate annotation on the data structure definition  expressing data sets  data sets and observations a resource representing the entire data set is created and typed as qbdataset and linked to the corresponding data structure definition via the qbstructure property pitfall note the capitalization of qbdataset which differs from the capitalization in other vocabularies such as voiddataset and dcatdataset this unusual capitalization is chosen for compatibility with the sdmx standard the same applies to the related property qbdataset each observation is represented as an instance of type qbobservation in the basic case then values for each of the attributes dimensions and measurements are attached directly to the observation remember that these components are all rdf properties the observation is linked to the containing data set using the qbdataset property thus for our running example we might expect to have example  egdatasetle a qbdataset    rdfslabel life expectancy@en    rdfscomment life expectancy within welsh unitary authorities  extracted from stats wales@en    qbstructure egdsdle       ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     sdmxattributeunitmeasure httpdbpediaorgresourceyear     eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     sdmxattributeunitmeasure httpdbpediaorgresourceyear     eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     sdmxattributeunitmeasure httpdbpediaorgresourceyear     eglifeexpectancy                this normalized structure makes it easy to query and combine data sets but there is some redundancy here for example the unit of measure for the life expectancy is uniform across the whole data set and does not change between observations to cater for situations like this the data cube vocabulary allows components to be attached at a high level in the nested structure indeed if we reexamine our original data structure declaration we see that we declared the unit of measure to be attached at the data set level so an shortened version of the example is example  egdatasetle a qbdataset    rdfslabel life expectancy@en    rdfscomment life expectancy within welsh unitary authorities  extracted from stats wales@en    qbstructure egdsdle       sdmxattributeunitmeasure httpdbpediaorgresourceyear         ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     eglifeexpectancy                   ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     eglifeexpectancy                in a data set containing just observations with no intervening structure then each observation must have a complete set of dimension values along with all the measure values if the set is structured by using slices then further abbreviation is possible as discussed in the next section  slices and groups of observations slices allow us to group subsets of observations together this is not intended to represent arbitrary selections from the observations but uniform slices through the cube in which one or more of the dimension values are fixed slices may be used for a number of reasons to guide consuming applications in how to present the data eg to organize data as a set of time series to provide an identity uri for the slice to enable it to be annotated or externally referenced to reduce the verbosity of the data set by only stating each fixed dimensional value once to illustrate the use of slices let us group the sample data set into geographic series that will enable us to refer to eg male life expectancy observations for  and guide applications to present a comparative chart across regions we first define the structure of the slices we want by associating a slice key with the data structure definition this is done by creating a qbslicekey to list the component properties which must be dimensions which will be fixed in the slice the key is attached to the dsd using qbslicekey for example example  egslicebyregion a qbslicekey    rdfslabel slice by region@en    rdfscomment slice by grouping regions together fixing sex and time values@en    qbcomponentproperty egrefperiod sdmxdimensionsex     egdsdleslice a qbdatastructuredefinition    qbcomponent          qbdimension egrefarea         qborder           qbdimension egrefperiod       qborder           qbdimension sdmxdimensionsex qborder           qbmeasure eglifeexpectancy        qbattribute sdmxattributeunitmeasure qbcomponentattachment qbdataset      qbslicekey egslicebyregion  in the instance data then slices are represented by instances of qbslice which link to the observations in the slice via qbobservation and to the key by means of qbslicestructure data sets indicate the slices they contain by means of qbslice thus in our example we would have example  egdatasetle a qbdataset    rdfslabel life expectancy@en    rdfscomment life expectancy within welsh unitary authorities  extracted from stats wales@en    qbstructure egdsdleslice       sdmxattributeunitmeasure httpdbpediaorgresourceyear     qbslice egslice    egslice a qbslice    qbslicestructure  egslicebyregion     egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     qbobservation egob egob egob  egob a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     eglifeexpectancy                   egob a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     eglifeexpectancy               egob a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     eglifeexpectancy                note that here we are still repeating the dimension values on the individual observations this normalized representation means that a consuming application can still query for observed values uniformly without having to first parse the data structure definition and search for slice definitions if it is desired this redundancy can be reduced by declaring different attachment levels for the dimensions for example example  egdsdleslice a qbdatastructuredefinition    qbcomponent          qbdimension egrefarea         qborder           qbdimension egrefperiod       qborder  qbcomponentattachment qbslice          qbdimension sdmxdimensionsex qborder  qbcomponentattachment qbslice          qbmeasure eglifeexpectancy         qbattribute sdmxattributeunitmeasure qbcomponentattachment qbdataset      qbslicekey egslicebyregion egdatasetle a qbdataset    rdfslabel life expectancy@en    rdfscomment life expectancy within welsh unitary authorities  extracted from stats wales@en    qbstructure egdsdleslice       sdmxattributeunitmeasure httpdbpediaorgresourceyear     qbslice egslice     egslice a qbslice    qbslicestructure  egslicebyregion     egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     qbobservation egoc egoc egoc  egoc a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       eglifeexpectancy                   egoc a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       eglifeexpectancy               egoc a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       eglifeexpectancy                there are also situations in which a publisher wishes to group a set of observations together for ease of access or presentation purposes but where that set is not defined by simply fixing a set of dimension values for example in representing weather observations it can be desirable to group together the latest observation available from each station even though each observation may have been taken at a different time for those situations the data cube vocabulary supports qbobservationgroup a qbobservationgroup can contain an arbitrary collection of observations a qbslice is a special case of a qbobservationgroup  concept schemes and code lists  coded values for components properties the values for dimensions within a data set must be unambiguously defined they may be typed values eg xsddatetime for time instances or codes drawn from some code list similarly many attributes used in data sets represent coded values from some controlled term list rather than free text descriptions in the data cube vocabulary such codes are represented by uri references in the usual rdf fashion sometimes appropriate uri sets already exist for the relevant dimensions eg the representations of area and time periods in our running example in other cases the data set being converted may use controlled terms from some scheme which does not yet have associated uris in those cases we recommend use of skos representing the individual code values using skosconcept and the overall set of admissible values using skosconceptscheme or skoscollection we illustrate this with an example drawn from the translation of the sdmx cog code list for gender as used already in our worked example the relevant subset of this code list is example  sdmxcodesex a skosconceptscheme    skospreflabel code list for sex sex  codelist scheme@en    rdfslabel code list for sex sex  codelist scheme@en    skosnotation cl_sex    skosnote this  code list provides the gender@en    skosdefinition httpsdmxorgwpcontentuploads_sdmx_cog_annex__cl_pdf     rdfsseealso sdmxcodesex     sdmxcodesex skoshastopconcept sdmxcodesexf     sdmxcodesex skoshastopconcept sdmxcodesexm sdmxcodesex a rdfsclass owlclass    rdfssubclassof skosconcept     rdfslabel code list for sex sex  codelist class@en    rdfscomment this  code list provides the gender@en    rdfsseealso sdmxcodesex sdmxcodesexf a skosconcept sdmxcodesex    skostopconceptof sdmxcodesex    skospreflabel female@en     skosnotation f     skosinscheme sdmxcodesex sdmxcodesexm a skosconcept sdmxcodesex    skostopconceptof sdmxcodesex    skospreflabel male@en     skosnotation m      skosinscheme sdmxcodesex  skospreflabel is used to give a name to the code skosnote gives a description and skosnotation can be used to record a short form code which might appear in other serializations the skos specification skosreference recommends the generation of a custom datatype for each use of skosnotation but here the notation is not intended for use within rdf encodings it merely documents the notation used in other representations which do not use such a datatype it is convenient and good practice when developing a code list to also create a class to denote all the codes within the code list irrespective of hierarchical structure this allows the range of an qbcomponentproperty to be defined by using rdfsrange which then permits standard rdf closedworld checkers to validate use of the code list without requiring custom sdmxrdfaware tooling we do that in the above example by using the common convention that the class name is the same as that of the concept scheme but with leading upper case this code list can then be associated with a coded property such as a dimension example  egsex a qbdimensionproperty qbcodedproperty    qbcodelist sdmxcodesex     rdfsrange sdmxcodesex  explicitly declaring the code list using qbcodelist is not mandatory but can be helpful in those cases where a concept scheme has been defined  hierarchical code lists in some cases code lists have a hierarchical structure in particular this is used in sdmx when the data cube includes aggregations of data values eg aggregating a measure across geographic regions hierarchical code lists should be represented using the skosnarrower relationship or a subproperty of it to link from the skoshastopconcept codes down through the tree or lattice of child codes in some publishing tool chains the corresponding transitive closure skosnarrowertransitive will be automatically inferred the use of skosnarrower makes it possible to declare new concept schemes which extend an existing scheme by adding additional aggregation layers on top all items are linked to the scheme via skosinscheme  nonskos hierarchies it is sometimes convenient to be able to specify a hierarchical arrangement of concepts other than through the use of the skos relation skosnarrower there are several situations where this is useful for example in some cases publishers wish to be able to reuse existing reference data as their code lists this particularly occurs where a geographic or admingeographic hierarchy is already maintained by a separate authority but which uses nonskos containment or partof relationships where such maintained reference data is to be reused there can be multiple hierarchies which relate the same codes in particular a set of geographic entities may participate in both a geographiccontainment hierarchy and an administrative hierarchy which do not precisely align the data cube vocabulary supports this situation through the qbhierarchicalcodelist class an instance of qbhierarchicalcodelist defines a set of root concepts in the hierarchy qbhierarchyroot and a parenttochild relationship qbparentchildproperty which links a term in the hierarchy to its immediate subterms thus a qbhierarchicalcodelist is similar to a skosconceptscheme in which qbhierarchyroot plays the same role as skoshastopconcept and the value of qbparentchildproperty plays the same role as skosnarrower in the case where a code list is already available as a skos concept scheme or collection or could reasonable me made so then those should be used directly qbhierarchicalcodelist is provided for cases where the terms are not available as skos but are available in some other rdf representation suitable for reuse for example the ordnance survey of great britain publishes a geographic hierarchy which has eleven roots european regions such as wales scotland the south west and uses a spatial relations ontology to define a containment hierarchy this could be represented as a qbhierarchicalcodelist using the following example  @prefix spatial httpdataordnancesurveycoukontologyspatialrelations eggbgeohierarchy a qbhierarchicalcodelist    rdfslabel geographic hierarchy for great britain@en    qbhierarchyroot       httpdataordnancesurveycoukid  south west      httpdataordnancesurveycoukid  west midlands      httpdataordnancesurveycoukid  south east      httpdataordnancesurveycoukid  yorkshire  the humber      httpdataordnancesurveycoukid  east midlands      httpdataordnancesurveycoukid  eastern      httpdataordnancesurveycoukid  london      httpdataordnancesurveycoukid  north west      httpdataordnancesurveycoukid  north east      httpdataordnancesurveycoukid  wales      httpdataordnancesurveycoukid  scotland    qbparentchildproperty  spatialcontains    eggeodimension a qbdimensionproperty     qbcodelist eggbgeohierarchy  note that in some cases the hierarchy to be reused may only have a property relating child concepts to parent concepts this situation is handled by declaring the qbparentchildproperty to be the owlinverseof of the childtoparent property for example example  @prefix spatial httpdataordnancesurveycoukontologyspatialrelations eggbgeohierarchy a qbhierarchicalcodelist    qbparentchildproperty  owlinverseof spatialwithin  future extensions of data cube may support additional sub classes of qbhierarchicalcodelist for example to declare hierarchies in which each parent is a disjoint union of its children  aggregation the use of skos or nonskos hierarchies makes it possible to publish aggregated statistics for the nonleaf concepts in the hierarchy the data cube vocabulary itself imposes no constraints on how such aggregation is done indeed in statistical applications the appropriate statistical corrections to make to aggregated values may be nontrivial and dependent on the data and precise analysis methodology similarly in other applications such as olap a number of different aggregation operators are commonly used vocabulary terms to represent the aggregation operations employed within a given dataset and how one dataset might be derived from another are not supported in this version of the data cube specification this area may be addressed by future extensions to data cube  dataset metadata datasets should be marked up with metadata to support discovery presentation and processing dublin core terms dc should be used for representing the key metadata annotations commonly needed for datasets the rdfs terms for display label rdfslabel descriptive comment rdfscomment should be given as well for compatibility with earlier versions of data cube and common rdf practice the recommend core set of metadata terms is dcttitle rdfslabel  may be same as dcttitle dctdescription rdfscomment  may be same as dctdescription dctissued dctmodified dctsubject dctpublisher dctlicense other documents notably dcat provide additional recommendations for metadata terms for data sets which may be used for describing data cube datasets  categorizing a data set publishers of statistics often categorize their data sets into different statistical domains such as education labour or transportation we encourage use of dctsubject to record such a classification of a whole data set the classification terms can include coarse grained classifications such as the list of subjectmatter domains from the sdmx contentoriented guidelines and fine grained classifications to support discovery of data sets the classification schemes are typically represented using the skos vocabulary for convenience the smdx subjectmatter domains have been encoded as a skos concept scheme at httppurlorglinkeddatasdmxsubject thus our sample dataset might be marked up by example  egdataset a qbdataset    rdfslabel      life expectancy@en    dcttitle       life expectancy@en    rdfscomment    life expectancy within welsh unitary authorities  extracted from stats wales@en    dctdescription life expectancy within welsh unitary authorities  extracted from stats wales@en    dctissued      xsddate    dctsubject        sdmxsubject        regional and small area statistics        sdmxsubject        health        egwales                wales     where egwales is a skosconcept drawn from an appropriate controlled vocabulary for places  describing publishers the organization that publishes a dataset should be recorded as part of the dataset metadata again we recommend use of the dublin core term dctpublisher for this the organization should be represented as an instance of foafagent or some more specific subclass such as orgorganization org example  egdataset a qbdataset    dctpublisher httpexamplecommetaorganization     httpexamplecommetaorganization a orgorganization foafagent    rdfslabel example org     extension vocabularies may provide additional metadata properties and may impose constraints on what metadata must be provided  abbreviated and normalized data cubes in normal form then the qbobservations which make up a data cube have property values for each of the required dimensions attributes and measures as declared in the associated data structure definition this form for a data cube is termed normalized it is a convenient format for querying data and makes it possible to write uniform queries which extract sets of observations including from across multiple cubes however the verbosity of a fully normalized representation incurs overheads in transmission and storage of data cubes which may be problematic in some settings note that abbreviated form is provided as an option and there is requirement that it be used in many settings standard compression techniques can eliminate much of the overhead of normalized form to address this the data cube vocabulary supports a notion of an abbreviated format in which component properties may be attached to other levels in the data cube specifically they may be attached to a qbdataset or qbslice in those cases the attached property is taken to be applied to all the qbobservation instances associated with that attachment point for illustration see example  in which the unit of measure is declared as to be attached to the whole data set and need not be repeated for every observation it is also possible to attach attributes to a qbmeasureproperty in which case the attribute is intended to apply only to that property and not to the observations in which that property occurs  normalization algorithm we define these notions by means of a transformation algorithm which can normalize an abbreviated data cube we express this transformation using the sparql  update language sparqlupdate use of this notation does not imply that the transformation must be implemented this way information exchanges using data cube may retain data in abbreviated form and use other techniques such as query rewriting to ease access may implement the normalization algorithm by other means or may handle all data in normalized form or any mix of these the normalization algorithm comprises two sets of sparql update operations which should be applied in turn to a sparql dataset in which the default graph contains the data cube rdf graph to be normalized the first update operation performs selective type and property closure operations these serve two purposes they ensure that rdftype assertions on instances of qbobservation and qbslice may be omitted in an abbreviated data cube they also simplify the second set of update operations by expanding the sub properties of qbcomponentproperty specifically qbdimension qbmeasure and qbattribute phase  type and property closure prefix rdf            httpwwwworgrdfsyntaxnsprefix qb             httppurlorglinkeddatacubeinsert     o rdftype qbobservation  where      qbobservation o insert     o  rdftype qbobservation     ds rdftype qbdataset  where     o qbdataset ds insert     s rdftype qbslice  where      qbslice sinsert     cs qbcomponentproperty p     p  rdftype qbdimensionproperty  where     cs qbdimension p insert     cs qbcomponentproperty p     p  rdftype qbmeasureproperty  where     cs qbmeasure p insert     cs qbcomponentproperty p     p  rdftype qbattributeproperty  where     cs qbattribute p  these closure operations are implied by the rdfs semantics of the data cube vocabulary data cube processors may apply full rdfs closure in place of the update operation defined here the second update operation checks the components of the data structure definition of the data set for declared attachment levels for each of the possible attachments levels it looks for occurrences of that component to be pushed down to the corresponding observations phase  push down attachment levels prefix qb             httppurlorglinkeddatacube dataset attachmentsinsert     obs  comp value where     spec    qbcomponentproperty comp              qbcomponentattachment qbdataset     dataset qbstructure qbcomponent spec             comp value     obs     qbdataset dataset slice attachmentsinsert     obs  comp value where     spec    qbcomponentproperty comp             qbcomponentattachment qbslice     dataset qbstructure qbcomponent spec             qbslice slice     slice comp value           qbobservation obs  dimension values on slicesinsert     obs  comp value where     spec    qbcomponentproperty comp     comp a  qbdimensionproperty     dataset qbstructure qbcomponent spec             qbslice slice     slice comp value           qbobservation obs   wellformed cubes an instance of an rdf data cube should conform to a set of integrity constraints which we define in this section a wellformed rdf data cube is an a rdf graph describing one or more instances of qbdataset for which each of the integrity checks defined here passes a wellformed abbreviated rdf data cube is an a rdf graph which when expanded using the normalization algorithm yields a wellformed rdf data cube  integrity constraints each integrity constraint is expressed as narrative prose and where possible a sparql sparqlquery ask query or query template if the ask query is applied to an rdf graph then it will return true if that graph contains one or more data cube instances which violate the corresponding constraint using sparql queries to express the integrity constraints does not imply that integrity checking must be performed this way implementations are free to use alternative query formulations or alternative implementation techniques to perform equivalent checks each integrity constraint query assumes the following set of prefix bindings prefix rdf     httpwwwworgrdfsyntaxnsprefix rdfs    httpwwwworgrdfschemaprefix skos    httpwwwworgskoscoreprefix qb      httppurlorglinkeddatacubeprefix xsd     httpwwwworgxmlschemaprefix owl     httpwwwworgowl the complete set of constraints is listed below ic datatype consistency the rdf graph must be consistent under rdf dentailment rdfmt using a datatype map containing all the datatypes used within the graph ic unique dataset every qbobservation has exactly one associated qbdataset ask        check observation has a data set    obs a qbobservation     filter not exists  obs qbdataset dataset     union      check has just one data set    obs a qbobservation        qbdataset dataset dataset     filter dataset  dataset      ic unique dsd every qbdataset has exactly one associated qbdatastructuredefinition ask        check dataset has a dsd    dataset a qbdataset     filter not exists  dataset qbstructure dsd     union       check has just one dsd    dataset a qbdataset        qbstructure dsd dsd     filter dsd  dsd      ic dsd includes measure every qbdatastructuredefinition must include at least one declared measure ask   dsd a qbdatastructuredefinition   filter not exists  dsd qbcomponent qbcomponentproperty a qbmeasureproperty     ic dimensions have range every dimension declared in a qbdatastructuredefinition must have a declared rdfsrange ask   dim a qbdimensionproperty   filter not exists  dim rdfsrange      ic concept dimensions have code lists every dimension with range skosconcept must have a qbcodelist ask   dim a qbdimensionproperty        rdfsrange skosconcept   filter not exists  dim qbcodelist      ic only attributes may be optional the only components of a qbdatastructuredefinition that may be marked as optional using qbcomponentrequired are attributes ask   dsd qbcomponent componentspec   componentspec qbcomponentrequired falsexsdboolean                  qbcomponentproperty component   filter not exists  component a qbattributeproperty     ic slice keys must be declared every qbslicekey must be associated with a qbdatastructuredefinition ask     slicekey a qbslicekey     filter not exists  a qbdatastructuredefinition qbslicekey slicekey     ic slice keys consistent with dsd every qbcomponentproperty on a qbslicekey must also be declared as a qbcomponent of the associated qbdatastructuredefinition ask   slicekey a qbslicekey      qbcomponentproperty prop   dsd qbslicekey slicekey   filter not exists  dsd qbcomponent qbcomponentproperty prop     ic unique slice structure each qbslice must have exactly one associated qbslicestructure ask        slice has a key    slice a qbslice     filter not exists  slice qbslicestructure key    union      slice has just one key    slice a qbslice            qbslicestructure key key    filter key  key      ic slice dimensions complete every qbslice must have a value for every dimension declared in its qbslicestructure ask   slice qbslicestructure qbcomponentproperty dim   filter not exists  slice dim      ic all dimensions required every qbobservation has a value for each dimension declared in its associated qbdatastructuredefinition ask     obs qbdatasetqbstructureqbcomponentqbcomponentproperty dim     dim a qbdimensionproperty    filter not exists  obs dim      ic no duplicate observations no two qbobservations in the same qbdataset may have the same value for all dimensions ask   filter allequal        for each pair of observations test if all the dimension values are the same    select minequal as allequal where         obs qbdataset dataset         obs qbdataset dataset         filter obs  obs        dataset qbstructureqbcomponentqbcomponentproperty dim         dim a qbdimensionproperty         obs dim value         obs dim value         bind value  value as equal     group by obs obs      ic required attributes every qbobservation has a value for each declared attribute that is marked as required ask     obs qbdatasetqbstructureqbcomponent component     component qbcomponentrequired truexsdboolean                qbcomponentproperty attr     filter not exists  obs attr      ic all measures present in a qbdataset which does not use a measure dimension then each individual qbobservation must have a value for every declared measure ask      observation in a nonmeasuretype cube    obs qbdatasetqbstructure dsd     filter not exists  dsd qbcomponentqbcomponentproperty qbmeasuretype      verify every measure is present    dsd qbcomponentqbcomponentproperty measure     measure a qbmeasureproperty    filter not exists  obs measure      ic measure dimension consistent in a qbdataset which uses a measure dimension then each qbobservation must have a value for the measure corresponding to its given qbmeasuretype ask      observation in a measuretypecube    obs qbdatasetqbstructure dsd          qbmeasuretype measure     dsd qbcomponentqbcomponentproperty qbmeasuretype      must have value for its measuretype    filter not exists  obs measure      ic single measure on measure dimension observation in a qbdataset which uses a measure dimension then each qbobservation must only have a value for one measure by ic this will be the measure corresponding to its qbmeasuretype ask      observation with measuretype    obs qbdatasetqbstructure dsd          qbmeasuretype measure          omeasure       any measure on the observation    dsd qbcomponentqbcomponentproperty qbmeasuretype          qbcomponentqbcomponentproperty omeasure     omeasure a qbmeasureproperty      must be the same as the measuretype    filter omeasure  measure    ic all measures present in measures dimension cube in a qbdataset which uses a measure dimension then if there is a observation for some combination of nonmeasure dimensions then there must be other observations with the same nonmeasure dimension values for each of the declared measures ask          count number of other measures found at each point       select nummeasures countobs as count where                          find the dsds and check how many measures they have              select dsd countm as nummeasures where                   dsd qbcomponentqbcomponentproperty m                  m a qbmeasureproperty                group by dsd                             observation in measuretype cube          obs qbdatasetqbstructure dsd                qbdataset dataset                 qbmeasuretype m                other observation at same dimension value          obs qbdataset dataset                 qbmeasuretype m           filter not exists                dsd qbcomponentqbcomponentproperty dim               filter dim  qbmeasuretype              dim a qbdimensionproperty               obs dim v                obs dim v               filter v  v                           group by obs nummeasures        having count  nummeasures      ic consistent data set links if a qbdataset d has a qbslice s and s has an qbobservation o then the qbdataset corresponding to o must be d ask     dataset qbslice       slice     slice   qbobservation obs     filter not exists  obs qbdataset dataset      ic codes from code list if a dimension property has a qbcodelist then the value of the dimension property on every qbobservation must be in the code list the following integrity check queries must be applied to an rdf graph which contains the definition of the code list as well as the data cube to be checked in the case of a skosconceptscheme then each concept must be linked to the scheme using skosinscheme in the case of a skoscollection then the collection must link to each concept or to nested collections using skosmember if the collection uses skosmemberlist then the entailment of skosmember values defined by s in skosreference must be materialized before this check is applied ask     obs qbdatasetqbstructureqbcomponentqbcomponentproperty dim     dim a qbdimensionproperty         qbcodelist list     list a skosconceptscheme     obs dim v     filter not exists  v a skosconcept  skosinscheme list ask     obs qbdatasetqbstructureqbcomponentqbcomponentproperty dim     dim a qbdimensionproperty         qbcodelist list     list a skoscollection     obs dim v     filter not exists  v a skosconcept  list skosmember v     ic codes from hierarchy if a dimension property has a qbhierarchicalcodelist with a nonblank qbparentchildproperty then the value of that dimension property on every qbobservation must be reachable from a root of the hierarchy using zero or more hops along the qbparentchildproperty links this check cannot be made by a simple fixed sparql query instead a query template is supplied an instance of the template should be generated for each qbhierarchicalcodelist which has an iri value for its qbparentchildproperty that is for each binding of p in the following instantiation query select p where     hierarchy a qbhierarchicalcodelist                  qbparentchildproperty p     filter  isirip  the template is then instantiated by replacing the string p by the iri found by the instantiation query the template is ask     obs qbdatasetqbstructureqbcomponentqbcomponentproperty dim     dim a qbdimensionproperty         qbcodelist list     list a qbhierarchicalcodelist     obs dim v     filter not exists  list qbhierarchyrootp v     ic codes from hierarchy inverse if a dimension property has a qbhierarchicalcodelist with an inverse qbparentchildproperty then the value of that dimension property on every qbobservation must be reachable from a root of the hierarchy using zero or more hops along the inverse qbparentchildproperty links this check cannot be made by a simple fixed sparql query instead a query template is supplied an instance of the template should be generated for each qbhierarchicalcodelist which has a blanknode value for its qbparentchildproperty with an associated inverse property that is for each binding of p in the following instantiation query select p where     hierarchy a qbhierarchicalcodelist                 qbparentchildproperty pcp     filter isblankpcp     pcp  owlinverseof p     filter isirip  the template is then instantiated by replacing the string p by the iri found by the instantiation query the template is ask     obs qbdatasetqbstructureqbcomponentqbcomponentproperty dim     dim a qbdimensionproperty          qbcodelist list     list a qbhierarchicalcodelist     obs dim v     filter not exists  list qbhierarchyrootp v      vocabulary reference  datasets see section expressing data sets class qbdataset sub class of qbattachable equivalent to scovodataset represents a collection of observations possibly organized into various slices conforming to some common dimensional structure  observations see section expressing data sets class qbobservation sub class of qbattachable equivalent to scovoitem a single observation in the cube may have one or more associated measured values property qbdataset  domain qbobservation  range qbdataset  indicates the data set of which this observation is a part property qbobservation  domain qbobservationgroup  range qbobservation  indicates a observation contained within this slice of the data set  slices see section slices class qbobservationgroup a possibly arbitrary group of observations class qbslice sub class of qbattachable qbobservationgroup denotes a subset of a dataset defined by fixing a subset of the dimensional values component properties on the slice property qbslice  domain qbdataset  range qbslice sub property of qbobservationgroup  indicates a subset of a dataset defined by fixing a subset of the dimensional values property qbobservationgroup  domain  range qbobservationgroup  indicates a group of observations the domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single dataset  dimensions attributes measures see section dimensions attributes and measures class qbattachable abstract superclass for everything that can have attributes and dimensions class qbcomponentproperty sub class of rdfproperty abstract superclass of all properties representing dimensions attributes or measures class qbdimensionproperty sub class of qbcomponentproperty qbcodedproperty the class of component properties which represent the dimensions of the cube class qbattributeproperty sub class of qbcomponentproperty the class of component properties which represent attributes of observations in the cube eg unit of measurement class qbmeasureproperty sub class of qbcomponentproperty the class of component properties which represent the measured value of the phenomenon being observed class qbcodedproperty sub class of qbcomponentproperty superclass of all coded component properties  reusable general purpose component properties see section measure dimensions property qbmeasuretype  domain  range qbmeasureproperty  generic measure dimension the value of this dimension indicates which measure from the set of measures in the dsd is being given by the observation  data structure definitions see section componentspecifications and datastructuredefinitions class qbdatastructuredefinition sub class of qbcomponentset defines the structure of a dataset or slice property qbstructure  domain qbdataset  range qbdatastructuredefinition  indicates the structure to which this data set conforms property qbcomponent  domain qbdatastructuredefinition  range qbcomponentspecification  indicates a component specification which is included in the structure of the dataset  component specifications  for qualifying component use in a dsd see section componentspecifications and datastructuredefinitions class qbcomponentspecification sub class of qbcomponentset used to define properties of a component attribute dimension etc which are specific to its usage in a dsd class qbcomponentset abstract class of things which reference one or more componentproperties property qbcomponentproperty  domain qbcomponentset  range qbcomponentproperty  indicates a componentproperty ie attributedimension expected on a dataset or a dimension fixed in a slicekey property qborder  domain qbcomponentspecification  range xsdint  indicates a priority order for the components of sets with this structure used to guide presentations  lower order numbers come before higher numbers unnumbered components come last property qbcomponentrequired  domain qbcomponentspecification  range xsdboolean  indicates whether a component property is required true or optional false in the context of a dsd only applicable to components corresponding to an attribute defaults to false optional property qbcomponentattachment  domain qbcomponentspecification  range rdfsclass  indicates the level at which the component property should be attached this might be an qbdataset qbslice or qbobservation or a qbmeasureproperty property qbdimension  domain  range qbdimensionproperty  sub property of qbcomponentproperty  an alternative to qbcomponentproperty which makes explicit that the component is a dimension property qbmeasure  domain  range qbmeasureproperty  sub property of qbcomponentproperty  an alternative to qbcomponentproperty which makes explicit that the component is a measure property qbattribute  domain  range qbattributeproperty  sub property of qbcomponentproperty  an alternative to qbcomponentproperty which makes explicit that the component is a attribute property qbmeasuredimension  domain  range qbdimensionproperty  sub property of qbcomponentproperty  an alternative to qbcomponentproperty which makes explicit that the component is a measure dimension  slice definitions see section slices class qbslicekey sub class of qbcomponentset denotes a subset of the component properties of a dataset which are fixed in the corresponding slices property qbslicestructure  domain qbslice  range qbslicekey  indicates the slice key corresponding to this slice property qbslicekey  domain qbdatastructuredefinition  range qbslicekey  indicates a slice key which is used for slices in this dataset  concepts see section concept schemes and code lists property qbconcept  domain qbcomponentproperty  range skosconcept  gives the concept which is being measured or indicated by a componentproperty property qbcodelist  domain qbcodedproperty  range owlunionofskosconceptscheme skoscollection qbhierarchicalcodelist  gives the code list associated with a codedproperty  nonskos hierarchies see section nonskos hierarchies class qbhierarchicalcodelist represents a generalized hierarchy of concepts which can be used for coding the hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to their child concept  the same concepts may be members of multiple hierarchies provided that different qbparentchildproperty values are used for each hierarchy property qbhierarchyroot  domain qbhierarchicalcodelist  specifies a root of the hierarchy a hierarchy may have multiple roots but must have at least one property qbparentchildproperty  domain qbhierarchicalcodelist  range rdfproperty  specifies a property which relates a parent concept in the hierarchy to a child concept note that a child may have more than one parent a acknowledgements this work is based on a collaboration that was initiated in a workshop on publishing statistical datasets in sdmx and the semantic web hosted by ons in sunningdale united kingdom in february  and continued at the odaf  workshop in tilburg the authors would like to thank all the participants at those workshops for their input into this work but especially arofan gregory for his patient explanations of sdmx and insight in the need and requirements for a core data cube representation the editors would like to thank john sheridan for his comments suggestions and support for the original work many individuals provided valuable comments on this specification as it made its way through the wc process we would like to especially acknowledge the contributions of benedikt kaempgen sarven capadisli and curran kelleher b change history changes since the wc proposed recommendation  december  none corrected typo in reference to egwales in example  fixed broken like to scovo reference haus added namespace and links to vocabulary file to the abstract for ease of reference added missing closure rule to infer rdftype of qbdataset from its use in a qbobservation corrected misstatement of domain of qbslicekey in the reference section was correct in the rest of the specification corrected typo in statement of ic minor typographical corrections updated references including moving turtle to a nonnormative reference removed cr specific text on implementation feedback and at risk features changes since wc last call working draft  march  section  modified diagram to clarify that qbslice is a sub class of qbobservationgroup section  moved description of data set here for greater clarity was in section  section  further clarified the status of cog rdf vocabularies example  retitled for clarity section  corrected with multiple observations to with multiple measures section  added mention of qbattachable previously only mentioned in the vocabulary reference section  rewritten description of handling of multiple measures for greater clarity section  removed reference to sdmxinrdf vocabulary which is not part of this specification section  clarified that the special nature of qbmeasuretype is a divergence from sdmx section  change terminology from internal and external metadata to structural and reference metadata for compatibility with sdmx terminology section  clarified that sub properties of skosnarrower may be used section  removed third bullet on the motivation for qbhierarchicalcodelist exhaustivity and mutual exclusion added reference to sdmx user guide as additional background context added complete example data cube as an appendix providing a link to it from earlier on in the document section  clarified that abbreviated form is an option and there is no requirement to use it in place of normalized form section  corrected domain of qbobservation from qbslice to qbobservationgroup was given correctly in the ontology and text body but was misstated in the reference section references updated org reference various typographical corrections changes since wc working draft  april  added section on criteria for wellformed cubes issue added section on normalization algorithm for handling abbreviated cubes added conformance section clarified that qbcomponentrequired is only applicable to attributes and that it defaults to optional moved vocabulary reference into the normative body of the specification adding hyperlinks for all qb terms added section on nonskos hierarchies issue added note that aggregation operations and intercube relations are out of scope for this version issue added qbobservationgroup as a generalization of qbslice issue removed qbsubslice as being problematic in how they interact with attachment levels issue generalized range of qbcodelist to allow skoscollection issue moved namespace definitions to a normative section within the body of the specification moved jeni tennison from being listed as an author to being a contributor c complete example data cube this is a complete data cube encoding of the running example introduced in section  it uses the abbreviated format so that it can be concisely presented it passes all the integrity checks when the declaration of sdmxdimensionsex is included from httppurlorglinkeddatasdmxdimension and so is a wellformed abbreviated data cube @prefix rdf      httpwwwworgrdfsyntaxns @prefix rdfs     httpwwwworgrdfschema @prefix owl      httpwwwworgowl @prefix xsd      httpwwwworgxmlschema @prefix skos     httpwwwworgskoscore @prefix void     httprdfsorgnsvoid @prefix dct      httppurlorgdcterms @prefix foaf     httpxmlnscomfoaf @prefix org      httpwwwworgnsorg @prefix admingeo httpdataordnancesurveycoukontologyadmingeo @prefix interval httpreferencedatagovukdefintervals @prefix qb       httppurlorglinkeddatacube @prefix sdmxconcept    httppurlorglinkeddatasdmxconcept @prefix sdmxdimension  httppurlorglinkeddatasdmxdimension @prefix sdmxattribute  httppurlorglinkeddatasdmxattribute @prefix sdmxmeasure    httppurlorglinkeddatasdmxmeasure @prefix sdmxmetadata   httppurlorglinkeddatasdmxmetadata @prefix sdmxcode       httppurlorglinkeddatasdmxcode @prefix sdmxsubject    httppurlorglinkeddatasdmxsubject @prefix exgeo   httpexampleorggeo @prefix eg       httpexampleorgns   data set egdatasetle a qbdataset    dcttitle       life expectancy@en    rdfslabel      life expectancy@en    rdfscomment    life expectancy within welsh unitary authorities  extracted from stats wales@en    dctdescription life expectancy within welsh unitary authorities  extracted from stats wales@en    dctpublisher   egorganization     dctissued      xsddate    dctsubject        sdmxsubject        regional and small area statistics        sdmxsubject        health        exgeowales            wales    qbstructure egdsdle       sdmxattributeunitmeasure httpdbpediaorgresourceyear     qbslice egslice egslice egslice egslice egslice egslice     egorganization a orgorganization foafagent    rdfslabel example org@en               data structure definition egdsdle a qbdatastructuredefinition    qbcomponent      the dimensions         qbdimension egrefarea         qborder           qbdimension egrefperiod       qborder  qbcomponentattachment qbslice          qbdimension sdmxdimensionsex qborder  qbcomponentattachment qbslice              the measures    qbcomponent  qbmeasure eglifeexpectancy         the attributes    qbcomponent  qbattribute sdmxattributeunitmeasure                    qbcomponentrequired truexsdboolean                   qbcomponentattachment qbdataset           slices    qbslicekey egslicebyregion         egslicebyregion a qbslicekey    rdfslabel slice by region@en    rdfscomment slice by grouping regions together fixing sex and time values@en    qbcomponentproperty egrefperiod sdmxdimensionsex                          dimensions and measures  egrefperiod  a rdfproperty qbdimensionproperty    rdfslabel reference period@en    rdfssubpropertyof sdmxdimensionrefperiod    rdfsrange intervalinterval    qbconcept sdmxconceptrefperiod     egrefarea  a rdfproperty qbdimensionproperty    rdfslabel reference area@en    rdfssubpropertyof sdmxdimensionrefarea    rdfsrange admingeounitaryauthority    qbconcept sdmxconceptrefarea     eglifeexpectancy  a rdfproperty qbmeasureproperty    rdfslabel life expectancy@en    rdfssubpropertyof sdmxmeasureobsvalue    rdfsrange xsddecimal           observations  column     egslice a qbslice    qbslicestructure  egslicebyregion     egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     qbobservation ego ego ego ego     ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       eglifeexpectancy                   ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomerthyr_tdfil_ph     eglifeexpectancy                column     egslice a qbslice    qbslicestructure  egslicebyregion     egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexf     qbobservation ego ego ego ego     ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       eglifeexpectancy                   ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomerthyr_tdfil_ph     eglifeexpectancy                column     egslice a qbslice    qbslicestructure  egslicebyregion     egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     qbobservation ego ego ego ego     ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       eglifeexpectancy                   ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomerthyr_tdfil_ph     eglifeexpectancy                column     egslice a qbslice    qbslicestructure  egslicebyregion     egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexf     qbobservation ego ego ego ego     ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       eglifeexpectancy                   ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomerthyr_tdfil_ph     eglifeexpectancy                column     egslice a qbslice    qbslicestructure  egslicebyregion     egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexm     qbobservation ego ego ego ego     ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       eglifeexpectancy                   ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomerthyr_tdfil_ph     eglifeexpectancy                column     egslice a qbslice    qbslicestructure  egslicebyregion     egrefperiod               httpreferencedatagovukidgregorianintervaltpy     sdmxdimensionsex         sdmxcodesexf     qbobservation ego ego ego ego     ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeonewport_pr                       eglifeexpectancy                   ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeocardiff_pt                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomonmouthshire_pp                       eglifeexpectancy               ego a qbobservation    qbdataset  egdatasetle     egrefarea                 exgeomerthyr_tdfil_ph     eglifeexpectancy                d references d normative references dc dublin core metadata initiative dublin core metadata element set version  july  dublin core recommendation url httpdublincoreorgdocumentsdcmiterms owlprimer pascal hitzler markus krtzsch bijan parsia peter patelschneider sebastian rudolph owl  web ontology language primer second edition  december  wc recommendation url httpwwwworgtrowlprimer rdfconcepts graham klyne jeremy carroll resource description framework rdf concepts and abstract syntax  february  wc recommendation url httpwwwworgtrrdfconcepts rdfmt patrick hayes rdf semantics  february  wc recommendation url httpwwwworgtrrdfmt rdfprimer frank manola eric miller rdf primer  february  wc recommendation url httpwwwworgtrrdfprimer rdfschema dan brickley ramanathan guha rdf schema   january  wc proposed edited recommendation url httpwwwworgtrrdfschema rfc s bradner key words for use in rfcs to indicate requirement levels march  internet rfc  url httpwwwietforgrfcrfctxt skosreference alistair miles sean bechhofer skos simple knowledge organization system reference  august  wc recommendation url httpwwwworgtrskosreference sparqlquery steven harris andy seaborne sparql  query language  march  wc recommendation url httpwwwworgtrsparqlquery sparqlupdate paul gearon alexandre passant axel polleres sparql  update  march  wc recommendation url httpwwwworgtrsparqlupdate d informative references cog sdmx contnent oriented guidelines httpsdmxorgpage_id dcat fadi maali john erickson data catalog vocabulary dcat wc candidate recommendation  november  url httpwwwworgtrvocabdcat foaf dan brickley libby miller foaf vocabulary specification   august  url httpxmlnscomfoafspec haus michael hausenblas wolfgang halb yves raimond lee feigenbaum danny ayers scovo using statistics on the web of data  url httpmhausenblasinfopubseswcinusescovopdf lod linked data httplinkeddataorg olap online analytical processing data cubes httpenwikipediaorgwikiolap_cube org dave reynolds the organzation ontology  june  wc candidate recommendation url httpwwwworgtrvocaborg osgeo ordnance survey administrative geography ontology httpdataordnancesurveycoukontologyadmingeo scovo the statistical core vocabulary httpswjoanneumatscovoschemahtml sdmxguide sdmx user guide version  january  statistical data and metadata exchange initiative url httpsdmxorgwpcontentuploadssdmxuserguideversionpdf sdmx sdmx information model uml conceptual design version  november  statistical data and metadata exchange initiative url httpsdmxorgdocs_sdmx__section__informationmodelpdf skosprimer antoine isaac ed summers skos simple knowledge organization system primer  august  wc note url httpwwwworgtrskosprimer turtle eric prudhommeaux gavin carothers rdf  turtle  january  wc proposed recommendation url httpwwwworgtrturtle void keith alexander richard cyganiak michael hausenblas jun zhao describing linked datasets with the void vocabulary  march  wc note url httpwwwworgtrvoid